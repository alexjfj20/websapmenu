{"version":3,"file":"js/970.72132177.js","mappings":"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","sources":["webpack://websap/./src/components/admin/AdminReservas.vue","webpack://websap/./src/components/admin/AdminReservas.vue?8d26"],"sourcesContent":["<template>\n  <div class=\"admin-reservas\">\n    <div class=\"reservas-header\">\n      <h2 class=\"admin-section-title\">Gesti√≥n de Reservas</h2>\n      <div class=\"action-buttons\">\n        <button \n          class=\"refresh-btn\" \n          @click=\"refreshReservations\" \n          :disabled=\"isLoading\"\n          title=\"Actualizar reservas\"\n        >\n          <span v-if=\"isLoading\">Actualizando...</span>\n          <span v-else>üîÑ Actualizar</span>\n        </button>\n        \n        <button \n          class=\"delete-old-btn\" \n          @click=\"showDeleteModal = true\" \n          :disabled=\"isLoading || !hasOldReservations\"\n          title=\"Eliminar reservas antiguas (m√°s de 30 d√≠as)\"\n        >\n          <span>üóëÔ∏è Eliminar Antiguas</span>\n        </button>\n      </div>\n    </div>\n    \n    <div class=\"reservas-container\">\n      <div v-if=\"isLoading\" class=\"loading-spinner\">\n        <div class=\"spinner\"></div>\n        <p>Cargando reservas...</p>\n      </div>\n      \n      <div v-else-if=\"reservations.length === 0\" class=\"no-reservations\">\n        <p>A√∫n no hay reservas registradas</p>\n      </div>\n      \n      <div v-else class=\"reservations-list\">\n        <div class=\"table-responsive\">\n          <table class=\"reservation-table\">\n            <thead>\n              <tr>\n                <th>Fecha</th>\n                <th>Hora</th>\n                <th>Cliente</th>\n                <th>Tel√©fono</th>\n                <th>Personas</th>\n                <th>Estado</th>\n                <th>Acciones</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(reservation, index) in reservations\" :key=\"index\" :class=\"{ 'confirmed': reservation.status === 'confirmed', 'pending': reservation.status === 'pending', 'cancelled': reservation.status === 'cancelled' }\">\n                <td>{{ formatDate(reservation.date) }}</td>\n                <td>{{ reservation.time }}</td>\n                <td>{{ reservation.fullName }}</td>\n                <td>\n                  <a :href=\"`tel:${reservation.mobilePhone}`\">{{ reservation.mobilePhone }}</a>\n                </td>\n                <td>{{ reservation.peopleCount }}</td>\n                <td>\n                  <span class=\"status-badge\" :class=\"reservation.status\">\n                    {{ getStatusLabel(reservation.status) }}\n                  </span>\n                </td>\n                <td class=\"actions-cell\">\n                  <button @click=\"viewReservation(reservation)\" class=\"action-btn view-btn\" title=\"Ver detalles\">\n                    üëÅÔ∏è\n                  </button>\n                  <button \n                    v-if=\"!readOnly\" \n                    @click=\"confirmReservation(reservation)\" \n                    class=\"action-btn confirm-btn\" \n                    title=\"Confirmar reserva\" \n                    :disabled=\"reservation.status === 'confirmed'\"\n                  >\n                    ‚úÖ\n                  </button>\n                  <button \n                    v-if=\"!readOnly\" \n                    @click=\"cancelReservation(reservation)\" \n                    class=\"action-btn cancel-btn\" \n                    title=\"Cancelar reserva\" \n                    :disabled=\"reservation.status === 'cancelled'\"\n                  >\n                    ‚ùå\n                  </button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Modal para ver detalles de la reserva -->\n    <div v-if=\"selectedReservation\" class=\"reservation-modal\">\n      <div class=\"modal-content\">\n        <span class=\"close-modal\" @click=\"selectedReservation = null\">&times;</span>\n        <h3>Detalles de la Reserva</h3>\n        \n        <div class=\"reservation-details\">\n          <p><strong>Cliente:</strong> {{ selectedReservation.fullName }}</p>\n          <p><strong>Tel√©fono M√≥vil:</strong> {{ selectedReservation.mobilePhone }}</p>\n          <p v-if=\"selectedReservation.landlinePhone\"><strong>Tel√©fono Fijo:</strong> {{ selectedReservation.landlinePhone }}</p>\n          <p v-if=\"selectedReservation.email\"><strong>Email:</strong> {{ selectedReservation.email }}</p>\n          <p v-if=\"selectedReservation.address\"><strong>Direcci√≥n:</strong> {{ selectedReservation.address }}</p>\n          <p><strong>Fecha:</strong> {{ formatDate(selectedReservation.date) }}</p>\n          <p><strong>Hora:</strong> {{ selectedReservation.time }}</p>\n          <p><strong>N√∫mero de Personas:</strong> {{ selectedReservation.peopleCount }}</p>\n          <p v-if=\"selectedReservation.notes\"><strong>Notas Adicionales:</strong> {{ selectedReservation.notes }}</p>\n          <p><strong>Estado:</strong> <span class=\"status-badge\" :class=\"selectedReservation.status\">{{ getStatusLabel(selectedReservation.status) }}</span></p>\n        </div>\n        \n        <div class=\"modal-actions\">\n          <button @click=\"confirmReservation(selectedReservation)\" class=\"action-btn confirm-btn\" :disabled=\"selectedReservation.status === 'confirmed'\">\n            Confirmar Reserva\n          </button>\n          <button @click=\"cancelReservation(selectedReservation)\" class=\"action-btn cancel-btn\" :disabled=\"selectedReservation.status === 'cancelled'\">\n            Cancelar Reserva\n          </button>\n          <button @click=\"contactCustomer(selectedReservation)\" class=\"action-btn contact-btn\">\n            Contactar Cliente\n          </button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Modal de confirmaci√≥n para eliminar reservas antiguas -->\n    <div v-if=\"showDeleteModal\" class=\"delete-modal-overlay\">\n      <div class=\"delete-modal\">\n        <div class=\"delete-modal-header\">\n          <h3>Confirmar eliminaci√≥n</h3>\n          <button class=\"close-modal\" @click=\"showDeleteModal = false\">&times;</button>\n        </div>\n        <div class=\"delete-modal-body\">\n          <div class=\"delete-icon\">\n            <span>üóëÔ∏è</span>\n          </div>\n          <p>¬øEst√°s seguro de eliminar las reservas antiguas?</p>\n          <p class=\"delete-modal-info\">Esta acci√≥n eliminar√° todas las reservas con m√°s de 30 d√≠as de antig√ºedad y no se puede deshacer.</p>\n        </div>\n        <div class=\"delete-modal-footer\">\n          <button class=\"cancel-btn\" @click=\"showDeleteModal = false\">Cancelar</button>\n          <button class=\"confirm-btn\" @click=\"confirmDeleteOldReservations\" :disabled=\"isLoading\">\n            <span v-if=\"isLoading\">Eliminando...</span>\n            <span v-else>Eliminar</span>\n          </button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- A√±adir notificaci√≥n toast -->\n    <div v-if=\"toast.visible\" class=\"toast-notification\" :class=\"toast.type\">\n      {{ toast.message }}\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, reactive, onUnmounted, computed } from 'vue';\nimport { \n  getReservations, \n  updateReservationStatus, \n  deleteReservation, \n  isReservationOlderThan \n} from '../../services/reservaService';\nimport eventBus from '../../utils/eventBus';\nimport apiService from '../../services/apiService';\n\n// Props\nconst props = defineProps({\n  readOnly: {\n    type: Boolean,\n    default: false\n  }\n});\n\nconst reservations = ref([]);\nconst isLoading = ref(true);\nconst selectedReservation = ref(null);\nconst showDeleteModal = ref(false);\n\n// Variables para el sistema de reintentos de notificaciones\nconst notificationRetries = ref(0);\nconst maxRetries = 5;\nconst notificationConnectStatus = ref('idle'); // 'idle', 'connecting', 'connected', 'error'\nconst retryTimeout = ref(null);\n\nconst toast = reactive({\n  visible: false,\n  message: '',\n  type: 'info'\n});\n\nconst showToast = (message, type = 'info') => {\n  toast.message = message;\n  toast.type = type;\n  toast.visible = true;\n  \n  setTimeout(() => {\n    toast.visible = false;\n  }, 5000);\n};\n\n// Funci√≥n para actualizar la lista de reservas (llamada cuando hay una nueva)\n// IMPORTANTE: Definir refreshReservations antes de usarla en otras funciones\nconst refreshReservations = async () => {\n  console.log('üîÑ Actualizando lista de reservas...');\n  \n  try {\n    // Guardamos el estado de carga\n    const wasLoading = isLoading.value;\n    isLoading.value = true;\n    \n    // Cargamos nuevamente las reservas desde el servicio\n    const result = await getReservations();\n    \n    if (result.success) {\n      reservations.value = result.reservations;\n      console.log('‚úÖ Lista de reservas actualizada correctamente:', reservations.value.length);\n    } else {\n      throw new Error(result.error || 'Error al actualizar las reservas');\n    }\n  } catch (error) {\n    console.error('‚ùå Error al actualizar reservas:', error);\n    showToast('Error al actualizar las reservas', 'error');\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Funci√≥n para reproducir sonido de notificaci√≥n\nconst playNotificationSound = () => {\n  try {\n    const audio = new Audio('/notification.mp3');\n    audio.play().catch(e => console.log('No se pudo reproducir sonido:', e));\n  } catch (error) {\n    console.error('Error al reproducir sonido:', error);\n  }\n};\n\n// Funci√≥n para cargar las reservas\nconst loadReservations = async () => {\n  isLoading.value = true;\n  try {\n    console.log('üîÑ Cargando reservas...');\n    // Utilizamos el servicio de reservas para obtener los datos\n    const result = await getReservations();\n    \n    if (result.success) {\n      reservations.value = result.reservations;\n      console.log('‚úÖ Reservas cargadas correctamente:', reservations.value.length);\n      \n      // Verificar notificaciones no le√≠das despu√©s de cargar reservas\n      checkNotifications();\n    } else {\n      throw new Error(result.error || 'Error al cargar las reservas');\n    }\n  } catch (error) {\n    console.error('‚ùå Error al cargar reservas:', error);\n    showToast('Error al cargar las reservas', 'error');\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Funci√≥n para verificar notificaciones de reservas de WhatsApp con sistema de reintentos\nconst checkNotifications = async (forceCheck = false) => {\n  // Si ya estamos en un estado de error y hemos alcanzado el m√°ximo de reintentos, no intentar nuevamente\n  // a menos que se fuerce una verificaci√≥n\n  if (notificationConnectStatus.value === 'error' && \n      notificationRetries.value >= maxRetries && \n      !forceCheck) {\n    return;\n  }\n  \n  // Actualizar estado a 'connecting'\n  notificationConnectStatus.value = 'connecting';\n  \n  try {\n    // Intentar obtener notificaciones del servidor\n    const response = await apiService.get('/whatsapp/notificaciones')\n      .catch(err => {\n        // Si hay un error de conexi√≥n, incrementar conteo de reintentos\n        notificationRetries.value++;\n        \n        // Calcular tiempo de espera exponencial (2^intentos * 1000 ms, max 30 segundos)\n        const retryMs = Math.min(Math.pow(2, notificationRetries.value) * 1000, 30000);\n        \n        console.log(`No se pudieron verificar notificaciones (intento ${notificationRetries.value}/${maxRetries}), reintentando en ${retryMs/1000}s`);\n        \n        // Si no hemos alcanzado el m√°ximo de reintentos, programar un nuevo intento\n        if (notificationRetries.value < maxRetries) {\n          // Limpiar timeout anterior si existe\n          if (retryTimeout.value) clearTimeout(retryTimeout.value);\n          \n          // Programar nuevo intento\n          retryTimeout.value = setTimeout(() => {\n            checkNotifications(true);\n          }, retryMs);\n        } else {\n          // Establecer estado de error despu√©s de agotar los reintentos\n          notificationConnectStatus.value = 'error';\n          console.log('M√°ximo de reintentos alcanzado, desistiendo de verificar notificaciones');\n        }\n        \n        return null;\n      });\n    \n    // Solo procesar la respuesta si se obtuvo correctamente\n    if (response && response.success) {\n      // Resetear conteo de reintentos si la conexi√≥n fue exitosa\n      notificationRetries.value = 0;\n      notificationConnectStatus.value = 'connected';\n      \n      // Si hay nuevas notificaciones, mostrar toast y actualizar lista\n      if (response.hayNotificaciones) {\n        showToast(`${response.cantidad} nueva(s) reserva(s) de WhatsApp`, 'success');\n        // Reproducir sonido de notificaci√≥n si est√° disponible\n        playNotificationSound();\n        // Refrescar lista de reservas\n        refreshReservations();\n      }\n    }\n  } catch (error) {\n    // Capturar cualquier otro error pero no mostrar errores en consola en producci√≥n\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error al verificar notificaciones:', error);\n    }\n    // No propagar el error para evitar que la aplicaci√≥n se interrumpa\n  }\n};\n\n// Funci√≥n para manejar nuevas reservas recibidas a trav√©s del eventBus\nconst handleNuevaReserva = (reservation) => {\n  console.log('üîî Nueva reserva recibida:', reservation);\n  \n  // Verificamos si la reserva ya existe en la lista (para evitar duplicados)\n  const existingIndex = reservations.value.findIndex(r => r.id === reservation.id);\n  \n  if (existingIndex >= 0) {\n    // Si la reserva ya existe, actualizamos sus datos\n    reservations.value[existingIndex] = { ...reservation };\n    console.log('üîÑ Reserva actualizada:', reservation.id);\n  } else {\n    // Si es una nueva reserva, la a√±adimos al principio de la lista\n    reservations.value.unshift(reservation);\n    console.log('‚ûï Nueva reserva a√±adida:', reservation.id);\n    \n    // Mostrar notificaci√≥n de nueva reserva\n    showToast(`Nueva reserva recibida de ${reservation.fullName}`, 'success');\n    \n    // Reproducir sonido de notificaci√≥n\n    playNotificationSound();\n  }\n};\n\n// Funci√≥n para manejar actualizaciones de reservas\nconst handleReservaActualizada = (data) => {\n  console.log('üîÑ Actualizaci√≥n de reserva recibida:', data);\n  \n  // Buscamos la reserva en la lista y actualizamos su estado\n  const index = reservations.value.findIndex(res => res.id === data.id);\n  if (index !== -1) {\n    reservations.value[index].status = data.status;\n    console.log('‚úÖ Estado de reserva actualizado a:', data.status);\n  }\n};\n\n// Verificar notificaciones peri√≥dicamente (cada 30 segundos)\nlet notificationInterval = null;\n\nonMounted(() => {\n  // Cargar las reservas iniciales\n  loadReservations();\n  \n  // Escuchar eventos de nuevas reservas\n  eventBus.on('nueva-reserva', handleNuevaReserva);\n  \n  // Escuchar eventos de actualizaci√≥n de reservas\n  eventBus.on('reserva-actualizada', handleReservaActualizada);\n  \n  // Escuchar eventos para refrescar reservas\n  eventBus.on('refresh-reservations', refreshReservations);\n  \n  // Iniciar verificaci√≥n peri√≥dica de notificaciones\n  notificationInterval = setInterval(checkNotifications, 30000); // cada 30 segundos\n  \n  console.log('‚úÖ AdminReservas montado y escuchando eventos');\n});\n\n// Limpiar los listeners y el intervalo al desmontar el componente\nonUnmounted(() => {\n  eventBus.off('nueva-reserva', handleNuevaReserva);\n  eventBus.off('reserva-actualizada', handleReservaActualizada);\n  eventBus.off('refresh-reservations', refreshReservations);\n  \n  // Limpiar intervalo de verificaci√≥n de notificaciones\n  if (notificationInterval) {\n    clearInterval(notificationInterval);\n  }\n  \n  // Limpiar timeout de reintento de notificaciones\n  if (retryTimeout.value) {\n    clearTimeout(retryTimeout.value);\n  }\n  \n  console.log('üõë AdminReservas desmontado');\n});\n\n// Exponer funciones para uso externo\ndefineExpose({ refreshReservations });\n\n// Funci√≥n para formatear fecha (maneja m√∫ltiples formatos y los convierte a DD/MM/YYYY)\nconst formatDate = (dateString) => {\n  if (!dateString) return '';\n  \n  try {\n    // Verificar si es el formato problem√°tico con T y Z\n    if (dateString.includes('T') && dateString.includes('/')) {\n      // Formato como \"29T05:00:00.000Z/05/2025\"\n      const parts = dateString.split('/');\n      if (parts.length === 3) {\n        // Extraer el d√≠a del primer segmento (antes de la T)\n        const day = parts[0].split('T')[0];\n        // Construir la fecha en formato DD/MM/YYYY\n        return `${day}/${parts[1]}/${parts[2]}`;\n      }\n    }\n    \n    // Formato ISO (YYYY-MM-DD)\n    if (dateString.includes('-')) {\n      const parts = dateString.split('-');\n      if (parts.length === 3) {\n        return `${parts[2]}/${parts[1]}/${parts[0]}`;\n      }\n    }\n    \n    // Si ya est√° en formato DD/MM/YYYY, devolverlo tal cual\n    if (dateString.includes('/') && !dateString.includes('T')) {\n      return dateString;\n    }\n    \n    // Intentar parsear como fecha y formatear\n    const date = new Date(dateString);\n    if (!isNaN(date.getTime())) {\n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    }\n    \n    // Si no se pudo formatear, devolver el string original\n    return dateString;\n  } catch (error) {\n    console.error('Error al formatear fecha:', error);\n    return dateString;\n  }\n};\n\n// Obtener etiqueta del estado\nconst getStatusLabel = (status) => {\n  switch (status) {\n    case 'confirmed':\n      return 'Confirmada';\n    case 'pending':\n      return 'Pendiente';\n    case 'cancelled':\n      return 'Cancelada';\n    default:\n      return status;\n  }\n};\n\n// Ver detalles de la reserva\nconst viewReservation = (reservation) => {\n  selectedReservation.value = reservation;\n};\n\n// Confirmar reserva\nconst confirmReservation = async (reservation) => {\n  try {\n    // Utilizamos el servicio para actualizar el estado\n    const result = await updateReservationStatus(reservation.id, 'confirmed');\n    \n    if (result.success) {\n      // Actualizamos el estado localmente\n      reservation.status = 'confirmed';\n      showToast('Reserva confirmada correctamente', 'success');\n    } else {\n      throw new Error(result.error || 'Error al confirmar la reserva');\n    }\n  } catch (error) {\n    console.error('Error al confirmar reserva:', error);\n    showToast('Error al confirmar la reserva', 'error');\n  }\n};\n\n// Cancelar reserva\nconst cancelReservation = async (reservation) => {\n  try {\n    // Utilizamos el servicio para actualizar el estado\n    const result = await updateReservationStatus(reservation.id, 'cancelled');\n    \n    if (result.success) {\n      // Actualizamos el estado localmente\n      reservation.status = 'cancelled';\n      showToast('Reserva cancelada correctamente', 'success');\n    } else {\n      throw new Error(result.error || 'Error al cancelar la reserva');\n    }\n  } catch (error) {\n    console.error('Error al cancelar reserva:', error);\n    showToast('Error al cancelar la reserva', 'error');\n  }\n};\n\n// Contactar al cliente\nconst contactCustomer = (reservation) => {\n  if (reservation.mobilePhone) {\n    window.location.href = `tel:${reservation.mobilePhone}`;\n  } else {\n    showToast('No hay n√∫mero de tel√©fono disponible', 'warning');\n  }\n};\n\n// Confirmar eliminaci√≥n de reservas antiguas\nconst confirmDeleteOldReservations = async () => {\n  isLoading.value = true;\n  try {\n    const oldReservations = reservations.value.filter(reservation => isReservationOlderThan(reservation, 30));\n    \n    if (oldReservations.length === 0) {\n      showToast('No hay reservas antiguas para eliminar', 'info');\n      isLoading.value = false;\n      return;\n    }\n    \n    let successCount = 0;\n    let errorCount = 0;\n    \n    // Eliminar cada reserva antigua una por una\n    for (const reservation of oldReservations) {\n      try {\n        const result = await deleteReservation(reservation.id);\n        if (result.success) {\n          successCount++;\n        } else {\n          errorCount++;\n          console.error('Error al eliminar reserva:', reservation.id, result.error);\n        }\n      } catch (error) {\n        errorCount++;\n        console.error('Error al eliminar reserva:', reservation.id, error);\n      }\n    }\n    \n    // Actualizar la lista de reservas\n    await refreshReservations();\n    \n    if (successCount > 0) {\n      showToast(`${successCount} reservas antiguas eliminadas correctamente`, 'success');\n    }\n    \n    if (errorCount > 0) {\n      showToast(`No se pudieron eliminar ${errorCount} reservas`, 'warning');\n    }\n  } catch (error) {\n    console.error('Error al eliminar reservas antiguas:', error);\n    showToast('Error al eliminar las reservas antiguas', 'error');\n  } finally {\n    isLoading.value = false;\n    showDeleteModal.value = false;\n  }\n};\n\n// Verificar si hay reservas antiguas\nconst hasOldReservations = computed(() => {\n  return reservations.value.some(reservation => isReservationOlderThan(reservation, 30));\n});\n</script>\n\n<style scoped>\n.admin-reservas {\n  padding: 20px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n.admin-section-title {\n  color: #333;\n  font-size: 1.5rem;\n  margin-bottom: 20px;\n  padding-bottom: 10px;\n  border-bottom: 2px solid #4CAF50;\n}\n\n.loading-spinner {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 40px;\n}\n\n.spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #4CAF50;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin-bottom: 15px;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.no-reservations {\n  text-align: center;\n  padding: 40px;\n  color: #666;\n  font-style: italic;\n}\n\n.table-responsive {\n  overflow-x: auto;\n}\n\n.reservation-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\n.reservation-table th, \n.reservation-table td {\n  padding: 12px 15px;\n  text-align: left;\n  border-bottom: 1px solid #ddd;\n}\n\n.reservation-table th {\n  background-color: #f5f5f5;\n  font-weight: bold;\n  color: #333;\n}\n\n.reservation-table tr:hover {\n  background-color: #f9f9f9;\n}\n\n.reservation-table tr.confirmed {\n  background-color: rgba(76, 175, 80, 0.1);\n}\n\n.reservation-table tr.pending {\n  background-color: rgba(255, 193, 7, 0.1);\n}\n\n.reservation-table tr.cancelled {\n  background-color: rgba(244, 67, 54, 0.1);\n}\n\n.status-badge {\n  display: inline-block;\n  padding: 4px 8px;\n  border-radius: 12px;\n  font-size: 0.8rem;\n  font-weight: bold;\n}\n\n.status-badge.confirmed {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.status-badge.pending {\n  background-color: #FFC107;\n  color: #333;\n}\n\n.status-badge.cancelled {\n  background-color: #F44336;\n  color: white;\n}\n\n.actions-cell {\n  white-space: nowrap;\n}\n\n.action-btn {\n  background: none;\n  border: none;\n  font-size: 1.2rem;\n  cursor: pointer;\n  margin: 0 3px;\n  padding: 5px;\n  border-radius: 4px;\n  transition: background-color 0.3s;\n}\n\n.action-btn:hover {\n  background-color: #f0f0f0;\n}\n\n.action-btn:disabled {\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n\n.view-btn:hover {\n  background-color: #e3f2fd;\n}\n\n.confirm-btn:hover {\n  background-color: #e8f5e9;\n}\n\n.cancel-btn:hover {\n  background-color: #ffebee;\n}\n\n/* Estilos para el modal */\n.reservation-modal {\n  position: fixed;\n  z-index: 1000;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0,0,0,0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.modal-content {\n  background-color: #fff;\n  border-radius: 8px;\n  padding: 20px;\n  width: 90%;\n  max-width: 500px;\n  max-height: 80vh;\n  overflow-y: auto;\n  position: relative;\n  box-shadow: 0 4px 20px rgba(0,0,0,0.2);\n}\n\n.close-modal {\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  font-size: 24px;\n  cursor: pointer;\n  color: #666;\n}\n\n.close-modal:hover {\n  color: #000;\n}\n\n.modal-content h3 {\n  margin-top: 0;\n  margin-bottom: 20px;\n  padding-bottom: 10px;\n  border-bottom: 1px solid #eee;\n  color: #333;\n}\n\n.reservation-details p {\n  margin: 8px 0;\n  line-height: 1.5;\n}\n\n.modal-actions {\n  margin-top: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.modal-actions .action-btn {\n  flex: 1;\n  padding: 10px;\n  font-size: 0.9rem;\n  border-radius: 4px;\n  text-align: center;\n  min-width: 120px;\n}\n\n.modal-actions .confirm-btn {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.modal-actions .cancel-btn {\n  background-color: #F44336;\n  color: white;\n}\n\n.modal-actions .contact-btn {\n  background-color: #2196F3;\n  color: white;\n}\n\n.modal-actions .action-btn:hover {\n  opacity: 0.9;\n}\n\n.modal-actions .action-btn:disabled {\n  background-color: #ccc;\n  color: #666;\n}\n\n@media (max-width: 768px) {\n  .reservation-table th, \n  .reservation-table td {\n    padding: 8px 10px;\n    font-size: 0.9rem;\n  }\n  \n  .actions-cell {\n    display: flex;\n  }\n  \n  .modal-actions {\n    flex-direction: column;\n  }\n  \n  .modal-content {\n    width: 95%;\n    padding: 15px;\n  }\n}\n\n.reservas-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.refresh-btn {\n  background-color: #f0f0f0;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 8px 15px;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n.refresh-btn:hover {\n  background-color: #e0e0e0;\n}\n\n.refresh-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.delete-old-btn {\n  background-color: #f0f0f0;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 8px 15px;\n  cursor: pointer;\n  transition: all 0.3s;\n  margin-left: 10px;\n}\n\n.delete-old-btn:hover {\n  background-color: #e0e0e0;\n}\n\n.delete-old-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.delete-modal-overlay {\n  position: fixed;\n  z-index: 1000;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0,0,0,0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.delete-modal {\n  background-color: #fff;\n  border-radius: 8px;\n  padding: 20px;\n  width: 90%;\n  max-width: 400px;\n  max-height: 80vh;\n  overflow-y: auto;\n  position: relative;\n  box-shadow: 0 4px 20px rgba(0,0,0,0.2);\n}\n\n.delete-modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.delete-modal-header h3 {\n  margin-top: 0;\n  margin-bottom: 10px;\n  padding-bottom: 10px;\n  border-bottom: 1px solid #eee;\n  color: #333;\n}\n\n.close-modal {\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  font-size: 24px;\n  cursor: pointer;\n  color: #666;\n}\n\n.close-modal:hover {\n  color: #000;\n}\n\n.delete-modal-body {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.delete-icon {\n  font-size: 48px;\n  margin-bottom: 10px;\n}\n\n.delete-modal-info {\n  font-size: 0.9rem;\n  color: #666;\n  margin-bottom: 20px;\n}\n\n.delete-modal-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 20px;\n}\n\n.delete-modal-footer .cancel-btn {\n  background-color: #f0f0f0;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 8px 15px;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n.delete-modal-footer .cancel-btn:hover {\n  background-color: #e0e0e0;\n}\n\n.delete-modal-footer .confirm-btn {\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 8px 15px;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n.delete-modal-footer .confirm-btn:hover {\n  opacity: 0.9;\n}\n\n.delete-modal-footer .confirm-btn:disabled {\n  background-color: #ccc;\n  color: #666;\n}\n</style>","import script from \"./AdminReservas.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./AdminReservas.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./AdminReservas.vue?vue&type=style&index=0&id=5a5d5360&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-5a5d5360\"]])\n\nexport default __exports__"],"names":["maxRetries","reservations","ref","isLoading","selectedReservation","showDeleteModal","notificationRetries","notificationConnectStatus","retryTimeout","toast","reactive","visible","message","type","showToast","setTimeout","refreshReservations","async","console","log","value","result","getReservations","success","Error","error","length","playNotificationSound","audio","Audio","play","catch","e","loadReservations","checkNotifications","forceCheck","response","apiService","get","err","retryMs","Math","min","pow","clearTimeout","hayNotificaciones","cantidad","process","handleNuevaReserva","reservation","existingIndex","findIndex","r","id","unshift","fullName","handleReservaActualizada","data","index","res","status","notificationInterval","onMounted","eventBus","on","setInterval","onUnmounted","off","clearInterval","__expose","formatDate","dateString","includes","parts","split","day","date","Date","isNaN","getTime","getDate","toString","padStart","month","getMonth","year","getFullYear","getStatusLabel","viewReservation","confirmReservation","updateReservationStatus","cancelReservation","contactCustomer","mobilePhone","window","location","href","confirmDeleteOldReservations","oldReservations","filter","isReservationOlderThan","successCount","errorCount","deleteReservation","hasOldReservations","computed","some","__exports__"],"sourceRoot":""}