"use strict";(self["webpackChunkwebsap"]=self["webpackChunkwebsap"]||[]).push([[982],{8982:function(e,r,o){o.d(r,{AU:function(){return h},By:function(){return p},Re:function(){return m},cQ:function(){return E},eq:function(){return P},gL:function(){return b},getSoldItems:function(){return I},k1:function(){return f},saveSoldItems:function(){return w},w4:function(){return S}});o(4114),o(8111),o(1701),o(7642),o(8004),o(3853),o(5876),o(2475),o(5024),o(1698);const n="websapDatabase",t=3,a="menuItems",s="menuImages",c="soldItems",i="businessInfo",l="users",d="sharedMenus";function u(){return new Promise(((e,r)=>{try{console.log("Intentando abrir la base de datos con versión:",t);const o=indexedDB.open(n,t);o.onerror=e=>{console.error("Error al abrir la base de datos:",e.target.error),r("Error al abrir la base de datos: "+e.target.errorCode)},o.onsuccess=r=>{const o=r.target.result;console.log("Base de datos abierta con éxito, versión:",o.version);const n=Array.from(o.objectStoreNames);console.log("Almacenes existentes:",n),e(o)},o.onupgradeneeded=e=>{console.log("Actualizando estructura de la base de datos a versión:",e.newVersion);const r=e.target.result,o=[{name:l,keyPath:"id"},{name:a,keyPath:"id"},{name:s,keyPath:"id"},{name:c,keyPath:"id"},{name:i,keyPath:"id"},{name:d,keyPath:"id"}];o.forEach((e=>{r.objectStoreNames.contains(e.name)||(console.log(`Creando almacén: ${e.name}`),r.createObjectStore(e.name,{keyPath:e.keyPath}))}))}}catch(o){console.error("Error crítico en IndexedDB:",o),r(o)}}))}async function m(e,r=!1){try{const r=[];for(const a of e){const e={...a};if(e.id||(e.id=Date.now()+Math.random().toString(36).substring(2,10)),e.isSpecial=a.isSpecial||!1,e.image&&"string"===typeof e.image&&e.image.length>0)try{await g(e.id,e.image),e.image=null,e.hasStoredImage=!0}catch(o){console.warn("Error al guardar imagen, continuando sin imagen:",o),e.image=null,e.hasStoredImage=!1}r.push(e)}const n=await u(),t=n.transaction([a],"readwrite"),s=t.objectStore(a),c=r.map((e=>new Promise(((r,o)=>{const n=s.put(e);n.onsuccess=()=>r(),n.onerror=e=>o(e.target.error)}))));return await Promise.all(c),new Promise(((e,r)=>{t.oncomplete=()=>e(!0),t.onerror=e=>r(e.target.error)}))}catch(n){throw console.error("Error al guardar elementos del menú:",n),n}}async function g(e,r){try{const o=await u(),n=o.transaction([s],"readwrite"),t=n.objectStore(s);return t.put({id:e,data:r}),new Promise(((e,r)=>{n.oncomplete=()=>e(!0),n.onerror=e=>r(e.target.error)}))}catch(o){throw console.error("Error al guardar imagen:",o),o}}async function b(){try{const e=await u();if(!Array.from(e.objectStoreNames).includes(a))return console.error(`El almacén ${a} no existe en la base de datos`),[];const r=e.transaction([a],"readonly"),o=r.objectStore(a),n=o.getAll();return new Promise(((e,r)=>{n.onsuccess=async()=>{let r=n.result;const o=[],t=new Set;for(const e of r)e.id&&!t.has(e.id)||(e.id=Date.now()+"-"+Math.random().toString(36).substring(2,10)),t.add(e.id),o.push(e);for(const e of o)e.hasStoredImage&&(e.image=await y(e.id));e(o)},n.onerror=e=>r(e.target.error)}))}catch(e){return console.error("Error al obtener elementos del menú:",e),[]}}async function f(e){try{console.log(`Intentando eliminar elemento con ID: ${e}`);const r=await u(),o=r.transaction([a,s],"readwrite"),n=o.objectStore(a),t=o.objectStore(s),c=n.get(e);return new Promise(((r,o)=>{c.onsuccess=()=>{if(!c.result)return console.warn(`No se encontró el elemento con ID: ${e}`),void r(!0);const a=n.delete(e);a.onsuccess=()=>{console.log(`Elemento con ID ${e} eliminado correctamente`);const o=t.delete(e);o.onsuccess=()=>{console.log(`Imagen para elemento ${e} eliminada (si existía)`),r(!0)},o.onerror=o=>{console.warn(`Error al eliminar imagen para ${e}:`,o.target.error),r(!0)}},a.onerror=r=>{console.error(`Error al eliminar elemento ${e}:`,r.target.error),o(r.target.error)}},c.onerror=r=>{console.error(`Error al verificar existencia del elemento ${e}:`,r.target.error),o(r.target.error)}}))}catch(r){throw console.error("Error al eliminar elemento del menú:",r),r}}async function y(e){try{const r=await u(),o=r.transaction([s],"readonly"),n=o.objectStore(s),t=n.get(e);return new Promise(((e,r)=>{t.onsuccess=()=>{t.result?e(t.result.data):e(null)},t.onerror=e=>r(e.target.error)}))}catch(r){throw console.error("Error al obtener imagen:",r),r}}async function h(e){try{const o=await u(),n=o.transaction(["businessInfo"],"readwrite"),t=n.objectStore("businessInfo"),a={id:e.id||"business_info_1",name:e.name||"",description:e.description||"",contact:e.contact||"",address:e.address||"",logo:e.logo||""};e.paymentInfo&&(a.paymentInfo={qrTitle:e.paymentInfo.qrTitle||"",qrImage:e.paymentInfo.qrImage||"",nequiNumber:e.paymentInfo.nequiNumber||"",nequiImage:e.paymentInfo.nequiImage||"",bankInfo:e.paymentInfo.bankInfo||"",otherPaymentMethods:e.paymentInfo.otherPaymentMethods||""});try{JSON.stringify(a)}catch(r){throw console.error("El objeto businessInfo no es serializable:",r),new Error("El objeto businessInfo no es serializable")}const s=t.put(a);return new Promise(((e,r)=>{s.onsuccess=()=>e(!0),s.onerror=e=>{console.error("Error específico al guardar businessInfo:",e.target.error),r(e.target.error)}}))}catch(o){throw console.error("Error al guardar información del negocio:",o),o}}async function p(){try{const e=await u();if(!Array.from(e.objectStoreNames).includes(i))return console.error(`El almacén ${i} no existe en la base de datos`),{};const r=e.transaction([i],"readonly"),o=r.objectStore(i),n=o.get("business_info_1");return new Promise(((e,r)=>{n.onsuccess=()=>{e(n.result||{})},n.onerror=e=>{console.error("Error en request:",e.target.error),r(e.target.error)}}))}catch(e){return console.error("Error al obtener información del negocio:",e),{}}}async function w(e){try{Array.isArray(e)||(console.warn("saveSoldItems recibió un valor que no es array:",e),e=[]);const o=e.map((e=>e&&"object"===typeof e?{name:String(e.name||"Producto desconocido"),quantity:Number(e.quantity)||1,price:Number(e.price)||0,includesDrink:Boolean(e.includesDrink)}:{name:"Producto desconocido",quantity:1,price:0,includesDrink:!1})),n=await u(),t=n.transaction([c],"readwrite"),a=t.objectStore(c),s={id:"sold_items_1",items:o};try{JSON.stringify(s)}catch(r){throw console.error("El objeto soldItems no es serializable:",r),new Error("El objeto soldItems no es serializable")}const i=a.put(s);return new Promise(((e,r)=>{i.onsuccess=()=>e(!0),i.onerror=e=>{console.error("Error específico al guardar soldItems:",e.target.error),r(e.target.error)}}))}catch(o){throw console.error("Error al guardar elementos vendidos:",o),o}}async function I(){try{const e=await u();if(!Array.from(e.objectStoreNames).includes(c))return console.error(`El almacén ${c} no existe en la base de datos`),[];const r=e.transaction([c],"readonly"),o=r.objectStore(c),n=o.get("sold_items_1");return new Promise(((e,r)=>{n.onsuccess=()=>{n.result?e(n.result.items):e([])},n.onerror=e=>r(e.target.error)}))}catch(e){return console.error("Error al obtener elementos vendidos:",e),[]}}async function E(){return console.log("Función migrateFromLocalStorage en desuso - no se utilizará localStorage"),!0}function S(e,r=800,o=600,n=.7){return new Promise((t=>{const a=new Image;a.onload=()=>{const e=document.createElement("canvas");let s=a.width,c=a.height;s>c?s>r&&(c=Math.round(c*r/s),s=r):c>o&&(s=Math.round(s*o/c),c=o),e.width=s,e.height=c;const i=e.getContext("2d");i.drawImage(a,0,0,s,c);const l=e.toDataURL("image/jpeg",n);t(l)},a.src=e}))}async function P(e,r){try{if(!e)return console.error("Error: ID del item no proporcionado"),!1;const o=parseInt(Number(r),10);if(isNaN(o))return console.error(`Error: Cantidad inválida proporcionada: ${r} (${typeof r})`),!1;console.log(`Actualizando disponibilidad para item ${e} a ${o} unidades (valor original: ${r}, tipo: ${typeof r})`);const n=await u(),t=n.transaction([a],"readwrite"),s=t.objectStore(a);return new Promise(((r,n)=>{const a=s.get(e);a.onsuccess=t=>{const a=t.target.result;if(!a)return console.error(`No se encontró el elemento con ID: ${e}`),void r(!1);const c=parseInt(Number(a.availableQuantity)||0,10);a.availableQuantity=o;const i=s.put(a);i.onsuccess=()=>{console.log(`Disponibilidad actualizada para ${a.name} (ID: ${e}): ${c} → ${o} (diferencia: ${c-o})`);try{fetch("http://localhost:3000/actualizar-disponibilidad",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:e,availableQuantity:o})}).catch((e=>{console.warn("Error al sincronizar con backend:",e)}))}catch(n){console.warn("Error al sincronizar con el backend:",n)}r(!0)},i.onerror=r=>{console.error(`Error al actualizar disponibilidad para ${e}:`,r),n(r)}},a.onerror=r=>{console.error(`Error al obtener elemento ${e}:`,r),n(r)},t.onerror=e=>{console.error("Error en transacción de actualización:",e),n(e)}}))}catch(o){return console.error("Error al actualizar disponibilidad:",o),!1}}}}]);
//# sourceMappingURL=982.64fc41a9.js.map