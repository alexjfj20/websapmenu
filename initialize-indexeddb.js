/**
 * Script para inicializar y configurar IndexedDB en la aplicaci√≥n cliente
 * Este script se inyectar√° en el index.html para asegurar que la cach√© funcione correctamente
 */
const fs = require('fs');
const path = require('path');

console.log('üîÑ Inicializando configuraci√≥n de IndexedDB...');

// Ruta al archivo index.html
const indexPath = path.join(__dirname, 'dist', 'index.html');

if (!fs.existsSync(indexPath)) {
  console.error('‚ùå No se encontr√≥ el archivo index.html');
  process.exit(1);
}

// C√≥digo JavaScript para inicializar IndexedDB
const indexedDBScript = `
<script>
// Script de inicializaci√≥n de IndexedDB para WebSAP
(function() {
  console.log('üîÑ Inicializando IndexedDB para WebSAP...');
  
  // Configuraci√≥n de IndexedDB
  const dbConfig = {
    name: 'restauranteAppDB',
    version: 4,
    stores: {
      platos: { keyPath: 'id', autoIncrement: true },
      syncQueue: { keyPath: 'id', autoIncrement: true },
      menuCache: { keyPath: 'id' } // Nuevo almac√©n para men√∫s
    }
  };
  
  // Funci√≥n para inicializar la base de datos
  function initDB() {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(dbConfig.name, dbConfig.version);
      
      request.onupgradeneeded = function(event) {
        const db = event.target.result;
        console.log('‚¨ÜÔ∏è Actualizando base de datos a versi√≥n', dbConfig.version);
        
        // Crear almacenes si no existen
        if (!db.objectStoreNames.contains('platos')) {
          db.createObjectStore('platos', { keyPath: 'id', autoIncrement: true });
          console.log('‚úÖ Almac√©n "platos" creado');
        }
        
        if (!db.objectStoreNames.contains('syncQueue')) {
          db.createObjectStore('syncQueue', { keyPath: 'id', autoIncrement: true });
          console.log('‚úÖ Almac√©n "syncQueue" creado');
        }
        
        // Asegurarse de que existe el almac√©n menuCache
        if (!db.objectStoreNames.contains('menuCache')) {
          db.createObjectStore('menuCache', { keyPath: 'id' });
          console.log('‚úÖ Almac√©n "menuCache" creado');
        }
      };
      
      request.onsuccess = function(event) {
        const db = event.target.result;
        console.log('‚úÖ Base de datos IndexedDB inicializada correctamente');
        
        // Verificar almacenes existentes
        console.log('üìÇ Almacenes disponibles:', Array.from(db.objectStoreNames));
        
        resolve(db);
      };
      
      request.onerror = function(event) {
        console.error('‚ùå Error al inicializar IndexedDB:', event.target.error);
        reject(event.target.error);
      };
    });
  }
  
  // Funci√≥n para guardar un men√∫ en cach√©
  function saveMenuToCache(menuData) {
    if (!menuData || !menuData.id) {
      console.warn('‚ö†Ô∏è Datos de men√∫ inv√°lidos para cach√©');
      return Promise.reject(new Error('Datos inv√°lidos'));
    }
    
    return initDB().then(db => {
      return new Promise((resolve, reject) => {
        const tx = db.transaction(['menuCache'], 'readwrite');
        const store = tx.objectStore('menuCache');
        
        // A√±adir fecha de cach√©
        menuData.cachedAt = new Date().toISOString();
        
        const request = store.put(menuData);
        
        request.onsuccess = function() {
          console.log('‚úÖ Men√∫ guardado en cach√©:', menuData.id);
          resolve(true);
        };
        
        request.onerror = function(event) {
          console.error('‚ùå Error al guardar men√∫ en cach√©:', event.target.error);
          reject(event.target.error);
        };
        
        tx.oncomplete = function() {
          db.close();
        };
      });
    });
  }
  
  // Funci√≥n para obtener un men√∫ desde cach√©
  function getMenuFromCache(menuId) {
    return initDB().then(db => {
      return new Promise((resolve, reject) => {
        const tx = db.transaction(['menuCache'], 'readonly');
        const store = tx.objectStore('menuCache');
        
        const request = store.get(menuId);
        
        request.onsuccess = function(event) {
          const menu = event.target.result;
          if (menu) {
            console.log('‚úÖ Men√∫ recuperado de cach√©:', menuId);
            resolve(menu);
          } else {
            console.warn('‚ö†Ô∏è Men√∫ no encontrado en cach√©:', menuId);
            reject(new Error('No se encontr√≥ el men√∫ en cach√©'));
          }
        };
        
        request.onerror = function(event) {
          console.error('‚ùå Error al recuperar men√∫ de cach√©:', event.target.error);
          reject(event.target.error);
        };
        
        tx.oncomplete = function() {
          db.close();
        };
      });
    });
  }
  
  // Exponer funciones para uso global en la aplicaci√≥n
  window.WebSAPCache = {
    initDB,
    saveMenuToCache,
    getMenuFromCache
  };
  
  // Inicializar la base de datos al cargar la p√°gina
  initDB().catch(err => {
    console.error('‚ùå Error durante la inicializaci√≥n de IndexedDB:', err);
  });
  
  // Intentar precargar el men√∫ principal
  const menuId = '8idq9bgbdwr7srcw';
  
  // Si estamos en la p√°gina del men√∫ compartido, intentar obtenerlo y guardarlo en cach√©
  if (window.location.pathname.includes('/menu/')) {
    const pathParts = window.location.pathname.split('/');
    const currentMenuId = pathParts[pathParts.length - 1];
    
    if (currentMenuId && currentMenuId.length > 5) {
      // Intentar cargar el men√∫ desde la API
      fetch(\`/api/shared-menu/\${currentMenuId}\`)
        .then(response => response.json())
        .then(data => {
          console.log('‚úÖ Men√∫ cargado desde API, guardando en cach√©');
          return saveMenuToCache(data);
        })
        .catch(err => {
          console.error('‚ùå Error al cargar men√∫ desde API:', err);
        });
    }
  }
})();
</script>
`;

try {
  // Leer el archivo index.html
  let htmlContent = fs.readFileSync(indexPath, 'utf8');
  
  // Verificar si el script ya est√° inyectado
  if (htmlContent.includes('Inicializando IndexedDB para WebSAP')) {
    console.log('‚ö†Ô∏è El script de IndexedDB ya est√° inyectado');
    process.exit(0);
  }
  
  // Insertar el script antes de cerrar el head
  const headCloseTag = '</head>';
  const headPosition = htmlContent.indexOf(headCloseTag);
  
  if (headPosition === -1) {
    throw new Error('No se encontr√≥ la etiqueta </head> en el HTML');
  }
  
  // Insertar el script
  htmlContent = htmlContent.slice(0, headPosition) + indexedDBScript + htmlContent.slice(headPosition);
  
  // Guardar el archivo modificado
  fs.writeFileSync(indexPath, htmlContent, 'utf8');
  console.log('‚úÖ Script de IndexedDB inyectado correctamente');
  
} catch (error) {
  console.error('‚ùå Error al inyectar script de IndexedDB:', error);
  process.exit(1);
}