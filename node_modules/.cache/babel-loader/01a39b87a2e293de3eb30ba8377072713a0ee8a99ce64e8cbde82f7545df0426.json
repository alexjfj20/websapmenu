{"ast":null,"code":"// src/services/indexedDBService.js\n\n// Servicio para manejar operaciones con IndexedDB\nconst DB_NAME = 'restauranteAppDB'; // Nombre actualizado según las herramientas de desarrollo\nconst DB_VERSION = 1;\nconst PLATOS_STORE = 'platos';\nconst SYNC_QUEUE_STORE = 'syncQueue';\n\n// Inicializar la base de datos\nconst initDB = () => {\n  return new Promise((resolve, reject) => {\n    console.log(`Intentando abrir la base de datos con versión: ${DB_VERSION}`);\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onerror = event => {\n      console.error('Error al abrir la base de datos IndexedDB:', event);\n      reject('Error al abrir la base de datos');\n    };\n    request.onsuccess = event => {\n      const db = event.target.result;\n      console.log('IndexedDB inicializada correctamente');\n      resolve(db);\n    };\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n      console.log('Actualizando estructura de la base de datos...');\n\n      // Crear almacén para platos si no existe\n      if (!db.objectStoreNames.contains(PLATOS_STORE)) {\n        console.log('Creando almacén de platos...');\n        const platosStore = db.createObjectStore(PLATOS_STORE, {\n          keyPath: 'id',\n          autoIncrement: true\n        });\n        platosStore.createIndex('name', 'name', {\n          unique: false\n        });\n        platosStore.createIndex('syncStatus', 'syncStatus', {\n          unique: false\n        });\n        console.log('Almacén de platos creado');\n      } else {\n        console.log('El almacén de platos ya existe');\n      }\n\n      // Crear almacén para la cola de sincronización si no existe\n      if (!db.objectStoreNames.contains(SYNC_QUEUE_STORE)) {\n        console.log('Creando almacén de cola de sincronización...');\n        const syncQueueStore = db.createObjectStore(SYNC_QUEUE_STORE, {\n          keyPath: 'id',\n          autoIncrement: true\n        });\n        syncQueueStore.createIndex('timestamp', 'timestamp', {\n          unique: false\n        });\n        syncQueueStore.createIndex('type', 'type', {\n          unique: false\n        });\n        console.log('Almacén de cola de sincronización creado');\n      } else {\n        console.log('El almacén de cola de sincronización ya existe');\n      }\n    };\n  });\n};\n\n// Abrir conexión a la base de datos\nconst openDB = async () => {\n  try {\n    return await initDB();\n  } catch (error) {\n    console.error('Error al abrir conexión a IndexedDB:', error);\n    throw error;\n  }\n};\n\n// Guardar un plato en IndexedDB\nconst savePlato = async plato => {\n  try {\n    console.log('Iniciando guardado en IndexedDB:', plato);\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([PLATOS_STORE], 'readwrite');\n      const store = transaction.objectStore(PLATOS_STORE);\n\n      // Agregar estado de sincronización al plato\n      const platoToSave = {\n        ...plato,\n        syncStatus: 'pending',\n        localTimestamp: new Date().getTime()\n      };\n      console.log('Guardando plato con datos:', platoToSave);\n      const request = store.add(platoToSave);\n      request.onsuccess = event => {\n        const savedId = event.target.result;\n        console.log(`Plato guardado localmente con ID: ${savedId}`);\n\n        // También lo agregamos a la cola de sincronización\n        addToSyncQueue({\n          type: 'create',\n          entityType: 'plato',\n          entityId: savedId,\n          data: platoToSave,\n          timestamp: new Date().getTime()\n        });\n        resolve({\n          ...platoToSave,\n          id: savedId\n        });\n      };\n      request.onerror = event => {\n        console.error('Error al guardar plato en IndexedDB:', event);\n        reject('Error al guardar plato localmente');\n      };\n      transaction.oncomplete = () => {\n        console.log('Transacción completada');\n      };\n      transaction.onerror = event => {\n        console.error('Error en la transacción:', event);\n      };\n    });\n  } catch (error) {\n    console.error('Error en savePlato:', error);\n    throw error;\n  }\n};\n\n// Obtener todos los platos de IndexedDB\nconst getAllPlatos = async () => {\n  try {\n    console.log('Obteniendo todos los platos de IndexedDB...');\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([PLATOS_STORE], 'readonly');\n      const store = transaction.objectStore(PLATOS_STORE);\n      const request = store.getAll();\n      request.onsuccess = event => {\n        const platos = event.target.result;\n        console.log(`Obtenidos ${platos.length} platos de IndexedDB`);\n        resolve(platos);\n      };\n      request.onerror = event => {\n        console.error('Error al obtener platos de IndexedDB:', event);\n        reject('Error al obtener platos localmente');\n      };\n    });\n  } catch (error) {\n    console.error('Error en getAllPlatos:', error);\n    throw error;\n  }\n};\n\n// Obtener platos pendientes de sincronización\nconst getPendingPlatos = async () => {\n  try {\n    console.log('Buscando platos pendientes de sincronización...');\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([PLATOS_STORE], 'readonly');\n      const store = transaction.objectStore(PLATOS_STORE);\n      const index = store.index('syncStatus');\n      const request = index.getAll('pending');\n      request.onsuccess = event => {\n        const pendingPlatos = event.target.result;\n        console.log(`Encontrados ${pendingPlatos.length} platos pendientes de sincronización`);\n        resolve(pendingPlatos);\n      };\n      request.onerror = event => {\n        console.error('Error al obtener platos pendientes:', event);\n        reject('Error al obtener platos pendientes');\n      };\n    });\n  } catch (error) {\n    console.error('Error en getPendingPlatos:', error);\n    throw error;\n  }\n};\n\n// Actualizar estado de sincronización de un plato\nconst updatePlatoSyncStatus = async (id, status) => {\n  console.log(`Actualizando estado de sincronización del plato ID ${id} a \"${status}\"...`);\n\n  // Validar que el estado sea uno de los permitidos\n  const validStatuses = ['pending', 'synced', 'pending_deletion'];\n  if (!validStatuses.includes(status)) {\n    throw new Error(`Estado inválido: ${status}. Debe ser uno de: ${validStatuses.join(', ')}`);\n  }\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('restaurante-db', 1);\n    request.onerror = event => {\n      console.error('Error al abrir la base de datos:', event.target.error);\n      reject(new Error('No se pudo abrir la base de datos para actualizar el estado.'));\n    };\n    request.onsuccess = event => {\n      const db = event.target.result;\n      try {\n        const transaction = db.transaction(['platos'], 'readwrite');\n        const platosStore = transaction.objectStore('platos');\n\n        // Obtener el plato primero\n        const getRequest = platosStore.get(id);\n        getRequest.onerror = event => {\n          console.error(`Error al obtener plato ID ${id}:`, event.target.error);\n          reject(new Error(`No se pudo obtener el plato ID ${id}.`));\n        };\n        getRequest.onsuccess = event => {\n          const plato = event.target.result;\n          if (!plato) {\n            console.error(`No se encontró plato con ID ${id}.`);\n            reject(new Error(`No se encontró plato con ID ${id}.`));\n            return;\n          }\n\n          // Actualizar el estado de sincronización\n          plato.syncStatus = status;\n\n          // Si es pending_deletion, marcar como no disponible también\n          if (status === 'pending_deletion') {\n            plato.is_available = false;\n          }\n\n          // Guardar el plato actualizado\n          const updateRequest = platosStore.put(plato);\n          updateRequest.onerror = event => {\n            console.error(`Error al actualizar plato ID ${id}:`, event.target.error);\n            reject(new Error(`No se pudo actualizar el estado del plato ID ${id}.`));\n          };\n          updateRequest.onsuccess = () => {\n            console.log(`Estado de sincronización del plato ID ${id} actualizado a \"${status}\".`);\n            resolve(true);\n          };\n        };\n        transaction.oncomplete = () => {\n          db.close();\n        };\n      } catch (error) {\n        console.error('Error en la transacción:', error);\n        reject(error);\n      }\n    };\n  });\n};\n\n// Agregar elemento a la cola de sincronización\nconst addToSyncQueue = async item => {\n  try {\n    console.log('Agregando elemento a la cola de sincronización:', item);\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([SYNC_QUEUE_STORE], 'readwrite');\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\n      const request = store.add(item);\n      request.onsuccess = event => {\n        console.log('Elemento agregado a la cola de sincronización');\n        resolve(event.target.result);\n      };\n      request.onerror = event => {\n        console.error('Error al agregar a la cola de sincronización:', event);\n        reject('Error al agregar a la cola de sincronización');\n      };\n    });\n  } catch (error) {\n    console.error('Error en addToSyncQueue:', error);\n    throw error;\n  }\n};\n\n// Obtener elementos de la cola de sincronización\nconst getSyncQueue = async () => {\n  try {\n    console.log('Obteniendo cola de sincronización...');\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([SYNC_QUEUE_STORE], 'readonly');\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\n      const request = store.getAll();\n      request.onsuccess = event => {\n        const queue = event.target.result;\n        console.log(`Obtenidos ${queue.length} elementos de la cola de sincronización`);\n        resolve(queue);\n      };\n      request.onerror = event => {\n        console.error('Error al obtener cola de sincronización:', event);\n        reject('Error al obtener cola de sincronización');\n      };\n    });\n  } catch (error) {\n    console.error('Error en getSyncQueue:', error);\n    throw error;\n  }\n};\n\n// Eliminar elemento de la cola de sincronización\nconst removeFromSyncQueue = async id => {\n  try {\n    console.log(`Eliminando elemento ${id} de la cola de sincronización...`);\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([SYNC_QUEUE_STORE], 'readwrite');\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\n      const request = store.delete(id);\n      request.onsuccess = () => {\n        console.log(`Elemento ${id} eliminado de la cola de sincronización`);\n        resolve(true);\n      };\n      request.onerror = event => {\n        console.error('Error al eliminar de la cola de sincronización:', event);\n        reject('Error al eliminar de la cola de sincronización');\n      };\n    });\n  } catch (error) {\n    console.error('Error en removeFromSyncQueue:', error);\n    throw error;\n  }\n};\n\n// Eliminar un plato de IndexedDB\nconst deletePlato = async id => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('restaurante-db', 1);\n    request.onerror = event => {\n      console.error('Error al abrir la base de datos:', event.target.error);\n      reject(new Error('No se pudo abrir la base de datos para eliminar el plato'));\n    };\n    request.onsuccess = event => {\n      const db = event.target.result;\n      try {\n        const transaction = db.transaction(['platos'], 'readwrite');\n        const platosStore = transaction.objectStore('platos');\n        const deleteRequest = platosStore.delete(id);\n        deleteRequest.onerror = event => {\n          console.error(`Error al eliminar plato ID ${id}:`, event.target.error);\n          reject(new Error(`No se pudo eliminar el plato ID ${id}`));\n        };\n        deleteRequest.onsuccess = () => {\n          console.log(`Plato ID ${id} eliminado con éxito de IndexedDB`);\n          resolve(true);\n        };\n        transaction.oncomplete = () => {\n          db.close();\n        };\n      } catch (error) {\n        console.error('Error en la transacción:', error);\n        reject(error);\n      }\n    };\n  });\n};\nexport { openDB, savePlato, getAllPlatos, getPendingPlatos, updatePlatoSyncStatus, addToSyncQueue, getSyncQueue, removeFromSyncQueue, deletePlato };","map":{"version":3,"names":["DB_NAME","DB_VERSION","PLATOS_STORE","SYNC_QUEUE_STORE","initDB","Promise","resolve","reject","console","log","request","indexedDB","open","onerror","event","error","onsuccess","db","target","result","onupgradeneeded","objectStoreNames","contains","platosStore","createObjectStore","keyPath","autoIncrement","createIndex","unique","syncQueueStore","openDB","savePlato","plato","transaction","store","objectStore","platoToSave","syncStatus","localTimestamp","Date","getTime","add","savedId","addToSyncQueue","type","entityType","entityId","data","timestamp","id","oncomplete","getAllPlatos","getAll","platos","length","getPendingPlatos","index","pendingPlatos","updatePlatoSyncStatus","status","validStatuses","includes","Error","join","getRequest","get","is_available","updateRequest","put","close","item","getSyncQueue","queue","removeFromSyncQueue","delete","deletePlato","deleteRequest"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/indexedDBService.js"],"sourcesContent":["// src/services/indexedDBService.js\r\n\r\n// Servicio para manejar operaciones con IndexedDB\r\nconst DB_NAME = 'restauranteAppDB'; // Nombre actualizado según las herramientas de desarrollo\r\nconst DB_VERSION = 1;\r\nconst PLATOS_STORE = 'platos';\r\nconst SYNC_QUEUE_STORE = 'syncQueue';\r\n\r\n// Inicializar la base de datos\r\nconst initDB = () => {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(`Intentando abrir la base de datos con versión: ${DB_VERSION}`);\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n    \r\n    request.onerror = (event) => {\r\n      console.error('Error al abrir la base de datos IndexedDB:', event);\r\n      reject('Error al abrir la base de datos');\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      console.log('IndexedDB inicializada correctamente');\r\n      resolve(db);\r\n    };\r\n    \r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      console.log('Actualizando estructura de la base de datos...');\r\n      \r\n      // Crear almacén para platos si no existe\r\n      if (!db.objectStoreNames.contains(PLATOS_STORE)) {\r\n        console.log('Creando almacén de platos...');\r\n        const platosStore = db.createObjectStore(PLATOS_STORE, { keyPath: 'id', autoIncrement: true });\r\n        platosStore.createIndex('name', 'name', { unique: false });\r\n        platosStore.createIndex('syncStatus', 'syncStatus', { unique: false });\r\n        console.log('Almacén de platos creado');\r\n      } else {\r\n        console.log('El almacén de platos ya existe');\r\n      }\r\n      \r\n      // Crear almacén para la cola de sincronización si no existe\r\n      if (!db.objectStoreNames.contains(SYNC_QUEUE_STORE)) {\r\n        console.log('Creando almacén de cola de sincronización...');\r\n        const syncQueueStore = db.createObjectStore(SYNC_QUEUE_STORE, { keyPath: 'id', autoIncrement: true });\r\n        syncQueueStore.createIndex('timestamp', 'timestamp', { unique: false });\r\n        syncQueueStore.createIndex('type', 'type', { unique: false });\r\n        console.log('Almacén de cola de sincronización creado');\r\n      } else {\r\n        console.log('El almacén de cola de sincronización ya existe');\r\n      }\r\n    };\r\n  });\r\n};\r\n\r\n// Abrir conexión a la base de datos\r\nconst openDB = async () => {\r\n  try {\r\n    return await initDB();\r\n  } catch (error) {\r\n    console.error('Error al abrir conexión a IndexedDB:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Guardar un plato en IndexedDB\r\nconst savePlato = async (plato) => {\r\n  try {\r\n    console.log('Iniciando guardado en IndexedDB:', plato);\r\n    const db = await openDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([PLATOS_STORE], 'readwrite');\r\n      const store = transaction.objectStore(PLATOS_STORE);\r\n      \r\n      // Agregar estado de sincronización al plato\r\n      const platoToSave = {\r\n        ...plato,\r\n        syncStatus: 'pending',\r\n        localTimestamp: new Date().getTime()\r\n      };\r\n      \r\n      console.log('Guardando plato con datos:', platoToSave);\r\n      const request = store.add(platoToSave);\r\n      \r\n      request.onsuccess = (event) => {\r\n        const savedId = event.target.result;\r\n        console.log(`Plato guardado localmente con ID: ${savedId}`);\r\n        \r\n        // También lo agregamos a la cola de sincronización\r\n        addToSyncQueue({\r\n          type: 'create',\r\n          entityType: 'plato',\r\n          entityId: savedId,\r\n          data: platoToSave,\r\n          timestamp: new Date().getTime()\r\n        });\r\n        \r\n        resolve({ ...platoToSave, id: savedId });\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al guardar plato en IndexedDB:', event);\r\n        reject('Error al guardar plato localmente');\r\n      };\r\n      \r\n      transaction.oncomplete = () => {\r\n        console.log('Transacción completada');\r\n      };\r\n      \r\n      transaction.onerror = (event) => {\r\n        console.error('Error en la transacción:', event);\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en savePlato:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener todos los platos de IndexedDB\r\nconst getAllPlatos = async () => {\r\n  try {\r\n    console.log('Obteniendo todos los platos de IndexedDB...');\r\n    const db = await openDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([PLATOS_STORE], 'readonly');\r\n      const store = transaction.objectStore(PLATOS_STORE);\r\n      const request = store.getAll();\r\n      \r\n      request.onsuccess = (event) => {\r\n        const platos = event.target.result;\r\n        console.log(`Obtenidos ${platos.length} platos de IndexedDB`);\r\n        resolve(platos);\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al obtener platos de IndexedDB:', event);\r\n        reject('Error al obtener platos localmente');\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en getAllPlatos:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener platos pendientes de sincronización\r\nconst getPendingPlatos = async () => {\r\n  try {\r\n    console.log('Buscando platos pendientes de sincronización...');\r\n    const db = await openDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([PLATOS_STORE], 'readonly');\r\n      const store = transaction.objectStore(PLATOS_STORE);\r\n      const index = store.index('syncStatus');\r\n      const request = index.getAll('pending');\r\n      \r\n      request.onsuccess = (event) => {\r\n        const pendingPlatos = event.target.result;\r\n        console.log(`Encontrados ${pendingPlatos.length} platos pendientes de sincronización`);\r\n        resolve(pendingPlatos);\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al obtener platos pendientes:', event);\r\n        reject('Error al obtener platos pendientes');\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en getPendingPlatos:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Actualizar estado de sincronización de un plato\r\nconst updatePlatoSyncStatus = async (id, status) => {\r\n  console.log(`Actualizando estado de sincronización del plato ID ${id} a \"${status}\"...`);\r\n  \r\n  // Validar que el estado sea uno de los permitidos\r\n  const validStatuses = ['pending', 'synced', 'pending_deletion'];\r\n  if (!validStatuses.includes(status)) {\r\n    throw new Error(`Estado inválido: ${status}. Debe ser uno de: ${validStatuses.join(', ')}`);\r\n  }\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open('restaurante-db', 1);\r\n    \r\n    request.onerror = (event) => {\r\n      console.error('Error al abrir la base de datos:', event.target.error);\r\n      reject(new Error('No se pudo abrir la base de datos para actualizar el estado.'));\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      \r\n      try {\r\n        const transaction = db.transaction(['platos'], 'readwrite');\r\n        const platosStore = transaction.objectStore('platos');\r\n        \r\n        // Obtener el plato primero\r\n        const getRequest = platosStore.get(id);\r\n        \r\n        getRequest.onerror = (event) => {\r\n          console.error(`Error al obtener plato ID ${id}:`, event.target.error);\r\n          reject(new Error(`No se pudo obtener el plato ID ${id}.`));\r\n        };\r\n        \r\n        getRequest.onsuccess = (event) => {\r\n          const plato = event.target.result;\r\n          \r\n          if (!plato) {\r\n            console.error(`No se encontró plato con ID ${id}.`);\r\n            reject(new Error(`No se encontró plato con ID ${id}.`));\r\n            return;\r\n          }\r\n          \r\n          // Actualizar el estado de sincronización\r\n          plato.syncStatus = status;\r\n          \r\n          // Si es pending_deletion, marcar como no disponible también\r\n          if (status === 'pending_deletion') {\r\n            plato.is_available = false;\r\n          }\r\n          \r\n          // Guardar el plato actualizado\r\n          const updateRequest = platosStore.put(plato);\r\n          \r\n          updateRequest.onerror = (event) => {\r\n            console.error(`Error al actualizar plato ID ${id}:`, event.target.error);\r\n            reject(new Error(`No se pudo actualizar el estado del plato ID ${id}.`));\r\n          };\r\n          \r\n          updateRequest.onsuccess = () => {\r\n            console.log(`Estado de sincronización del plato ID ${id} actualizado a \"${status}\".`);\r\n            resolve(true);\r\n          };\r\n        };\r\n        \r\n        transaction.oncomplete = () => {\r\n          db.close();\r\n        };\r\n      } catch (error) {\r\n        console.error('Error en la transacción:', error);\r\n        reject(error);\r\n      }\r\n    };\r\n  });\r\n};\r\n\r\n// Agregar elemento a la cola de sincronización\r\nconst addToSyncQueue = async (item) => {\r\n  try {\r\n    console.log('Agregando elemento a la cola de sincronización:', item);\r\n    const db = await openDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([SYNC_QUEUE_STORE], 'readwrite');\r\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\r\n      \r\n      const request = store.add(item);\r\n      \r\n      request.onsuccess = (event) => {\r\n        console.log('Elemento agregado a la cola de sincronización');\r\n        resolve(event.target.result);\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al agregar a la cola de sincronización:', event);\r\n        reject('Error al agregar a la cola de sincronización');\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en addToSyncQueue:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener elementos de la cola de sincronización\r\nconst getSyncQueue = async () => {\r\n  try {\r\n    console.log('Obteniendo cola de sincronización...');\r\n    const db = await openDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([SYNC_QUEUE_STORE], 'readonly');\r\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\r\n      const request = store.getAll();\r\n      \r\n      request.onsuccess = (event) => {\r\n        const queue = event.target.result;\r\n        console.log(`Obtenidos ${queue.length} elementos de la cola de sincronización`);\r\n        resolve(queue);\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al obtener cola de sincronización:', event);\r\n        reject('Error al obtener cola de sincronización');\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en getSyncQueue:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Eliminar elemento de la cola de sincronización\r\nconst removeFromSyncQueue = async (id) => {\r\n  try {\r\n    console.log(`Eliminando elemento ${id} de la cola de sincronización...`);\r\n    const db = await openDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([SYNC_QUEUE_STORE], 'readwrite');\r\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\r\n      \r\n      const request = store.delete(id);\r\n      \r\n      request.onsuccess = () => {\r\n        console.log(`Elemento ${id} eliminado de la cola de sincronización`);\r\n        resolve(true);\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al eliminar de la cola de sincronización:', event);\r\n        reject('Error al eliminar de la cola de sincronización');\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en removeFromSyncQueue:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Eliminar un plato de IndexedDB\r\nconst deletePlato = async (id) => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open('restaurante-db', 1);\r\n    \r\n    request.onerror = (event) => {\r\n      console.error('Error al abrir la base de datos:', event.target.error);\r\n      reject(new Error('No se pudo abrir la base de datos para eliminar el plato'));\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      \r\n      try {\r\n        const transaction = db.transaction(['platos'], 'readwrite');\r\n        const platosStore = transaction.objectStore('platos');\r\n        \r\n        const deleteRequest = platosStore.delete(id);\r\n        \r\n        deleteRequest.onerror = (event) => {\r\n          console.error(`Error al eliminar plato ID ${id}:`, event.target.error);\r\n          reject(new Error(`No se pudo eliminar el plato ID ${id}`));\r\n        };\r\n        \r\n        deleteRequest.onsuccess = () => {\r\n          console.log(`Plato ID ${id} eliminado con éxito de IndexedDB`);\r\n          resolve(true);\r\n        };\r\n        \r\n        transaction.oncomplete = () => {\r\n          db.close();\r\n        };\r\n      } catch (error) {\r\n        console.error('Error en la transacción:', error);\r\n        reject(error);\r\n      }\r\n    };\r\n  });\r\n};\r\n\r\nexport {\r\n  openDB,\r\n  savePlato,\r\n  getAllPlatos,\r\n  getPendingPlatos,\r\n  updatePlatoSyncStatus,\r\n  addToSyncQueue,\r\n  getSyncQueue,\r\n  removeFromSyncQueue,\r\n  deletePlato\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}