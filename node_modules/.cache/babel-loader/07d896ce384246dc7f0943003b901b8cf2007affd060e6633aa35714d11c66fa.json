{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport { alert } from './dialogService';\n\n// Lista de usuarios predefinidos para pruebas\nconst DEFAULT_USERS = [{\n  id: 1,\n  email: 'superadmin@example.com',\n  password: 'SuperAdmin2023',\n  nombre: 'Superadministrador',\n  roles: ['Superadministrador']\n}, {\n  id: 2,\n  email: 'admin@example.com',\n  password: 'Admin2023',\n  nombre: 'Administrador',\n  roles: ['Administrador']\n}, {\n  id: 3,\n  email: 'empleado@example.com',\n  password: 'Empleado2023',\n  nombre: 'Empleado',\n  roles: ['Empleado']\n}, {\n  id: 4,\n  email: 'test@test.com',\n  password: '123456',\n  nombre: 'Usuario de Prueba',\n  roles: ['Empleado']\n}, {\n  id: 5,\n  email: 'admin',\n  password: 'admin',\n  nombre: 'SuperAdmin',\n  roles: ['Superadministrador', 'Empleado']\n}];\n\n// Usuario actualmente autenticado\nlet currentUser = null;\n\n/**\r\n * Obtiene los usuarios almacenados en IndexedDB (creados desde el panel de administración)\r\n * @returns {Promise<Array>} Lista de usuarios o array vacío si hay error\r\n */\nasync function getStoredUsers() {\n  try {\n    const DB_NAME = 'websapDatabase';\n    const DB_VERSION = 3;\n    const USERS_STORE = 'users';\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\n        // Si hay error, devolver los usuarios predefinidos\n        resolve(DEFAULT_USERS);\n      };\n      request.onsuccess = event => {\n        const db = event.target.result;\n\n        // Verificar que existe el almacén de usuarios\n        if (!db.objectStoreNames.contains(USERS_STORE)) {\n          console.warn(`El almacén ${USERS_STORE} no existe en la base de datos`);\n          resolve(DEFAULT_USERS);\n          return;\n        }\n        const transaction = db.transaction([USERS_STORE], 'readonly');\n        const store = transaction.objectStore(USERS_STORE);\n        const request = store.getAll();\n        request.onsuccess = () => {\n          const storedUsers = request.result || [];\n          console.log(\"Usuarios encontrados en la base de datos:\", storedUsers);\n\n          // Combinar usuarios predefinidos con los almacenados en la BD\n          const allUsers = [...DEFAULT_USERS];\n\n          // Agregar usuarios almacenados que no sean duplicados (por email)\n          for (const user of storedUsers) {\n            if (!user.email) continue; // Ignorar usuarios sin email\n\n            // Verificar si ya existe un usuario con el mismo email en la lista por defecto\n            const existingUserIndex = allUsers.findIndex(u => u.email && u.email.toLowerCase() === user.email.toLowerCase());\n            if (existingUserIndex !== -1) {\n              // Reemplazar el usuario predefinido con el de la BD\n              allUsers[existingUserIndex] = user;\n            } else {\n              // Agregar el nuevo usuario\n              allUsers.push(user);\n            }\n          }\n          console.log(\"Lista completa de usuarios:\", allUsers);\n          resolve(allUsers);\n        };\n        request.onerror = event => {\n          console.error('Error al obtener usuarios:', event.target.error);\n          resolve(DEFAULT_USERS);\n        };\n      };\n    });\n  } catch (error) {\n    console.error('Error al acceder a la base de datos:', error);\n    return DEFAULT_USERS;\n  }\n}\n\n/**\r\n * Intenta iniciar sesión con las credenciales proporcionadas\r\n * @param {string} email - Correo electrónico o nombre de usuario\r\n * @param {string} password - Contraseña\r\n * @returns {Promise<Object>} - Promesa que se resuelve con el usuario o se rechaza con un error\r\n */\nexport async function login(email, password) {\n  try {\n    // Simular una llamada a la API esperando 500ms\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Obtener todos los usuarios (predefinidos y creados en el panel admin)\n    const allUsers = await getStoredUsers();\n    console.log(`Intentando iniciar sesión como: ${email}`);\n    console.log(`Total de usuarios disponibles: ${allUsers.length}`);\n\n    // Buscar usuario por email o nombre de usuario (con manejo de casos extremos)\n    const user = allUsers.find(u => {\n      // Si el usuario no tiene email o password, ignorarlo\n      if (!u || !u.email || !u.password) return false;\n      const emailMatches = typeof email === 'string' && typeof u.email === 'string' && u.email.toLowerCase() === email.toLowerCase();\n      const userNameMatches = typeof email === 'string' && typeof u.nombre === 'string' && u.nombre.toLowerCase() === email.toLowerCase();\n      const passwordMatches = u.password === password;\n\n      // Comprobar también si el usuario está activo (si tiene la propiedad estado)\n      const isActive = !u.estado || u.estado === 'activo';\n      return (emailMatches || userNameMatches) && passwordMatches && isActive;\n    });\n    if (user) {\n      console.log(\"Usuario encontrado:\", user);\n\n      // Verificar estado del usuario si existe la propiedad\n      if (user.estado === 'inactivo') {\n        throw new Error('Esta cuenta ha sido desactivada. Contacte al administrador.');\n      }\n\n      // Hacer una copia del usuario sin la contraseña\n      const {\n        password,\n        ...userWithoutPassword\n      } = user;\n\n      // Asegurar que el usuario tiene roles\n      if (!userWithoutPassword.roles || !Array.isArray(userWithoutPassword.roles)) {\n        userWithoutPassword.roles = ['Empleado']; // Rol por defecto\n      }\n      currentUser = userWithoutPassword;\n\n      // Guardar estado de autenticación en localStorage\n      localStorage.setItem('isLoggedIn', 'true');\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      return userWithoutPassword;\n    } else {\n      console.warn(\"No se encontró usuario con las credenciales proporcionadas\");\n      throw new Error('Credenciales incorrectas');\n    }\n  } catch (error) {\n    console.error(\"Error en login:\", error);\n    throw error;\n  }\n}\n\n/**\r\n * Cierra la sesión del usuario actual\r\n */\nexport function logout() {\n  currentUser = null;\n  localStorage.removeItem('isLoggedIn');\n  localStorage.removeItem('currentUser');\n}\n\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\nexport function isAuthenticated() {\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser) {\n        currentUser = storedUser;\n      }\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n      return false;\n    }\n  }\n  return !!currentUser;\n}\n\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\nexport function getCurrentUser() {\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser) {\n        currentUser = storedUser;\n      }\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n      return null;\n    }\n  }\n  return currentUser;\n}\n\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\nexport function hasRole(roleName) {\n  const user = getCurrentUser();\n  if (!user || !user.roles) {\n    return false;\n  }\n\n  // Si roles es un array, verificar si contiene el rol\n  if (Array.isArray(user.roles)) {\n    return user.roles.includes(roleName);\n  }\n\n  // Si roles es un string, verificar si es igual al rol buscado\n  if (typeof user.roles === 'string') {\n    return user.roles === roleName;\n  }\n  return false;\n}\nexport default {\n  login,\n  logout,\n  isAuthenticated,\n  hasRole,\n  getCurrentUser\n};","map":{"version":3,"names":["alert","DEFAULT_USERS","id","email","password","nombre","roles","currentUser","getStoredUsers","DB_NAME","DB_VERSION","USERS_STORE","Promise","resolve","reject","request","indexedDB","open","onerror","event","console","error","target","onsuccess","db","result","objectStoreNames","contains","warn","transaction","store","objectStore","getAll","storedUsers","log","allUsers","user","existingUserIndex","findIndex","u","toLowerCase","push","login","setTimeout","length","find","emailMatches","userNameMatches","passwordMatches","isActive","estado","Error","userWithoutPassword","Array","isArray","localStorage","setItem","JSON","stringify","logout","removeItem","isAuthenticated","getItem","storedUser","parse","e","getCurrentUser","hasRole","roleName","includes"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/authService.js"],"sourcesContent":["import { alert } from './dialogService';\r\n\r\n// Lista de usuarios predefinidos para pruebas\r\nconst DEFAULT_USERS = [\r\n  {\r\n    id: 1,\r\n    email: 'superadmin@example.com',\r\n    password: 'SuperAdmin2023',\r\n    nombre: 'Superadministrador',\r\n    roles: ['Superadministrador']\r\n  },\r\n  {\r\n    id: 2,\r\n    email: 'admin@example.com',\r\n    password: 'Admin2023',\r\n    nombre: 'Administrador',\r\n    roles: ['Administrador']\r\n  },\r\n  {\r\n    id: 3,\r\n    email: 'empleado@example.com',\r\n    password: 'Empleado2023',\r\n    nombre: 'Empleado',\r\n    roles: ['Empleado']\r\n  },\r\n  {\r\n    id: 4,\r\n    email: 'test@test.com',\r\n    password: '123456',\r\n    nombre: 'Usuario de Prueba',\r\n    roles: ['Empleado']\r\n  },\r\n  {\r\n    id: 5,\r\n    email: 'admin',\r\n    password: 'admin',\r\n    nombre: 'SuperAdmin',\r\n    roles: ['Superadministrador', 'Empleado']\r\n  }\r\n];\r\n\r\n// Usuario actualmente autenticado\r\nlet currentUser = null;\r\n\r\n/**\r\n * Obtiene los usuarios almacenados en IndexedDB (creados desde el panel de administración)\r\n * @returns {Promise<Array>} Lista de usuarios o array vacío si hay error\r\n */\r\nasync function getStoredUsers() {\r\n  try {\r\n    const DB_NAME = 'websapDatabase';\r\n    const DB_VERSION = 3;\r\n    const USERS_STORE = 'users';\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n      \r\n      request.onerror = (event) => {\r\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\r\n        // Si hay error, devolver los usuarios predefinidos\r\n        resolve(DEFAULT_USERS);\r\n      };\r\n      \r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        \r\n        // Verificar que existe el almacén de usuarios\r\n        if (!db.objectStoreNames.contains(USERS_STORE)) {\r\n          console.warn(`El almacén ${USERS_STORE} no existe en la base de datos`);\r\n          resolve(DEFAULT_USERS);\r\n          return;\r\n        }\r\n        \r\n        const transaction = db.transaction([USERS_STORE], 'readonly');\r\n        const store = transaction.objectStore(USERS_STORE);\r\n        const request = store.getAll();\r\n        \r\n        request.onsuccess = () => {\r\n          const storedUsers = request.result || [];\r\n          console.log(\"Usuarios encontrados en la base de datos:\", storedUsers);\r\n          \r\n          // Combinar usuarios predefinidos con los almacenados en la BD\r\n          const allUsers = [...DEFAULT_USERS];\r\n          \r\n          // Agregar usuarios almacenados que no sean duplicados (por email)\r\n          for (const user of storedUsers) {\r\n            if (!user.email) continue; // Ignorar usuarios sin email\r\n            \r\n            // Verificar si ya existe un usuario con el mismo email en la lista por defecto\r\n            const existingUserIndex = allUsers.findIndex(u => \r\n              u.email && u.email.toLowerCase() === user.email.toLowerCase()\r\n            );\r\n            \r\n            if (existingUserIndex !== -1) {\r\n              // Reemplazar el usuario predefinido con el de la BD\r\n              allUsers[existingUserIndex] = user;\r\n            } else {\r\n              // Agregar el nuevo usuario\r\n              allUsers.push(user);\r\n            }\r\n          }\r\n          \r\n          console.log(\"Lista completa de usuarios:\", allUsers);\r\n          resolve(allUsers);\r\n        };\r\n        \r\n        request.onerror = (event) => {\r\n          console.error('Error al obtener usuarios:', event.target.error);\r\n          resolve(DEFAULT_USERS);\r\n        };\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al acceder a la base de datos:', error);\r\n    return DEFAULT_USERS;\r\n  }\r\n}\r\n\r\n/**\r\n * Intenta iniciar sesión con las credenciales proporcionadas\r\n * @param {string} email - Correo electrónico o nombre de usuario\r\n * @param {string} password - Contraseña\r\n * @returns {Promise<Object>} - Promesa que se resuelve con el usuario o se rechaza con un error\r\n */\r\nexport async function login(email, password) {\r\n  try {\r\n    // Simular una llamada a la API esperando 500ms\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    // Obtener todos los usuarios (predefinidos y creados en el panel admin)\r\n    const allUsers = await getStoredUsers();\r\n    \r\n    console.log(`Intentando iniciar sesión como: ${email}`);\r\n    console.log(`Total de usuarios disponibles: ${allUsers.length}`);\r\n    \r\n    // Buscar usuario por email o nombre de usuario (con manejo de casos extremos)\r\n    const user = allUsers.find(u => {\r\n      // Si el usuario no tiene email o password, ignorarlo\r\n      if (!u || !u.email || !u.password) return false;\r\n      \r\n      const emailMatches = \r\n        (typeof email === 'string' && typeof u.email === 'string') && \r\n        (u.email.toLowerCase() === email.toLowerCase());\r\n      \r\n      const userNameMatches = \r\n        (typeof email === 'string' && typeof u.nombre === 'string') && \r\n        (u.nombre.toLowerCase() === email.toLowerCase());\r\n      \r\n      const passwordMatches = u.password === password;\r\n      \r\n      // Comprobar también si el usuario está activo (si tiene la propiedad estado)\r\n      const isActive = !u.estado || u.estado === 'activo';\r\n      \r\n      return ((emailMatches || userNameMatches) && passwordMatches && isActive);\r\n    });\r\n    \r\n    if (user) {\r\n      console.log(\"Usuario encontrado:\", user);\r\n      \r\n      // Verificar estado del usuario si existe la propiedad\r\n      if (user.estado === 'inactivo') {\r\n        throw new Error('Esta cuenta ha sido desactivada. Contacte al administrador.');\r\n      }\r\n      \r\n      // Hacer una copia del usuario sin la contraseña\r\n      const { password, ...userWithoutPassword } = user;\r\n      \r\n      // Asegurar que el usuario tiene roles\r\n      if (!userWithoutPassword.roles || !Array.isArray(userWithoutPassword.roles)) {\r\n        userWithoutPassword.roles = ['Empleado']; // Rol por defecto\r\n      }\r\n      \r\n      currentUser = userWithoutPassword;\r\n      \r\n      // Guardar estado de autenticación en localStorage\r\n      localStorage.setItem('isLoggedIn', 'true');\r\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\r\n      \r\n      return userWithoutPassword;\r\n    } else {\r\n      console.warn(\"No se encontró usuario con las credenciales proporcionadas\");\r\n      throw new Error('Credenciales incorrectas');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error en login:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Cierra la sesión del usuario actual\r\n */\r\nexport function logout() {\r\n  currentUser = null;\r\n  localStorage.removeItem('isLoggedIn');\r\n  localStorage.removeItem('currentUser');\r\n}\r\n\r\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\r\nexport function isAuthenticated() {\r\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\r\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser) {\r\n        currentUser = storedUser;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  return !!currentUser;\r\n}\r\n\r\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\r\nexport function getCurrentUser() {\r\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\r\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser) {\r\n        currentUser = storedUser;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  return currentUser;\r\n}\r\n\r\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\r\nexport function hasRole(roleName) {\r\n  const user = getCurrentUser();\r\n  \r\n  if (!user || !user.roles) {\r\n    return false;\r\n  }\r\n  \r\n  // Si roles es un array, verificar si contiene el rol\r\n  if (Array.isArray(user.roles)) {\r\n    return user.roles.includes(roleName);\r\n  }\r\n  \r\n  // Si roles es un string, verificar si es igual al rol buscado\r\n  if (typeof user.roles === 'string') {\r\n    return user.roles === roleName;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}