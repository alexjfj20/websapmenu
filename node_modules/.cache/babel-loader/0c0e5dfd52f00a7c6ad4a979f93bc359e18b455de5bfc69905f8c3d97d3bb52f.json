{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n// Servicio para la gestión de reservas\nimport apiService from './apiService';\nimport eventBus from '../utils/eventBus';\n\n// Almacenamiento local para las reservas (simulando una base de datos)\nlet reservationsStore = [];\n\n// Intentar cargar reservas guardadas en localStorage al iniciar\ntry {\n  const savedReservations = localStorage.getItem('websap_reservations');\n  if (savedReservations) {\n    reservationsStore = JSON.parse(savedReservations);\n    console.log('Reservas cargadas desde localStorage:', reservationsStore.length);\n  }\n} catch (error) {\n  console.error('Error al cargar reservas desde localStorage:', error);\n}\n\n// Función para guardar las reservas en localStorage\nfunction saveReservationsToStorage() {\n  try {\n    localStorage.setItem('websap_reservations', JSON.stringify(reservationsStore));\n  } catch (error) {\n    console.error('Error al guardar reservas en localStorage:', error);\n  }\n}\n\n// Función para guardar una nueva reserva\nexport async function saveReservation(reservationData) {\n  try {\n    // Generar un ID único para la reserva\n    const reservationId = 'res_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n\n    // Crear el objeto de reserva con los datos recibidos\n    const reservation = {\n      id: reservationId,\n      fullName: reservationData.fullName,\n      mobilePhone: reservationData.mobilePhone,\n      landlinePhone: reservationData.landlinePhone || '',\n      email: reservationData.email || '',\n      address: reservationData.address || '',\n      date: reservationData.reservationDate,\n      time: reservationData.reservationTime,\n      peopleCount: reservationData.peopleCount,\n      notes: reservationData.additionalNotes || '',\n      status: 'pending',\n      // Estado inicial: pendiente\n      createdAt: new Date().toISOString(),\n      source: reservationData.source || 'web' // Fuente de la reserva: web o whatsapp\n    };\n    try {\n      // Intentar guardar en el backend\n      const response = await apiService.default.post('/api/whatsapp/reservas', {\n        nombre: reservation.fullName,\n        telefono: reservation.mobilePhone,\n        email: reservation.email,\n        fecha: reservation.date,\n        hora: reservation.time,\n        personas: reservation.peopleCount,\n        notas: reservation.notes\n      });\n      if (response.data && response.data.success) {\n        console.log('Reserva guardada en el backend:', response.data);\n        reservation.id = response.data.reservationId || reservation.id;\n      }\n    } catch (apiError) {\n      console.warn('No se pudo guardar la reserva en el backend, usando almacenamiento local:', apiError);\n    }\n\n    // Guardar la reserva en nuestro almacenamiento local\n    reservationsStore.unshift(reservation);\n    saveReservationsToStorage();\n\n    // Emitimos un evento para notificar a otros componentes sobre la nueva reserva\n    eventBus.emit('nueva-reserva', reservation);\n    console.log('Reserva guardada correctamente:', reservation);\n    return {\n      success: true,\n      reservation\n    };\n  } catch (error) {\n    console.error('Error al guardar la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar la reserva'\n    };\n  }\n}\n\n// Función para obtener todas las reservas\nexport async function getReservations() {\n  try {\n    // Intentar obtener las reservas del backend\n    try {\n      const response = await apiService.get('/whatsapp/reservas');\n      if (response && response.success && response.reservas) {\n        console.log('Reservas obtenidas del backend:', response.reservas.length);\n\n        // Convertir las reservas del backend al formato que espera el frontend\n        const backendReservations = response.reservas.map(res => ({\n          id: res.id,\n          fullName: res.nombre,\n          mobilePhone: res.telefono,\n          email: res.email || '',\n          date: res.fecha,\n          time: res.hora,\n          peopleCount: res.personas,\n          notes: res.notas || '',\n          status: res.estado === 'confirmada' ? 'confirmed' : res.estado === 'cancelada' ? 'cancelled' : 'pending',\n          createdAt: res.creado_en,\n          source: res.origen || 'web'\n        }));\n\n        // Actualizar el almacenamiento local con las reservas del backend\n        reservationsStore = backendReservations;\n        saveReservationsToStorage();\n        return {\n          success: true,\n          reservations: reservationsStore\n        };\n      }\n    } catch (apiError) {\n      console.warn('No se pudieron obtener reservas del backend, usando almacenamiento local:', apiError);\n    }\n\n    // Si no se pudieron obtener las reservas del backend, usar el almacenamiento local\n    console.log('Usando reservas del almacenamiento local:', reservationsStore.length);\n\n    // Si no hay reservas en el almacenamiento, devolvemos algunos datos de ejemplo\n    if (reservationsStore.length === 0) {\n      // Datos de ejemplo (los mismos que están en AdminReservas.vue)\n      reservationsStore = [{\n        id: '1',\n        fullName: 'Juan Pérez',\n        mobilePhone: '612345678',\n        email: 'juan@example.com',\n        date: '2023-07-15',\n        time: '20:30',\n        peopleCount: 4,\n        status: 'confirmed',\n        notes: 'Mesa cerca de la ventana si es posible',\n        createdAt: '2023-07-10T10:30:00.000Z',\n        source: 'web'\n      }, {\n        id: '2',\n        fullName: 'María López',\n        mobilePhone: '698765432',\n        landlinePhone: '912345678',\n        date: '2023-07-16',\n        time: '21:00',\n        peopleCount: 2,\n        status: 'pending',\n        createdAt: '2023-07-11T15:45:00.000Z',\n        source: 'web'\n      }, {\n        id: 'whatsapp_1743007436180',\n        fullName: 'Cliente de Prueba WhatsApp',\n        mobilePhone: '612345678',\n        email: 'whatsapp@example.com',\n        date: '2025-03-30',\n        time: '20:00',\n        peopleCount: 3,\n        status: 'pending',\n        notes: 'Reserva de prueba desde WhatsApp',\n        createdAt: new Date().toISOString(),\n        source: 'whatsapp'\n      }];\n\n      // Guardar los datos de ejemplo en localStorage\n      saveReservationsToStorage();\n    }\n    return {\n      success: true,\n      reservations: reservationsStore\n    };\n  } catch (error) {\n    console.error('Error al obtener las reservas:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener las reservas'\n    };\n  }\n}\n\n// Función para actualizar el estado de una reserva\nexport async function updateReservationStatus(reservationId, status) {\n  try {\n    // Intentar actualizar en el backend\n    try {\n      const response = await apiService.default.put(`/api/whatsapp/reservas/${reservationId}`, {\n        estado: status === 'confirmed' ? 'confirmada' : status === 'cancelled' ? 'cancelada' : 'pendiente'\n      });\n      if (response.data && response.data.success) {\n        console.log('Estado de reserva actualizado en el backend:', response.data);\n      }\n    } catch (apiError) {\n      console.warn('No se pudo actualizar el estado de la reserva en el backend:', apiError);\n    }\n\n    // Buscar la reserva en nuestro almacenamiento local\n    const reservationIndex = reservationsStore.findIndex(res => res.id === reservationId);\n    if (reservationIndex === -1) {\n      throw new Error('Reserva no encontrada');\n    }\n\n    // Actualizar el estado\n    reservationsStore[reservationIndex].status = status;\n\n    // Guardar los cambios en localStorage\n    saveReservationsToStorage();\n\n    // Emitir evento de actualización\n    eventBus.emit('reserva-actualizada', {\n      id: reservationId,\n      status\n    });\n    return {\n      success: true,\n      message: 'Estado de reserva actualizado correctamente'\n    };\n  } catch (error) {\n    console.error('Error al actualizar el estado de la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al actualizar el estado de la reserva'\n    };\n  }\n}\n\n// Función para guardar una reserva desde WhatsApp\nexport async function saveWhatsAppReservation(whatsappData) {\n  try {\n    console.log('Procesando reserva desde WhatsApp:', whatsappData);\n\n    // Generar un ID único para la reserva si no tiene uno\n    const reservationId = 'whatsapp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n\n    // Verificar si ya existe una reserva con datos similares para evitar duplicados\n    const existingReservation = reservationsStore.find(res => res.source === 'whatsapp' && res.fullName === (whatsappData.nombre || 'Cliente sin nombre') && res.mobilePhone === (whatsappData.telefono || '') && res.date === (whatsappData.fecha || new Date().toISOString().split('T')[0]) && res.time === (whatsappData.hora || '19:00'));\n    if (existingReservation) {\n      console.log('⚠️ Ya existe una reserva similar, evitando duplicado:', existingReservation);\n      return {\n        success: true,\n        reservation: existingReservation,\n        message: 'Reserva existente recuperada'\n      };\n    }\n\n    // Intentar guardar directamente en el backend\n    try {\n      const response = await apiService.post('/whatsapp/reservas', {\n        nombre: whatsappData.nombre || 'Cliente sin nombre',\n        telefono: whatsappData.telefono || '',\n        email: whatsappData.email || '',\n        fecha: whatsappData.fecha || new Date().toISOString().split('T')[0],\n        hora: whatsappData.hora || '19:00',\n        personas: whatsappData.personas || 2,\n        notas: whatsappData.notas || 'Reserva realizada por WhatsApp'\n      });\n      if (response && response.success) {\n        console.log('Reserva de WhatsApp guardada en el backend:', response);\n\n        // Crear objeto de reserva para el frontend\n        const reservation = {\n          id: response.reservationId || reservationId,\n          fullName: whatsappData.nombre || 'Cliente sin nombre',\n          mobilePhone: whatsappData.telefono || '',\n          email: whatsappData.email || '',\n          date: whatsappData.fecha || new Date().toISOString().split('T')[0],\n          time: whatsappData.hora || '19:00',\n          peopleCount: whatsappData.personas || 2,\n          notes: whatsappData.notas || 'Reserva realizada por WhatsApp',\n          status: 'pending',\n          createdAt: new Date().toISOString(),\n          source: 'whatsapp'\n        };\n\n        // Verificar si ya existe en el almacenamiento local (doble verificación)\n        const existingIndex = reservationsStore.findIndex(res => res.id === reservation.id);\n        if (existingIndex !== -1) {\n          console.log('Reserva ya existe en el almacenamiento local, actualizando:', reservation.id);\n          reservationsStore[existingIndex] = reservation;\n        } else {\n          // Añadir a nuestro almacenamiento local\n          reservationsStore.unshift(reservation);\n        }\n        saveReservationsToStorage();\n\n        // Emitir evento de nueva reserva\n        eventBus.emit('nueva-reserva', reservation);\n        return {\n          success: true,\n          reservation\n        };\n      }\n    } catch (apiError) {\n      console.warn('No se pudo guardar la reserva de WhatsApp en el backend:', apiError);\n    }\n\n    // Si no se pudo guardar en el backend, usar el método anterior\n    const reservationData = {\n      fullName: whatsappData.nombre || 'Cliente sin nombre',\n      mobilePhone: whatsappData.telefono || '',\n      email: whatsappData.email || '',\n      reservationDate: whatsappData.fecha || new Date().toISOString().split('T')[0],\n      reservationTime: whatsappData.hora || '19:00',\n      peopleCount: whatsappData.personas || 2,\n      additionalNotes: whatsappData.notas || 'Reserva realizada por WhatsApp',\n      source: 'whatsapp'\n    };\n\n    // Usar la función existente para guardar la reserva\n    return await saveReservation(reservationData);\n  } catch (error) {\n    console.error('Error al guardar reserva desde WhatsApp:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar reserva desde WhatsApp'\n    };\n  }\n}","map":{"version":3,"names":["apiService","eventBus","reservationsStore","savedReservations","localStorage","getItem","JSON","parse","console","log","length","error","saveReservationsToStorage","setItem","stringify","saveReservation","reservationData","reservationId","Date","now","Math","random","toString","substr","reservation","id","fullName","mobilePhone","landlinePhone","email","address","date","reservationDate","time","reservationTime","peopleCount","notes","additionalNotes","status","createdAt","toISOString","source","response","default","post","nombre","telefono","fecha","hora","personas","notas","data","success","apiError","warn","unshift","emit","message","getReservations","get","reservas","backendReservations","map","res","estado","creado_en","origen","reservations","updateReservationStatus","put","reservationIndex","findIndex","Error","saveWhatsAppReservation","whatsappData","existingReservation","find","split","existingIndex"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/reservaService.js"],"sourcesContent":["// Servicio para la gestión de reservas\nimport apiService from './apiService';\nimport eventBus from '../utils/eventBus';\n\n// Almacenamiento local para las reservas (simulando una base de datos)\nlet reservationsStore = [];\n\n// Intentar cargar reservas guardadas en localStorage al iniciar\ntry {\n  const savedReservations = localStorage.getItem('websap_reservations');\n  if (savedReservations) {\n    reservationsStore = JSON.parse(savedReservations);\n    console.log('Reservas cargadas desde localStorage:', reservationsStore.length);\n  }\n} catch (error) {\n  console.error('Error al cargar reservas desde localStorage:', error);\n}\n\n// Función para guardar las reservas en localStorage\nfunction saveReservationsToStorage() {\n  try {\n    localStorage.setItem('websap_reservations', JSON.stringify(reservationsStore));\n  } catch (error) {\n    console.error('Error al guardar reservas en localStorage:', error);\n  }\n}\n\n// Función para guardar una nueva reserva\nexport async function saveReservation(reservationData) {\n  try {\n    // Generar un ID único para la reserva\n    const reservationId = 'res_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    \n    // Crear el objeto de reserva con los datos recibidos\n    const reservation = {\n      id: reservationId,\n      fullName: reservationData.fullName,\n      mobilePhone: reservationData.mobilePhone,\n      landlinePhone: reservationData.landlinePhone || '',\n      email: reservationData.email || '',\n      address: reservationData.address || '',\n      date: reservationData.reservationDate,\n      time: reservationData.reservationTime,\n      peopleCount: reservationData.peopleCount,\n      notes: reservationData.additionalNotes || '',\n      status: 'pending', // Estado inicial: pendiente\n      createdAt: new Date().toISOString(),\n      source: reservationData.source || 'web' // Fuente de la reserva: web o whatsapp\n    };\n    \n    try {\n      // Intentar guardar en el backend\n      const response = await apiService.default.post('/api/whatsapp/reservas', {\n        nombre: reservation.fullName,\n        telefono: reservation.mobilePhone,\n        email: reservation.email,\n        fecha: reservation.date,\n        hora: reservation.time,\n        personas: reservation.peopleCount,\n        notas: reservation.notes\n      });\n      \n      if (response.data && response.data.success) {\n        console.log('Reserva guardada en el backend:', response.data);\n        reservation.id = response.data.reservationId || reservation.id;\n      }\n    } catch (apiError) {\n      console.warn('No se pudo guardar la reserva en el backend, usando almacenamiento local:', apiError);\n    }\n    \n    // Guardar la reserva en nuestro almacenamiento local\n    reservationsStore.unshift(reservation);\n    saveReservationsToStorage();\n    \n    // Emitimos un evento para notificar a otros componentes sobre la nueva reserva\n    eventBus.emit('nueva-reserva', reservation);\n    \n    console.log('Reserva guardada correctamente:', reservation);\n    \n    return {\n      success: true,\n      reservation\n    };\n  } catch (error) {\n    console.error('Error al guardar la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar la reserva'\n    };\n  }\n}\n\n// Función para obtener todas las reservas\nexport async function getReservations() {\n  try {\n    // Intentar obtener las reservas del backend\n    try {\n      const response = await apiService.get('/whatsapp/reservas');\n      \n      if (response && response.success && response.reservas) {\n        console.log('Reservas obtenidas del backend:', response.reservas.length);\n        \n        // Convertir las reservas del backend al formato que espera el frontend\n        const backendReservations = response.reservas.map(res => ({\n          id: res.id,\n          fullName: res.nombre,\n          mobilePhone: res.telefono,\n          email: res.email || '',\n          date: res.fecha,\n          time: res.hora,\n          peopleCount: res.personas,\n          notes: res.notas || '',\n          status: res.estado === 'confirmada' ? 'confirmed' : \n                 res.estado === 'cancelada' ? 'cancelled' : 'pending',\n          createdAt: res.creado_en,\n          source: res.origen || 'web'\n        }));\n        \n        // Actualizar el almacenamiento local con las reservas del backend\n        reservationsStore = backendReservations;\n        saveReservationsToStorage();\n        \n        return {\n          success: true,\n          reservations: reservationsStore\n        };\n      }\n    } catch (apiError) {\n      console.warn('No se pudieron obtener reservas del backend, usando almacenamiento local:', apiError);\n    }\n    \n    // Si no se pudieron obtener las reservas del backend, usar el almacenamiento local\n    console.log('Usando reservas del almacenamiento local:', reservationsStore.length);\n    \n    // Si no hay reservas en el almacenamiento, devolvemos algunos datos de ejemplo\n    if (reservationsStore.length === 0) {\n      // Datos de ejemplo (los mismos que están en AdminReservas.vue)\n      reservationsStore = [\n        {\n          id: '1',\n          fullName: 'Juan Pérez',\n          mobilePhone: '612345678',\n          email: 'juan@example.com',\n          date: '2023-07-15',\n          time: '20:30',\n          peopleCount: 4,\n          status: 'confirmed',\n          notes: 'Mesa cerca de la ventana si es posible',\n          createdAt: '2023-07-10T10:30:00.000Z',\n          source: 'web'\n        },\n        {\n          id: '2',\n          fullName: 'María López',\n          mobilePhone: '698765432',\n          landlinePhone: '912345678',\n          date: '2023-07-16',\n          time: '21:00',\n          peopleCount: 2,\n          status: 'pending',\n          createdAt: '2023-07-11T15:45:00.000Z',\n          source: 'web'\n        },\n        {\n          id: 'whatsapp_1743007436180',\n          fullName: 'Cliente de Prueba WhatsApp',\n          mobilePhone: '612345678',\n          email: 'whatsapp@example.com',\n          date: '2025-03-30',\n          time: '20:00',\n          peopleCount: 3,\n          status: 'pending',\n          notes: 'Reserva de prueba desde WhatsApp',\n          createdAt: new Date().toISOString(),\n          source: 'whatsapp'\n        }\n      ];\n      \n      // Guardar los datos de ejemplo en localStorage\n      saveReservationsToStorage();\n    }\n    \n    return {\n      success: true,\n      reservations: reservationsStore\n    };\n  } catch (error) {\n    console.error('Error al obtener las reservas:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener las reservas'\n    };\n  }\n}\n\n// Función para actualizar el estado de una reserva\nexport async function updateReservationStatus(reservationId, status) {\n  try {\n    // Intentar actualizar en el backend\n    try {\n      const response = await apiService.default.put(`/api/whatsapp/reservas/${reservationId}`, {\n        estado: status === 'confirmed' ? 'confirmada' : \n                status === 'cancelled' ? 'cancelada' : 'pendiente'\n      });\n      \n      if (response.data && response.data.success) {\n        console.log('Estado de reserva actualizado en el backend:', response.data);\n      }\n    } catch (apiError) {\n      console.warn('No se pudo actualizar el estado de la reserva en el backend:', apiError);\n    }\n    \n    // Buscar la reserva en nuestro almacenamiento local\n    const reservationIndex = reservationsStore.findIndex(res => res.id === reservationId);\n    \n    if (reservationIndex === -1) {\n      throw new Error('Reserva no encontrada');\n    }\n    \n    // Actualizar el estado\n    reservationsStore[reservationIndex].status = status;\n    \n    // Guardar los cambios en localStorage\n    saveReservationsToStorage();\n    \n    // Emitir evento de actualización\n    eventBus.emit('reserva-actualizada', {\n      id: reservationId,\n      status\n    });\n    \n    return {\n      success: true,\n      message: 'Estado de reserva actualizado correctamente'\n    };\n  } catch (error) {\n    console.error('Error al actualizar el estado de la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al actualizar el estado de la reserva'\n    };\n  }\n}\n\n// Función para guardar una reserva desde WhatsApp\nexport async function saveWhatsAppReservation(whatsappData) {\n  try {\n    console.log('Procesando reserva desde WhatsApp:', whatsappData);\n    \n    // Generar un ID único para la reserva si no tiene uno\n    const reservationId = 'whatsapp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    \n    // Verificar si ya existe una reserva con datos similares para evitar duplicados\n    const existingReservation = reservationsStore.find(res => \n      res.source === 'whatsapp' && \n      res.fullName === (whatsappData.nombre || 'Cliente sin nombre') &&\n      res.mobilePhone === (whatsappData.telefono || '') &&\n      res.date === (whatsappData.fecha || new Date().toISOString().split('T')[0]) &&\n      res.time === (whatsappData.hora || '19:00')\n    );\n    \n    if (existingReservation) {\n      console.log('⚠️ Ya existe una reserva similar, evitando duplicado:', existingReservation);\n      return {\n        success: true,\n        reservation: existingReservation,\n        message: 'Reserva existente recuperada'\n      };\n    }\n    \n    // Intentar guardar directamente en el backend\n    try {\n      const response = await apiService.post('/whatsapp/reservas', {\n        nombre: whatsappData.nombre || 'Cliente sin nombre',\n        telefono: whatsappData.telefono || '',\n        email: whatsappData.email || '',\n        fecha: whatsappData.fecha || new Date().toISOString().split('T')[0],\n        hora: whatsappData.hora || '19:00',\n        personas: whatsappData.personas || 2,\n        notas: whatsappData.notas || 'Reserva realizada por WhatsApp'\n      });\n      \n      if (response && response.success) {\n        console.log('Reserva de WhatsApp guardada en el backend:', response);\n        \n        // Crear objeto de reserva para el frontend\n        const reservation = {\n          id: response.reservationId || reservationId,\n          fullName: whatsappData.nombre || 'Cliente sin nombre',\n          mobilePhone: whatsappData.telefono || '',\n          email: whatsappData.email || '',\n          date: whatsappData.fecha || new Date().toISOString().split('T')[0],\n          time: whatsappData.hora || '19:00',\n          peopleCount: whatsappData.personas || 2,\n          notes: whatsappData.notas || 'Reserva realizada por WhatsApp',\n          status: 'pending',\n          createdAt: new Date().toISOString(),\n          source: 'whatsapp'\n        };\n        \n        // Verificar si ya existe en el almacenamiento local (doble verificación)\n        const existingIndex = reservationsStore.findIndex(res => res.id === reservation.id);\n        \n        if (existingIndex !== -1) {\n          console.log('Reserva ya existe en el almacenamiento local, actualizando:', reservation.id);\n          reservationsStore[existingIndex] = reservation;\n        } else {\n          // Añadir a nuestro almacenamiento local\n          reservationsStore.unshift(reservation);\n        }\n        \n        saveReservationsToStorage();\n        \n        // Emitir evento de nueva reserva\n        eventBus.emit('nueva-reserva', reservation);\n        \n        return {\n          success: true,\n          reservation\n        };\n      }\n    } catch (apiError) {\n      console.warn('No se pudo guardar la reserva de WhatsApp en el backend:', apiError);\n    }\n    \n    // Si no se pudo guardar en el backend, usar el método anterior\n    const reservationData = {\n      fullName: whatsappData.nombre || 'Cliente sin nombre',\n      mobilePhone: whatsappData.telefono || '',\n      email: whatsappData.email || '',\n      reservationDate: whatsappData.fecha || new Date().toISOString().split('T')[0],\n      reservationTime: whatsappData.hora || '19:00',\n      peopleCount: whatsappData.personas || 2,\n      additionalNotes: whatsappData.notas || 'Reserva realizada por WhatsApp',\n      source: 'whatsapp'\n    };\n    \n    // Usar la función existente para guardar la reserva\n    return await saveReservation(reservationData);\n  } catch (error) {\n    console.error('Error al guardar reserva desde WhatsApp:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar reserva desde WhatsApp'\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}