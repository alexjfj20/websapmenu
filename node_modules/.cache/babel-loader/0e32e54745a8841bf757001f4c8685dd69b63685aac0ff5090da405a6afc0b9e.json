{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n// Servicio para la gesti√≥n de reservas\nimport apiService from './apiService';\nimport eventBus from '../utils/eventBus';\n\n// Almacenamiento local para las reservas (simulando una base de datos)\nlet reservationsStore = [];\n\n// Intentar cargar reservas guardadas en localStorage al iniciar\ntry {\n  const savedReservations = localStorage.getItem('websap_reservations');\n  if (savedReservations) {\n    reservationsStore = JSON.parse(savedReservations);\n    console.log('Reservas cargadas desde localStorage:', reservationsStore.length);\n  }\n} catch (error) {\n  console.error('Error al cargar reservas desde localStorage:', error);\n}\n\n// Funci√≥n para guardar las reservas en localStorage\nfunction saveReservationsToStorage() {\n  try {\n    localStorage.setItem('websap_reservations', JSON.stringify(reservationsStore));\n  } catch (error) {\n    console.error('Error al guardar reservas en localStorage:', error);\n  }\n}\n\n// Funci√≥n para guardar una nueva reserva\nexport async function saveReservation(reservationData) {\n  try {\n    // Asegurarse de que el token est√© configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n\n    // Generar un ID √∫nico para la reserva\n    const reservationId = 'res_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n\n    // Crear el objeto de reserva con los datos recibidos\n    const reservation = {\n      id: reservationId,\n      fullName: reservationData.fullName,\n      mobilePhone: reservationData.mobilePhone,\n      landlinePhone: reservationData.landlinePhone || '',\n      email: reservationData.email || '',\n      address: reservationData.address || '',\n      date: reservationData.reservationDate,\n      time: reservationData.reservationTime,\n      peopleCount: reservationData.peopleCount,\n      notes: reservationData.additionalNotes || '',\n      status: 'pending',\n      // Estado inicial: pendiente\n      createdAt: new Date().toISOString(),\n      source: reservationData.source || 'web' // Fuente de la reserva: web o whatsapp\n    };\n    try {\n      // Intentar guardar en el backend\n      const response = await apiService.post('/whatsapp/reservas', {\n        nombre: reservation.fullName,\n        telefono: reservation.mobilePhone,\n        email: reservation.email,\n        fecha: reservation.date,\n        hora: reservation.time,\n        personas: reservation.peopleCount,\n        notas: reservation.notes,\n        created_by: reservationData.created_by || localStorage.getItem('userId') || null,\n        usuario_id: reservationData.usuario_id || (localStorage.getItem('userType') === 'user' ? localStorage.getItem('userId') : null)\n      });\n      if (response.data && response.data.success) {\n        console.log('Reserva guardada en el backend:', response.data);\n        reservation.id = response.data.reservationId || reservation.id;\n      }\n    } catch (apiError) {\n      console.warn('No se pudo guardar la reserva en el backend, usando almacenamiento local:', apiError);\n    }\n\n    // Guardar la reserva en nuestro almacenamiento local\n    reservationsStore.unshift(reservation);\n    saveReservationsToStorage();\n\n    // Emitimos un evento para notificar a otros componentes sobre la nueva reserva\n    eventBus.emit('nueva-reserva', reservation);\n    console.log('Reserva guardada correctamente:', reservation);\n    return {\n      success: true,\n      reservation\n    };\n  } catch (error) {\n    console.error('Error al guardar la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar la reserva'\n    };\n  }\n}\n\n// Funci√≥n para obtener todas las reservas\nexport async function getReservations() {\n  try {\n    // Asegurarse de que el token est√© configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n\n    // Intentar obtener reservas desde el backend\n    try {\n      const response = await apiService.get('/whatsapp/reservas');\n      if (response && response.success && Array.isArray(response.reservas)) {\n        console.log('‚úÖ Reservas obtenidas desde el backend:', response.reservas.length);\n\n        // Convertir las reservas del backend al formato que espera el frontend\n        const backendReservations = response.reservas.map(res => ({\n          id: res.id,\n          fullName: res.nombre,\n          mobilePhone: res.telefono,\n          email: res.email || '',\n          date: formatDateToDDMMYYYY(res.fecha),\n          time: res.hora,\n          peopleCount: res.personas,\n          notes: res.notas || '',\n          status: res.estado === 'confirmada' ? 'confirmed' : res.estado === 'cancelada' ? 'cancelled' : 'pending',\n          createdAt: res.creado_en,\n          source: res.origen || 'web'\n        }));\n\n        // Actualizar el almacenamiento local con las reservas del backend\n        reservationsStore = backendReservations;\n        saveReservationsToStorage();\n        return {\n          success: true,\n          reservations: reservationsStore\n        };\n      }\n    } catch (error) {\n      console.warn('Error al obtener reservas desde el backend, usando datos locales:', error);\n    }\n\n    // Si no se pudieron obtener del backend o hubo un error, usar los datos locales\n    console.log('üìã Usando datos de reservas locales:', reservationsStore.length);\n\n    // Formatear las fechas de las reservas locales\n    const formattedReservations = reservationsStore.map(res => ({\n      ...res,\n      date: formatDateToDDMMYYYY(res.date)\n    }));\n\n    // Si no hay reservas en el almacenamiento, devolvemos algunos datos de ejemplo\n    if (formattedReservations.length === 0) {\n      // Datos de ejemplo (los mismos que est√°n en AdminReservas.vue)\n      formattedReservations.push({\n        id: '1',\n        fullName: 'Juan P√©rez',\n        mobilePhone: '612345678',\n        email: 'juan@example.com',\n        date: '15/07/2023',\n        time: '20:30',\n        peopleCount: 4,\n        status: 'confirmed',\n        notes: 'Mesa cerca de la ventana si es posible',\n        createdAt: '2023-07-10T10:30:00.000Z',\n        source: 'web'\n      }, {\n        id: '2',\n        fullName: 'Mar√≠a L√≥pez',\n        mobilePhone: '698765432',\n        landlinePhone: '912345678',\n        date: '16/07/2023',\n        time: '21:00',\n        peopleCount: 2,\n        status: 'pending',\n        createdAt: '2023-07-11T15:45:00.000Z',\n        source: 'web'\n      }, {\n        id: 'whatsapp_1743007436180',\n        fullName: 'Cliente de Prueba WhatsApp',\n        mobilePhone: '612345678',\n        email: 'whatsapp@example.com',\n        date: '30/03/2025',\n        time: '20:00',\n        peopleCount: 3,\n        status: 'pending',\n        notes: 'Reserva de prueba desde WhatsApp',\n        createdAt: new Date().toISOString(),\n        source: 'whatsapp'\n      });\n\n      // Guardar los datos de ejemplo en localStorage\n      reservationsStore = formattedReservations;\n      saveReservationsToStorage();\n    }\n    return {\n      success: true,\n      reservations: formattedReservations\n    };\n  } catch (error) {\n    console.error('‚ùå Error al obtener las reservas:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener las reservas'\n    };\n  }\n}\n\n// Funci√≥n para actualizar el estado de una reserva\nexport async function updateReservationStatus(reservationId, status) {\n  try {\n    // Intentar actualizar en el backend\n    try {\n      const response = await apiService.put(`/whatsapp/reservas/${reservationId}`, {\n        estado: status === 'confirmed' ? 'confirmada' : status === 'cancelled' ? 'cancelada' : 'pendiente'\n      });\n      if (response.data && response.data.success) {\n        console.log('Estado de reserva actualizado en el backend:', response.data);\n      }\n    } catch (apiError) {\n      console.warn('No se pudo actualizar el estado de la reserva en el backend:', apiError);\n    }\n\n    // Buscar la reserva en nuestro almacenamiento local\n    const reservationIndex = reservationsStore.findIndex(res => res.id === reservationId);\n    if (reservationIndex === -1) {\n      throw new Error('Reserva no encontrada');\n    }\n\n    // Actualizar el estado\n    reservationsStore[reservationIndex].status = status;\n\n    // Guardar los cambios en localStorage\n    saveReservationsToStorage();\n\n    // Emitir evento de actualizaci√≥n\n    eventBus.emit('reserva-actualizada', {\n      id: reservationId,\n      status\n    });\n    return {\n      success: true,\n      message: 'Estado de reserva actualizado correctamente'\n    };\n  } catch (error) {\n    console.error('Error al actualizar el estado de la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al actualizar el estado de la reserva'\n    };\n  }\n}\n\n// Funci√≥n para guardar una reserva desde WhatsApp\nexport async function saveWhatsAppReservation(reserva) {\n  console.log(\"Procesando reserva desde WhatsApp:\", reserva);\n\n  // Asegurarse de que el token est√© configurado en apiService\n  const token = localStorage.getItem('token');\n  if (token) {\n    apiService.setToken(token);\n  }\n\n  // Asegurar que los nuevos campos est√©n presentes en la reserva\n  const reservaCompleta = {\n    ...reserva,\n    created_by: reserva.created_by || localStorage.getItem('userId') || null,\n    usuario_id: reserva.usuario_id || (localStorage.getItem('userType') === 'user' ? localStorage.getItem('userId') : null)\n  };\n  try {\n    const response = await apiService.post('/whatsapp/reservas', reservaCompleta);\n\n    // Crear un objeto de reserva completo para devolver al frontend\n    const reservationObject = {\n      id: response.reservationId || Date.now().toString(),\n      fullName: reservaCompleta.nombre,\n      mobilePhone: reservaCompleta.telefono,\n      email: reservaCompleta.email || '',\n      date: formatDateToDDMMYYYY(reservaCompleta.fecha),\n      time: reservaCompleta.hora,\n      peopleCount: reservaCompleta.personas || 2,\n      notes: reservaCompleta.notas || '',\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n      source: 'whatsapp',\n      created_by: reservaCompleta.created_by,\n      usuario_id: reservaCompleta.usuario_id\n    };\n    return {\n      success: true,\n      reservation: reservationObject,\n      message: 'Reserva guardada correctamente'\n    };\n  } catch (error) {\n    console.warn('‚ö†Ô∏è No se pudo guardar la reserva en el backend, pero se guard√≥ localmente:', error);\n\n    // Guardar en IndexedDB como respaldo\n    await saveReservaLocally(reservaCompleta);\n    return {\n      status: 'local',\n      success: true,\n      reservation: {\n        id: Date.now().toString(),\n        fullName: reservaCompleta.nombre,\n        mobilePhone: reservaCompleta.telefono,\n        email: reservaCompleta.email || '',\n        date: formatDateToDDMMYYYY(reservaCompleta.fecha),\n        time: reservaCompleta.hora,\n        peopleCount: reservaCompleta.personas || 2,\n        notes: reservaCompleta.notas || '',\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n        source: 'whatsapp',\n        created_by: reservaCompleta.created_by,\n        usuario_id: reservaCompleta.usuario_id\n      },\n      message: 'Reserva guardada localmente debido a un error de conexi√≥n'\n    };\n  }\n}\n\n// Funci√≥n para guardar una reserva localmente cuando falla el backend\nasync function saveReservaLocally(reserva) {\n  try {\n    // A√±adir la reserva al almacenamiento local\n    const localReserva = {\n      id: 'local_' + Date.now(),\n      fullName: reserva.nombre || reserva.fullName,\n      mobilePhone: reserva.telefono || reserva.mobilePhone,\n      email: reserva.email || '',\n      date: formatDateToDDMMYYYY(reserva.fecha || reserva.date),\n      time: reserva.hora || reserva.time,\n      peopleCount: reserva.personas || reserva.peopleCount,\n      notes: reserva.notas || reserva.notes || '',\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n      source: 'whatsapp',\n      created_by: reserva.created_by || localStorage.getItem('userId') || null,\n      usuario_id: reserva.usuario_id || (localStorage.getItem('userType') === 'user' ? localStorage.getItem('userId') : null),\n      pendingSave: true // Marcar para sincronizar cuando haya conexi√≥n\n    };\n\n    // A√±adir al store y guardar\n    reservationsStore.unshift(localReserva);\n    saveReservationsToStorage();\n\n    // Emitir evento de nueva reserva\n    eventBus.emit('nueva-reserva', localReserva);\n    return localReserva;\n  } catch (error) {\n    console.error('Error al guardar reserva localmente:', error);\n    throw error;\n  }\n}\n\n/**\n * Elimina una reserva espec√≠fica\n * @param {string} reservationId - ID de la reserva a eliminar\n * @returns {Promise<Object>} - Resultado de la operaci√≥n\n */\nexport async function deleteReservation(reservationId) {\n  try {\n    // Intentar eliminar en el backend primero\n    try {\n      const response = await apiService.delete(`/reservas/${reservationId}`);\n      console.log('Reserva eliminada en el backend:', response);\n    } catch (apiError) {\n      console.warn('No se pudo eliminar la reserva en el backend:', apiError);\n      // Continuamos con la eliminaci√≥n local aunque falle el backend\n    }\n\n    // Eliminar de nuestro almacenamiento local\n    const index = reservationsStore.findIndex(r => r.id === reservationId);\n    if (index !== -1) {\n      reservationsStore.splice(index, 1);\n      saveReservationsToStorage();\n\n      // Emitir evento de actualizaci√≥n\n      eventBus.emit('reserva-eliminada', {\n        id: reservationId\n      });\n      return {\n        success: true,\n        message: 'Reserva eliminada correctamente'\n      };\n    } else {\n      return {\n        success: false,\n        error: 'No se encontr√≥ la reserva especificada'\n      };\n    }\n  } catch (error) {\n    console.error('Error al eliminar reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al eliminar la reserva'\n    };\n  }\n}\n\n/**\n * Verifica si una reserva tiene m√°s de X d√≠as de antig√ºedad\n * @param {Object} reservation - Reserva a verificar\n * @param {number} days - N√∫mero de d√≠as para considerar antigua\n * @returns {boolean} - true si la reserva es m√°s antigua que los d√≠as especificados\n */\nexport function isReservationOlderThan(reservation, days = 30) {\n  if (!reservation || !reservation.date) return false;\n  const reservationDate = new Date(reservation.date);\n  const today = new Date();\n\n  // Calcular la diferencia en milisegundos\n  const diffTime = today - reservationDate;\n  // Convertir a d√≠as\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  return diffDays > days;\n}\n\n// Funci√≥n para formatear una fecha al formato DD/MM/YYYY\nfunction formatDateToDDMMYYYY(dateString) {\n  if (!dateString) return '';\n  try {\n    // Caso espec√≠fico para el formato problem√°tico: \"29T05:00:00.000Z/05/2025\"\n    if (dateString.includes('T') && dateString.includes('/')) {\n      const parts = dateString.split('/');\n      if (parts.length === 3) {\n        const day = parts[0].split('T')[0];\n        return `${day}/${parts[1]}/${parts[2]}`;\n      }\n    }\n\n    // Formato ISO: \"2025-05-29\"\n    if (dateString.includes('-')) {\n      const parts = dateString.split('-');\n      if (parts.length === 3) {\n        return `${parts[2]}/${parts[1]}/${parts[0]}`;\n      }\n    }\n\n    // Si ya est√° en formato DD/MM/YYYY, devolverlo tal cual\n    if (dateString.includes('/') && !dateString.includes('T')) {\n      return dateString;\n    }\n\n    // Intentar parsear como objeto Date\n    const date = new Date(dateString);\n    if (!isNaN(date.getTime())) {\n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    }\n    return dateString;\n  } catch (error) {\n    console.error('Error al formatear fecha:', error);\n    return dateString;\n  }\n}","map":{"version":3,"names":["apiService","eventBus","reservationsStore","savedReservations","localStorage","getItem","JSON","parse","console","log","length","error","saveReservationsToStorage","setItem","stringify","saveReservation","reservationData","token","setToken","reservationId","Date","now","Math","random","toString","substr","reservation","id","fullName","mobilePhone","landlinePhone","email","address","date","reservationDate","time","reservationTime","peopleCount","notes","additionalNotes","status","createdAt","toISOString","source","response","post","nombre","telefono","fecha","hora","personas","notas","created_by","usuario_id","data","success","apiError","warn","unshift","emit","message","getReservations","get","Array","isArray","reservas","backendReservations","map","res","formatDateToDDMMYYYY","estado","creado_en","origen","reservations","formattedReservations","push","updateReservationStatus","put","reservationIndex","findIndex","Error","saveWhatsAppReservation","reserva","reservaCompleta","reservationObject","saveReservaLocally","localReserva","pendingSave","deleteReservation","delete","index","r","splice","isReservationOlderThan","days","today","diffTime","diffDays","ceil","dateString","includes","parts","split","day","isNaN","getTime","getDate","padStart","month","getMonth","year","getFullYear"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/reservaService.js"],"sourcesContent":["// Servicio para la gesti√≥n de reservas\nimport apiService from './apiService';\nimport eventBus from '../utils/eventBus';\n\n// Almacenamiento local para las reservas (simulando una base de datos)\nlet reservationsStore = [];\n\n// Intentar cargar reservas guardadas en localStorage al iniciar\ntry {\n  const savedReservations = localStorage.getItem('websap_reservations');\n  if (savedReservations) {\n    reservationsStore = JSON.parse(savedReservations);\n    console.log('Reservas cargadas desde localStorage:', reservationsStore.length);\n  }\n} catch (error) {\n  console.error('Error al cargar reservas desde localStorage:', error);\n}\n\n// Funci√≥n para guardar las reservas en localStorage\nfunction saveReservationsToStorage() {\n  try {\n    localStorage.setItem('websap_reservations', JSON.stringify(reservationsStore));\n  } catch (error) {\n    console.error('Error al guardar reservas en localStorage:', error);\n  }\n}\n\n// Funci√≥n para guardar una nueva reserva\nexport async function saveReservation(reservationData) {\n  try {\n    // Asegurarse de que el token est√© configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    \n    // Generar un ID √∫nico para la reserva\n    const reservationId = 'res_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    \n    // Crear el objeto de reserva con los datos recibidos\n    const reservation = {\n      id: reservationId,\n      fullName: reservationData.fullName,\n      mobilePhone: reservationData.mobilePhone,\n      landlinePhone: reservationData.landlinePhone || '',\n      email: reservationData.email || '',\n      address: reservationData.address || '',\n      date: reservationData.reservationDate,\n      time: reservationData.reservationTime,\n      peopleCount: reservationData.peopleCount,\n      notes: reservationData.additionalNotes || '',\n      status: 'pending', // Estado inicial: pendiente\n      createdAt: new Date().toISOString(),\n      source: reservationData.source || 'web' // Fuente de la reserva: web o whatsapp\n    };\n    \n    try {\n      // Intentar guardar en el backend\n      const response = await apiService.post('/whatsapp/reservas', {\n        nombre: reservation.fullName,\n        telefono: reservation.mobilePhone,\n        email: reservation.email,\n        fecha: reservation.date,\n        hora: reservation.time,\n        personas: reservation.peopleCount,\n        notas: reservation.notes,\n        created_by: reservationData.created_by || localStorage.getItem('userId') || null,\n        usuario_id: reservationData.usuario_id || (localStorage.getItem('userType') === 'user' ? localStorage.getItem('userId') : null)\n      });\n      \n      if (response.data && response.data.success) {\n        console.log('Reserva guardada en el backend:', response.data);\n        reservation.id = response.data.reservationId || reservation.id;\n      }\n    } catch (apiError) {\n      console.warn('No se pudo guardar la reserva en el backend, usando almacenamiento local:', apiError);\n    }\n    \n    // Guardar la reserva en nuestro almacenamiento local\n    reservationsStore.unshift(reservation);\n    saveReservationsToStorage();\n    \n    // Emitimos un evento para notificar a otros componentes sobre la nueva reserva\n    eventBus.emit('nueva-reserva', reservation);\n    \n    console.log('Reserva guardada correctamente:', reservation);\n    \n    return {\n      success: true,\n      reservation\n    };\n  } catch (error) {\n    console.error('Error al guardar la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar la reserva'\n    };\n  }\n}\n\n// Funci√≥n para obtener todas las reservas\nexport async function getReservations() {\n  try {\n    // Asegurarse de que el token est√© configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    \n    // Intentar obtener reservas desde el backend\n    try {\n      const response = await apiService.get('/whatsapp/reservas');\n      \n      if (response && response.success && Array.isArray(response.reservas)) {\n        console.log('‚úÖ Reservas obtenidas desde el backend:', response.reservas.length);\n        \n        // Convertir las reservas del backend al formato que espera el frontend\n        const backendReservations = response.reservas.map(res => ({\n          id: res.id,\n          fullName: res.nombre,\n          mobilePhone: res.telefono,\n          email: res.email || '',\n          date: formatDateToDDMMYYYY(res.fecha),\n          time: res.hora,\n          peopleCount: res.personas,\n          notes: res.notas || '',\n          status: res.estado === 'confirmada' ? 'confirmed' : \n                 res.estado === 'cancelada' ? 'cancelled' : 'pending',\n          createdAt: res.creado_en,\n          source: res.origen || 'web'\n        }));\n        \n        // Actualizar el almacenamiento local con las reservas del backend\n        reservationsStore = backendReservations;\n        saveReservationsToStorage();\n        \n        return {\n          success: true,\n          reservations: reservationsStore\n        };\n      }\n    } catch (error) {\n      console.warn('Error al obtener reservas desde el backend, usando datos locales:', error);\n    }\n    \n    // Si no se pudieron obtener del backend o hubo un error, usar los datos locales\n    console.log('üìã Usando datos de reservas locales:', reservationsStore.length);\n    \n    // Formatear las fechas de las reservas locales\n    const formattedReservations = reservationsStore.map(res => ({\n      ...res,\n      date: formatDateToDDMMYYYY(res.date)\n    }));\n    \n    // Si no hay reservas en el almacenamiento, devolvemos algunos datos de ejemplo\n    if (formattedReservations.length === 0) {\n      // Datos de ejemplo (los mismos que est√°n en AdminReservas.vue)\n      formattedReservations.push(\n        {\n          id: '1',\n          fullName: 'Juan P√©rez',\n          mobilePhone: '612345678',\n          email: 'juan@example.com',\n          date: '15/07/2023',\n          time: '20:30',\n          peopleCount: 4,\n          status: 'confirmed',\n          notes: 'Mesa cerca de la ventana si es posible',\n          createdAt: '2023-07-10T10:30:00.000Z',\n          source: 'web'\n        },\n        {\n          id: '2',\n          fullName: 'Mar√≠a L√≥pez',\n          mobilePhone: '698765432',\n          landlinePhone: '912345678',\n          date: '16/07/2023',\n          time: '21:00',\n          peopleCount: 2,\n          status: 'pending',\n          createdAt: '2023-07-11T15:45:00.000Z',\n          source: 'web'\n        },\n        {\n          id: 'whatsapp_1743007436180',\n          fullName: 'Cliente de Prueba WhatsApp',\n          mobilePhone: '612345678',\n          email: 'whatsapp@example.com',\n          date: '30/03/2025',\n          time: '20:00',\n          peopleCount: 3,\n          status: 'pending',\n          notes: 'Reserva de prueba desde WhatsApp',\n          createdAt: new Date().toISOString(),\n          source: 'whatsapp'\n        }\n      );\n      \n      // Guardar los datos de ejemplo en localStorage\n      reservationsStore = formattedReservations;\n      saveReservationsToStorage();\n    }\n    \n    return {\n      success: true,\n      reservations: formattedReservations\n    };\n  } catch (error) {\n    console.error('‚ùå Error al obtener las reservas:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener las reservas'\n    };\n  }\n}\n\n// Funci√≥n para actualizar el estado de una reserva\nexport async function updateReservationStatus(reservationId, status) {\n  try {\n    // Intentar actualizar en el backend\n    try {\n      const response = await apiService.put(`/whatsapp/reservas/${reservationId}`, {\n        estado: status === 'confirmed' ? 'confirmada' : \n                status === 'cancelled' ? 'cancelada' : 'pendiente'\n      });\n      \n      if (response.data && response.data.success) {\n        console.log('Estado de reserva actualizado en el backend:', response.data);\n      }\n    } catch (apiError) {\n      console.warn('No se pudo actualizar el estado de la reserva en el backend:', apiError);\n    }\n    \n    // Buscar la reserva en nuestro almacenamiento local\n    const reservationIndex = reservationsStore.findIndex(res => res.id === reservationId);\n    \n    if (reservationIndex === -1) {\n      throw new Error('Reserva no encontrada');\n    }\n    \n    // Actualizar el estado\n    reservationsStore[reservationIndex].status = status;\n    \n    // Guardar los cambios en localStorage\n    saveReservationsToStorage();\n    \n    // Emitir evento de actualizaci√≥n\n    eventBus.emit('reserva-actualizada', {\n      id: reservationId,\n      status\n    });\n    \n    return {\n      success: true,\n      message: 'Estado de reserva actualizado correctamente'\n    };\n  } catch (error) {\n    console.error('Error al actualizar el estado de la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al actualizar el estado de la reserva'\n    };\n  }\n}\n\n// Funci√≥n para guardar una reserva desde WhatsApp\nexport async function saveWhatsAppReservation(reserva) {\n  console.log(\"Procesando reserva desde WhatsApp:\", reserva);\n  \n  // Asegurarse de que el token est√© configurado en apiService\n  const token = localStorage.getItem('token');\n  if (token) {\n    apiService.setToken(token);\n  }\n  \n  // Asegurar que los nuevos campos est√©n presentes en la reserva\n  const reservaCompleta = {\n    ...reserva,\n    created_by: reserva.created_by || localStorage.getItem('userId') || null,\n    usuario_id: reserva.usuario_id || (localStorage.getItem('userType') === 'user' ? localStorage.getItem('userId') : null)\n  };\n  \n  try {\n    const response = await apiService.post('/whatsapp/reservas', reservaCompleta);\n    \n    // Crear un objeto de reserva completo para devolver al frontend\n    const reservationObject = {\n      id: response.reservationId || Date.now().toString(),\n      fullName: reservaCompleta.nombre,\n      mobilePhone: reservaCompleta.telefono,\n      email: reservaCompleta.email || '',\n      date: formatDateToDDMMYYYY(reservaCompleta.fecha),\n      time: reservaCompleta.hora,\n      peopleCount: reservaCompleta.personas || 2,\n      notes: reservaCompleta.notas || '',\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n      source: 'whatsapp',\n      created_by: reservaCompleta.created_by,\n      usuario_id: reservaCompleta.usuario_id\n    };\n    \n    return {\n      success: true,\n      reservation: reservationObject,\n      message: 'Reserva guardada correctamente'\n    };\n  } catch (error) {\n    console.warn('‚ö†Ô∏è No se pudo guardar la reserva en el backend, pero se guard√≥ localmente:', error);\n    \n    // Guardar en IndexedDB como respaldo\n    await saveReservaLocally(reservaCompleta);\n    \n    return {\n      status: 'local',\n      success: true,\n      reservation: {\n        id: Date.now().toString(),\n        fullName: reservaCompleta.nombre,\n        mobilePhone: reservaCompleta.telefono,\n        email: reservaCompleta.email || '',\n        date: formatDateToDDMMYYYY(reservaCompleta.fecha),\n        time: reservaCompleta.hora,\n        peopleCount: reservaCompleta.personas || 2,\n        notes: reservaCompleta.notas || '',\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n        source: 'whatsapp',\n        created_by: reservaCompleta.created_by,\n        usuario_id: reservaCompleta.usuario_id\n      },\n      message: 'Reserva guardada localmente debido a un error de conexi√≥n'\n    };\n  }\n}\n\n// Funci√≥n para guardar una reserva localmente cuando falla el backend\nasync function saveReservaLocally(reserva) {\n  try {\n    // A√±adir la reserva al almacenamiento local\n    const localReserva = {\n      id: 'local_' + Date.now(),\n      fullName: reserva.nombre || reserva.fullName,\n      mobilePhone: reserva.telefono || reserva.mobilePhone,\n      email: reserva.email || '',\n      date: formatDateToDDMMYYYY(reserva.fecha || reserva.date),\n      time: reserva.hora || reserva.time,\n      peopleCount: reserva.personas || reserva.peopleCount,\n      notes: reserva.notas || reserva.notes || '',\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n      source: 'whatsapp',\n      created_by: reserva.created_by || localStorage.getItem('userId') || null,\n      usuario_id: reserva.usuario_id || (localStorage.getItem('userType') === 'user' ? localStorage.getItem('userId') : null),\n      pendingSave: true // Marcar para sincronizar cuando haya conexi√≥n\n    };\n    \n    // A√±adir al store y guardar\n    reservationsStore.unshift(localReserva);\n    saveReservationsToStorage();\n    \n    // Emitir evento de nueva reserva\n    eventBus.emit('nueva-reserva', localReserva);\n    \n    return localReserva;\n  } catch (error) {\n    console.error('Error al guardar reserva localmente:', error);\n    throw error;\n  }\n}\n\n/**\n * Elimina una reserva espec√≠fica\n * @param {string} reservationId - ID de la reserva a eliminar\n * @returns {Promise<Object>} - Resultado de la operaci√≥n\n */\nexport async function deleteReservation(reservationId) {\n  try {\n    // Intentar eliminar en el backend primero\n    try {\n      const response = await apiService.delete(`/reservas/${reservationId}`);\n      console.log('Reserva eliminada en el backend:', response);\n    } catch (apiError) {\n      console.warn('No se pudo eliminar la reserva en el backend:', apiError);\n      // Continuamos con la eliminaci√≥n local aunque falle el backend\n    }\n    \n    // Eliminar de nuestro almacenamiento local\n    const index = reservationsStore.findIndex(r => r.id === reservationId);\n    if (index !== -1) {\n      reservationsStore.splice(index, 1);\n      saveReservationsToStorage();\n      \n      // Emitir evento de actualizaci√≥n\n      eventBus.emit('reserva-eliminada', { id: reservationId });\n      \n      return {\n        success: true,\n        message: 'Reserva eliminada correctamente'\n      };\n    } else {\n      return {\n        success: false,\n        error: 'No se encontr√≥ la reserva especificada'\n      };\n    }\n  } catch (error) {\n    console.error('Error al eliminar reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al eliminar la reserva'\n    };\n  }\n}\n\n/**\n * Verifica si una reserva tiene m√°s de X d√≠as de antig√ºedad\n * @param {Object} reservation - Reserva a verificar\n * @param {number} days - N√∫mero de d√≠as para considerar antigua\n * @returns {boolean} - true si la reserva es m√°s antigua que los d√≠as especificados\n */\nexport function isReservationOlderThan(reservation, days = 30) {\n  if (!reservation || !reservation.date) return false;\n  \n  const reservationDate = new Date(reservation.date);\n  const today = new Date();\n  \n  // Calcular la diferencia en milisegundos\n  const diffTime = today - reservationDate;\n  // Convertir a d√≠as\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  \n  return diffDays > days;\n}\n\n// Funci√≥n para formatear una fecha al formato DD/MM/YYYY\nfunction formatDateToDDMMYYYY(dateString) {\n  if (!dateString) return '';\n  \n  try {\n    // Caso espec√≠fico para el formato problem√°tico: \"29T05:00:00.000Z/05/2025\"\n    if (dateString.includes('T') && dateString.includes('/')) {\n      const parts = dateString.split('/');\n      if (parts.length === 3) {\n        const day = parts[0].split('T')[0];\n        return `${day}/${parts[1]}/${parts[2]}`;\n      }\n    }\n    \n    // Formato ISO: \"2025-05-29\"\n    if (dateString.includes('-')) {\n      const parts = dateString.split('-');\n      if (parts.length === 3) {\n        return `${parts[2]}/${parts[1]}/${parts[0]}`;\n      }\n    }\n    \n    // Si ya est√° en formato DD/MM/YYYY, devolverlo tal cual\n    if (dateString.includes('/') && !dateString.includes('T')) {\n      return dateString;\n    }\n    \n    // Intentar parsear como objeto Date\n    const date = new Date(dateString);\n    if (!isNaN(date.getTime())) {\n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    }\n    \n    return dateString;\n  } catch (error) {\n    console.error('Error al formatear fecha:', error);\n    return dateString;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}