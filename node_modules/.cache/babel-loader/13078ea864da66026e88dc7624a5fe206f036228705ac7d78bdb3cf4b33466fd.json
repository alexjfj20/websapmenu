{"ast":null,"code":"import { createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache) {\n  return _createCommentVNode(\" ... \");\n}","map":{"version":3,"names":["_createCommentVNode"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\components\\MenuComponent.vue"],"sourcesContent":["<template>\r\n  <!-- ... -->\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted } from 'vue';\r\nimport { saveMenu } from '../services/menuService';\r\nimport { formatShareLinkMessage } from '../utils/messageFormatter';\r\nimport SalesChartComponent from './SalesChartComponent.vue';\r\nimport { saveAs } from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\nimport { jsPDF } from 'jspdf';\r\nimport 'jspdf-autotable';\r\nimport { \r\n  getMenuItems, \r\n  saveMenuItems,\r\n  getBusinessInfo, \r\n  saveBusinessInfo as saveBusinessInfoToDB,\r\n  getSoldItems, \r\n  saveSoldItems,\r\n  deleteMenuItemFromDB,\r\n  migrateFromLocalStorage,\r\n  compressImage,\r\n  updateItemAvailability\r\n} from '../services/storageService';\r\nimport { confirm, alert } from '../services/dialogService';\r\nimport { getCurrentUser, hasRole } from '../services/authService';\r\nimport { guardarPlato } from '@/services/indexedDBService';\r\n\r\nexport default {\r\n  name: 'MenuComponent',\r\n  components: {\r\n    SalesChartComponent\r\n  },\r\n  props: {\r\n    viewOnly: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  setup(props) {\r\n    // Estado para información del negocio\r\n    const businessInfo = ref({\r\n      name: '',\r\n      description: '',\r\n      contact: '',\r\n      address: '',\r\n      logo: ''\r\n    });\r\n    const showBusinessForm = ref(false);\r\n\r\n    // Estado para información de pago\r\n    const paymentInfo = ref({\r\n      qrTitle: '',\r\n      qrImage: '',\r\n      nequiNumber: '',\r\n      nequiImage: ''\r\n    });\r\n    const showPaymentForm = ref(false);\r\n\r\n    // Estado para platos del menú\r\n    const newItem = ref({\r\n      name: '',\r\n      description: '',\r\n      price: 0,\r\n      includesDrink: false,\r\n      availableQuantity: 0,\r\n      image: '',\r\n      id: null\r\n    });\r\n    const menuItems = ref([]);\r\n    const showMenuForm = ref(false);\r\n    const isEditing = ref(false);\r\n    const editingIndex = ref(-1);\r\n\r\n    // Estado para ventas e inventario\r\n    const soldItems = ref([]);\r\n    const searchTerm = ref('');\r\n    const sortBy = ref('');\r\n    const categoryFilter = ref('');\r\n    const selectedChartType = ref('bar');\r\n\r\n    // Estado para compartir\r\n    const shareLink = ref('');\r\n    const showCopiedMessage = ref(false);\r\n    \r\n    // Estado para mostrar progreso de migración\r\n    const migrationStatus = ref({\r\n      inProgress: false,\r\n      completed: false,\r\n      message: ''\r\n    });\r\n\r\n    // Estado para errores del gráfico\r\n    const chartError = ref(null);\r\n    \r\n    // Primero, añadir el componente Toast\r\n    const toast = ref({\r\n      show: false,\r\n      message: '',\r\n      type: 'success' // success, error, warning\r\n    });\r\n\r\n    // Manejar errores del gráfico\r\n    const handleChartError = (error) => {\r\n      console.error(\"Error en el gráfico:\", error);\r\n      chartError.value = error;\r\n    };\r\n\r\n    // Estado para mensajes de notificación\r\n    const notification = ref({\r\n      show: false,\r\n      message: '',\r\n      type: 'success', // 'success', 'error'\r\n      timeout: null\r\n    });\r\n\r\n    // Estado para platos especiales\r\n    const newSpecialItem = ref({\r\n      name: '',\r\n      description: '',\r\n      price: 0,\r\n      includesDrink: false,\r\n      availableQuantity: 0,\r\n      image: '',\r\n      id: null\r\n    });\r\n    const specialMenuItems = ref([]);\r\n    const showSpecialMenuForm = ref(false);\r\n    const isEditingSpecial = ref(false);\r\n    const editingSpecialIndex = ref(-1);\r\n\r\n    // Cargar datos guardados\r\n    onMounted(async () => {\r\n      try {\r\n        migrationStatus.value.inProgress = true;\r\n        migrationStatus.value.message = 'Cargando datos...';\r\n        \r\n        const hasLocalData = localStorage.getItem('businessInfo') || \r\n                             localStorage.getItem('menuItems') ||\r\n                             localStorage.getItem('soldItems');\r\n          \r\n        if (hasLocalData) {\r\n          migrationStatus.value.message = 'Migrando datos desde localStorage a IndexedDB...';\r\n          \r\n          const migrationResult = await migrateFromLocalStorage();\r\n          \r\n          if (migrationResult) {\r\n            migrationStatus.value.completed = true;\r\n            migrationStatus.value.message = 'Migración completada exitosamente';\r\n            localStorage.removeItem('businessInfo');\r\n            localStorage.removeItem('menuItems');\r\n            localStorage.removeItem('soldItems');\r\n          } else {\r\n            migrationStatus.value.message = 'Error en la migración de datos';\r\n          }\r\n        }\r\n\r\n        const dbBusinessInfo = await getBusinessInfo();\r\n        if (dbBusinessInfo && dbBusinessInfo.name) {\r\n          businessInfo.value = dbBusinessInfo;\r\n        }\r\n\r\n        const dbMenuItems = await getMenuItems();\r\n        if (dbMenuItems && dbMenuItems.length > 0) {\r\n          // Separar los platos regulares de los especiales\r\n          const regularItems = dbMenuItems.filter(item => !item.isSpecial);\r\n          const specialItems = dbMenuItems.filter(item => item.isSpecial === true);\r\n          \r\n          menuItems.value = regularItems;\r\n          \r\n          if (specialItems.length > 0) {\r\n            specialMenuItems.value = specialItems;\r\n          }\r\n        }\r\n\r\n        const dbSoldItems = await getSoldItems();\r\n        if (dbSoldItems && dbSoldItems.length > 0) {\r\n          soldItems.value = dbSoldItems;\r\n        }\r\n        \r\n        setTimeout(() => {\r\n          migrationStatus.value.inProgress = false;\r\n        }, 1500);\r\n      } catch (error) {\r\n        console.error('Error al cargar datos:', error);\r\n        migrationStatus.value.message = 'Error al cargar datos: ' + error.message;\r\n        setTimeout(() => {\r\n          migrationStatus.value.inProgress = false;\r\n        }, 3000);\r\n      }\r\n    });\r\n\r\n    // Métodos para información del negocio\r\n    const toggleBusinessForm = () => {\r\n      showBusinessForm.value = !showBusinessForm.value;\r\n    };\r\n\r\n    const onLogoChange = async (event) => {\r\n      const file = event.target.files[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n          const compressedLogo = await compressImage(e.target.result);\r\n          businessInfo.value.logo = compressedLogo;\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n    };\r\n\r\n    const saveBusinessInfo = async () => {\r\n      try {\r\n        if (notification.value.timeout) {\r\n          clearTimeout(notification.value.timeout);\r\n        }\r\n        \r\n        await saveBusinessInfoToDB(businessInfo.value);\r\n        \r\n        notification.value = {\r\n          show: true,\r\n          message: 'Información del negocio guardada con éxito!',\r\n          type: 'success',\r\n          timeout: setTimeout(() => {\r\n            notification.value.show = false;\r\n          }, 3000)\r\n        };\r\n      } catch (error) {\r\n        console.error('Error al guardar información del negocio:', error);\r\n        \r\n        notification.value = {\r\n          show: true,\r\n          message: 'Error al guardar la información. Por favor, intenta nuevamente.',\r\n          type: 'error',\r\n          timeout: setTimeout(() => {\r\n            notification.value.show = false;\r\n          }, 3000)\r\n        };\r\n      }\r\n    };\r\n\r\n    const clearBusinessForm = async () => {\r\n      const confirmed = await confirm('¿Estás seguro de querer limpiar el formulario?');\r\n      if (confirmed) {\r\n        businessInfo.value = {\r\n          name: '',\r\n          description: '',\r\n          contact: '',\r\n          address: '',\r\n          logo: ''\r\n        };\r\n      }\r\n    };\r\n\r\n    // Métodos para información de pago\r\n    const togglePaymentForm = () => {\r\n      showPaymentForm.value = !showPaymentForm.value;\r\n    };\r\n\r\n    const onQRImageChange = async (event) => {\r\n      const file = event.target.files[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n          const compressedImage = await compressImage(e.target.result);\r\n          paymentInfo.value.qrImage = compressedImage;\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n    };\r\n\r\n    const onNequiImageChange = async (event) => {\r\n      const file = event.target.files[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n          const compressedImage = await compressImage(e.target.result);\r\n          paymentInfo.value.nequiImage = compressedImage;\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n    };\r\n\r\n    const savePaymentInfo = async () => {\r\n      try {\r\n        if (notification.value.timeout) {\r\n          clearTimeout(notification.value.timeout);\r\n        }\r\n        \r\n        if (!businessInfo.value.paymentInfo) {\r\n          businessInfo.value.paymentInfo = {};\r\n        }\r\n        \r\n        businessInfo.value.paymentInfo.qrTitle = paymentInfo.value.qrTitle;\r\n        businessInfo.value.paymentInfo.qrImage = paymentInfo.value.qrImage;\r\n        businessInfo.value.paymentInfo.nequiNumber = paymentInfo.value.nequiNumber;\r\n        businessInfo.value.paymentInfo.nequiImage = paymentInfo.value.nequiImage;\r\n        \r\n        await saveBusinessInfoToDB(businessInfo.value);\r\n        \r\n        // Sincronizar con el backend\r\n        try {\r\n          // Importar dinámicamente para evitar dependencias circulares\r\n          const { syncBusinessInfoWithBackend } = await import('../services/menuService');\r\n          await syncBusinessInfoWithBackend(businessInfo.value);\r\n          console.log('Información de pago sincronizada con el backend');\r\n        } catch (syncError) {\r\n          console.error('Error al sincronizar con el backend:', syncError);\r\n          // No mostrar error al usuario, solo registrar en consola\r\n        }\r\n        \r\n        notification.value = {\r\n          show: true,\r\n          message: 'Información de pago guardada con éxito!',\r\n          type: 'success',\r\n          timeout: setTimeout(() => {\r\n            notification.value.show = false;\r\n          }, 3000)\r\n        };\r\n      } catch (error) {\r\n        console.error('Error al guardar información de pago:', error);\r\n        \r\n        notification.value = {\r\n          show: true,\r\n          message: 'Error al guardar la información de pago. Por favor, intenta nuevamente.',\r\n          type: 'error',\r\n          timeout: setTimeout(() => {\r\n            notification.value.show = false;\r\n          }, 3000)\r\n        };\r\n      }\r\n    };\r\n\r\n    const clearPaymentForm = async () => {\r\n      const confirmed = await confirm('¿Estás seguro de querer limpiar la información de pago?');\r\n      if (confirmed) {\r\n        paymentInfo.value = {\r\n          qrTitle: '',\r\n          qrImage: '',\r\n          nequiNumber: '',\r\n          nequiImage: ''\r\n        };\r\n      }\r\n    };\r\n\r\n    // Métodos para platos del menú\r\n    const toggleMenuForm = () => {\r\n      showMenuForm.value = !showMenuForm.value;\r\n      if (!showMenuForm.value) {\r\n        clearMenuForm();\r\n      }\r\n    };\r\n\r\n    const onImageChange = async (event) => {\r\n      const file = event.target.files[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n          const compressedImage = await compressImage(e.target.result);\r\n          newItem.value.image = compressedImage;\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n    };\r\n\r\n    const saveMenuItem = async () => {\r\n      try {\r\n        // Validaciones iniciales\r\n        if (!newItem.value.name || !newItem.value.price) {\r\n          showNotification('El nombre y el precio son obligatorios', 'error');\r\n          return;\r\n        }\r\n\r\n        if (newItem.value.availableQuantity < 0) {\r\n          showNotification('La cantidad disponible no puede ser negativa', 'error');\r\n          return;\r\n        }\r\n\r\n        // Generar ID si no existe\r\n        if (!newItem.value.id) {\r\n          newItem.value.id = Date.now() + Math.random().toString(36).substring(2, 10);\r\n        }\r\n\r\n        try {\r\n          console.log('📝 Datos del plato antes de guardar:', newItem.value);\r\n          \r\n          // Guardar en la base de datos\r\n          const savedPlato = await guardarPlato(newItem.value);\r\n          console.log('✅ Plato guardado correctamente:', savedPlato);\r\n          \r\n          if (isEditing.value) {\r\n            // Actualizar el plato existente en la lista\r\n            const index = menuItems.value.findIndex(item => item.id === savedPlato.id);\r\n            if (index !== -1) {\r\n              menuItems.value[index] = { ...savedPlato };\r\n              showNotification('Plato actualizado exitosamente', 'success');\r\n            }\r\n          } else {\r\n            // Agregar el nuevo plato a la lista\r\n            menuItems.value.push({ ...savedPlato });\r\n            showNotification('Plato creado exitosamente', 'success');\r\n          }\r\n\r\n          // Guardar la lista completa\r\n          await saveMenuItems(menuItems.value);\r\n          \r\n          // Limpiar el formulario\r\n          clearMenuForm();\r\n          \r\n        } catch (error) {\r\n          console.error('❌ Error al guardar en la base de datos:', error);\r\n          showNotification(`Error al guardar el plato: ${error.message || 'Intente nuevamente'}`, 'error');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error general en saveMenuItem:', error);\r\n        showNotification(`Error inesperado: ${error.message || 'Intente nuevamente'}`, 'error');\r\n      }\r\n    };\r\n\r\n    const clearMenuForm = () => {\r\n      newItem.value = {\r\n        name: '',\r\n        description: '',\r\n        price: 0,\r\n        includesDrink: false,\r\n        availableQuantity: 0,\r\n        image: '',\r\n        id: null\r\n      };\r\n      isEditing.value = false;\r\n      editingIndex.value = -1;\r\n    };\r\n\r\n    const editMenuItem = (index) => {\r\n      newItem.value = { ...menuItems.value[index] };\r\n      isEditing.value = true;\r\n      editingIndex.value = index;\r\n      showMenuForm.value = true;\r\n    };\r\n\r\n    const deleteMenuItem = async (index) => {\r\n      try {\r\n        const item = menuItems.value[index];\r\n        \r\n        if (!item) {\r\n          console.error('Error: Elemento del menú no encontrado en el índice', index);\r\n          await alert('Error: No se encontró el elemento a eliminar');\r\n          return;\r\n        }\r\n        \r\n        // Confirmar eliminación\r\n        if (!confirm(`¿Estás seguro de que deseas eliminar \"${item.name || 'este plato'}\" del menú?`)) {\r\n          return;\r\n        }\r\n        \r\n        // Eliminar del backend MySQL directamente\r\n        try {\r\n          console.log(`Eliminando plato con ID: ${item.id} del servidor MySQL`);\r\n          const response = await fetch(`http://localhost:3000/direct-delete?id=${encodeURIComponent(item.id)}`, {\r\n            method: 'GET',\r\n            headers: {\r\n              'Cache-Control': 'no-cache'\r\n            }\r\n          });\r\n          \r\n          const result = await response.json();\r\n          console.log('Resultado de la eliminación directa:', result);\r\n          \r\n          if (!result.success) {\r\n            console.error('Error al eliminar plato del servidor:', result.message);\r\n            alert(`Error al eliminar plato: ${result.message}`);\r\n          }\r\n        } catch (serverError) {\r\n          console.error('Error al comunicarse con el servidor:', serverError);\r\n        }\r\n        \r\n        // Eliminar de IndexedDB\r\n        if (item.id) {\r\n          try {\r\n            console.log(`Llamando a deleteMenuItemFromDB para ID: ${item.id}`);\r\n            const deleteResult = await deleteMenuItemFromDB(item.id);\r\n            console.log(`Resultado de la eliminación de IndexedDB: ${deleteResult}`);\r\n          } catch (deleteError) {\r\n            console.error('Error al eliminar item del almacén local:', deleteError);\r\n          }\r\n        }\r\n        \r\n        // Eliminar de la lista local\r\n        menuItems.value.splice(index, 1);\r\n        \r\n        // Mostrar notificación de éxito\r\n        showNotification('Plato eliminado correctamente', 'success');\r\n        \r\n      } catch (error) {\r\n        console.error('Error al eliminar elemento del menú:', error);\r\n        showNotification('Error al eliminar el plato', 'error');\r\n      }\r\n    };\r\n\r\n    const sellMenuItem = async (index) => {\r\n      try {\r\n        const item = menuItems.value[index];\r\n        \r\n        // Validar disponibilidad\r\n        if (!item.availableQuantity || item.availableQuantity <= 0) {\r\n          showNotification('Este plato está agotado', 'error');\r\n          return;\r\n        }\r\n\r\n        const confirmed = await confirm(\r\n          `¿Desea vender una unidad de \"${item.name}\"?\\nDisponibles: ${item.availableQuantity}`\r\n        );\r\n\r\n        if (confirmed) {\r\n          try {\r\n            const newQuantity = item.availableQuantity - 1;\r\n            \r\n            // Actualizar en la base de datos\r\n            await updateItemAvailability(item.id, newQuantity);\r\n            \r\n            // Actualizar en el estado local\r\n            item.availableQuantity = newQuantity;\r\n            \r\n            // Registrar la venta\r\n            const currentDate = new Date().toISOString();\r\n            const soldItem = soldItems.value.find(sold => sold.name === item.name);\r\n            \r\n            if (soldItem) {\r\n              soldItem.quantity += 1;\r\n              soldItem.date = currentDate;\r\n            } else {\r\n              soldItems.value.push({\r\n                name: item.name,\r\n                quantity: 1,\r\n                price: item.price,\r\n                includesDrink: item.includesDrink,\r\n                date: currentDate\r\n              });\r\n            }\r\n            \r\n            // Guardar items vendidos\r\n            await saveSoldItems(soldItems.value);\r\n            \r\n            showNotification(`Se ha vendido una unidad de ${item.name}`, 'success');\r\n            \r\n            if (newQuantity <= 5) {\r\n              showNotification(`¡Atención! Quedan solo ${newQuantity} unidades de ${item.name}`, 'warning');\r\n            }\r\n          } catch (error) {\r\n            console.error('Error al procesar la venta:', error);\r\n            showNotification('Error al procesar la venta. Por favor, intente nuevamente.', 'error');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al procesar la venta:', error);\r\n        showNotification('Error al procesar la venta. Por favor, intente nuevamente.', 'error');\r\n      }\r\n    };\r\n\r\n    // Métodos para platos especiales\r\n    const toggleSpecialMenuForm = () => {\r\n      showSpecialMenuForm.value = !showSpecialMenuForm.value;\r\n      if (!showSpecialMenuForm.value) {\r\n        clearSpecialMenuForm();\r\n      }\r\n    };\r\n\r\n    const onSpecialImageChange = async (event) => {\r\n      const file = event.target.files[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n          const compressedImage = await compressImage(e.target.result);\r\n          newSpecialItem.value.image = compressedImage;\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n    };\r\n\r\n    const saveSpecialMenuItem = async () => {\r\n      try {\r\n        if (!newSpecialItem.value.name || !newSpecialItem.value.price) {\r\n          showNotification('El nombre y el precio son obligatorios', 'error');\r\n          return;\r\n        }\r\n        \r\n        if (!newSpecialItem.value.id) {\r\n          newSpecialItem.value.id = Date.now() + Math.random().toString(36).substring(2, 10);\r\n        }\r\n        \r\n        // Marcar como plato especial\r\n        newSpecialItem.value.isSpecial = true;\r\n        \r\n        try {\r\n          console.log('📝 Datos del plato especial antes de guardar:', newSpecialItem.value);\r\n          \r\n          // Guardar en la base de datos\r\n          const savedPlato = await guardarPlato(newSpecialItem.value);\r\n          console.log('✅ Plato especial guardado correctamente:', savedPlato);\r\n          \r\n          if (isEditingSpecial.value) {\r\n            // Actualizar el plato existente en la lista\r\n            const index = specialMenuItems.value.findIndex(item => item.id === savedPlato.id);\r\n            if (index !== -1) {\r\n              specialMenuItems.value[index] = { ...savedPlato };\r\n              showNotification('Plato especial actualizado exitosamente', 'success');\r\n            }\r\n            isEditingSpecial.value = false;\r\n            editingSpecialIndex.value = -1;\r\n          } else {\r\n            const existingItem = specialMenuItems.value.find(item => \r\n              item.name.toLowerCase() === savedPlato.name.toLowerCase()\r\n            );\r\n            \r\n            if (existingItem) {\r\n              const confirmed = await confirm(\r\n                `Ya existe un plato especial llamado \"${savedPlato.name}\". ¿Desea actualizarlo?`,\r\n                { title: 'Actualizar plato especial existente' }\r\n              );\r\n              \r\n              if (confirmed) {\r\n                const index = specialMenuItems.value.findIndex(item => item.id === existingItem.id);\r\n                if (index !== -1) {\r\n                  // Conservar el ID original pero actualizar los demás datos\r\n                  const updatedPlato = {\r\n                    ...savedPlato,\r\n                    id: existingItem.id\r\n                  };\r\n                  \r\n                  // Actualizar en la base de datos\r\n                  await guardarPlato(updatedPlato);\r\n                  \r\n                  // Actualizar en la lista local\r\n                  specialMenuItems.value[index] = { ...updatedPlato };\r\n                  showNotification('Plato especial actualizado exitosamente', 'success');\r\n                }\r\n              } else {\r\n                return;\r\n              }\r\n            } else {\r\n              // Agregar el nuevo plato a la lista\r\n              specialMenuItems.value.push({ ...savedPlato });\r\n              showNotification('Plato especial creado exitosamente', 'success');\r\n            }\r\n          }\r\n          \r\n          // Guardar todos los elementos\r\n          await saveMenuItems([...menuItems.value, ...specialMenuItems.value]);\r\n          \r\n          // Limpiar el formulario\r\n          clearSpecialMenuForm();\r\n        } catch (error) {\r\n          console.error('❌ Error al guardar plato especial:', error);\r\n          showNotification(`Error al guardar el plato especial: ${error.message || 'Intente nuevamente'}`, 'error');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error general en saveSpecialMenuItem:', error);\r\n        showNotification(`Error inesperado: ${error.message || 'Intente nuevamente'}`, 'error');\r\n      }\r\n    };\r\n\r\n    const clearSpecialMenuForm = () => {\r\n      newSpecialItem.value = {\r\n        name: '',\r\n        description: '',\r\n        price: 0,\r\n        includesDrink: false,\r\n        availableQuantity: 0,\r\n        image: '',\r\n        id: null\r\n      };\r\n      isEditingSpecial.value = false;\r\n      editingSpecialIndex.value = -1;\r\n    };\r\n\r\n    const editSpecialMenuItem = (index) => {\r\n      newSpecialItem.value = { ...specialMenuItems.value[index] };\r\n      isEditingSpecial.value = true;\r\n      editingSpecialIndex.value = index;\r\n      showSpecialMenuForm.value = true;\r\n    };\r\n\r\n    const deleteSpecialMenuItem = async (index) => {\r\n      try {\r\n        const item = specialMenuItems.value[index];\r\n        \r\n        if (!item) {\r\n          console.error('Error: Elemento del menú especial no encontrado en el índice', index);\r\n          await alert('Error: No se encontró el elemento a eliminar');\r\n          return;\r\n        }\r\n        \r\n        // Confirmar eliminación\r\n        if (!confirm(`¿Estás seguro de que deseas eliminar \"${item.name || 'este plato'}\" del menú especial?`)) {\r\n          return;\r\n        }\r\n        \r\n        // Eliminar del backend MySQL directamente\r\n        try {\r\n          console.log(`Eliminando plato con ID: ${item.id} del servidor MySQL`);\r\n          const response = await fetch(`http://localhost:3000/direct-delete?id=${encodeURIComponent(item.id)}`, {\r\n            method: 'GET',\r\n            headers: {\r\n              'Cache-Control': 'no-cache'\r\n            }\r\n          });\r\n          \r\n          const result = await response.json();\r\n          console.log('Resultado de la eliminación directa:', result);\r\n          \r\n          if (!result.success) {\r\n            console.error('Error al eliminar plato del servidor:', result.message);\r\n            alert(`Error al eliminar plato: ${result.message}`);\r\n          }\r\n        } catch (serverError) {\r\n          console.error('Error al comunicarse con el servidor:', serverError);\r\n        }\r\n        \r\n        // Eliminar de IndexedDB\r\n        if (item.id) {\r\n          try {\r\n            console.log(`Llamando a deleteMenuItemFromDB para ID: ${item.id}`);\r\n            const deleteResult = await deleteMenuItemFromDB(item.id);\r\n            console.log(`Resultado de la eliminación de IndexedDB: ${deleteResult}`);\r\n          } catch (deleteError) {\r\n            console.error('Error al eliminar item del almacén local:', deleteError);\r\n          }\r\n        }\r\n        \r\n        // Eliminar de la lista local\r\n        specialMenuItems.value.splice(index, 1);\r\n        \r\n        // Mostrar notificación de éxito\r\n        showNotification('Plato eliminado correctamente', 'success');\r\n        \r\n      } catch (error) {\r\n        console.error('Error al eliminar elemento del menú especial:', error);\r\n        showNotification('Error al eliminar el plato', 'error');\r\n      }\r\n    };\r\n\r\n    const sellSpecialMenuItem = async (index) => {\r\n      try {\r\n        const item = specialMenuItems.value[index];\r\n        \r\n        // Validar disponibilidad\r\n        if (!item.availableQuantity || item.availableQuantity <= 0) {\r\n          showNotification('Este plato especial está agotado', 'error');\r\n          return;\r\n        }\r\n\r\n        const confirmed = await confirm(\r\n          `¿Desea vender una unidad de \"${item.name}\"?\\nDisponibles: ${item.availableQuantity}`\r\n        );\r\n\r\n        if (confirmed) {\r\n          try {\r\n            const newQuantity = item.availableQuantity - 1;\r\n            \r\n            // Actualizar en la base de datos\r\n            await updateItemAvailability(item.id, newQuantity);\r\n            \r\n            // Actualizar en el estado local\r\n            item.availableQuantity = newQuantity;\r\n            \r\n            // Registrar la venta\r\n            const currentDate = new Date().toISOString();\r\n            const soldItem = soldItems.value.find(sold => sold.name === item.name);\r\n            \r\n            if (soldItem) {\r\n              soldItem.quantity += 1;\r\n              soldItem.date = currentDate;\r\n            } else {\r\n              soldItems.value.push({\r\n                name: item.name,\r\n                quantity: 1,\r\n                price: item.price,\r\n                includesDrink: item.includesDrink,\r\n                date: currentDate\r\n              });\r\n            }\r\n            \r\n            // Guardar items vendidos\r\n            await saveSoldItems(soldItems.value);\r\n            \r\n            showNotification(`Se ha vendido una unidad de ${item.name}`, 'success');\r\n            \r\n            if (newQuantity <= 5) {\r\n              showNotification(`¡Atención! Quedan solo ${newQuantity} unidades de ${item.name}`, 'warning');\r\n            }\r\n          } catch (error) {\r\n            console.error('Error al procesar la venta:', error);\r\n            showNotification('Error al procesar la venta. Por favor, intente nuevamente.', 'error');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al procesar la venta:', error);\r\n        showNotification('Error al procesar la venta. Por favor, intente nuevamente.', 'error');\r\n      }\r\n    };\r\n\r\n    // Métodos para compartir\r\n    const shareByWhatsApp = async () => {\r\n      try {\r\n        await alert('Procesando imágenes para compartir...');\r\n        \r\n        const totalItems = menuItems.value.length + specialMenuItems.value.length;\r\n        if (totalItems > 30) {\r\n          await alert('El menú tiene demasiados elementos. Por favor, seleccione menos platos para compartir.');\r\n          return;\r\n        }\r\n        \r\n        // Combinar platos regulares y especiales\r\n        const itemsToShare = [\r\n          ...menuItems.value.map(item => ({\r\n            ...item,\r\n            isSpecial: false\r\n          })),\r\n          ...specialMenuItems.value.map(item => ({\r\n            ...item,\r\n            isSpecial: true\r\n          }))\r\n        ];\r\n        \r\n        console.log(`Preparando para compartir ${itemsToShare.length} elementos...`);\r\n        console.log('Items regulares:', menuItems.value.length);\r\n        console.log('Items especiales:', specialMenuItems.value.length);\r\n        \r\n        const menuId = await saveMenu(itemsToShare);\r\n        const url = `${window.location.origin}/menu/${menuId}`;\r\n        shareLink.value = url;\r\n        \r\n        const message = formatShareLinkMessage(url, businessInfo.value.name);\r\n        const whatsappUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(message)}`;\r\n        window.open(whatsappUrl, '_blank');\r\n      } catch (error) {\r\n        console.error('Error al compartir por WhatsApp:', error);\r\n        await alert(`Error al compartir el menú: ${error.message || 'Error desconocido'}. Por favor, intenta reducir el tamaño de las imágenes o eliminar algunos ítems.`);\r\n      }\r\n    };\r\n\r\n    const copyLink = async () => {\r\n      try {\r\n        const loadingMessage = 'Procesando imágenes para compartir...';\r\n        showCopiedMessage.value = true;\r\n        \r\n        const totalItems = menuItems.value.length + specialMenuItems.value.length;\r\n        if (totalItems > 30) {\r\n          await alert('El menú tiene demasiados elementos. Por favor, seleccione menos platos para compartir.');\r\n          showCopiedMessage.value = false;\r\n          return;\r\n        }\r\n        \r\n        // Combinar platos regulares y especiales\r\n        const itemsToShare = [\r\n          ...menuItems.value.map(item => ({\r\n            ...item,\r\n            isSpecial: false\r\n          })),\r\n          ...specialMenuItems.value.map(item => ({\r\n            ...item,\r\n            isSpecial: true\r\n          }))\r\n        ];\r\n        \r\n        const menuId = await saveMenu(itemsToShare);\r\n        const url = `${window.location.origin}/menu/${menuId}`;\r\n        shareLink.value = url;\r\n        \r\n        try {\r\n          await navigator.clipboard.writeText(url);\r\n          showCopiedMessage.value = true;\r\n          setTimeout(() => {\r\n            showCopiedMessage.value = false;\r\n          }, 3000);\r\n        } catch (clipboardError) {\r\n          console.error('Error al copiar al portapapeles:', clipboardError);\r\n          await alert('No se pudo copiar automáticamente. Por favor, copia manualmente este enlace: ' + url);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al generar enlace para compartir:', error);\r\n        showCopiedMessage.value = false;\r\n        await alert(`Error al generar el enlace: ${error.message || 'Error desconocido'}. Por favor, intenta reducir el tamaño de las imágenes o eliminar algunos ítems.`);\r\n      }\r\n    };\r\n\r\n    // Computados\r\n    const totalSales = computed(() => {\r\n      return soldItems.value.reduce((total, item) => {\r\n        return total + (item.quantity * item.price);\r\n      }, 0);\r\n    });\r\n\r\n    const formatPrice = (price) => {\r\n      if (isNaN(Number(price))) return '0,00';\r\n      const fixed = Number(price).toFixed(2);\r\n      const [intPart, decPart] = fixed.split('.');\r\n      const formattedIntPart = intPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\r\n      return `${formattedIntPart},${decPart}`;\r\n    };\r\n    \r\n    const formatDate = (dateStr) => {\r\n      if (!dateStr) return 'N/A';\r\n      const date = new Date(dateStr);\r\n      if (isNaN(date.getTime())) return 'Fecha inválida';\r\n      return new Intl.DateTimeFormat('es-ES', {\r\n        day: '2-digit',\r\n        month: '2-digit',\r\n        year: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      }).format(date);\r\n    };\r\n\r\n    const filteredSoldItems = computed(() => {\r\n      let items = soldItems.value;\r\n      if (!Array.isArray(items)) {\r\n        console.warn('soldItems no es un array. Devolviendo array vacío.');\r\n        return [];\r\n      }\r\n      if (searchTerm.value) {\r\n        const term = searchTerm.value.toLowerCase().trim();\r\n        \r\n        if (Array.isArray(items)) {\r\n          return items.filter(item => {\r\n            if (item && typeof item === 'object') {\r\n              const name = String(item.name || '').toLowerCase();\r\n              return name.includes(term);\r\n            }\r\n            return false;\r\n          });\r\n        } else {\r\n          console.warn('filterInventoryItems recibió un valor no array:', items);\r\n          return [];\r\n        }\r\n      }\r\n      if (categoryFilter.value) {\r\n        if (categoryFilter.value === 'drinks') {\r\n          items = items.filter(item => Boolean(item && item.includesDrink));\r\n        } else if (categoryFilter.value === 'nodrinks') {\r\n          items = items.filter(item => item && item.includesDrink === false);\r\n        }\r\n      }\r\n      if (sortBy.value) {\r\n        items = [...items];\r\n        switch (sortBy.value) {\r\n          case 'name':\r\n            items.sort((a, b) => {\r\n              if (!a || !a.name) return 1;\r\n              if (!b || !b.name) return -1;\r\n              return a.name.localeCompare(b.name);\r\n            });\r\n            break;\r\n          case 'quantity-desc':\r\n            items.sort((a, b) => {\r\n              const qtyA = (a && typeof a.quantity === 'number') ? a.quantity : 0;\r\n              const qtyB = (b && typeof b.quantity === 'number') ? b.quantity : 0;\r\n              return qtyB - qtyA;\r\n            });\r\n            break;\r\n          case 'quantity-asc':\r\n            items.sort((a, b) => {\r\n              const qtyA = (a && typeof a.quantity === 'number') ? a.quantity : 0;\r\n              const qtyB = (b && typeof b.quantity === 'number') ? b.quantity : 0;\r\n              return qtyA - qtyB;\r\n            });\r\n            break;\r\n          case 'price-desc':\r\n            items.sort((a, b) => {\r\n              const priceA = (a && typeof a.price === 'number') ? a.price : 0;\r\n              const priceB = (b && typeof b.price === 'number') ? b.price : 0;\r\n              return priceB - priceA;\r\n            });\r\n            break;\r\n          case 'price-asc':\r\n            items.sort((a, b) => {\r\n              const priceA = (a && typeof a.price === 'number') ? a.price : 0;\r\n              const priceB = (b && typeof b.price === 'number') ? b.price : 0;\r\n              return priceA - priceB;\r\n            });\r\n            break;\r\n          case 'date-desc':\r\n            items.sort((a, b) => {\r\n              const dateA = a && a.date ? new Date(a.date) : new Date(0);\r\n              const dateB = b && b.date ? new Date(b.date) : new Date(0);\r\n              return dateB - dateA;\r\n            });\r\n            break;\r\n          case 'date-asc':\r\n            items.sort((a, b) => {\r\n              const dateA = a && a.date ? new Date(a.date) : new Date(0);\r\n              const dateB = b && b.date ? new Date(b.date) : new Date(0);\r\n              return dateA - dateB;\r\n            });\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      return items;\r\n    });\r\n\r\n    const exportToExcel = () => {\r\n      // Crear un array con los datos a exportar\r\n      const data = [\r\n        ['Nombre del Plato', 'Categoría', 'Cantidad Vendida', 'Precio por Unidad', 'Fecha de Venta', 'Subtotal'],\r\n        ...filteredSoldItems.value.map(item => [\r\n          item.name,\r\n          item.includesDrink ? 'Con refresco' : 'Sin refresco',\r\n          item.quantity,\r\n          `$${formatPrice(item.price)}`,\r\n          formatDate(item.date),\r\n          `$${formatPrice(item.quantity * item.price)}`\r\n        ]),\r\n        ['', '', '', '', 'Total', `$${formatPrice(totalSales.value)}`]\r\n      ];\r\n\r\n      // Crear un libro de Excel y una hoja de cálculo\r\n      const ws = XLSX.utils.aoa_to_sheet(data);\r\n      const wb = XLSX.utils.book_new();\r\n      XLSX.utils.book_append_sheet(wb, ws, 'Ventas');\r\n\r\n      // Generar el archivo Excel y descargarlo\r\n      const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n      const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n      saveAs(blob, `ventas_${new Date().toLocaleDateString()}.xlsx`);\r\n    };\r\n\r\n    const exportToPDF = () => {\r\n      // Crear un nuevo documento PDF\r\n      const doc = new jsPDF();\r\n      \r\n      // Añadir título\r\n      doc.setFontSize(18);\r\n      doc.text('Reporte de Ventas', 14, 22);\r\n      doc.setFontSize(11);\r\n      doc.text(`Fecha: ${new Date().toLocaleDateString()}`, 14, 32);\r\n\r\n      // Crear la tabla con los datos\r\n      const tableData = filteredSoldItems.value.map(item => [\r\n        item.name,\r\n        item.includesDrink ? 'Con refresco' : 'Sin refresco',\r\n        item.quantity,\r\n        `$${formatPrice(item.price)}`,\r\n        formatDate(item.date),\r\n        `$${formatPrice(item.quantity * item.price)}`\r\n      ]);\r\n\r\n      // Añadir la tabla\r\n      doc.autoTable({\r\n        head: [['Nombre del Plato', 'Categoría', 'Cantidad Vendida', 'Precio por Unidad', 'Fecha de Venta', 'Subtotal']],\r\n        body: tableData,\r\n        foot: [['', '', '', '', 'Total', `$${formatPrice(totalSales.value)}`]],\r\n        startY: 40,\r\n        theme: 'striped',\r\n        headStyles: { fillColor: [76, 175, 80] },\r\n        footStyles: { fillColor: [240, 240, 240], textColor: [0, 0, 0], fontStyle: 'bold' }\r\n      });\r\n\r\n      // Guardar el PDF de exportación\r\n      doc.save(`ventas_${new Date().toLocaleDateString()}.pdf`);\r\n    };\r\n\r\n    const removeDuplicates = (array) => {\r\n      return [...new Set(array)];\r\n    };\r\n\r\n    // Función para mostrar notificaciones\r\n    const showNotification = (message, type) => {\r\n      notification.value = {\r\n        show: true,\r\n        message,\r\n        type\r\n      };\r\n      \r\n      setTimeout(() => {\r\n        notification.value.show = false;\r\n      }, 3000); // 3 segundos como acordado\r\n    };\r\n\r\n    const checkAvailabilityToast = async (itemId) => {\r\n      try {\r\n        // Buscar el item en ambos menús\r\n        const item = menuItems.value.find(i => i.id === itemId) || \r\n                    specialMenuItems.value.find(i => i.id === itemId);\r\n        \r\n        if (item) {\r\n          if (item.availableQuantity > 5) {\r\n            showNotification(`Disponible: ${item.availableQuantity} unidades`, 'success');\r\n          } else if (item.availableQuantity > 0) {\r\n            showNotification(`¡Quedan solo ${item.availableQuantity} unidades!`, 'warning');\r\n          } else {\r\n            showNotification('Producto agotado', 'error');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al verificar disponibilidad:', error);\r\n      }\r\n    };\r\n\r\n    // Añadir propiedad isEmployee\r\n    const isEmployee = computed(() => {\r\n      return hasRole('Empleado') && !hasRole('Administrador') && !hasRole('Superadministrador');\r\n    });\r\n\r\n    const filterInventoryItems = computed(() => {\r\n      return (items) => {\r\n        if (!items || !Array.isArray(items)) {\r\n          console.warn('filterInventoryItems recibió un valor no array:', items);\r\n          return [];\r\n        }\r\n        if (searchTerm.value) {\r\n          const term = searchTerm.value.toLowerCase().trim();\r\n          \r\n          items = items.filter(item => {\r\n            if (item && typeof item === 'object') {\r\n              const name = String(item.name || '').toLowerCase();\r\n              return name.includes(term);\r\n            }\r\n            return false;\r\n          });\r\n        }\r\n        if (categoryFilter.value) {\r\n          if (categoryFilter.value === 'drinks') {\r\n            items = items.filter(item => item && item.includesDrink === true);\r\n          } else if (categoryFilter.value === 'nodrinks') {\r\n            items = items.filter(item => item && item.includesDrink === false);\r\n          }\r\n        }\r\n        if (sortBy.value) {\r\n          switch (sortBy.value) {\r\n            case 'name':\r\n              items.sort((a, b) => {\r\n                const nameA = (a && a.name) ? a.name.toLowerCase() : '';\r\n                const nameB = (b && b.name) ? b.name.toLowerCase() : '';\r\n                return nameA.localeCompare(nameB);\r\n              });\r\n              break;\r\n            case 'quantity-desc':\r\n              items.sort((a, b) => {\r\n                const qtyA = (a && typeof a.quantity === 'number') ? a.quantity : 0;\r\n                const qtyB = (b && typeof b.quantity === 'number') ? b.quantity : 0;\r\n                return qtyB - qtyA;\r\n              });\r\n              break;\r\n            case 'quantity-asc':\r\n              items.sort((a, b) => {\r\n                const qtyA = (a && typeof a.quantity === 'number') ? a.quantity : 0;\r\n                const qtyB = (b && typeof b.quantity === 'number') ? b.quantity : 0;\r\n                return qtyA - qtyB;\r\n              });\r\n              break;\r\n            case 'price-desc':\r\n              items.sort((a, b) => {\r\n                const priceA = (a && typeof a.price === 'number') ? a.price : 0;\r\n                const priceB = (b && typeof b.price === 'number') ? b.price : 0;\r\n                return priceB - priceA;\r\n              });\r\n              break;\r\n            case 'price-asc':\r\n              items.sort((a, b) => {\r\n                const priceA = (a && typeof a.price === 'number') ? a.price : 0;\r\n                const priceB = (b && typeof b.price === 'number') ? b.price : 0;\r\n                return priceA - priceB;\r\n              });\r\n              break;\r\n            case 'date-desc':\r\n              items.sort((a, b) => {\r\n                const dateA = a && a.date ? new Date(a.date) : new Date(0);\r\n                const dateB = b && b.date ? new Date(b.date) : new Date(0);\r\n                return dateB - dateA;\r\n              });\r\n              break;\r\n            case 'date-asc':\r\n              items.sort((a, b) => {\r\n                const dateA = a && a.date ? new Date(a.date) : new Date(0);\r\n                const dateB = b && b.date ? new Date(b.date) : new Date(0);\r\n                return dateA - dateB;\r\n              });\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n        return items;\r\n      }\r\n    }\r\n\r\n    return {\r\n      businessInfo,\r\n      showBusinessForm,\r\n      toggleBusinessForm,\r\n      onLogoChange,\r\n      saveBusinessInfo,\r\n      clearBusinessForm,\r\n      paymentInfo,\r\n      showPaymentForm,\r\n      togglePaymentForm,\r\n      onQRImageChange,\r\n      onNequiImageChange,\r\n      savePaymentInfo,\r\n      clearPaymentForm,\r\n      newItem,\r\n      menuItems,\r\n      showMenuForm,\r\n      isEditing,\r\n      toggleMenuForm,\r\n      onImageChange,\r\n      saveMenuItem,\r\n      editMenuItem,\r\n      deleteMenuItem,\r\n      sellMenuItem,\r\n      clearMenuForm,\r\n      soldItems,\r\n      totalSales,\r\n      searchTerm,\r\n      sortBy,\r\n      categoryFilter,\r\n      filteredSoldItems,\r\n      formatPrice,\r\n      selectedChartType,\r\n      exportToExcel,\r\n      exportToPDF,\r\n      shareLink,\r\n      showCopiedMessage,\r\n      shareByWhatsApp,\r\n      copyLink,\r\n      migrationStatus,\r\n      removeDuplicates,\r\n      chartError,\r\n      handleChartError,\r\n      notification,\r\n      formatDate,\r\n      newSpecialItem,\r\n      specialMenuItems,\r\n      showSpecialMenuForm,\r\n      isEditingSpecial,\r\n      editingSpecialIndex,\r\n      toggleSpecialMenuForm,\r\n      onSpecialImageChange,\r\n      saveSpecialMenuItem,\r\n      clearSpecialMenuForm,\r\n      editSpecialMenuItem,\r\n      deleteSpecialMenuItem,\r\n      sellSpecialMenuItem,\r\n      toast,\r\n      showNotification,\r\n      checkAvailabilityToast,\r\n      isEmployee,\r\n      filterInventoryItems\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.menu-container {\r\n  padding: 20px;\r\n}\r\n\r\nsection {\r\n  margin-bottom: 40px;\r\n  padding: 20px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  background-color: #fff;\r\n}\r\n\r\nh2 {\r\n  color: #333;\r\n  font-size: 24px;\r\n  margin-bottom: 20px;\r\n  border-bottom: 2px solid #4CAF50;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n.toggle-button {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 10px 15px;\r\n  margin-bottom: 20px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n}\r\n\r\n.toggle-button:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\nform {\r\n  display: grid;\r\n  gap: 15px;\r\n}\r\n\r\nlabel {\r\n  font-weight: bold;\r\n}\r\n\r\ninput, textarea, select {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-top: 15px;\r\n}\r\n\r\n.save-button {\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 10px 15px;\r\n  cursor: pointer;\r\n  flex: 1;\r\n}\r\n\r\n.save-button:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.clear-button {\r\n  background-color: #dc3545;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 10px 15px;\r\n  cursor: pointer;\r\n  flex: 1;\r\n}\r\n\r\n.clear-button:hover {\r\n  background-color: #c82333;\r\n}\r\n\r\n.business-preview {\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n/* Mejoras a la lista de platos */\r\n.menu-items-list, .menu-special-items-list {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 20px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.menu-item-card {\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  background-color: #f9f9f9;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.menu-item-card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 5px 15px rgba(0,0,0,0.2);\r\n}\r\n\r\n.menu-item-image-container {\r\n  width: 100%;\r\n  height: 200px;\r\n  position: relative;\r\n  overflow: hidden;\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.menu-item-image {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  transition: transform 0.5s ease;\r\n}\r\n\r\n.menu-item-card:hover .menu-item-image {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.no-image-placeholder {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  color: #999;\r\n  font-style: italic;\r\n}\r\n\r\n.menu-item-details {\r\n  padding: 15px;\r\n  flex-grow: 1;\r\n}\r\n\r\n.menu-item-details h3 {\r\n  margin-top: 0;\r\n  color: #333;\r\n  font-size: 18px;\r\n}\r\n\r\n.menu-item-actions {\r\n  display: flex;\r\n  gap: 10px;\r\n  padding: 0 15px 15px;\r\n}\r\n\r\n.edit-button, .sell-button, .delete-button {\r\n  flex: 1;\r\n  padding: 8px 12px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.edit-button {\r\n  background-color: #ffc107;\r\n  color: #212529;\r\n}\r\n\r\n.edit-button:hover {\r\n  background-color: #e0a800;\r\n}\r\n\r\n.sell-button {\r\n  background-color: #28a745;\r\n  color: white;\r\n}\r\n\r\n.sell-button:hover {\r\n  background-color: #218838;\r\n}\r\n\r\n.delete-button {\r\n  background-color: #dc3545;\r\n  color: white;\r\n}\r\n\r\n.delete-button:hover {\r\n  background-color: #c82333;\r\n}\r\n\r\n/* Mejoras a la sección de inventario */\r\n.inventory-section {\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.inventory-controls {\r\n  margin-bottom: 20px;\r\n  display: grid;\r\n  gap: 15px;\r\n  grid-template-columns: 1fr;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .inventory-controls {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n}\r\n\r\n.inventory-search-input {\r\n  width: 100%;\r\n  padding: 10px 15px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);\r\n}\r\n\r\n.inventory-filters, \r\n.inventory-actions {\r\n  display: flex;\r\n  gap: 10px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.inventory-filter {\r\n  flex: 1;\r\n  min-width: 150px;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  background-color: white;\r\n}\r\n\r\n.export-button {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  padding: 10px 15px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.export-button.excel {\r\n  background-color: #1D6F42;\r\n  color: white;\r\n}\r\n\r\n.export-button.excel:hover {\r\n  background-color: #165235;\r\n}\r\n\r\n.export-button.pdf {\r\n  background-color: #F40F02;\r\n  color: white;\r\n}\r\n\r\n.export-button.pdf:hover {\r\n  background-color: #C90C02;\r\n}\r\n\r\n.action-icon {\r\n  font-size: 18px;\r\n}\r\n\r\n.sales-chart-container {\r\n  margin-bottom: 20px;\r\n  background-color: white;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n  min-height: 300px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.empty-chart-message {\r\n  color: #666;\r\n  font-style: italic;\r\n  text-align: center;\r\n  width: 100%;\r\n  padding: 50px 20px;\r\n}\r\n\r\n.sales-chart {\r\n  margin-bottom: 20px;\r\n  background-color: white;\r\n  padding: 15px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.inventory-table {\r\n  overflow-x: auto;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\nth, td {\r\n  padding: 15px;\r\n  text-align: left;\r\n}\r\n\r\nthead {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n}\r\n\r\nthead th {\r\n  font-weight: 600;\r\n}\r\n\r\ntbody tr:hover {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\n.alternate-row {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\ntfoot {\r\n  background-color: #e9e9e9;\r\n  font-weight: bold;\r\n}\r\n\r\ntfoot td {\r\n  padding: 12px 15px;\r\n}\r\n\r\n.share-buttons {\r\n  display: flex;\r\n  gap: 15px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.whatsapp-button, .copy-button {\r\n  flex: 1;\r\n  padding: 12px 15px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.whatsapp-button {\r\n  background-color: #25D366;\r\n  color: white;\r\n}\r\n\r\n.whatsapp-button:hover {\r\n  background-color: #128C7E;\r\n}\r\n\r\n.copy-button {\r\n  background-color: #6c757d;\r\n  color: white;\r\n}\r\n\r\n.copy-button:hover {\r\n  background-color: #5a6268;\r\n}\r\n\r\n.emoji {\r\n  font-size: 1.2em;\r\n  margin-right: 8px;\r\n}\r\n\r\n.copied-message {\r\n  color: #28a745;\r\n  margin-top: 10px;\r\n}\r\n\r\n.share-link {\r\n  margin-top: 15px;\r\n  padding: 10px;\r\n  background-color: #f8f9fa;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  word-break: break-all;\r\n}\r\n\r\n.migration-status {\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 20px;\r\n  background-color: #ffeb3b;\r\n  color: #333;\r\n  padding: 15px 20px;\r\n  border-radius: 6px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\r\n  z-index: 1000;\r\n  max-width: 300px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.migration-status.completed {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n}\r\n\r\n.migration-message {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.loading-spinner {\r\n  display: inline-block;\r\n  width: 18px;\r\n  height: 18px;\r\n  border: 3px solid rgba(0, 0, 0, 0.1);\r\n  border-top-color: #333;\r\n  animation: spin 1s ease-in-out infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  to {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n/* Estilos para notificaciones */\r\n.notification {\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 20px;\r\n  padding: 15px 20px;\r\n  border-radius: 4px;\r\n  color: white;\r\n  font-weight: bold;\r\n  z-index: 1001;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n  min-width: 300px;\r\n  max-width: 500px;\r\n  animation: slide-in 0.3s ease-out;\r\n}\r\n\r\n.notification.success {\r\n  background-color: #4CAF50;\r\n}\r\n\r\n.notification.error {\r\n  background-color: #f44336;\r\n}\r\n\r\n.notification-close {\r\n  background: transparent;\r\n  border: none;\r\n  color: white;\r\n  font-size: 20px;\r\n  margin-left: 15px;\r\n  cursor: pointer;\r\n  padding: 0 5px;\r\n}\r\n\r\n@keyframes slide-in {\r\n  from {\r\n    transform: translateX(100%);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateX(0);\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n/* Estilos del toast */\r\n.toast-notification {\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 20px;\r\n  padding: 15px 20px;\r\n  border-radius: 8px;\r\n  color: white;\r\n  z-index: 1000;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n  animation: fadeIn 0.3s, fadeOut 0.3s 2.7s;\r\n}\r\n\r\n.toast-notification.success {\r\n  background-color: #4CAF50;\r\n}\r\n\r\n.toast-notification.error {\r\n  background-color: #f44336;\r\n}\r\n\r\n.toast-notification.warning {\r\n  background-color: #ff9800;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; transform: translateY(-20px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n\r\n@keyframes fadeOut {\r\n  from { opacity: 1; transform: translateY(0); }\r\n  to { opacity: 0; transform: translateY(-20px); }\r\n}\r\n\r\n/* Estilos del tooltip */\r\n.tooltip-container {\r\n  position: relative;\r\n}\r\n\r\n.tooltip {\r\n  position: absolute;\r\n  bottom: 100%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  padding: 8px 12px;\r\n  background-color: #333;\r\n  color: white;\r\n  border-radius: 6px;\r\n  font-size: 14px;\r\n  white-space: nowrap;\r\n  opacity: 0;\r\n  visibility: hidden;\r\n  transition: opacity 0.3s, visibility 0.3s;\r\n}\r\n\r\n.tooltip::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  border: 6px solid transparent;\r\n  border-top-color: #333;\r\n}\r\n\r\n.tooltip-visible {\r\n  opacity: 1;\r\n  visibility: visible;\r\n}\r\n\r\n.action-button:hover .tooltip {\r\n  opacity: 1;\r\n  visibility: visible;\r\n}\r\n\r\n/* Añadir estilos para botones deshabilitados */\r\n.toggle-button:disabled {\r\n  background-color: #cccccc;\r\n  color: #666666;\r\n  cursor: not-allowed;\r\n  opacity: 0.7;\r\n}\r\n</style>\r\n"],"mappings":";;SACEA,mBAAA,SAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}