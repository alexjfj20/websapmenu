{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport axios from 'axios';\nconst API_URL = 'http://localhost:3000/api';\n\n// Función para guardar token en localStorage\nconst saveToken = token => {\n  localStorage.setItem('token', token);\n};\n\n// Función para obtener token de localStorage\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// Función para eliminar token de localStorage\nconst removeToken = () => {\n  localStorage.removeItem('token');\n};\n\n// Configurar Axios\nconst setupAxiosInterceptors = () => {\n  // Interceptor de solicitudes\n  axios.interceptors.request.use(config => {\n    const token = getToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n\n  // Interceptor de respuestas\n  axios.interceptors.response.use(response => {\n    return response;\n  }, error => {\n    // Si el error es 401, puede ser que el token expiró\n    if (error.response && error.response.status === 401) {\n      removeToken();\n      // Redirigir a la página de login (esto debe ser manejado por el router)\n      if (window.location.pathname !== '/login') {\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  });\n};\n\n// Inicializar interceptores\nsetupAxiosInterceptors();\n\n// Función para iniciar sesión\nconst login = async (email, password) => {\n  console.log(`Intentando iniciar sesión como: ${email}`);\n  try {\n    // Intentar iniciar sesión con el backend\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      // No enviar cookies\n      withCredentials: false\n    });\n    if (response.status === 200 && response.data.success) {\n      // Guardar token\n      saveToken(response.data.data.token);\n\n      // Guardar información del usuario en localStorage (opcional)\n      localStorage.setItem('user', JSON.stringify(response.data.data.user));\n      return {\n        success: true,\n        user: response.data.data.user\n      };\n    } else {\n      throw new Error('Respuesta inesperada del servidor');\n    }\n  } catch (error) {\n    console.error('Error al conectar con el backend, usando usuarios locales:', error);\n\n    // Datos de usuarios locales para desarrollo/pruebas\n    const localUsers = [{\n      id: 1,\n      email: 'superadmin@example.com',\n      password: '123456',\n      nombre: 'Super Administrador',\n      roles: ['Superadministrador']\n    }, {\n      id: 2,\n      email: 'admin@example.com',\n      password: '123456',\n      nombre: 'Administrador',\n      roles: ['Administrador']\n    }, {\n      id: 3,\n      email: 'empleado@example.com',\n      password: '123456',\n      nombre: 'Empleado',\n      roles: ['Empleado']\n    }];\n\n    // Buscar usuario local\n    const user = localUsers.find(u => u.email === email && u.password === password);\n    if (user) {\n      // Crear un token local\n      const token = `local_${btoa(JSON.stringify(user))}`;\n      saveToken(token);\n\n      // Guardar usuario en localStorage\n      localStorage.setItem('user', JSON.stringify({\n        id: user.id,\n        email: user.email,\n        nombre: user.nombre,\n        roles: user.roles\n      }));\n      return {\n        success: true,\n        user: {\n          id: user.id,\n          email: user.email,\n          nombre: user.nombre,\n          roles: user.roles\n        }\n      };\n    }\n\n    // Si no se encontró usuario local\n    throw new Error('Credenciales incorrectas');\n  }\n};\n\n// Función para cerrar sesión\nconst logout = () => {\n  removeToken();\n  localStorage.removeItem('user');\n};\n\n// Función para verificar si el usuario está autenticado\nconst isAuthenticated = () => {\n  const token = getToken();\n  return !!token;\n};\n\n// Función para obtener el usuario actual\nconst getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  return userStr ? JSON.parse(userStr) : null;\n};\n\n// Función para verificar si el usuario tiene un rol específico\nconst hasRole = role => {\n  const user = getCurrentUser();\n  return user && user.roles && user.roles.includes(role);\n};\n\n// Función para verificar si el usuario es administrador\nconst isAdmin = () => {\n  return hasRole('Administrador') || hasRole('Superadministrador');\n};\n\n// Función para verificar si el usuario es superadministrador\nconst isSuperAdmin = () => {\n  return hasRole('Superadministrador');\n};\nexport { login, logout, isAuthenticated, getCurrentUser, hasRole, isAdmin, isSuperAdmin, getToken };","map":{"version":3,"names":["axios","API_URL","saveToken","token","localStorage","setItem","getToken","getItem","removeToken","removeItem","setupAxiosInterceptors","interceptors","request","use","config","headers","Authorization","error","Promise","reject","response","status","window","location","pathname","href","login","email","password","console","log","post","withCredentials","data","success","JSON","stringify","user","Error","localUsers","id","nombre","roles","find","u","btoa","logout","isAuthenticated","getCurrentUser","userStr","parse","hasRole","role","includes","isAdmin","isSuperAdmin"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:3000/api';\r\n\r\n// Función para guardar token en localStorage\r\nconst saveToken = (token) => {\r\n  localStorage.setItem('token', token);\r\n};\r\n\r\n// Función para obtener token de localStorage\r\nconst getToken = () => {\r\n  return localStorage.getItem('token');\r\n};\r\n\r\n// Función para eliminar token de localStorage\r\nconst removeToken = () => {\r\n  localStorage.removeItem('token');\r\n};\r\n\r\n// Configurar Axios\r\nconst setupAxiosInterceptors = () => {\r\n  // Interceptor de solicitudes\r\n  axios.interceptors.request.use(\r\n    (config) => {\r\n      const token = getToken();\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n  \r\n  // Interceptor de respuestas\r\n  axios.interceptors.response.use(\r\n    (response) => {\r\n      return response;\r\n    },\r\n    (error) => {\r\n      // Si el error es 401, puede ser que el token expiró\r\n      if (error.response && error.response.status === 401) {\r\n        removeToken();\r\n        // Redirigir a la página de login (esto debe ser manejado por el router)\r\n        if (window.location.pathname !== '/login') {\r\n          window.location.href = '/login';\r\n        }\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n};\r\n\r\n// Inicializar interceptores\r\nsetupAxiosInterceptors();\r\n\r\n// Función para iniciar sesión\r\nconst login = async (email, password) => {\r\n  console.log(`Intentando iniciar sesión como: ${email}`);\r\n  \r\n  try {\r\n    // Intentar iniciar sesión con el backend\r\n    const response = await axios.post(`${API_URL}/auth/login`, {\r\n      email,\r\n      password\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      // No enviar cookies\r\n      withCredentials: false\r\n    });\r\n    \r\n    if (response.status === 200 && response.data.success) {\r\n      // Guardar token\r\n      saveToken(response.data.data.token);\r\n      \r\n      // Guardar información del usuario en localStorage (opcional)\r\n      localStorage.setItem('user', JSON.stringify(response.data.data.user));\r\n      \r\n      return {\r\n        success: true,\r\n        user: response.data.data.user\r\n      };\r\n    } else {\r\n      throw new Error('Respuesta inesperada del servidor');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al conectar con el backend, usando usuarios locales:', error);\r\n    \r\n    // Datos de usuarios locales para desarrollo/pruebas\r\n    const localUsers = [\r\n      {\r\n        id: 1,\r\n        email: 'superadmin@example.com',\r\n        password: '123456',\r\n        nombre: 'Super Administrador',\r\n        roles: ['Superadministrador']\r\n      },\r\n      {\r\n        id: 2,\r\n        email: 'admin@example.com',\r\n        password: '123456',\r\n        nombre: 'Administrador',\r\n        roles: ['Administrador']\r\n      },\r\n      {\r\n        id: 3,\r\n        email: 'empleado@example.com',\r\n        password: '123456',\r\n        nombre: 'Empleado',\r\n        roles: ['Empleado']\r\n      }\r\n    ];\r\n    \r\n    // Buscar usuario local\r\n    const user = localUsers.find(u => u.email === email && u.password === password);\r\n    \r\n    if (user) {\r\n      // Crear un token local\r\n      const token = `local_${btoa(JSON.stringify(user))}`;\r\n      saveToken(token);\r\n      \r\n      // Guardar usuario en localStorage\r\n      localStorage.setItem('user', JSON.stringify({\r\n        id: user.id,\r\n        email: user.email,\r\n        nombre: user.nombre,\r\n        roles: user.roles\r\n      }));\r\n      \r\n      return {\r\n        success: true,\r\n        user: {\r\n          id: user.id,\r\n          email: user.email,\r\n          nombre: user.nombre,\r\n          roles: user.roles\r\n        }\r\n      };\r\n    }\r\n    \r\n    // Si no se encontró usuario local\r\n    throw new Error('Credenciales incorrectas');\r\n  }\r\n};\r\n\r\n// Función para cerrar sesión\r\nconst logout = () => {\r\n  removeToken();\r\n  localStorage.removeItem('user');\r\n};\r\n\r\n// Función para verificar si el usuario está autenticado\r\nconst isAuthenticated = () => {\r\n  const token = getToken();\r\n  return !!token;\r\n};\r\n\r\n// Función para obtener el usuario actual\r\nconst getCurrentUser = () => {\r\n  const userStr = localStorage.getItem('user');\r\n  return userStr ? JSON.parse(userStr) : null;\r\n};\r\n\r\n// Función para verificar si el usuario tiene un rol específico\r\nconst hasRole = (role) => {\r\n  const user = getCurrentUser();\r\n  return user && user.roles && user.roles.includes(role);\r\n};\r\n\r\n// Función para verificar si el usuario es administrador\r\nconst isAdmin = () => {\r\n  return hasRole('Administrador') || hasRole('Superadministrador');\r\n};\r\n\r\n// Función para verificar si el usuario es superadministrador\r\nconst isSuperAdmin = () => {\r\n  return hasRole('Superadministrador');\r\n};\r\n\r\nexport {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  getCurrentUser,\r\n  hasRole,\r\n  isAdmin,\r\n  isSuperAdmin,\r\n  getToken\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}