{"ast":null,"code":"export default {\n  name: 'PublicMenu',\n  props: {\n    id: {\n      type: String,\n      required: false\n    }\n  },\n  data() {\n    return {\n      menu: null,\n      loading: true,\n      error: null\n    };\n  },\n  computed: {\n    menuId() {\n      // Usar el ID del prop, del parámetro de ruta o de la variable global\n      const fromProps = this.id;\n      const fromRoute = this.$route && this.$route.params ? this.$route.params.id : null;\n      const fromGlobal = window.MENU_PUBLIC_ID;\n      return fromProps || fromRoute || fromGlobal;\n    }\n  },\n  mounted() {\n    this.loadMenu();\n  },\n  methods: {\n    async loadMenu() {\n      if (!this.menuId) return;\n      try {\n        this.loading = true;\n        this.error = null;\n\n        // Usamos un formato adecuado para asegurar que recibimos JSON\n        const response = await fetch(`/api/menus/${this.menuId}`, {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Error ${response.status}: ${response.statusText}`);\n        }\n\n        // Verificar que la respuesta es JSON válido\n        const contentType = response.headers.get('content-type');\n        if (!contentType || !contentType.includes('application/json')) {\n          throw new Error('La respuesta del servidor no es JSON válido');\n        }\n        this.menu = await response.json();\n      } catch (error) {\n        console.error(\"Error al cargar el menú:\", error);\n        this.error = \"No se pudo cargar el menú. Inténtalo de nuevo más tarde.\";\n      } finally {\n        this.loading = false;\n      }\n    },\n    retryLoadMenu() {\n      this.loadMenu();\n    }\n  }\n};","map":{"version":3,"names":["name","props","id","type","String","required","data","menu","loading","error","computed","menuId","fromProps","fromRoute","$route","params","fromGlobal","window","MENU_PUBLIC_ID","mounted","loadMenu","methods","response","fetch","headers","ok","Error","status","statusText","contentType","get","includes","json","console","retryLoadMenu"],"sources":["F:\\Driver google\\VUE.JS-2\\websapmenu\\src\\views\\PublicMenu.vue"],"sourcesContent":["<template>\r\n  <div class=\"public-menu\">\r\n    <h1>Menú Público</h1>\r\n    <!-- Aquí iría el contenido del menú basado en el ID -->\r\n    <div v-if=\"menuId\">\r\n      <p v-if=\"loading\">Cargando menú con ID: {{ menuId }}</p>\r\n      <div v-else-if=\"menu\" class=\"menu-content\">\r\n        <h2>{{ menu.name }}</h2>\r\n        <div v-if=\"error\" class=\"error-message\">\r\n          <p>{{ error }}</p>\r\n          <button @click=\"retryLoadMenu\">Intentar nuevamente</button>\r\n        </div>\r\n        <div v-else>\r\n          <!-- Contenido del menú -->\r\n        </div>\r\n      </div>\r\n      <div v-else-if=\"error\" class=\"error-message\">\r\n        <p>{{ error }}</p>\r\n        <button @click=\"retryLoadMenu\">Intentar nuevamente</button>\r\n      </div>\r\n    </div>\r\n    <div v-else>\r\n      <p>Cargando menú...</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'PublicMenu',\r\n  props: {\r\n    id: {\r\n      type: String,\r\n      required: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      menu: null,\r\n      loading: true,\r\n      error: null\r\n    }\r\n  },  \r\n  computed: {\r\n    menuId() {\r\n      // Usar el ID del prop, del parámetro de ruta o de la variable global\r\n      const fromProps = this.id;\r\n      const fromRoute = this.$route && this.$route.params ? this.$route.params.id : null;\r\n      const fromGlobal = window.MENU_PUBLIC_ID;\r\n      \r\n      return fromProps || fromRoute || fromGlobal;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadMenu();\r\n  },\r\n  methods: {\r\n    async loadMenu() {\r\n      if (!this.menuId) return;\r\n      \r\n      try {\r\n        this.loading = true;\r\n        this.error = null;\r\n        \r\n        // Usamos un formato adecuado para asegurar que recibimos JSON\r\n        const response = await fetch(`/api/menus/${this.menuId}`, {\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          }\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n        }\r\n        \r\n        // Verificar que la respuesta es JSON válido\r\n        const contentType = response.headers.get('content-type');\r\n        if (!contentType || !contentType.includes('application/json')) {\r\n          throw new Error('La respuesta del servidor no es JSON válido');\r\n        }\r\n        \r\n        this.menu = await response.json();\r\n      } catch (error) {\r\n        console.error(\"Error al cargar el menú:\", error);\r\n        this.error = \"No se pudo cargar el menú. Inténtalo de nuevo más tarde.\";\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    \r\n    retryLoadMenu() {\r\n      this.loadMenu();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.public-menu {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.error-message {\r\n  color: #d32f2f;\r\n  background-color: #ffebee;\r\n  padding: 15px;\r\n  border-radius: 4px;\r\n  margin: 10px 0;\r\n}\r\n\r\n.error-message button {\r\n  background-color: #d32f2f;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n}\r\n\r\n.error-message button:hover {\r\n  background-color: #b71c1c;\r\n}\r\n\r\n.menu-content {\r\n  margin-top: 20px;\r\n}\r\n</style>"],"mappings":"AA4BA,eAAe;EACbA,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE;IACLC,EAAE,EAAE;MACFC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,IAAI;MACVC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACT;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,MAAMA,CAAA,EAAG;MACP;MACA,MAAMC,SAAQ,GAAI,IAAI,CAACV,EAAE;MACzB,MAAMW,SAAQ,GAAI,IAAI,CAACC,MAAK,IAAK,IAAI,CAACA,MAAM,CAACC,MAAK,GAAI,IAAI,CAACD,MAAM,CAACC,MAAM,CAACb,EAAC,GAAI,IAAI;MAClF,MAAMc,UAAS,GAAIC,MAAM,CAACC,cAAc;MAExC,OAAON,SAAQ,IAAKC,SAAQ,IAAKG,UAAU;IAC7C;EACF,CAAC;EACDG,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,QAAQ,CAAC,CAAC;EACjB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,QAAQA,CAAA,EAAG;MACf,IAAI,CAAC,IAAI,CAACT,MAAM,EAAE;MAElB,IAAI;QACF,IAAI,CAACH,OAAM,GAAI,IAAI;QACnB,IAAI,CAACC,KAAI,GAAI,IAAI;;QAEjB;QACA,MAAMa,QAAO,GAAI,MAAMC,KAAK,CAAC,cAAc,IAAI,CAACZ,MAAM,EAAE,EAAE;UACxDa,OAAO,EAAE;YACP,QAAQ,EAAE,kBAAkB;YAC5B,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QAEF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,SAASJ,QAAQ,CAACK,MAAM,KAAKL,QAAQ,CAACM,UAAU,EAAE,CAAC;QACrE;;QAEA;QACA,MAAMC,WAAU,GAAIP,QAAQ,CAACE,OAAO,CAACM,GAAG,CAAC,cAAc,CAAC;QACxD,IAAI,CAACD,WAAU,IAAK,CAACA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UAC7D,MAAM,IAAIL,KAAK,CAAC,6CAA6C,CAAC;QAChE;QAEA,IAAI,CAACnB,IAAG,GAAI,MAAMe,QAAQ,CAACU,IAAI,CAAC,CAAC;MACnC,EAAE,OAAOvB,KAAK,EAAE;QACdwB,OAAO,CAACxB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,IAAI,CAACA,KAAI,GAAI,0DAA0D;MACzE,UAAU;QACR,IAAI,CAACD,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAED0B,aAAaA,CAAA,EAAG;MACd,IAAI,CAACd,QAAQ,CAAC,CAAC;IACjB;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}