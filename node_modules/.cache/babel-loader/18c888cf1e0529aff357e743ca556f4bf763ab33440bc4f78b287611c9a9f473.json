{"ast":null,"code":"// Simulador de mensajes de WhatsApp para pruebas\nimport eventBus from './eventBus';\n\n/**\n * Utilidad para simular el envío de reservas desde WhatsApp\n * Esta es una herramienta de desarrollo que permite probar la funcionalidad\n * de recepción de reservas desde WhatsApp sin necesidad de integrar realmente\n * con la API de WhatsApp.\n */\n\n/**\n * Función para simular el envío de una reserva desde WhatsApp\n * @param {Object} customData - Datos personalizados para la reserva\n * @returns {Promise<boolean>} - Resultado de la operación\n */\nexport function simulateWhatsAppReservation(customData = {}) {\n  try {\n    // Datos por defecto para la reserva\n    const defaultData = {\n      nombre: 'Cliente de Prueba WhatsApp',\n      telefono: '612345678',\n      email: 'whatsapp@example.com',\n      fecha: new Date().toISOString().split('T')[0],\n      // Hoy\n      hora: '20:00',\n      personas: 2,\n      notas: 'Reserva realizada desde WhatsApp'\n    };\n\n    // Combinar datos por defecto con datos personalizados\n    const whatsappData = {\n      ...defaultData,\n      ...customData\n    };\n    console.log(' Simulando mensaje de WhatsApp con datos:', whatsappData);\n\n    // Crear un evento con la estructura esperada por el handler\n    const whatsappEvent = {\n      type: 'whatsapp_reservation',\n      reservation: whatsappData,\n      timestamp: Date.now(),\n      id: 'whatsapp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9)\n    };\n\n    // Enviar el evento a través de eventBus (método principal)\n    eventBus.emit('whatsapp_message', whatsappEvent);\n\n    // También notificar que se debe actualizar la lista de reservas\n    setTimeout(() => {\n      eventBus.emit('refresh-reservations');\n    }, 1000);\n    console.log(' Simulación de mensaje de WhatsApp completada');\n    return true;\n  } catch (error) {\n    console.error(' Error al simular mensaje de WhatsApp:', error);\n    return false;\n  }\n}\n\n/**\n * Función para configurar el simulador de WhatsApp en la consola\n * Esta función es necesaria para mantener compatibilidad con el código existente\n */\nexport function setupWhatsAppSimulatorForConsole() {\n  // Esta función ahora solo expone la función de simulación en el objeto window\n  // pero no hace nada más para evitar duplicación de mensajes\n  console.log('Simulador de WhatsApp configurado. Usa window.testWhatsAppReservation() para probar.');\n  return true;\n}\n\n// Exponer la función en window para poder llamarla desde la consola\nwindow.testWhatsAppReservation = simulateWhatsAppReservation;\nexport default {\n  simulateWhatsAppReservation,\n  setupWhatsAppSimulatorForConsole\n};","map":{"version":3,"names":["eventBus","simulateWhatsAppReservation","customData","defaultData","nombre","telefono","email","fecha","Date","toISOString","split","hora","personas","notas","whatsappData","console","log","whatsappEvent","type","reservation","timestamp","now","id","Math","random","toString","substr","emit","setTimeout","error","setupWhatsAppSimulatorForConsole","window","testWhatsAppReservation"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/utils/whatsappSimulator.js"],"sourcesContent":["// Simulador de mensajes de WhatsApp para pruebas\nimport eventBus from './eventBus';\n\n/**\n * Utilidad para simular el envío de reservas desde WhatsApp\n * Esta es una herramienta de desarrollo que permite probar la funcionalidad\n * de recepción de reservas desde WhatsApp sin necesidad de integrar realmente\n * con la API de WhatsApp.\n */\n\n/**\n * Función para simular el envío de una reserva desde WhatsApp\n * @param {Object} customData - Datos personalizados para la reserva\n * @returns {Promise<boolean>} - Resultado de la operación\n */\nexport function simulateWhatsAppReservation(customData = {}) {\n  try {\n    // Datos por defecto para la reserva\n    const defaultData = {\n      nombre: 'Cliente de Prueba WhatsApp',\n      telefono: '612345678',\n      email: 'whatsapp@example.com',\n      fecha: new Date().toISOString().split('T')[0], // Hoy\n      hora: '20:00',\n      personas: 2,\n      notas: 'Reserva realizada desde WhatsApp'\n    };\n\n    // Combinar datos por defecto con datos personalizados\n    const whatsappData = { ...defaultData, ...customData };\n    \n    console.log(' Simulando mensaje de WhatsApp con datos:', whatsappData);\n    \n    // Crear un evento con la estructura esperada por el handler\n    const whatsappEvent = {\n      type: 'whatsapp_reservation',\n      reservation: whatsappData,\n      timestamp: Date.now(),\n      id: 'whatsapp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9)\n    };\n    \n    // Enviar el evento a través de eventBus (método principal)\n    eventBus.emit('whatsapp_message', whatsappEvent);\n    \n    // También notificar que se debe actualizar la lista de reservas\n    setTimeout(() => {\n      eventBus.emit('refresh-reservations');\n    }, 1000);\n    \n    console.log(' Simulación de mensaje de WhatsApp completada');\n    return true;\n  } catch (error) {\n    console.error(' Error al simular mensaje de WhatsApp:', error);\n    return false;\n  }\n}\n\n/**\n * Función para configurar el simulador de WhatsApp en la consola\n * Esta función es necesaria para mantener compatibilidad con el código existente\n */\nexport function setupWhatsAppSimulatorForConsole() {\n  // Esta función ahora solo expone la función de simulación en el objeto window\n  // pero no hace nada más para evitar duplicación de mensajes\n  console.log('Simulador de WhatsApp configurado. Usa window.testWhatsAppReservation() para probar.');\n  return true;\n}\n\n// Exponer la función en window para poder llamarla desde la consola\nwindow.testWhatsAppReservation = simulateWhatsAppReservation;\n\nexport default {\n  simulateWhatsAppReservation,\n  setupWhatsAppSimulatorForConsole\n};\n"],"mappings":"AAAA;AACA,OAAOA,QAAQ,MAAM,YAAY;;AAEjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,2BAA2BA,CAACC,UAAU,GAAG,CAAC,CAAC,EAAE;EAC3D,IAAI;IACF;IACA,MAAMC,WAAW,GAAG;MAClBC,MAAM,EAAE,4BAA4B;MACpCC,QAAQ,EAAE,WAAW;MACrBC,KAAK,EAAE,sBAAsB;MAC7BC,KAAK,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAAE;MAC/CC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC;MACXC,KAAK,EAAE;IACT,CAAC;;IAED;IACA,MAAMC,YAAY,GAAG;MAAE,GAAGX,WAAW;MAAE,GAAGD;IAAW,CAAC;IAEtDa,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEF,YAAY,CAAC;;IAEtE;IACA,MAAMG,aAAa,GAAG;MACpBC,IAAI,EAAE,sBAAsB;MAC5BC,WAAW,EAAEL,YAAY;MACzBM,SAAS,EAAEZ,IAAI,CAACa,GAAG,CAAC,CAAC;MACrBC,EAAE,EAAE,WAAW,GAAGd,IAAI,CAACa,GAAG,CAAC,CAAC,GAAG,GAAG,GAAGE,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC;IAC7E,CAAC;;IAED;IACA1B,QAAQ,CAAC2B,IAAI,CAAC,kBAAkB,EAAEV,aAAa,CAAC;;IAEhD;IACAW,UAAU,CAAC,MAAM;MACf5B,QAAQ,CAAC2B,IAAI,CAAC,sBAAsB,CAAC;IACvC,CAAC,EAAE,IAAI,CAAC;IAERZ,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;IAC5D,OAAO,IAAI;EACb,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,OAAO,KAAK;EACd;AACF;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASC,gCAAgCA,CAAA,EAAG;EACjD;EACA;EACAf,OAAO,CAACC,GAAG,CAAC,sFAAsF,CAAC;EACnG,OAAO,IAAI;AACb;;AAEA;AACAe,MAAM,CAACC,uBAAuB,GAAG/B,2BAA2B;AAE5D,eAAe;EACbA,2BAA2B;EAC3B6B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}