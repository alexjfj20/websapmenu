{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\n// Importaciones necesarias\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\n// Configuración de la API base\nconst API_URL = process.env.VUE_APP_API_URL || 'http://localhost:3000/api';\n\n// Variables para el usuario actual y token\nlet currentUser = null;\nlet authToken = localStorage.getItem('auth_token') || null;\n\n/**\r\n * Configura el token de autorización para las solicitudes API\r\n * @param {string} token - Token JWT\r\n */\nfunction setAuthToken(token) {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    localStorage.setItem('auth_token', token);\n    authToken = token;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n    localStorage.removeItem('auth_token');\n    authToken = null;\n  }\n}\n\n/**\r\n * Función para iniciar sesión con la API\r\n * @param {string} email - Correo electrónico del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\nasync function login(email, password) {\n  console.log(\"Intentando iniciar sesión como:\", email);\n  try {\n    // Realizar solicitud de login al backend\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password\n    });\n    const {\n      usuario,\n      token\n    } = response.data;\n\n    // Almacenar token y configurar axios\n    setAuthToken(token);\n\n    // Guardar usuario en memoria y localStorage\n    currentUser = usuario;\n    localStorage.setItem('current_user', JSON.stringify(usuario));\n    return usuario;\n  } catch (error) {\n    console.error(\"Error en login:\", error.response?.data?.message || error.message);\n    throw new Error(error.response?.data?.message || \"Error al iniciar sesión\");\n  }\n}\n\n/**\r\n * Cierra la sesión del usuario actual\r\n */\nfunction logout() {\n  // Limpiar datos de autenticación\n  currentUser = null;\n  setAuthToken(null);\n  localStorage.removeItem('current_user');\n}\n\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\nfunction isAuthenticated() {\n  // Si no hay token, no está autenticado\n  if (!authToken) {\n    return false;\n  }\n  try {\n    // Verificar si el token ha expirado\n    const decoded = jwt_decode(authToken);\n    const currentTime = Date.now() / 1000;\n    if (decoded.exp < currentTime) {\n      // Token expirado, cerrar sesión\n      logout();\n      return false;\n    }\n\n    // Cargar usuario desde localStorage si no está en memoria\n    if (!currentUser) {\n      const storedUser = localStorage.getItem('current_user');\n      if (storedUser) {\n        currentUser = JSON.parse(storedUser);\n      }\n    }\n    return true;\n  } catch (error) {\n    console.error(\"Error al verificar token:\", error);\n    logout();\n    return false;\n  }\n}\n\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\nfunction getCurrentUser() {\n  if (!isAuthenticated()) {\n    return null;\n  }\n\n  // Cargar usuario desde localStorage si no está en memoria\n  if (!currentUser) {\n    const storedUser = localStorage.getItem('current_user');\n    if (storedUser) {\n      try {\n        currentUser = JSON.parse(storedUser);\n      } catch (e) {\n        console.error('Error al cargar usuario desde localStorage:', e);\n        return null;\n      }\n    }\n  }\n  return currentUser;\n}\n\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\nfunction hasRole(roleName) {\n  const user = getCurrentUser();\n  if (!user || !user.roles) {\n    return false;\n  }\n  return Array.isArray(user.roles) ? user.roles.some(rol => rol.nombre === roleName) : false;\n}\n\n// Configurar el token de autenticación al cargar\nif (authToken) {\n  setAuthToken(authToken);\n}\nexport { login, logout, isAuthenticated, hasRole, getCurrentUser };\nexport default {\n  login,\n  logout,\n  isAuthenticated,\n  hasRole,\n  getCurrentUser\n};","map":{"version":3,"names":["axios","jwt_decode","API_URL","process","env","VUE_APP_API_URL","currentUser","authToken","localStorage","getItem","setAuthToken","token","defaults","headers","common","setItem","removeItem","login","email","password","console","log","response","post","usuario","data","JSON","stringify","error","message","Error","logout","isAuthenticated","decoded","currentTime","Date","now","exp","storedUser","parse","getCurrentUser","e","hasRole","roleName","user","roles","Array","isArray","some","rol","nombre"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/authService.js"],"sourcesContent":["// Importaciones necesarias\r\nimport axios from 'axios';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\n// Configuración de la API base\r\nconst API_URL = process.env.VUE_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// Variables para el usuario actual y token\r\nlet currentUser = null;\r\nlet authToken = localStorage.getItem('auth_token') || null;\r\n\r\n/**\r\n * Configura el token de autorización para las solicitudes API\r\n * @param {string} token - Token JWT\r\n */\r\nfunction setAuthToken(token) {\r\n  if (token) {\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    localStorage.setItem('auth_token', token);\r\n    authToken = token;\r\n  } else {\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    localStorage.removeItem('auth_token');\r\n    authToken = null;\r\n  }\r\n}\r\n\r\n/**\r\n * Función para iniciar sesión con la API\r\n * @param {string} email - Correo electrónico del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\r\nasync function login(email, password) {\r\n  console.log(\"Intentando iniciar sesión como:\", email);\r\n  \r\n  try {\r\n    // Realizar solicitud de login al backend\r\n    const response = await axios.post(`${API_URL}/auth/login`, {\r\n      email,\r\n      password\r\n    });\r\n    \r\n    const { usuario, token } = response.data;\r\n    \r\n    // Almacenar token y configurar axios\r\n    setAuthToken(token);\r\n    \r\n    // Guardar usuario en memoria y localStorage\r\n    currentUser = usuario;\r\n    localStorage.setItem('current_user', JSON.stringify(usuario));\r\n    \r\n    return usuario;\r\n  } catch (error) {\r\n    console.error(\"Error en login:\", error.response?.data?.message || error.message);\r\n    throw new Error(error.response?.data?.message || \"Error al iniciar sesión\");\r\n  }\r\n}\r\n\r\n/**\r\n * Cierra la sesión del usuario actual\r\n */\r\nfunction logout() {\r\n  // Limpiar datos de autenticación\r\n  currentUser = null;\r\n  setAuthToken(null);\r\n  localStorage.removeItem('current_user');\r\n}\r\n\r\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\r\nfunction isAuthenticated() {\r\n  // Si no hay token, no está autenticado\r\n  if (!authToken) {\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    // Verificar si el token ha expirado\r\n    const decoded = jwt_decode(authToken);\r\n    const currentTime = Date.now() / 1000;\r\n    \r\n    if (decoded.exp < currentTime) {\r\n      // Token expirado, cerrar sesión\r\n      logout();\r\n      return false;\r\n    }\r\n    \r\n    // Cargar usuario desde localStorage si no está en memoria\r\n    if (!currentUser) {\r\n      const storedUser = localStorage.getItem('current_user');\r\n      if (storedUser) {\r\n        currentUser = JSON.parse(storedUser);\r\n      }\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error al verificar token:\", error);\r\n    logout();\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\r\nfunction getCurrentUser() {\r\n  if (!isAuthenticated()) {\r\n    return null;\r\n  }\r\n  \r\n  // Cargar usuario desde localStorage si no está en memoria\r\n  if (!currentUser) {\r\n    const storedUser = localStorage.getItem('current_user');\r\n    if (storedUser) {\r\n      try {\r\n        currentUser = JSON.parse(storedUser);\r\n      } catch (e) {\r\n        console.error('Error al cargar usuario desde localStorage:', e);\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n  \r\n  return currentUser;\r\n}\r\n\r\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\r\nfunction hasRole(roleName) {\r\n  const user = getCurrentUser();\r\n  \r\n  if (!user || !user.roles) {\r\n    return false;\r\n  }\r\n  \r\n  return Array.isArray(user.roles) \r\n    ? user.roles.some(rol => rol.nombre === roleName)\r\n    : false;\r\n}\r\n\r\n// Configurar el token de autenticación al cargar\r\nif (authToken) {\r\n  setAuthToken(authToken);\r\n}\r\n\r\nexport {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}