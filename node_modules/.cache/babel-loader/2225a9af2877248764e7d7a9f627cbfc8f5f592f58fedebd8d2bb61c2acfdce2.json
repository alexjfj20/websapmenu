{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { getDashboardStats } from '../../services/adminService';\nimport { createBackup } from '../../services/backupService';\nimport { alert, confirm } from '../../services/dialogService';\nexport default {\n  name: 'AdminDashboard',\n  emits: ['change-tab'],\n  setup(props, {\n    emit\n  }) {\n    const loading = ref(true);\n    const stats = ref({\n      totalUsers: 0,\n      activeUsers: 0,\n      inactiveUsers: 0,\n      status: 'Normal',\n      lastBackup: null\n    });\n    const recentActivity = ref([]);\n\n    // Cargar datos al montar el componente\n    onMounted(async () => {\n      await loadDashboardData();\n    });\n\n    // Cargar estadísticas del dashboard\n    const loadDashboardData = async () => {\n      try {\n        loading.value = true;\n        const response = await getDashboardStats();\n        if (response && response.success) {\n          stats.value = response.data;\n          if (response.data.recentActivity) {\n            recentActivity.value = response.data.recentActivity;\n          }\n        } else {\n          throw new Error('Error al cargar estadísticas');\n        }\n      } catch (error) {\n        console.error('Error al cargar estadísticas:', error);\n        await alert('No se pudieron cargar las estadísticas del sistema');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Formatear número con separador de miles\n    const formatNumber = number => {\n      return new Intl.NumberFormat('es-CO').format(number);\n    };\n\n    // Formatear fecha\n    const formatDate = dateStr => {\n      if (!dateStr) return 'No disponible';\n      try {\n        const date = new Date(dateStr);\n        if (isNaN(date.getTime())) return 'Fecha inválida';\n        return new Intl.DateTimeFormat('es-CO', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        }).format(date);\n      } catch (e) {\n        return 'Fecha inválida';\n      }\n    };\n\n    // Formatear tiempo relativo\n    const formatRelativeTime = dateStr => {\n      if (!dateStr) return 'No disponible';\n      try {\n        const date = new Date(dateStr);\n        const now = new Date();\n        const diffInSeconds = Math.floor((now - date) / 1000);\n        if (diffInSeconds < 60) {\n          return 'Hace un momento';\n        }\n        if (diffInSeconds < 3600) {\n          const minutes = Math.floor(diffInSeconds / 60);\n          return `Hace ${minutes} ${minutes === 1 ? 'minuto' : 'minutos'}`;\n        }\n        if (diffInSeconds < 86400) {\n          const hours = Math.floor(diffInSeconds / 3600);\n          return `Hace ${hours} ${hours === 1 ? 'hora' : 'horas'}`;\n        }\n        if (diffInSeconds < 604800) {\n          const days = Math.floor(diffInSeconds / 86400);\n          return `Hace ${days} ${days === 1 ? 'día' : 'días'}`;\n        }\n        return formatDate(dateStr);\n      } catch (e) {\n        return 'Fecha inválida';\n      }\n    };\n\n    // Obtener icono según tipo de actividad\n    const getActivityIcon = tipo => {\n      switch (tipo) {\n        case 'login':\n          return '🔑';\n        case 'user_created':\n          return '👤';\n        case 'user_updated':\n          return '✏️';\n        case 'payment':\n          return '💰';\n        case 'backup':\n          return '💾';\n        case 'error':\n          return '⚠️';\n        default:\n          return '🔔';\n      }\n    };\n\n    // Obtener clase CSS según tipo de actividad\n    const getActivityIconClass = tipo => {\n      switch (tipo) {\n        case 'login':\n          return 'login';\n        case 'user_created':\n        case 'user_updated':\n          return 'user';\n        case 'payment':\n          return 'payment';\n        case 'backup':\n          return 'backup';\n        case 'error':\n          return 'error';\n        default:\n          return '';\n      }\n    };\n\n    // Crear respaldo ahora\n    const handleBackupNow = async () => {\n      try {\n        const confirmed = await confirm('¿Desea crear un respaldo del sistema ahora?');\n        if (confirmed) {\n          loading.value = true;\n          const result = await createBackup();\n          if (result && result.success) {\n            await alert('Respaldo creado exitosamente');\n            stats.value.lastBackup = new Date().toISOString();\n          } else {\n            throw new Error('Error al crear el respaldo');\n          }\n        }\n      } catch (error) {\n        console.error('Error al crear respaldo:', error);\n        await alert('Error al crear el respaldo: ' + error.message);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Enviar recordatorios de pago\n    const handleSendReminders = async () => {\n      try {\n        const confirmed = await confirm('¿Desea enviar recordatorios a todos los usuarios con pagos pendientes?');\n        if (confirmed) {\n          loading.value = true;\n\n          // Simulamos el envío de recordatorios\n          await new Promise(resolve => setTimeout(resolve, 2000));\n          await alert(`Se han enviado ${stats.value.pendingPayments} recordatorios de pago.`);\n        }\n      } catch (error) {\n        console.error('Error al enviar recordatorios:', error);\n        await alert('Error al enviar recordatorios: ' + error.message);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Verificar sistema\n    const handleSystemCheck = async () => {\n      try {\n        loading.value = true;\n\n        // Simulamos una verificación\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        await alert('Sistema verificado correctamente. Todos los servicios funcionan correctamente.');\n      } catch (error) {\n        console.error('Error al verificar sistema:', error);\n        await alert('Error al verificar el sistema: ' + error.message);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Ver logs\n    const handleViewLogs = () => {\n      emit('change-tab', 'logs');\n    };\n    return {\n      loading,\n      stats,\n      recentActivity,\n      formatNumber,\n      formatDate,\n      formatRelativeTime,\n      getActivityIcon,\n      getActivityIconClass,\n      handleBackupNow,\n      handleSendReminders,\n      handleSystemCheck,\n      handleViewLogs\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","getDashboardStats","createBackup","alert","confirm","name","emits","setup","props","emit","loading","stats","totalUsers","activeUsers","inactiveUsers","status","lastBackup","recentActivity","loadDashboardData","value","response","success","data","Error","error","console","formatNumber","number","Intl","NumberFormat","format","formatDate","dateStr","date","Date","isNaN","getTime","DateTimeFormat","day","month","year","hour","minute","e","formatRelativeTime","now","diffInSeconds","Math","floor","minutes","hours","days","getActivityIcon","tipo","getActivityIconClass","handleBackupNow","confirmed","result","toISOString","message","handleSendReminders","Promise","resolve","setTimeout","pendingPayments","handleSystemCheck","handleViewLogs"],"sources":["F:\\Driver google\\VUE.JS-2\\temp\\websap\\src\\components\\admin\\AdminDashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"dashboard-container\">\r\n    <h2 class=\"section-title\">Dashboard</h2>\r\n    \r\n    <div v-if=\"loading\" class=\"loading-container\">\r\n      <div class=\"spinner\"></div>\r\n      <p>Cargando estadísticas...</p>\r\n    </div>\r\n    \r\n    <div v-else>\r\n      <!-- Estadísticas generales -->\r\n      <div class=\"stats-grid\">\r\n        <div class=\"stat-card\">\r\n          <div class=\"stat-icon users\">👥</div>\r\n          <div class=\"stat-content\">\r\n            <h3>{{ stats.totalUsers || 0 }}</h3>\r\n            <p>Usuarios Totales</p>\r\n          </div>\r\n          <div class=\"stat-details\">\r\n            <span class=\"stat-detail active\">{{ stats.activeUsers || 0 }} activos</span>\r\n            <span class=\"stat-detail inactive\">{{ stats.inactiveUsers || 0 }} inactivos</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"stat-card\">\r\n          <div class=\"stat-icon system\">🔄</div>\r\n          <div class=\"stat-content\">\r\n            <h3>{{ stats.status || 'Normal' }}</h3>\r\n            <p>Estado del Sistema</p>\r\n          </div>\r\n          <div class=\"stat-details\">\r\n            <span class=\"stat-detail\">Último backup: {{ formatDate(stats.lastBackup) }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Actividad reciente -->\r\n      <div class=\"section-panel\">\r\n        <h3 class=\"section-subtitle\">Actividad Reciente</h3>\r\n        <div v-if=\"recentActivity.length === 0\" class=\"empty-state\">\r\n          No hay actividad reciente para mostrar\r\n        </div>\r\n        <ul v-else class=\"activity-list\">\r\n          <li v-for=\"(activity, index) in recentActivity\" :key=\"index\" class=\"activity-item\">\r\n            <div class=\"activity-icon\" :class=\"getActivityIconClass(activity.tipo)\">\r\n              {{ getActivityIcon(activity.tipo) }}\r\n            </div>\r\n            <div class=\"activity-details\">\r\n              <p class=\"activity-message\">\r\n                <strong>{{ activity.usuario_nombre }}</strong> {{ activity.accion }}\r\n              </p>\r\n              <span class=\"activity-time\">{{ formatRelativeTime(activity.fecha) }}</span>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      \r\n      <!-- Acciones rápidas -->\r\n      <div class=\"section-panel\">\r\n        <h3 class=\"section-subtitle\">Acciones Rápidas</h3>\r\n        <div class=\"quick-actions-grid\">\r\n          <button @click=\"handleBackupNow\" class=\"action-button backup\">\r\n            <span class=\"action-icon\">💾</span>\r\n            <span>Crear Respaldo</span>\r\n          </button>\r\n          <button @click=\"handleViewLogs\" class=\"action-button logs\">\r\n            <span class=\"action-icon\">📋</span>\r\n            <span>Ver Registros</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport { getDashboardStats } from '../../services/adminService';\r\nimport { createBackup } from '../../services/backupService';\r\nimport { alert, confirm } from '../../services/dialogService';\r\n\r\nexport default {\r\n  name: 'AdminDashboard',\r\n  emits: ['change-tab'],\r\n  setup(props, { emit }) {\r\n    const loading = ref(true);\r\n    const stats = ref({\r\n      totalUsers: 0,\r\n      activeUsers: 0,\r\n      inactiveUsers: 0,\r\n      status: 'Normal',\r\n      lastBackup: null\r\n    });\r\n    const recentActivity = ref([]);\r\n    \r\n    // Cargar datos al montar el componente\r\n    onMounted(async () => {\r\n      await loadDashboardData();\r\n    });\r\n    \r\n    // Cargar estadísticas del dashboard\r\n    const loadDashboardData = async () => {\r\n      try {\r\n        loading.value = true;\r\n        const response = await getDashboardStats();\r\n        \r\n        if (response && response.success) {\r\n          stats.value = response.data;\r\n          \r\n          if (response.data.recentActivity) {\r\n            recentActivity.value = response.data.recentActivity;\r\n          }\r\n        } else {\r\n          throw new Error('Error al cargar estadísticas');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al cargar estadísticas:', error);\r\n        await alert('No se pudieron cargar las estadísticas del sistema');\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n    \r\n    // Formatear número con separador de miles\r\n    const formatNumber = (number) => {\r\n      return new Intl.NumberFormat('es-CO').format(number);\r\n    };\r\n    \r\n    // Formatear fecha\r\n    const formatDate = (dateStr) => {\r\n      if (!dateStr) return 'No disponible';\r\n      \r\n      try {\r\n        const date = new Date(dateStr);\r\n        if (isNaN(date.getTime())) return 'Fecha inválida';\r\n        \r\n        return new Intl.DateTimeFormat('es-CO', {\r\n          day: '2-digit',\r\n          month: '2-digit',\r\n          year: 'numeric',\r\n          hour: '2-digit',\r\n          minute: '2-digit'\r\n        }).format(date);\r\n      } catch (e) {\r\n        return 'Fecha inválida';\r\n      }\r\n    };\r\n    \r\n    // Formatear tiempo relativo\r\n    const formatRelativeTime = (dateStr) => {\r\n      if (!dateStr) return 'No disponible';\r\n      \r\n      try {\r\n        const date = new Date(dateStr);\r\n        const now = new Date();\r\n        const diffInSeconds = Math.floor((now - date) / 1000);\r\n        \r\n        if (diffInSeconds < 60) {\r\n          return 'Hace un momento';\r\n        }\r\n        \r\n        if (diffInSeconds < 3600) {\r\n          const minutes = Math.floor(diffInSeconds / 60);\r\n          return `Hace ${minutes} ${minutes === 1 ? 'minuto' : 'minutos'}`;\r\n        }\r\n        \r\n        if (diffInSeconds < 86400) {\r\n          const hours = Math.floor(diffInSeconds / 3600);\r\n          return `Hace ${hours} ${hours === 1 ? 'hora' : 'horas'}`;\r\n        }\r\n        \r\n        if (diffInSeconds < 604800) {\r\n          const days = Math.floor(diffInSeconds / 86400);\r\n          return `Hace ${days} ${days === 1 ? 'día' : 'días'}`;\r\n        }\r\n        \r\n        return formatDate(dateStr);\r\n      } catch (e) {\r\n        return 'Fecha inválida';\r\n      }\r\n    };\r\n    \r\n    // Obtener icono según tipo de actividad\r\n    const getActivityIcon = (tipo) => {\r\n      switch (tipo) {\r\n        case 'login': return '🔑';\r\n        case 'user_created': return '👤';\r\n        case 'user_updated': return '✏️';\r\n        case 'payment': return '💰';\r\n        case 'backup': return '💾';\r\n        case 'error': return '⚠️';\r\n        default: return '🔔';\r\n      }\r\n    };\r\n    \r\n    // Obtener clase CSS según tipo de actividad\r\n    const getActivityIconClass = (tipo) => {\r\n      switch (tipo) {\r\n        case 'login': return 'login';\r\n        case 'user_created': case 'user_updated': return 'user';\r\n        case 'payment': return 'payment';\r\n        case 'backup': return 'backup';\r\n        case 'error': return 'error';\r\n        default: return '';\r\n      }\r\n    };\r\n    \r\n    // Crear respaldo ahora\r\n    const handleBackupNow = async () => {\r\n      try {\r\n        const confirmed = await confirm('¿Desea crear un respaldo del sistema ahora?');\r\n        \r\n        if (confirmed) {\r\n          loading.value = true;\r\n          const result = await createBackup();\r\n          \r\n          if (result && result.success) {\r\n            await alert('Respaldo creado exitosamente');\r\n            stats.value.lastBackup = new Date().toISOString();\r\n          } else {\r\n            throw new Error('Error al crear el respaldo');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al crear respaldo:', error);\r\n        await alert('Error al crear el respaldo: ' + error.message);\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n    \r\n    // Enviar recordatorios de pago\r\n    const handleSendReminders = async () => {\r\n      try {\r\n        const confirmed = await confirm('¿Desea enviar recordatorios a todos los usuarios con pagos pendientes?');\r\n        \r\n        if (confirmed) {\r\n          loading.value = true;\r\n          \r\n          // Simulamos el envío de recordatorios\r\n          await new Promise(resolve => setTimeout(resolve, 2000));\r\n          \r\n          await alert(`Se han enviado ${stats.value.pendingPayments} recordatorios de pago.`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al enviar recordatorios:', error);\r\n        await alert('Error al enviar recordatorios: ' + error.message);\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n    \r\n    // Verificar sistema\r\n    const handleSystemCheck = async () => {\r\n      try {\r\n        loading.value = true;\r\n        \r\n        // Simulamos una verificación\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        \r\n        await alert('Sistema verificado correctamente. Todos los servicios funcionan correctamente.');\r\n      } catch (error) {\r\n        console.error('Error al verificar sistema:', error);\r\n        await alert('Error al verificar el sistema: ' + error.message);\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n    \r\n    // Ver logs\r\n    const handleViewLogs = () => {\r\n      emit('change-tab', 'logs');\r\n    };\r\n    \r\n    return {\r\n      loading,\r\n      stats,\r\n      recentActivity,\r\n      formatNumber,\r\n      formatDate,\r\n      formatRelativeTime,\r\n      getActivityIcon,\r\n      getActivityIconClass,\r\n      handleBackupNow,\r\n      handleSendReminders,\r\n      handleSystemCheck,\r\n      handleViewLogs\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard-container {\r\n  padding: 0;\r\n}\r\n\r\n.section-title {\r\n  font-size: 24px;\r\n  margin-bottom: 30px;\r\n  color: #333;\r\n  border-bottom: 2px solid #4CAF50;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 300px;\r\n  gap: 15px;\r\n}\r\n\r\n.spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  border: 3px solid #f3f3f3;\r\n  border-top: 3px solid #4CAF50;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n/* Estadísticas generales */\r\n.stats-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  gap: 20px;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.stat-card {\r\n  background-color: white;\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 6px 16px rgba(0,0,0,0.15);\r\n}\r\n\r\n.stat-icon {\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 24px;\r\n}\r\n\r\n.stat-icon.users {\r\n  background-color: #e3f2fd;\r\n  color: #1976d2;\r\n}\r\n\r\n.stat-icon.system {\r\n  background-color: #f3e5f5;\r\n  color: #7b1fa2;\r\n}\r\n\r\n.stat-content h3 {\r\n  margin: 0 0 5px 0;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n}\r\n\r\n.stat-content p {\r\n  margin: 0;\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.stat-details {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 8px;\r\n}\r\n\r\n.stat-detail {\r\n  font-size: 12px;\r\n  padding: 3px 8px;\r\n  border-radius: 12px;\r\n  background-color: #f1f1f1;\r\n  color: #333;\r\n}\r\n\r\n.stat-detail.active {\r\n  background-color: #e8f5e9;\r\n  color: #388e3c;\r\n}\r\n\r\n.stat-detail.inactive {\r\n  background-color: #ffebee;\r\n  color: #d32f2f;\r\n}\r\n\r\n.stat-detail.income {\r\n  background-color: #e3f2fd;\r\n  color: #1976d2;\r\n}\r\n\r\n.stat-detail.overdue {\r\n  background-color: #ffebee;\r\n  color: #d32f2f;\r\n}\r\n\r\n/* Secciones */\r\n.section-panel {\r\n  background-color: white;\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  margin-bottom: 30px;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n}\r\n\r\n.section-subtitle {\r\n  font-size: 18px;\r\n  margin-bottom: 20px;\r\n  color: #333;\r\n}\r\n\r\n.empty-state {\r\n  text-align: center;\r\n  padding: 30px;\r\n  color: #666;\r\n  font-style: italic;\r\n}\r\n\r\n/* Actividad reciente */\r\n.activity-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.activity-item {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 15px;\r\n  border-bottom: 1px solid #eee;\r\n  transition: background-color 0.2s;\r\n}\r\n\r\n.activity-item:hover {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.activity-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.activity-icon {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  background-color: #f1f1f1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 15px;\r\n  font-size: 20px;\r\n}\r\n\r\n.activity-icon.login {\r\n  background-color: #e1f5fe;\r\n  color: #0288d1;\r\n}\r\n\r\n.activity-icon.user {\r\n  background-color: #e8f5e9;\r\n  color: #388e3c;\r\n}\r\n\r\n.activity-icon.backup {\r\n  background-color: #f3e5f5;\r\n  color: #7b1fa2;\r\n}\r\n\r\n.activity-icon.error {\r\n  background-color: #ffebee;\r\n  color: #d32f2f;\r\n}\r\n\r\n.activity-details {\r\n  flex: 1;\r\n}\r\n\r\n.activity-message {\r\n  margin: 0 0 5px 0;\r\n}\r\n\r\n.activity-time {\r\n  font-size: 12px;\r\n  color: #666;\r\n}\r\n\r\n/* Acciones rápidas */\r\n.quick-actions-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 15px;\r\n}\r\n\r\n.action-button {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 10px;\r\n  padding: 20px;\r\n  border: none;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  background-color: #f9f9f9;\r\n  min-height: 120px;\r\n}\r\n\r\n.action-button .action-icon {\r\n  font-size: 32px;\r\n}\r\n\r\n.action-button:hover {\r\n  transform: translateY(-3px);\r\n  box-shadow: 0 5px 15px rgba(0,0,0,0.1);\r\n}\r\n\r\n.action-button.backup {\r\n  color: #7b1fa2;\r\n}\r\n\r\n.action-button.notify {\r\n  color: #f57c00;\r\n}\r\n\r\n.action-button.check {\r\n  color: #388e3c;\r\n}\r\n\r\n.action-button.logs {\r\n  color: #1976d2;\r\n}\r\n\r\n/* Responsive design */\r\n@media (max-width: 768px) {\r\n  .quick-actions-grid {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .quick-actions-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .action-button {\r\n    min-height: 100px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}