{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport { ref, computed, onMounted, reactive, onUnmounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { getSharedMenu } from '../services/menuService';\nimport { saveReservation } from '../services/reservaService'; // Importamos el servicio de reservas\nimport { getMenuItems, updateItemAvailability } from '../services/storageService'; // Importar funciones necesarias\nimport ReservaForm from '../components/reservas/ReservaForm.vue';\nimport eventBus from '../utils/eventBus';\nimport { fetchBusinessInfoFromBackend, startBusinessInfoSyncInterval, stopBusinessInfoSyncInterval } from '../services/businessInfoService';\nexport default {\n  name: 'SharedMenuView',\n  components: {\n    ReservaForm\n  },\n  props: {\n    // Añade id como prop si lo necesitas\n    id: {\n      type: String,\n      default: ''\n    }\n  },\n  setup(props) {\n    const route = useRoute();\n    const menuId = computed(() => props.id || route.params.id);\n    const menuData = ref({\n      items: [],\n      businessInfo: {\n        name: 'Restaurante WebSAP',\n        description: 'Deliciosa comida para todos los gustos',\n        contact: 'info@websap.com',\n        address: 'Calle Principal #123',\n        logo: null,\n        paymentInfo: {\n          qrImage: null,\n          qrTitle: 'Escanea para pagar',\n          nequiNumber: null,\n          nequiImage: null,\n          bankInfo: 'Banco XYZ - Cuenta 123456789',\n          otherPaymentMethods: 'Aceptamos efectivo y tarjetas'\n        }\n      }\n    });\n    const isLoading = ref(true);\n    const error = ref(null);\n    const cartItems = ref([]);\n    const orderRef = ref(null);\n    const isProcessingOrder = ref(false);\n    const lastBusinessInfoUpdate = ref(null);\n    console.log(\"SharedMenuView montado, ID del menú:\", route.params.id);\n\n    // Sistema de notificaciones toast\n    const toast = ref({\n      visible: false,\n      message: '',\n      type: 'success',\n      // 'success', 'warning', 'error'\n      timeoutId: null\n    });\n\n    // Cargar menú cuando el componente se monte\n    onMounted(() => {\n      loadMenu();\n\n      // Suscribirse al evento de actualización de información del negocio\n      eventBus.on('business-info-updated', handleBusinessInfoUpdate);\n\n      // Iniciar la sincronización periódica con parámetro true para desactivarla en vista compartida\n      startBusinessInfoSyncInterval(true);\n    });\n\n    // Al desmontar el componente, cancelar suscripciones y detener intervalos\n    onUnmounted(() => {\n      eventBus.off('business-info-updated', handleBusinessInfoUpdate);\n      stopBusinessInfoSyncInterval();\n\n      // Limpiar timeout del toast si existe\n      if (toast.value.timeoutId) {\n        clearTimeout(toast.value.timeoutId);\n      }\n    });\n\n    // Manejar la actualización de información del negocio\n    const handleBusinessInfoUpdate = updatedInfo => {\n      console.log('Nueva información del negocio recibida en SharedMenuView:', updatedInfo);\n      if (!updatedInfo) return;\n\n      // Actualizar la información del negocio en menuData\n      menuData.value.businessInfo = {\n        ...updatedInfo\n      };\n      lastBusinessInfoUpdate.value = Date.now();\n\n      // Mostrar notificación sutil\n      showToast('Información del negocio actualizada', 'info');\n    };\n\n    // Cargar el menú desde la API\n    async function loadMenu() {\n      try {\n        isLoading.value = true;\n        error.value = null; // Resetear error al inicio\n        console.log(\"Cargando menú con ID:\", route.params.id);\n        if (!route.params.id) {\n          error.value = 'ID de menú no especificado';\n          isLoading.value = false;\n          return;\n        }\n\n        // Intenta cargar desde localStorage primero (por si hay un carrito guardado)\n        const savedCart = localStorage.getItem(`cart_${route.params.id}`);\n        if (savedCart) {\n          try {\n            cartItems.value = JSON.parse(savedCart);\n            console.log(\"Carrito recuperado de localStorage:\", cartItems.value);\n          } catch (e) {\n            console.error(\"Error al parsear carrito de localStorage:\", e);\n          }\n        }\n        try {\n          // Cargar el menú y los items\n          const data = await getSharedMenu(route.params.id);\n          if (data && data.items) {\n            // Asignar los items al menuData\n            menuData.value.items = data.items;\n\n            // Intentar cargar la información del negocio desde el backend\n            try {\n              const businessInfo = await fetchBusinessInfoFromBackend();\n              if (businessInfo) {\n                menuData.value.businessInfo = businessInfo;\n                lastBusinessInfoUpdate.value = Date.now();\n                console.log(\"Información del negocio cargada del backend:\", businessInfo);\n              }\n            } catch (businessInfoError) {\n              console.warn(\"No se pudo cargar información del negocio desde backend:\", businessInfoError);\n              // Mantener la información que vino con el menú si existe\n              if (data.businessInfo) {\n                menuData.value.businessInfo = data.businessInfo;\n              }\n            }\n            console.log(\"Menú cargado con éxito:\", menuData.value);\n\n            // Inicializar disponibilidad para cada ítem\n            menuData.value.items.forEach(item => {\n              // Si la disponibilidad es explícitamente 0, mantenerla así\n              // Si es undefined o null, usar 0 en lugar de un valor predeterminado de 10\n              item.availableQuantity = item.availableQuantity !== undefined ? Number(item.availableQuantity) : 0;\n              item.realAvailability = item.availableQuantity;\n            });\n\n            // Actualizar disponibilidad real considerando el carrito\n            updateAvailabilityInMenu();\n\n            // Guardar en localStorage como respaldo\n            try {\n              localStorage.setItem(`menu_${route.params.id}`, JSON.stringify(menuData.value));\n            } catch (saveError) {\n              console.warn('No se pudo guardar el menú en localStorage:', saveError);\n            }\n          } else {\n            throw new Error('Datos de menú no válidos');\n          }\n        } catch (apiError) {\n          console.error(\"Error al cargar el menú desde la API:\", apiError);\n\n          // Intentar recuperar desde localStorage como respaldo\n          try {\n            const cachedMenu = localStorage.getItem(`menu_${route.params.id}`);\n            if (cachedMenu) {\n              menuData.value = JSON.parse(cachedMenu);\n              console.log(\"Menú recuperado desde localStorage:\", menuData.value);\n              if (menuData.value && menuData.value.items) {\n                // Inicializar disponibilidad para cada ítem\n                menuData.value.items.forEach(item => {\n                  item.availableQuantity = item.availableQuantity !== undefined ? Number(item.availableQuantity) : 0;\n                  item.realAvailability = item.availableQuantity;\n                });\n\n                // Actualizar disponibilidad real considerando el carrito\n                updateAvailabilityInMenu();\n\n                // Mostrar notificación de que se está usando datos en caché\n                showToast('Usando datos almacenados localmente. Algunas funciones pueden estar limitadas.', 'warning');\n              } else {\n                throw new Error('Datos de menú en caché no válidos');\n              }\n            } else {\n              throw new Error('No se encontró el menú en caché');\n            }\n          } catch (cacheError) {\n            console.error(\"Error al recuperar menú desde caché:\", cacheError);\n            error.value = 'No se encontró el menú solicitado. Por favor, verifica el enlace o intenta más tarde.';\n          }\n        }\n      } catch (e) {\n        console.error(\"Error general al cargar el menú:\", e);\n        error.value = e.message || 'Error al cargar el menú';\n      } finally {\n        isLoading.value = false;\n      }\n    }\n\n    // Verificar si hay información de pago\n    const hasPaymentInfo = computed(() => {\n      const paymentInfo = menuData.value?.businessInfo?.paymentInfo;\n      if (!paymentInfo) return false;\n\n      // Verificar si hay al menos un campo de información de pago con datos\n      return !!(paymentInfo.qrImage && isValidImage(paymentInfo.qrImage) || paymentInfo.qrTitle || paymentInfo.nequiNumber || paymentInfo.nequiImage && isValidImage(paymentInfo.nequiImage) || paymentInfo.bankInfo || paymentInfo.otherPaymentMethods);\n    });\n\n    // Contador total de items\n    const totalItems = computed(() => {\n      return cartItems.value.reduce((total, item) => total + item.quantity, 0);\n    });\n\n    // Total del carrito\n    const cartTotal = computed(() => {\n      return cartItems.value.reduce((total, item) => {\n        return total + item.price * item.quantity;\n      }, 0);\n    });\n\n    // Formatear precio\n    function formatPrice(price) {\n      if (isNaN(Number(price))) return '0,00';\n\n      // Convertir a número y formatear con 2 decimales fijos\n      const numero = Number(price).toFixed(2);\n\n      // Separar parte entera y decimal\n      const [parteEntera, parteDecimal] = numero.split('.');\n\n      // Formatear parte entera con puntos como separadores de miles\n      const parteEnteraFormateada = parteEntera.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n\n      // Unir con coma como separador decimal\n      return `${parteEnteraFormateada},${parteDecimal}`;\n    }\n\n    // Agregar al carrito con verificación de disponibilidad\n    async function addToCart(item) {\n      // Verificación directa antes de hacer la comprobación completa\n      if (Number(item.availableQuantity) <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return;\n      }\n      const isAvailable = await checkAvailability(item);\n      if (!isAvailable) return;\n      const existingItem = cartItems.value.find(i => {\n        // Asegurar que ambos items tienen ID y compararlos, o comparar por nombre si no hay ID\n        if (item.id && i.id) {\n          return i.id === item.id;\n        }\n        return i.name === item.name;\n      });\n      if (existingItem) {\n        existingItem.quantity++;\n      } else {\n        cartItems.value.push({\n          id: item.id || Date.now().toString(),\n          name: item.name,\n          price: item.price,\n          quantity: 1,\n          availableQuantity: item.availableQuantity || 0 // Usar 0 como valor por defecto\n        });\n      }\n\n      // Guardar carrito en localStorage\n      saveCartToLocalStorage();\n\n      // Actualizar la disponibilidad en tiempo real\n      updateAvailabilityInMenu();\n\n      // Mostrar notificación de éxito\n      showToast(`${item.name} añadido al carrito`, 'success');\n    }\n\n    // Mostrar notificaciones toast\n    function showToast(message, type = 'success', duration = 5000) {\n      // Aumentar a 5 segundos\n      console.log(`[Toast] Mostrando notificación: ${message} (${type})`);\n\n      // Si ya hay un toast visible, limpiamos su timeout\n      if (toast.value.timeoutId) {\n        clearTimeout(toast.value.timeoutId);\n      }\n\n      // Configurar el nuevo toast\n      toast.value.message = message;\n      toast.value.type = type;\n      toast.value.visible = true;\n\n      // Debug: verificar que el estado del toast cambió\n      console.log(`[Toast] Estado: visible=${toast.value.visible}, message=${toast.value.message}`);\n\n      // Configurar timeout para ocultar después de la duración\n      toast.value.timeoutId = setTimeout(() => {\n        console.log(`[Toast] Ocultando notificación después de ${duration}ms`);\n        toast.value.visible = false;\n      }, duration);\n    }\n\n    // Guardar carrito en localStorage\n    function saveCartToLocalStorage() {\n      try {\n        localStorage.setItem(`cart_${route.params.id}`, JSON.stringify(cartItems.value));\n      } catch (e) {\n        console.error(\"Error al guardar carrito en localStorage:\", e);\n      }\n    }\n\n    // Incrementar cantidad\n    function increaseQuantity(index) {\n      const item = cartItems.value[index];\n\n      // Buscar el ítem en el menú\n      const menuItem = menuData.value.items?.find(i => i.id === item.id);\n      if (menuItem) {\n        // Verificar disponibilidad\n        const availableQuantity = menuItem.availableQuantity || 0;\n        if (item.quantity >= availableQuantity) {\n          showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n          return;\n        }\n      }\n\n      // Incrementar cantidad\n      item.quantity++;\n\n      // Guardar carrito y actualizar disponibilidad\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu();\n    }\n\n    // Reemplazar la función decreaseQuantity (líneas 409-416)\n    function decreaseQuantity(index) {\n      if (cartItems.value[index].quantity > 1) {\n        cartItems.value[index].quantity--;\n        saveCartToLocalStorage();\n        updateAvailabilityInMenu(); // Actualizar disponibilidad\n      } else {\n        removeFromCart(index);\n      }\n    }\n\n    // Reemplazar la función removeFromCart (líneas 419-422)\n    function removeFromCart(index) {\n      cartItems.value.splice(index, 1);\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu(); // Actualizar disponibilidad\n    }\n\n    // Completar pedido con actualización de inventario\n    async function completeOrder() {\n      try {\n        // Validaciones básicas\n        if (cartItems.value.length === 0) {\n          showToast('No hay ítems en el pedido', 'error');\n          return;\n        }\n        if (!customerInfo.value.name || !customerInfo.value.phone) {\n          showToast('Por favor complete su nombre y teléfono', 'error');\n          return;\n        }\n\n        // Indicar que está procesando\n        isProcessingOrder.value = true;\n\n        // Actualizar inventario - Usar el carrito correcto\n        await updateInventory();\n\n        // Compartir en WhatsApp\n        openWhatsAppShare();\n        showToast('¡Pedido completado! Gracias por tu compra.', 'success');\n\n        // Limpiar carrito y datos del cliente después de completar\n        setTimeout(() => {\n          // Limpiar carrito\n          cartItems.value = [];\n\n          // Limpiar localStorage\n          localStorage.removeItem(`cart_${route.params.id}`);\n\n          // Limpiar datos del cliente\n          customerInfo.value = {\n            name: '',\n            phone: '',\n            email: '',\n            address: ''\n          };\n          additionalMessage.value = '';\n          isProcessingOrder.value = false;\n        }, 2000);\n      } catch (error) {\n        console.error('Error al completar el pedido:', error);\n        showToast('Error al procesar el pedido', 'error');\n        isProcessingOrder.value = false;\n      }\n    }\n\n    // Compartir pedido por WhatsApp sin actualizar inventario\n    function shareOrderByWhatsApp() {\n      // Validaciones básicas\n      if (cartItems.value.length === 0) {\n        showToast('No hay ítems en el pedido', 'error');\n        return;\n      }\n      if (!customerInfo.value.name || !customerInfo.value.phone) {\n        showToast('Por favor complete su nombre y teléfono', 'error');\n        return;\n      }\n\n      // Compartir directamente en WhatsApp sin actualizar inventario\n      openWhatsAppShare();\n      showToast('Pedido compartido por WhatsApp', 'success');\n    }\n    function openWhatsAppShare() {\n      // Construir mensaje de pedido para WhatsApp\n      let whatsappMessage = `*Pedido de ${customerInfo.value.name}*\\n\\n`;\n      whatsappMessage += '*Productos:*\\n';\n      cartItems.value.forEach(item => {\n        const subtotal = (item.price * item.quantity).toFixed(2);\n        whatsappMessage += `- ${item.quantity}x ${item.name}: $${formatPrice(item.price)} c/u = $${formatPrice(subtotal)}\\n`;\n      });\n      whatsappMessage += `💵  \\n*Total: $${formatPrice(cartTotal.value)}*\\n\\n`;\n      if (customerInfo.value.phone) {\n        whatsappMessage += `📞 *Teléfono:* ${customerInfo.value.phone}\\n`;\n      }\n      if (customerInfo.value.email) {\n        whatsappMessage += `✉️ *Email:* ${customerInfo.value.email}\\n`;\n      }\n      if (customerInfo.value.address) {\n        whatsappMessage += `📍 *Dirección:* ${customerInfo.value.address}\\n`;\n      }\n      if (additionalMessage.value) {\n        whatsappMessage += `📝 \\n*Notas adicionales:*\\n${additionalMessage.value}\\n`;\n      }\n\n      // Añadir método de pago seleccionado\n      whatsappMessage += `\\n*Forma de pago:* ${selectedPaymentMethod.value === 'qr' ? 'Código QR' : selectedPaymentMethod.value === 'nequi' ? 'Nequi' : 'Contra entrega'}\\n`;\n\n      // Formato para URL de WhatsApp\n      const encodedMessage = encodeURIComponent(whatsappMessage);\n      const whatsappUrl = `https://wa.me/?text=${encodedMessage}`;\n\n      // Abrir WhatsApp en una nueva ventana\n      window.open(whatsappUrl, '_blank');\n    }\n\n    // Desplazarse a la sección del pedido\n    function scrollToOrder() {\n      const orderSection = document.querySelector('.order-section');\n      if (orderSection) {\n        orderSection.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n\n    // Verificar disponibilidad de inventario\n    async function checkAvailability(item) {\n      // Obtener la disponibilidad base (valor original del inventario)\n      // Importante: asegurarse que sea un número\n      const baseAvailability = Number(item.availableQuantity) || 0;\n\n      // Verificación directa: si no hay stock, mostrar mensaje de error\n      if (baseAvailability <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return false;\n      }\n\n      // Obtener la cantidad actual en el carrito\n      const cartItem = cartItems.value.find(i => i.id === item.id);\n      const cartQuantity = cartItem ? cartItem.quantity : 0;\n\n      // Calcular disponibilidad real\n      const realAvailability = baseAvailability - cartQuantity;\n\n      // Verificar la disponibilidad considerando lo que ya está en el carrito\n      if (realAvailability <= 0) {\n        showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n        return false;\n      } else if (realAvailability <= 5) {\n        showToast(`¡Solo quedan ${realAvailability} unidades de \"${item.name}\"!`, 'warning');\n      }\n      return true;\n    }\n\n    // Actualizar inventario al completar pedido\n    async function updateInventory() {\n      try {\n        // Validaciones iniciales\n        if (!cartItems.value || cartItems.value.length === 0) {\n          console.warn('Intentando actualizar inventario con carrito vacío');\n          return;\n        }\n        console.log(`Iniciando actualización de inventario para ${cartItems.value.length} productos...`);\n\n        // Obtener los elementos actuales del menú para actualizar cantidades\n        const currentMenu = await getMenuItems();\n        if (!currentMenu || !Array.isArray(currentMenu)) {\n          console.error('No se pudo obtener el menú actual');\n          return false;\n        }\n\n        // Crear una copia profunda del carrito para procesar (evitar modificaciones durante el procesamiento)\n        const itemsToProcess = JSON.parse(JSON.stringify(cartItems.value));\n        const updateResults = [];\n        let hasErrors = false;\n\n        // Procesar cada elemento del carrito de forma secuencial para evitar condiciones de carrera\n        for (let i = 0; i < itemsToProcess.length; i++) {\n          const cartItem = itemsToProcess[i];\n          console.log(`Procesando item ${i + 1}/${itemsToProcess.length}: ${cartItem.name} (ID: ${cartItem.id})`);\n          try {\n            // Buscar el ítem correspondiente en el menú actual\n            const menuItem = currentMenu.find(item => item.id === cartItem.id);\n            if (!menuItem) {\n              console.warn(`Elemento no encontrado en el menú: ${cartItem.name} (ID: ${cartItem.id})`);\n              updateResults.push({\n                name: cartItem.name,\n                success: false,\n                error: 'Elemento no encontrado en el menú'\n              });\n              continue;\n            }\n\n            // Garantizar que estamos trabajando con números enteros válidos\n            const currentQuantity = parseInt(Number(menuItem.availableQuantity || 0), 10);\n            const soldQuantity = parseInt(Number(cartItem.quantity || 0), 10);\n            if (isNaN(currentQuantity) || isNaN(soldQuantity)) {\n              const error = `Cantidades inválidas para ${cartItem.name}: disponible=${menuItem.availableQuantity}, vendido=${cartItem.quantity}`;\n              console.error(error);\n              updateResults.push({\n                name: cartItem.name,\n                success: false,\n                error: error\n              });\n              hasErrors = true;\n              continue;\n            }\n\n            // Calcular nueva cantidad exacta como entero\n            const newQuantity = Math.max(0, currentQuantity - soldQuantity);\n            console.log(`Actualizando ${cartItem.name}: ${currentQuantity} - ${soldQuantity} = ${newQuantity} (currentQuantity tipo: ${typeof currentQuantity}, soldQuantity tipo: ${typeof soldQuantity})`);\n\n            // Actualizar disponibilidad usando la función mejorada - forzar como número entero\n            const updateSuccess = await updateItemAvailability(menuItem.id, newQuantity);\n\n            // Registrar resultado detallado\n            updateResults.push({\n              name: cartItem.name,\n              oldQuantity: currentQuantity,\n              soldQuantity: soldQuantity,\n              newQuantity: newQuantity,\n              success: updateSuccess,\n              error: updateSuccess ? null : 'Error al actualizar disponibilidad'\n            });\n            if (!updateSuccess) {\n              hasErrors = true;\n            }\n          } catch (itemError) {\n            console.error(`Error procesando ${cartItem.name}:`, itemError);\n            updateResults.push({\n              name: cartItem.name,\n              success: false,\n              error: itemError.message || 'Error desconocido'\n            });\n            hasErrors = true;\n          }\n        }\n\n        // Mostrar resumen de la operación\n        const successCount = updateResults.filter(r => r.success).length;\n        console.log(`Actualización de inventario completada. Éxitos: ${successCount}/${itemsToProcess.length}`);\n\n        // Registrar detalles completos de la actualización\n        console.log('Detalles de actualización de inventario:', updateResults);\n        if (hasErrors) {\n          const failedItems = updateResults.filter(r => !r.success).map(r => r.name).join(', ');\n          console.warn(`Algunos productos no se pudieron actualizar: ${failedItems}`);\n        }\n        return successCount > 0;\n      } catch (error) {\n        console.error('Error general al actualizar inventario:', error);\n        return false;\n      }\n    }\n\n    // Añadir después de la función checkAvailability (línea 585)\n    // Función para actualizar la disponibilidad en tiempo real\n    function updateAvailabilityInMenu() {\n      if (!menuData.value?.items) return;\n\n      // Actualizar la disponibilidad de todos los ítems\n      menuData.value.items.forEach(menuItem => {\n        // Encontrar si este ítem está en el carrito\n        const cartItem = cartItems.value.find(i => i.id === menuItem.id);\n        const cartQuantity = cartItem ? cartItem.quantity : 0;\n\n        // Asegurarse de que availableQuantity sea un número exacto, no undefined o null\n        const baseAvailability = Number(menuItem.availableQuantity) || 0;\n\n        // Calcular disponibilidad real\n        menuItem.realAvailability = baseAvailability - cartQuantity;\n        console.log(`Disponibilidad actualizada para ${menuItem.name}: ${menuItem.realAvailability} unidades (base: ${baseAvailability}, carrito: ${cartQuantity})`);\n      });\n    }\n\n    // Verificar si una cadena de imagen es válida\n    function isValidImage(imageString) {\n      if (!imageString) return false;\n\n      // Verificar si es una URL\n      if (imageString.startsWith('http://') || imageString.startsWith('https://')) {\n        return true;\n      }\n\n      // Verificar si es una imagen en base64\n      if (imageString.startsWith('data:image/')) {\n        return true;\n      }\n      return false;\n    }\n\n    // Corregir formato de imagen si es necesario\n    function fixImageFormat(imageString) {\n      if (!imageString) return '';\n\n      // Si ya es una URL o base64 válido, devolverlo tal cual\n      if (isValidImage(imageString)) {\n        return imageString;\n      }\n\n      // Intentar convertir a base64 si no tiene el prefijo correcto\n      if (imageString.includes('/9j/') && !imageString.startsWith('data:image/')) {\n        return `data:image/jpeg;base64,${imageString}`;\n      }\n\n      // Si no se puede arreglar, devolver una imagen por defecto\n      return '';\n    }\n\n    // Datos del cliente\n    const customerInfo = ref({\n      name: '',\n      phone: '',\n      email: '',\n      address: ''\n    });\n\n    // Método de pago seleccionado\n    const selectedPaymentMethod = ref('cash'); // Por defecto contra entrega\n\n    // Mensaje adicional\n    const additionalMessage = ref('');\n\n    // Filtrar items regulares y especiales\n    const regularItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      const filtered = menuData.value.items.filter(item => !item.isSpecial);\n      console.log('Platos regulares:', filtered.length, filtered.map(i => i.name));\n      return filtered;\n    });\n    const specialItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      const filtered = menuData.value.items.filter(item => item.isSpecial === true);\n      console.log('Platos especiales:', filtered.length, filtered.map(i => i.name));\n      return filtered;\n    });\n\n    // Estado para el formulario de reserva\n    const showReservationForm = ref(false);\n    const isProcessingReservation = ref(false);\n    const reservationSuccess = ref(false);\n    const reservationError = ref(null);\n    const reservationData = ref({\n      fullName: '',\n      mobilePhone: '',\n      landlinePhone: '',\n      address: '',\n      email: '',\n      orderDate: getCurrentDate(),\n      // Set the initial value here\n      reservationDate: '',\n      reservationTime: '',\n      peopleCount: 1,\n      additionalNotes: ''\n    });\n\n    // Función para obtener la fecha actual en formato YYYY-MM-DD\n    function getCurrentDate() {\n      const today = new Date();\n      const year = today.getFullYear();\n      const month = String(today.getMonth() + 1).padStart(2, '0');\n      const day = String(today.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    }\n\n    // Función para enviar la reserva\n    async function submitReservation() {\n      isProcessingReservation.value = true;\n      reservationSuccess.value = false;\n      reservationError.value = null;\n      try {\n        // Utilizamos el servicio de reservas para guardar los datos\n        const result = await saveReservation(reservationData.value);\n        if (result.success) {\n          // Reserva guardada correctamente\n          reservationSuccess.value = true;\n          showToast('¡Reserva enviada con éxito! Recibirá un correo de confirmación en breve.', 'success');\n\n          // Enviar correo de confirmación (simulado)\n          console.log('Enviando correo de confirmación a:', reservationData.value.email);\n\n          // Limpiar el formulario y ocultarlo después de un tiempo\n          setTimeout(() => {\n            resetReservationForm();\n            showReservationForm.value = false;\n          }, 3000);\n        } else {\n          // Error al guardar la reserva\n          throw new Error(result.error || 'Error al procesar la reserva');\n        }\n      } catch (error) {\n        console.error('Error al enviar la reserva:', error);\n        reservationError.value = 'Ocurrió un error al procesar su reserva. Por favor, intente nuevamente.';\n        showToast('Error al procesar la reserva. Por favor, intente nuevamente.', 'error');\n      } finally {\n        isProcessingReservation.value = false;\n      }\n    }\n\n    // Función para cancelar la reserva\n    function cancelReservation() {\n      resetReservationForm();\n      showReservationForm.value = false;\n    }\n\n    // Función para reiniciar el formulario\n    function resetReservationForm() {\n      reservationData.value.fullName = '';\n      reservationData.value.mobilePhone = '';\n      reservationData.value.landlinePhone = '';\n      reservationData.value.address = '';\n      reservationData.value.email = '';\n      reservationData.value.orderDate = getCurrentDate();\n      reservationData.value.reservationDate = '';\n      reservationData.value.reservationTime = '';\n      reservationData.value.peopleCount = 1;\n      reservationData.value.additionalNotes = '';\n      reservationSuccess.value = false;\n      reservationError.value = null;\n    }\n\n    // Refrescar información del negocio manualmente\n    async function refreshBusinessInfo() {\n      try {\n        const businessInfo = await fetchBusinessInfoFromBackend(true);\n        if (businessInfo) {\n          menuData.value.businessInfo = businessInfo;\n          lastBusinessInfoUpdate.value = Date.now();\n          showToast('Información del negocio actualizada', 'success');\n        }\n      } catch (error) {\n        console.error('Error al refrescar información del negocio:', error);\n        showToast('Error al actualizar información del negocio', 'error');\n      }\n    }\n    return {\n      menuId,\n      isLoading,\n      error,\n      menuData,\n      regularItems,\n      specialItems,\n      cartItems,\n      cartTotal,\n      totalItems,\n      customerInfo,\n      selectedPaymentMethod,\n      additionalMessage,\n      addToCart,\n      removeFromCart,\n      increaseQuantity,\n      decreaseQuantity,\n      formatPrice,\n      completeOrder,\n      shareOrderByWhatsApp,\n      scrollToOrder,\n      isValidImage,\n      fixImageFormat,\n      hasPaymentInfo,\n      // Reservas\n      showReservationForm,\n      reservationData,\n      isProcessingReservation,\n      reservationSuccess,\n      reservationError,\n      submitReservation,\n      cancelReservation,\n      getCurrentDate,\n      // Añadir el objeto toast para que esté disponible en la plantilla\n      toast,\n      // Función para refrescar información del negocio\n      refreshBusinessInfo,\n      // Última actualización de la información del negocio\n      lastBusinessInfoUpdate\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","reactive","onUnmounted","useRoute","getSharedMenu","saveReservation","getMenuItems","updateItemAvailability","ReservaForm","eventBus","fetchBusinessInfoFromBackend","startBusinessInfoSyncInterval","stopBusinessInfoSyncInterval","name","components","props","id","type","String","default","setup","route","menuId","params","menuData","items","businessInfo","description","contact","address","logo","paymentInfo","qrImage","qrTitle","nequiNumber","nequiImage","bankInfo","otherPaymentMethods","isLoading","error","cartItems","orderRef","isProcessingOrder","lastBusinessInfoUpdate","console","log","toast","visible","message","timeoutId","loadMenu","on","handleBusinessInfoUpdate","off","value","clearTimeout","updatedInfo","Date","now","showToast","savedCart","localStorage","getItem","JSON","parse","e","data","businessInfoError","warn","forEach","item","availableQuantity","undefined","Number","realAvailability","updateAvailabilityInMenu","setItem","stringify","saveError","Error","apiError","cachedMenu","cacheError","hasPaymentInfo","isValidImage","totalItems","reduce","total","quantity","cartTotal","price","formatPrice","isNaN","numero","toFixed","parteEntera","parteDecimal","split","parteEnteraFormateada","replace","addToCart","isAvailable","checkAvailability","existingItem","find","i","push","toString","saveCartToLocalStorage","duration","setTimeout","increaseQuantity","index","menuItem","decreaseQuantity","removeFromCart","splice","completeOrder","length","customerInfo","phone","updateInventory","openWhatsAppShare","removeItem","email","additionalMessage","shareOrderByWhatsApp","whatsappMessage","subtotal","selectedPaymentMethod","encodedMessage","encodeURIComponent","whatsappUrl","window","open","scrollToOrder","orderSection","document","querySelector","scrollIntoView","behavior","baseAvailability","cartItem","cartQuantity","currentMenu","Array","isArray","itemsToProcess","updateResults","hasErrors","success","currentQuantity","parseInt","soldQuantity","newQuantity","Math","max","updateSuccess","oldQuantity","itemError","successCount","filter","r","failedItems","map","join","imageString","startsWith","fixImageFormat","includes","regularItems","filtered","isSpecial","specialItems","showReservationForm","isProcessingReservation","reservationSuccess","reservationError","reservationData","fullName","mobilePhone","landlinePhone","orderDate","getCurrentDate","reservationDate","reservationTime","peopleCount","additionalNotes","today","year","getFullYear","month","getMonth","padStart","day","getDate","submitReservation","result","resetReservationForm","cancelReservation","refreshBusinessInfo"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\views\\SharedMenuView.vue"],"sourcesContent":["<template>\r\n  <div class=\"shared-menu-container\" :id=\"menuId\">\r\n    <div v-if=\"isLoading\" class=\"loading\">\r\n      <div class=\"spinner\"></div>\r\n      <p>Cargando menú...</p>\r\n    </div>\r\n    \r\n    <div v-else-if=\"error\" class=\"error\">\r\n      <p>{{ error }}</p>\r\n    </div>\r\n    \r\n    <div v-else class=\"menu-content\">\r\n      <!-- Información del negocio -->\r\n      <div v-if=\"menuData?.businessInfo\" class=\"business-info\">\r\n        <img v-if=\"menuData.businessInfo.logo && isValidImage(menuData.businessInfo.logo)\" :src=\"fixImageFormat(menuData.businessInfo.logo)\" alt=\"Logo\" class=\"business-logo\">\r\n        <h1>{{ menuData.businessInfo.name }}</h1>\r\n        <p class=\"description\">{{ menuData.businessInfo.description }}</p>\r\n        <div class=\"contact-info\" v-if=\"menuData.businessInfo.contact || menuData.businessInfo.address\">\r\n          <p v-if=\"menuData.businessInfo.contact\"><strong>Contacto:</strong> {{ menuData.businessInfo.contact }}</p>\r\n          <p v-if=\"menuData.businessInfo.address\"><strong>Dirección:</strong> {{ menuData.businessInfo.address }}</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Lista de productos -->\r\n      <div>\r\n        <!-- Platos regulares -->\r\n        <div class=\"menu-list\">\r\n          <h2>Nuestro Menú</h2>\r\n          <div class=\"menu-items\">\r\n            <div v-for=\"(item, index) in regularItems\" :key=\"index\" class=\"menu-item\">\r\n              <div class=\"item-image-container\">\r\n                <img v-if=\"item.image && isValidImage(item.image)\" :src=\"fixImageFormat(item.image)\" alt=\"Imagen del producto\" class=\"item-image\">\r\n                <img v-else src=\"https://via.placeholder.com/150?text=Sin+Imagen\" alt=\"Sin imagen disponible\" class=\"item-image\">\r\n              </div>\r\n              <div class=\"item-details\">\r\n                <h3>{{ item.name }}</h3>\r\n                <p class=\"item-description\">{{ item.description }}</p>\r\n                <p class=\"item-price\">${{ formatPrice(item.price) }}</p>\r\n                <p class=\"includes-drink\" v-if=\"item.includesDrink\">Incluye refresco</p>\r\n                <button \r\n                  @click=\"addToCart(item)\" \r\n                  class=\"add-to-cart-btn\"\r\n                  :disabled=\"!item.realAvailability || item.realAvailability <= 0\"\r\n                  :class=\"{ 'disabled-btn': !item.realAvailability || item.realAvailability <= 0 }\"\r\n                >\r\n                  <span v-if=\"!item.realAvailability || item.realAvailability <= 0\" class=\"btn-icon\">❌</span>\r\n                  <span v-else class=\"btn-icon\">🛒</span>\r\n                  {{ !item.realAvailability || item.realAvailability <= 0 ? 'No disponible' : 'Añadir al pedido' }}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Platos especiales (solo se muestra si hay platos especiales) -->\r\n        <div v-if=\"specialItems.length > 0\" class=\"menu-list special-menu-list\">\r\n          <h2>Platos Especiales</h2>\r\n          <div class=\"menu-items\">\r\n            <div v-for=\"(item, index) in specialItems\" :key=\"index\" class=\"menu-item special-item\">\r\n              <div class=\"item-image-container\">\r\n                <img v-if=\"item.image && isValidImage(item.image)\" :src=\"fixImageFormat(item.image)\" alt=\"Imagen del producto\" class=\"item-image\">\r\n                <img v-else src=\"https://via.placeholder.com/150?text=Sin+Imagen\" alt=\"Sin imagen disponible\" class=\"item-image\">\r\n              </div>\r\n              <div class=\"item-details\">\r\n                <h3>{{ item.name }}</h3>\r\n                <p class=\"item-description\">{{ item.description }}</p>\r\n                <p class=\"item-price\">${{ formatPrice(item.price) }}</p>\r\n                <p class=\"includes-drink\" v-if=\"item.includesDrink\">Incluye refresco</p>\r\n                <button \r\n                  @click=\"addToCart(item)\" \r\n                  class=\"add-to-cart-btn special-button\"\r\n                  :disabled=\"!item.realAvailability || item.realAvailability <= 0\"\r\n                  :class=\"{ 'disabled-btn': !item.realAvailability || item.realAvailability <= 0 }\"\r\n                >\r\n                  <span v-if=\"!item.realAvailability || item.realAvailability <= 0\" class=\"btn-icon\">❌</span>\r\n                  <span v-else class=\"btn-icon\">🛒</span>\r\n                  {{ !item.realAvailability || item.realAvailability <= 0 ? 'No disponible' : 'Añadir al pedido' }}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Sección de \"Tu Pedido\" - Siempre visible aunque vacía -->\r\n        <div class=\"order-section\" ref=\"orderSection\">\r\n          <h2>Tu Pedido</h2>\r\n          \r\n          <div v-if=\"cartItems.length === 0\" class=\"empty-cart\">\r\n            <p>Tu pedido está vacío</p>\r\n            <p class=\"empty-cart-message\">Añade productos del menú para comenzar tu pedido</p>\r\n          </div>\r\n          \r\n          <div v-else class=\"cart-items\">\r\n            <div v-for=\"(item, index) in cartItems\" :key=\"index\" class=\"cart-item\">\r\n              <div class=\"cart-item-details\">\r\n                <h3>{{ item.name }}</h3>\r\n                <p>${{ formatPrice(item.price) }} x {{ item.quantity }}</p>\r\n              </div>\r\n              <div class=\"cart-item-actions\">\r\n                <button @click=\"decreaseQuantity(index)\" class=\"quantity-btn\">-</button>\r\n                <span class=\"quantity-display\">{{ item.quantity }}</span>\r\n                <button @click=\"increaseQuantity(index)\" class=\"quantity-btn\">+</button>\r\n                <button @click=\"removeFromCart(index)\" class=\"remove-btn\">\r\n                  <span class=\"btn-icon\">🗑️</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"cart-total\">\r\n              <h3>Total: ${{ formatPrice(cartTotal) }}</h3>\r\n              \r\n              <!-- Formulario de datos del cliente -->\r\n              <div class=\"customer-form\">\r\n                <h4>Datos del Cliente</h4>\r\n                <div class=\"form-row\">\r\n                  <input type=\"text\" v-model=\"customerInfo.name\" placeholder=\"Nombres completos\" class=\"form-input\">\r\n                </div>\r\n                <div class=\"form-row\">\r\n                  <input type=\"tel\" v-model=\"customerInfo.phone\" placeholder=\"Teléfono\" class=\"form-input\">\r\n                </div>\r\n                <div class=\"form-row\">\r\n                  <input type=\"email\" v-model=\"customerInfo.email\" placeholder=\"Correo electrónico\" class=\"form-input\">\r\n                </div>\r\n                <div class=\"form-row\">\r\n                  <input type=\"text\" v-model=\"customerInfo.address\" placeholder=\"Dirección de entrega\" class=\"form-input\">\r\n                </div>\r\n                \r\n                <!-- Lista horizontal de métodos de pago -->\r\n                <div class=\"payment-methods-selection\">\r\n                  <h4>Forma de Pago</h4>\r\n                  <div class=\"payment-options\">\r\n                    <label class=\"payment-option\">\r\n                      <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"qr\" name=\"paymentMethod\">\r\n                      <span class=\"payment-option-text\">QR</span>\r\n                    </label>\r\n                    <label class=\"payment-option\">\r\n                      <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"nequi\" name=\"paymentMethod\">\r\n                      <span class=\"payment-option-text\">Nequi</span>\r\n                    </label>\r\n                    <label class=\"payment-option\">\r\n                      <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"cash\" name=\"paymentMethod\">\r\n                      <span class=\"payment-option-text\">Contra entrega</span>\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n                \r\n                <!-- Campo de mensaje adicional -->\r\n                <div class=\"form-row\">\r\n                  <textarea v-model=\"additionalMessage\" placeholder=\"Mensaje o instrucciones adicionales\" class=\"form-textarea\"></textarea>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"order-actions\">\r\n                <button @click=\"completeOrder\" class=\"complete-order-btn\">\r\n                  <span class=\"btn-icon\">📱</span> Enviar por WhatsApp\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Botón flotante para ver pedido (visible cuando hay items y se hace scroll) -->\r\n        <div v-if=\"cartItems.length > 0\" class=\"floating-cart-button\" @click=\"scrollToOrder\">\r\n          <span class=\"cart-items-count\">{{ totalItems }}</span>\r\n          <span>Ver Pedido</span>\r\n        </div>\r\n        \r\n        <!-- Nueva sección: Forma de Pago -->\r\n        <div v-if=\"hasPaymentInfo\" class=\"payment-section\">\r\n          <h2>Forma de Pago</h2>\r\n          <div class=\"payment-methods\">\r\n            <div v-if=\"menuData?.businessInfo?.paymentInfo?.qrImage\" class=\"payment-method\">\r\n              <h3>{{ menuData?.businessInfo?.paymentInfo?.qrTitle || 'Código QR de Pago' }}</h3>\r\n              <img \r\n                v-if=\"menuData?.businessInfo?.paymentInfo?.qrImage && isValidImage(menuData?.businessInfo?.paymentInfo?.qrImage)\" \r\n                :src=\"fixImageFormat(menuData?.businessInfo?.paymentInfo?.qrImage)\" \r\n                alt=\"QR de Pago\" \r\n                class=\"payment-image\"\r\n              >\r\n            </div>\r\n            \r\n            <div v-if=\"menuData?.businessInfo?.paymentInfo?.nequiNumber || menuData?.businessInfo?.paymentInfo?.nequiImage\" class=\"payment-method\">\r\n              <h3>Pago con Nequi</h3>\r\n              <img \r\n                v-if=\"menuData?.businessInfo?.paymentInfo?.nequiImage && isValidImage(menuData?.businessInfo?.paymentInfo?.nequiImage)\" \r\n                :src=\"fixImageFormat(menuData?.businessInfo?.paymentInfo?.nequiImage)\" \r\n                alt=\"Nequi\" \r\n                class=\"payment-image\"\r\n              >\r\n              <p v-if=\"menuData?.businessInfo?.paymentInfo?.nequiNumber\" class=\"payment-detail\">\r\n                <strong>Número:</strong> {{ menuData?.businessInfo?.paymentInfo?.nequiNumber }}\r\n              </p>\r\n            </div>\r\n            \r\n            <div v-if=\"menuData?.businessInfo?.paymentInfo?.bankInfo\" class=\"payment-method\">\r\n              <h3>Pago Bancario</h3>\r\n              <p class=\"payment-detail\">\r\n                <strong>Información Bancaria:</strong> {{ menuData?.businessInfo?.paymentInfo?.bankInfo }}\r\n              </p>\r\n            </div>\r\n            \r\n            <div v-if=\"menuData?.businessInfo?.paymentInfo?.otherPaymentMethods\" class=\"payment-method\">\r\n              <h3>Otras Formas de Pago</h3>\r\n              <p class=\"payment-detail\">\r\n                <strong>Métodos Adicionales:</strong> {{ menuData?.businessInfo?.paymentInfo?.otherPaymentMethods }}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Añadir el componente ReservaForm en una sección visible -->\r\n        <div class=\"reserva-section container mt-5\">\r\n          <h3 class=\"text-center mb-4\">¿Quieres hacer una reserva?</h3>\r\n          <ReservaForm />\r\n        </div>\r\n        \r\n        <!-- Sistema de notificaciones toast -->\r\n        <div v-if=\"toast.visible\" \r\n             class=\"toast-notification\" \r\n             :class=\"toast.type\">\r\n          {{ toast.message }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted, reactive, onUnmounted } from 'vue';\r\nimport { useRoute } from 'vue-router';\r\nimport { getSharedMenu } from '../services/menuService';\r\nimport { saveReservation } from '../services/reservaService'; // Importamos el servicio de reservas\r\nimport { getMenuItems, updateItemAvailability } from '../services/storageService'; // Importar funciones necesarias\r\nimport ReservaForm from '../components/reservas/ReservaForm.vue';\r\nimport eventBus from '../utils/eventBus';\r\nimport { \r\n  fetchBusinessInfoFromBackend, \r\n  startBusinessInfoSyncInterval, \r\n  stopBusinessInfoSyncInterval \r\n} from '../services/businessInfoService';\r\n\r\nexport default {\r\n  name: 'SharedMenuView',\r\n  components: {\r\n    ReservaForm,\r\n  },\r\n  props: {\r\n    // Añade id como prop si lo necesitas\r\n    id: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  setup(props) {\r\n    const route = useRoute();\r\n    const menuId = computed(() => props.id || route.params.id);\r\n    const menuData = ref({\r\n      items: [],\r\n      businessInfo: {\r\n        name: 'Restaurante WebSAP',\r\n        description: 'Deliciosa comida para todos los gustos',\r\n        contact: 'info@websap.com',\r\n        address: 'Calle Principal #123',\r\n        logo: null,\r\n        paymentInfo: {\r\n          qrImage: null,\r\n          qrTitle: 'Escanea para pagar',\r\n          nequiNumber: null,\r\n          nequiImage: null,\r\n          bankInfo: 'Banco XYZ - Cuenta 123456789',\r\n          otherPaymentMethods: 'Aceptamos efectivo y tarjetas'\r\n        }\r\n      }\r\n    });\r\n    const isLoading = ref(true);\r\n    const error = ref(null);\r\n    const cartItems = ref([]);\r\n    const orderRef = ref(null);\r\n    const isProcessingOrder = ref(false);\r\n    const lastBusinessInfoUpdate = ref(null);\r\n    \r\n    console.log(\"SharedMenuView montado, ID del menú:\", route.params.id);\r\n\r\n    // Sistema de notificaciones toast\r\n    const toast = ref({\r\n      visible: false,\r\n      message: '',\r\n      type: 'success', // 'success', 'warning', 'error'\r\n      timeoutId: null\r\n    });\r\n\r\n    // Cargar menú cuando el componente se monte\r\n    onMounted(() => {\r\n      loadMenu();\r\n      \r\n      // Suscribirse al evento de actualización de información del negocio\r\n      eventBus.on('business-info-updated', handleBusinessInfoUpdate);\r\n      \r\n      // Iniciar la sincronización periódica con parámetro true para desactivarla en vista compartida\r\n      startBusinessInfoSyncInterval(true);\r\n    });\r\n    \r\n    // Al desmontar el componente, cancelar suscripciones y detener intervalos\r\n    onUnmounted(() => {\r\n      eventBus.off('business-info-updated', handleBusinessInfoUpdate);\r\n      stopBusinessInfoSyncInterval();\r\n      \r\n      // Limpiar timeout del toast si existe\r\n      if (toast.value.timeoutId) {\r\n        clearTimeout(toast.value.timeoutId);\r\n      }\r\n    });\r\n    \r\n    // Manejar la actualización de información del negocio\r\n    const handleBusinessInfoUpdate = (updatedInfo) => {\r\n      console.log('Nueva información del negocio recibida en SharedMenuView:', updatedInfo);\r\n      \r\n      if (!updatedInfo) return;\r\n      \r\n      // Actualizar la información del negocio en menuData\r\n      menuData.value.businessInfo = {\r\n        ...updatedInfo\r\n      };\r\n      \r\n      lastBusinessInfoUpdate.value = Date.now();\r\n      \r\n      // Mostrar notificación sutil\r\n      showToast('Información del negocio actualizada', 'info');\r\n    };\r\n\r\n    // Cargar el menú desde la API\r\n    async function loadMenu() {\r\n      try {\r\n        isLoading.value = true;\r\n        error.value = null; // Resetear error al inicio\r\n        console.log(\"Cargando menú con ID:\", route.params.id);\r\n        \r\n        if (!route.params.id) {\r\n          error.value = 'ID de menú no especificado';\r\n          isLoading.value = false;\r\n          return;\r\n        }\r\n        \r\n        // Intenta cargar desde localStorage primero (por si hay un carrito guardado)\r\n        const savedCart = localStorage.getItem(`cart_${route.params.id}`);\r\n        if (savedCart) {\r\n          try {\r\n            cartItems.value = JSON.parse(savedCart);\r\n            console.log(\"Carrito recuperado de localStorage:\", cartItems.value);\r\n          } catch (e) {\r\n            console.error(\"Error al parsear carrito de localStorage:\", e);\r\n          }\r\n        }\r\n        \r\n        try {\r\n          // Cargar el menú y los items\r\n          const data = await getSharedMenu(route.params.id);\r\n          \r\n          if (data && data.items) {\r\n            // Asignar los items al menuData\r\n            menuData.value.items = data.items;\r\n            \r\n            // Intentar cargar la información del negocio desde el backend\r\n            try {\r\n              const businessInfo = await fetchBusinessInfoFromBackend();\r\n              if (businessInfo) {\r\n                menuData.value.businessInfo = businessInfo;\r\n                lastBusinessInfoUpdate.value = Date.now();\r\n                console.log(\"Información del negocio cargada del backend:\", businessInfo);\r\n              }\r\n            } catch (businessInfoError) {\r\n              console.warn(\"No se pudo cargar información del negocio desde backend:\", businessInfoError);\r\n              // Mantener la información que vino con el menú si existe\r\n              if (data.businessInfo) {\r\n                menuData.value.businessInfo = data.businessInfo;\r\n              }\r\n            }\r\n            \r\n            console.log(\"Menú cargado con éxito:\", menuData.value);\r\n            \r\n            // Inicializar disponibilidad para cada ítem\r\n            menuData.value.items.forEach(item => {\r\n              // Si la disponibilidad es explícitamente 0, mantenerla así\r\n              // Si es undefined o null, usar 0 en lugar de un valor predeterminado de 10\r\n              item.availableQuantity = item.availableQuantity !== undefined ? \r\n                Number(item.availableQuantity) : 0;\r\n              item.realAvailability = item.availableQuantity;\r\n            });\r\n            \r\n            // Actualizar disponibilidad real considerando el carrito\r\n            updateAvailabilityInMenu();\r\n            \r\n            // Guardar en localStorage como respaldo\r\n            try {\r\n              localStorage.setItem(`menu_${route.params.id}`, JSON.stringify(menuData.value));\r\n            } catch (saveError) {\r\n              console.warn('No se pudo guardar el menú en localStorage:', saveError);\r\n            }\r\n          } else {\r\n            throw new Error('Datos de menú no válidos');\r\n          }\r\n        } catch (apiError) {\r\n          console.error(\"Error al cargar el menú desde la API:\", apiError);\r\n          \r\n          // Intentar recuperar desde localStorage como respaldo\r\n          try {\r\n            const cachedMenu = localStorage.getItem(`menu_${route.params.id}`);\r\n            if (cachedMenu) {\r\n              menuData.value = JSON.parse(cachedMenu);\r\n              console.log(\"Menú recuperado desde localStorage:\", menuData.value);\r\n              \r\n              if (menuData.value && menuData.value.items) {\r\n                // Inicializar disponibilidad para cada ítem\r\n                menuData.value.items.forEach(item => {\r\n                  item.availableQuantity = item.availableQuantity !== undefined ? \r\n                    Number(item.availableQuantity) : 0;\r\n                  item.realAvailability = item.availableQuantity;\r\n                });\r\n                \r\n                // Actualizar disponibilidad real considerando el carrito\r\n                updateAvailabilityInMenu();\r\n                \r\n                // Mostrar notificación de que se está usando datos en caché\r\n                showToast('Usando datos almacenados localmente. Algunas funciones pueden estar limitadas.', 'warning');\r\n              } else {\r\n                throw new Error('Datos de menú en caché no válidos');\r\n              }\r\n            } else {\r\n              throw new Error('No se encontró el menú en caché');\r\n            }\r\n          } catch (cacheError) {\r\n            console.error(\"Error al recuperar menú desde caché:\", cacheError);\r\n            error.value = 'No se encontró el menú solicitado. Por favor, verifica el enlace o intenta más tarde.';\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error general al cargar el menú:\", e);\r\n        error.value = e.message || 'Error al cargar el menú';\r\n      } finally {\r\n        isLoading.value = false;\r\n      }\r\n    }\r\n\r\n    // Verificar si hay información de pago\r\n    const hasPaymentInfo = computed(() => {\r\n      const paymentInfo = menuData.value?.businessInfo?.paymentInfo;\r\n      \r\n      if (!paymentInfo) return false;\r\n      \r\n      // Verificar si hay al menos un campo de información de pago con datos\r\n      return !!(\r\n        (paymentInfo.qrImage && isValidImage(paymentInfo.qrImage)) || \r\n        paymentInfo.qrTitle || \r\n        paymentInfo.nequiNumber || \r\n        (paymentInfo.nequiImage && isValidImage(paymentInfo.nequiImage)) || \r\n        paymentInfo.bankInfo || \r\n        paymentInfo.otherPaymentMethods\r\n      );\r\n    });\r\n    \r\n    // Contador total de items\r\n    const totalItems = computed(() => {\r\n      return cartItems.value.reduce((total, item) => total + item.quantity, 0);\r\n    });\r\n\r\n    // Total del carrito\r\n    const cartTotal = computed(() => {\r\n      return cartItems.value.reduce((total, item) => {\r\n        return total + (item.price * item.quantity);\r\n      }, 0);\r\n    });\r\n\r\n    // Formatear precio\r\n    function formatPrice(price) {\r\n      if (isNaN(Number(price))) return '0,00';\r\n      \r\n      // Convertir a número y formatear con 2 decimales fijos\r\n      const numero = Number(price).toFixed(2);\r\n      \r\n      // Separar parte entera y decimal\r\n      const [parteEntera, parteDecimal] = numero.split('.');\r\n      \r\n      // Formatear parte entera con puntos como separadores de miles\r\n      const parteEnteraFormateada = parteEntera.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\r\n      \r\n      // Unir con coma como separador decimal\r\n      return `${parteEnteraFormateada},${parteDecimal}`;\r\n    }\r\n\r\n    // Agregar al carrito con verificación de disponibilidad\r\n    async function addToCart(item) {\r\n      // Verificación directa antes de hacer la comprobación completa\r\n      if (Number(item.availableQuantity) <= 0) {\r\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\r\n        return;\r\n      }\r\n      \r\n      const isAvailable = await checkAvailability(item);\r\n      if (!isAvailable) return;\r\n      \r\n      const existingItem = cartItems.value.find(i => {\r\n        // Asegurar que ambos items tienen ID y compararlos, o comparar por nombre si no hay ID\r\n        if (item.id && i.id) {\r\n          return i.id === item.id;\r\n        }\r\n        return i.name === item.name;\r\n      });\r\n      \r\n      if (existingItem) {\r\n        existingItem.quantity++;\r\n      } else {\r\n        cartItems.value.push({\r\n          id: item.id || Date.now().toString(),\r\n          name: item.name,\r\n          price: item.price,\r\n          quantity: 1,\r\n          availableQuantity: item.availableQuantity || 0 // Usar 0 como valor por defecto\r\n        });\r\n      }\r\n      \r\n      // Guardar carrito en localStorage\r\n      saveCartToLocalStorage();\r\n      \r\n      // Actualizar la disponibilidad en tiempo real\r\n      updateAvailabilityInMenu();\r\n      \r\n      // Mostrar notificación de éxito\r\n      showToast(`${item.name} añadido al carrito`, 'success');\r\n    }\r\n    \r\n    // Mostrar notificaciones toast\r\n    function showToast(message, type = 'success', duration = 5000) { // Aumentar a 5 segundos\r\n      console.log(`[Toast] Mostrando notificación: ${message} (${type})`);\r\n      \r\n      // Si ya hay un toast visible, limpiamos su timeout\r\n      if (toast.value.timeoutId) {\r\n        clearTimeout(toast.value.timeoutId);\r\n      }\r\n      \r\n      // Configurar el nuevo toast\r\n      toast.value.message = message;\r\n      toast.value.type = type;\r\n      toast.value.visible = true;\r\n      \r\n      // Debug: verificar que el estado del toast cambió\r\n      console.log(`[Toast] Estado: visible=${toast.value.visible}, message=${toast.value.message}`);\r\n      \r\n      // Configurar timeout para ocultar después de la duración\r\n      toast.value.timeoutId = setTimeout(() => {\r\n        console.log(`[Toast] Ocultando notificación después de ${duration}ms`);\r\n        toast.value.visible = false;\r\n      }, duration);\r\n    }\r\n\r\n    // Guardar carrito en localStorage\r\n    function saveCartToLocalStorage() {\r\n      try {\r\n        localStorage.setItem(`cart_${route.params.id}`, JSON.stringify(cartItems.value));\r\n      } catch (e) {\r\n        console.error(\"Error al guardar carrito en localStorage:\", e);\r\n      }\r\n    }\r\n\r\n    // Incrementar cantidad\r\n    function increaseQuantity(index) {\r\n      const item = cartItems.value[index];\r\n      \r\n      // Buscar el ítem en el menú\r\n      const menuItem = menuData.value.items?.find(i => i.id === item.id);\r\n      if (menuItem) {\r\n        // Verificar disponibilidad\r\n        const availableQuantity = menuItem.availableQuantity || 0;\r\n        if (item.quantity >= availableQuantity) {\r\n          showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // Incrementar cantidad\r\n      item.quantity++;\r\n      \r\n      // Guardar carrito y actualizar disponibilidad\r\n      saveCartToLocalStorage();\r\n      updateAvailabilityInMenu();\r\n    }\r\n\r\n    // Reemplazar la función decreaseQuantity (líneas 409-416)\r\n    function decreaseQuantity(index) {\r\n      if (cartItems.value[index].quantity > 1) {\r\n        cartItems.value[index].quantity--;\r\n        saveCartToLocalStorage();\r\n        updateAvailabilityInMenu(); // Actualizar disponibilidad\r\n      } else {\r\n        removeFromCart(index);\r\n      }\r\n    }\r\n\r\n    // Reemplazar la función removeFromCart (líneas 419-422)\r\n    function removeFromCart(index) {\r\n      cartItems.value.splice(index, 1);\r\n      saveCartToLocalStorage();\r\n      updateAvailabilityInMenu(); // Actualizar disponibilidad\r\n    }\r\n    \r\n    // Completar pedido con actualización de inventario\r\n    async function completeOrder() {\r\n      try {\r\n        // Validaciones básicas\r\n        if (cartItems.value.length === 0) {\r\n          showToast('No hay ítems en el pedido', 'error');\r\n          return;\r\n        }\r\n        \r\n        if (!customerInfo.value.name || !customerInfo.value.phone) {\r\n          showToast('Por favor complete su nombre y teléfono', 'error');\r\n          return;\r\n        }\r\n      \r\n        // Indicar que está procesando\r\n        isProcessingOrder.value = true;\r\n        \r\n        // Actualizar inventario - Usar el carrito correcto\r\n        await updateInventory();\r\n        \r\n        // Compartir en WhatsApp\r\n        openWhatsAppShare();\r\n        \r\n        showToast('¡Pedido completado! Gracias por tu compra.', 'success');\r\n        \r\n        // Limpiar carrito y datos del cliente después de completar\r\n        setTimeout(() => {\r\n          // Limpiar carrito\r\n          cartItems.value = [];\r\n          \r\n          // Limpiar localStorage\r\n          localStorage.removeItem(`cart_${route.params.id}`);\r\n          \r\n          // Limpiar datos del cliente\r\n          customerInfo.value = {\r\n            name: '',\r\n            phone: '',\r\n            email: '',\r\n            address: ''\r\n          };\r\n          additionalMessage.value = '';\r\n          isProcessingOrder.value = false;\r\n        }, 2000);\r\n      } catch (error) {\r\n        console.error('Error al completar el pedido:', error);\r\n        showToast('Error al procesar el pedido', 'error');\r\n        isProcessingOrder.value = false;\r\n      }\r\n    }\r\n    \r\n    // Compartir pedido por WhatsApp sin actualizar inventario\r\n    function shareOrderByWhatsApp() {\r\n      // Validaciones básicas\r\n      if (cartItems.value.length === 0) {\r\n        showToast('No hay ítems en el pedido', 'error');\r\n        return;\r\n      }\r\n      \r\n        if (!customerInfo.value.name || !customerInfo.value.phone) {\r\n        showToast('Por favor complete su nombre y teléfono', 'error');\r\n          return;\r\n        }\r\n        \r\n      // Compartir directamente en WhatsApp sin actualizar inventario\r\n      openWhatsAppShare();\r\n      \r\n      showToast('Pedido compartido por WhatsApp', 'success');\r\n    }\r\n\r\n    function openWhatsAppShare() {\r\n      // Construir mensaje de pedido para WhatsApp\r\n      let whatsappMessage = `*Pedido de ${customerInfo.value.name}*\\n\\n`;\r\n      whatsappMessage += '*Productos:*\\n';\r\n      \r\n      cartItems.value.forEach(item => {\r\n        const subtotal = (item.price * item.quantity).toFixed(2);\r\n        whatsappMessage += `- ${item.quantity}x ${item.name}: $${formatPrice(item.price)} c/u = $${formatPrice(subtotal)}\\n`;\r\n      });\r\n      \r\n      whatsappMessage += `💵  \\n*Total: $${formatPrice(cartTotal.value)}*\\n\\n`;\r\n      \r\n      if (customerInfo.value.phone) {\r\n        whatsappMessage += `📞 *Teléfono:* ${customerInfo.value.phone}\\n`;\r\n      }\r\n      \r\n      if (customerInfo.value.email) {\r\n        whatsappMessage += `✉️ *Email:* ${customerInfo.value.email}\\n`;\r\n      }\r\n      \r\n      if (customerInfo.value.address) {\r\n        whatsappMessage += `📍 *Dirección:* ${customerInfo.value.address}\\n`;\r\n      }\r\n      \r\n      if (additionalMessage.value) {\r\n        whatsappMessage += `📝 \\n*Notas adicionales:*\\n${additionalMessage.value}\\n`;\r\n      }\r\n      \r\n      // Añadir método de pago seleccionado\r\n      whatsappMessage += `\\n*Forma de pago:* ${selectedPaymentMethod.value === 'qr' ? 'Código QR' : \r\n                           (selectedPaymentMethod.value === 'nequi' ? 'Nequi' : 'Contra entrega')}\\n`;\r\n      \r\n      // Formato para URL de WhatsApp\r\n      const encodedMessage = encodeURIComponent(whatsappMessage);\r\n      const whatsappUrl = `https://wa.me/?text=${encodedMessage}`;\r\n      \r\n      // Abrir WhatsApp en una nueva ventana\r\n      window.open(whatsappUrl, '_blank');\r\n    }\r\n\r\n    // Desplazarse a la sección del pedido\r\n    function scrollToOrder() {\r\n      const orderSection = document.querySelector('.order-section');\r\n      if (orderSection) {\r\n        orderSection.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    }\r\n\r\n    // Verificar disponibilidad de inventario\r\n    async function checkAvailability(item) {\r\n      // Obtener la disponibilidad base (valor original del inventario)\r\n      // Importante: asegurarse que sea un número\r\n      const baseAvailability = Number(item.availableQuantity) || 0;\r\n      \r\n      // Verificación directa: si no hay stock, mostrar mensaje de error\r\n      if (baseAvailability <= 0) {\r\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\r\n        return false;\r\n      }\r\n      \r\n      // Obtener la cantidad actual en el carrito\r\n      const cartItem = cartItems.value.find(i => i.id === item.id);\r\n      const cartQuantity = cartItem ? cartItem.quantity : 0;\r\n      \r\n      // Calcular disponibilidad real\r\n      const realAvailability = baseAvailability - cartQuantity;\r\n      \r\n      // Verificar la disponibilidad considerando lo que ya está en el carrito\r\n      if (realAvailability <= 0) {\r\n        showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\r\n        return false;\r\n      } else if (realAvailability <= 5) {\r\n        showToast(`¡Solo quedan ${realAvailability} unidades de \"${item.name}\"!`, 'warning');\r\n      }\r\n      \r\n      return true;\r\n    }\r\n\r\n    // Actualizar inventario al completar pedido\r\n    async function updateInventory() {\r\n      try {\r\n        // Validaciones iniciales\r\n        if (!cartItems.value || cartItems.value.length === 0) {\r\n          console.warn('Intentando actualizar inventario con carrito vacío');\r\n          return;\r\n        }\r\n        \r\n        console.log(`Iniciando actualización de inventario para ${cartItems.value.length} productos...`);\r\n        \r\n        // Obtener los elementos actuales del menú para actualizar cantidades\r\n        const currentMenu = await getMenuItems();\r\n        if (!currentMenu || !Array.isArray(currentMenu)) {\r\n          console.error('No se pudo obtener el menú actual');\r\n          return false;\r\n        }\r\n        \r\n        // Crear una copia profunda del carrito para procesar (evitar modificaciones durante el procesamiento)\r\n        const itemsToProcess = JSON.parse(JSON.stringify(cartItems.value));\r\n        const updateResults = [];\r\n        let hasErrors = false;\r\n        \r\n        // Procesar cada elemento del carrito de forma secuencial para evitar condiciones de carrera\r\n        for (let i = 0; i < itemsToProcess.length; i++) {\r\n          const cartItem = itemsToProcess[i];\r\n          console.log(`Procesando item ${i+1}/${itemsToProcess.length}: ${cartItem.name} (ID: ${cartItem.id})`);\r\n          \r\n          try {\r\n            // Buscar el ítem correspondiente en el menú actual\r\n            const menuItem = currentMenu.find(item => item.id === cartItem.id);\r\n            \r\n            if (!menuItem) {\r\n              console.warn(`Elemento no encontrado en el menú: ${cartItem.name} (ID: ${cartItem.id})`);\r\n              updateResults.push({\r\n                name: cartItem.name,\r\n                success: false,\r\n                error: 'Elemento no encontrado en el menú'\r\n              });\r\n              continue;\r\n            }\r\n            \r\n            // Garantizar que estamos trabajando con números enteros válidos\r\n            const currentQuantity = parseInt(Number(menuItem.availableQuantity || 0), 10);\r\n            const soldQuantity = parseInt(Number(cartItem.quantity || 0), 10);\r\n            \r\n            if (isNaN(currentQuantity) || isNaN(soldQuantity)) {\r\n              const error = `Cantidades inválidas para ${cartItem.name}: disponible=${menuItem.availableQuantity}, vendido=${cartItem.quantity}`;\r\n              console.error(error);\r\n              updateResults.push({\r\n                name: cartItem.name,\r\n                success: false,\r\n                error: error\r\n              });\r\n              hasErrors = true;\r\n              continue;\r\n            }\r\n            \r\n            // Calcular nueva cantidad exacta como entero\r\n            const newQuantity = Math.max(0, currentQuantity - soldQuantity);\r\n            \r\n            console.log(`Actualizando ${cartItem.name}: ${currentQuantity} - ${soldQuantity} = ${newQuantity} (currentQuantity tipo: ${typeof currentQuantity}, soldQuantity tipo: ${typeof soldQuantity})`);\r\n            \r\n            // Actualizar disponibilidad usando la función mejorada - forzar como número entero\r\n            const updateSuccess = await updateItemAvailability(menuItem.id, newQuantity);\r\n            \r\n            // Registrar resultado detallado\r\n            updateResults.push({\r\n              name: cartItem.name,\r\n              oldQuantity: currentQuantity,\r\n              soldQuantity: soldQuantity,\r\n              newQuantity: newQuantity,\r\n              success: updateSuccess,\r\n              error: updateSuccess ? null : 'Error al actualizar disponibilidad'\r\n            });\r\n            \r\n            if (!updateSuccess) {\r\n              hasErrors = true;\r\n            }\r\n          } catch (itemError) {\r\n            console.error(`Error procesando ${cartItem.name}:`, itemError);\r\n            updateResults.push({\r\n              name: cartItem.name,\r\n              success: false,\r\n              error: itemError.message || 'Error desconocido'\r\n            });\r\n            hasErrors = true;\r\n          }\r\n        }\r\n        \r\n        // Mostrar resumen de la operación\r\n        const successCount = updateResults.filter(r => r.success).length;\r\n        console.log(`Actualización de inventario completada. Éxitos: ${successCount}/${itemsToProcess.length}`);\r\n        \r\n        // Registrar detalles completos de la actualización\r\n        console.log('Detalles de actualización de inventario:', updateResults);\r\n        \r\n        if (hasErrors) {\r\n          const failedItems = updateResults.filter(r => !r.success).map(r => r.name).join(', ');\r\n          console.warn(`Algunos productos no se pudieron actualizar: ${failedItems}`);\r\n        }\r\n        \r\n        return successCount > 0;\r\n      } catch (error) {\r\n        console.error('Error general al actualizar inventario:', error);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Añadir después de la función checkAvailability (línea 585)\r\n    // Función para actualizar la disponibilidad en tiempo real\r\n    function updateAvailabilityInMenu() {\r\n      if (!menuData.value?.items) return;\r\n      \r\n      // Actualizar la disponibilidad de todos los ítems\r\n      menuData.value.items.forEach(menuItem => {\r\n        // Encontrar si este ítem está en el carrito\r\n        const cartItem = cartItems.value.find(i => i.id === menuItem.id);\r\n        const cartQuantity = cartItem ? cartItem.quantity : 0;\r\n        \r\n        // Asegurarse de que availableQuantity sea un número exacto, no undefined o null\r\n        const baseAvailability = Number(menuItem.availableQuantity) || 0;\r\n        \r\n        // Calcular disponibilidad real\r\n        menuItem.realAvailability = baseAvailability - cartQuantity;\r\n        \r\n        console.log(`Disponibilidad actualizada para ${menuItem.name}: ${menuItem.realAvailability} unidades (base: ${baseAvailability}, carrito: ${cartQuantity})`);\r\n      });\r\n    }\r\n\r\n    // Verificar si una cadena de imagen es válida\r\n    function isValidImage(imageString) {\r\n      if (!imageString) return false;\r\n      \r\n      // Verificar si es una URL\r\n      if (imageString.startsWith('http://') || imageString.startsWith('https://')) {\r\n        return true;\r\n      }\r\n      \r\n      // Verificar si es una imagen en base64\r\n      if (imageString.startsWith('data:image/')) {\r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n    }\r\n    \r\n    // Corregir formato de imagen si es necesario\r\n    function fixImageFormat(imageString) {\r\n      if (!imageString) return '';\r\n      \r\n      // Si ya es una URL o base64 válido, devolverlo tal cual\r\n      if (isValidImage(imageString)) {\r\n        return imageString;\r\n      }\r\n      \r\n      // Intentar convertir a base64 si no tiene el prefijo correcto\r\n      if (imageString.includes('/9j/') && !imageString.startsWith('data:image/')) {\r\n        return `data:image/jpeg;base64,${imageString}`;\r\n      }\r\n      \r\n      // Si no se puede arreglar, devolver una imagen por defecto\r\n      return '';\r\n    }\r\n\r\n    // Datos del cliente\r\n    const customerInfo = ref({\r\n      name: '',\r\n      phone: '',\r\n      email: '',\r\n      address: ''\r\n    });\r\n\r\n    // Método de pago seleccionado\r\n    const selectedPaymentMethod = ref('cash'); // Por defecto contra entrega\r\n\r\n    // Mensaje adicional\r\n    const additionalMessage = ref('');\r\n\r\n    // Filtrar items regulares y especiales\r\n    const regularItems = computed(() => {\r\n      if (!menuData.value || !menuData.value.items) return [];\r\n      const filtered = menuData.value.items.filter(item => !item.isSpecial);\r\n      console.log('Platos regulares:', filtered.length, filtered.map(i => i.name));\r\n      return filtered;\r\n    });\r\n\r\n    const specialItems = computed(() => {\r\n      if (!menuData.value || !menuData.value.items) return [];\r\n      const filtered = menuData.value.items.filter(item => item.isSpecial === true);\r\n      console.log('Platos especiales:', filtered.length, filtered.map(i => i.name));\r\n      return filtered;\r\n    });\r\n\r\n    // Estado para el formulario de reserva\r\n    const showReservationForm = ref(false);\r\n    const isProcessingReservation = ref(false);\r\n    const reservationSuccess = ref(false);\r\n    const reservationError = ref(null);\r\n    \r\n    const reservationData = ref({\r\n      fullName: '',\r\n      mobilePhone: '',\r\n      landlinePhone: '',\r\n      address: '',\r\n      email: '',\r\n      orderDate: getCurrentDate(), // Set the initial value here\r\n      reservationDate: '',\r\n      reservationTime: '',\r\n      peopleCount: 1,\r\n      additionalNotes: ''\r\n    });\r\n    \r\n    // Función para obtener la fecha actual en formato YYYY-MM-DD\r\n    function getCurrentDate() {\r\n      const today = new Date();\r\n      const year = today.getFullYear();\r\n      const month = String(today.getMonth() + 1).padStart(2, '0');\r\n      const day = String(today.getDate()).padStart(2, '0');\r\n      return `${year}-${month}-${day}`;\r\n    }\r\n    \r\n    // Función para enviar la reserva\r\n    async function submitReservation() {\r\n      isProcessingReservation.value = true;\r\n      reservationSuccess.value = false;\r\n      reservationError.value = null;\r\n      \r\n      try {\r\n        // Utilizamos el servicio de reservas para guardar los datos\r\n        const result = await saveReservation(reservationData.value);\r\n        \r\n        if (result.success) {\r\n          // Reserva guardada correctamente\r\n          reservationSuccess.value = true;\r\n          showToast('¡Reserva enviada con éxito! Recibirá un correo de confirmación en breve.', 'success');\r\n          \r\n          // Enviar correo de confirmación (simulado)\r\n          console.log('Enviando correo de confirmación a:', reservationData.value.email);\r\n          \r\n          // Limpiar el formulario y ocultarlo después de un tiempo\r\n          setTimeout(() => {\r\n            resetReservationForm();\r\n            showReservationForm.value = false;\r\n          }, 3000);\r\n        } else {\r\n          // Error al guardar la reserva\r\n          throw new Error(result.error || 'Error al procesar la reserva');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al enviar la reserva:', error);\r\n        reservationError.value = 'Ocurrió un error al procesar su reserva. Por favor, intente nuevamente.';\r\n        showToast('Error al procesar la reserva. Por favor, intente nuevamente.', 'error');\r\n      } finally {\r\n        isProcessingReservation.value = false;\r\n      }\r\n    }\r\n    \r\n    // Función para cancelar la reserva\r\n    function cancelReservation() {\r\n      resetReservationForm();\r\n      showReservationForm.value = false;\r\n    }\r\n    \r\n    // Función para reiniciar el formulario\r\n    function resetReservationForm() {\r\n      reservationData.value.fullName = '';\r\n      reservationData.value.mobilePhone = '';\r\n      reservationData.value.landlinePhone = '';\r\n      reservationData.value.address = '';\r\n      reservationData.value.email = '';\r\n      reservationData.value.orderDate = getCurrentDate();\r\n      reservationData.value.reservationDate = '';\r\n      reservationData.value.reservationTime = '';\r\n      reservationData.value.peopleCount = 1;\r\n      reservationData.value.additionalNotes = '';\r\n      reservationSuccess.value = false;\r\n      reservationError.value = null;\r\n    }\r\n\r\n    // Refrescar información del negocio manualmente\r\n    async function refreshBusinessInfo() {\r\n      try {\r\n        const businessInfo = await fetchBusinessInfoFromBackend(true);\r\n        if (businessInfo) {\r\n          menuData.value.businessInfo = businessInfo;\r\n          lastBusinessInfoUpdate.value = Date.now();\r\n          showToast('Información del negocio actualizada', 'success');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al refrescar información del negocio:', error);\r\n        showToast('Error al actualizar información del negocio', 'error');\r\n      }\r\n    }\r\n\r\n    return {\r\n      menuId,\r\n      isLoading,\r\n      error,\r\n      menuData,\r\n      regularItems,\r\n      specialItems,\r\n      cartItems,\r\n      cartTotal,\r\n      totalItems,\r\n      customerInfo,\r\n      selectedPaymentMethod,\r\n      additionalMessage,\r\n      addToCart,\r\n      removeFromCart,\r\n      increaseQuantity,\r\n      decreaseQuantity,\r\n      formatPrice,\r\n      completeOrder,\r\n      shareOrderByWhatsApp,\r\n      scrollToOrder,\r\n      isValidImage,\r\n      fixImageFormat,\r\n      hasPaymentInfo,\r\n      // Reservas\r\n      showReservationForm,\r\n      reservationData,\r\n      isProcessingReservation,\r\n      reservationSuccess,\r\n      reservationError,\r\n      submitReservation,\r\n      cancelReservation,\r\n      getCurrentDate,\r\n      // Añadir el objeto toast para que esté disponible en la plantilla\r\n      toast,\r\n      // Función para refrescar información del negocio\r\n      refreshBusinessInfo,\r\n      // Última actualización de la información del negocio\r\n      lastBusinessInfoUpdate\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.shared-menu-container {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  font-family: 'Arial', sans-serif;\r\n}\r\n\r\n.loading, .error {\r\n  text-align: center;\r\n  padding: 50px;\r\n  font-size: 18px;\r\n}\r\n\r\n.error {\r\n  color: #d9534f;\r\n}\r\n\r\n.business-info {\r\n  text-align: center;\r\n  margin-bottom: 40px;\r\n  padding: 20px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.business-logo {\r\n  max-width: 100%;\r\n  max-height: 150px;\r\n  object-fit: contain;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.business-info h1 {\r\n  color: #343a40;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.description {\r\n  font-style: italic;\r\n  color: #6c757d;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.contact-info {\r\n  font-size: 14px;\r\n  color: #495057;\r\n}\r\n\r\n.menu-list {\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.menu-list h2 {\r\n  color: #28a745;\r\n  font-size: 24px;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  padding-bottom: 10px;\r\n  border-bottom: 2px solid #28a745;\r\n}\r\n\r\n.menu-items {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.menu-item {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.menu-item:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 5px 15px rgba(0,0,0,0.2);\r\n}\r\n\r\n.item-image-container {\r\n  width: 100%;\r\n  height: 200px;\r\n  overflow: hidden;\r\n}\r\n\r\n.item-image {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.no-image {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #f8f9fa;\r\n  color: #6c757d;\r\n  font-style: italic;\r\n}\r\n\r\n.item-details {\r\n  padding: 15px;\r\n}\r\n\r\n.item-details h3 {\r\n  margin-top: 0;\r\n  color: #343a40;\r\n  font-size: 18px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.item-description {\r\n  color: #6c757d;\r\n  font-size: 14px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.item-price {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #28a745;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.includes-drink {\r\n  font-size: 14px;\r\n  color: #6c757d;\r\n  font-style: italic;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.add-to-cart-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  padding: 10px 15px;\r\n  background-color: #28a745;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  font-weight: bold;\r\n}\r\n\r\n.add-to-cart-btn:hover {\r\n  background-color: #218838;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.quantity-display {\r\n  min-width: 30px;\r\n  text-align: center;\r\n  font-weight: bold;\r\n}\r\n\r\n/* Estilos para acciones de pedido */\r\n.order-actions {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  margin-top: 15px;\r\n  gap: 10px;\r\n}\r\n\r\n.complete-order-btn,\r\n.whatsapp-order-btn {\r\n  border: none;\r\n  padding: 12px 20px;\r\n  border-radius: 4px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  gap: 8px;\r\n  height: 48px;\r\n  font-size: 17px;\r\n  width: 100%;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  letter-spacing: 0.5px;\r\n  text-shadow: 0 1px 2px rgba(0,0,0,0.3);\r\n}\r\n\r\n.complete-order-btn {\r\n  background-color: #218838;\r\n  color: white;\r\n  margin: 0;\r\n  border: 2px solid #1e7e34;\r\n}\r\n\r\n.complete-order-btn:hover {\r\n  background-color: #1e7e34;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n}\r\n\r\n.whatsapp-order-btn {\r\n  height: 48px;\r\n  font-size: 17px;\r\n  width: 100%;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  letter-spacing: 0.5px;\r\n  text-shadow: 0 1px 2px rgba(0,0,0,0.3);\r\n}\r\n\r\n.complete-order-btn {\r\n  background-color: #218838;\r\n  color: white;\r\n  margin: 0;\r\n  border: 2px solid #1e7e34;\r\n}\r\n\r\n.complete-order-btn:hover {\r\n  background-color: #1e7e34;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n}\r\n\r\n.whatsapp-order-btn {\r\n  background-color: #128C7E;\r\n  color: white;\r\n  margin: 0;\r\n  border: 2px solid #075E54;\r\n}\r\n\r\n.whatsapp-order-btn:hover {\r\n  background-color: #075E54;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n}\r\n\r\n.btn-icon {\r\n  font-size: 18px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 8px;\r\n}\r\n\r\n/* Estilos para la sección de \"Tu Pedido\" */\r\n.order-section {\r\n  margin: 30px auto;\r\n  padding: 20px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  max-width: 800px;\r\n  border: 2px solid #28a745;\r\n  position: relative;\r\n}\r\n\r\n.order-section::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: -10px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  width: 0;\r\n  height: 0;\r\n  border-left: 10px solid transparent;\r\n  border-right: 10px solid transparent;\r\n  border-bottom: 10px solid #28a745;\r\n}\r\n\r\n.order-section h2 {\r\n  color: #343a40;\r\n  font-size: 24px;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  padding-bottom: 10px;\r\n  border-bottom: 2px solid #28a745;\r\n}\r\n\r\n.cart-items {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.cart-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 15px;\r\n  border-bottom: 1px solid #dee2e6;\r\n  animation: fadeIn 0.3s ease;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; transform: translateY(-10px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n\r\n.cart-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.cart-item-details h3 {\r\n  margin: 0 0 5px 0;\r\n  font-size: 16px;\r\n}\r\n\r\n.cart-item-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.quantity-btn {\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 50%;\r\n  background-color: #f8f9fa;\r\n  border: 1px solid #28a745;\r\n  color: #28a745;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.quantity-btn:hover {\r\n  background-color: #28a745;\r\n  color: white;\r\n}\r\n\r\n.remove-btn {\r\n  padding: 5px 10px;\r\n  background-color: #dc3545;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.remove-btn:hover {\r\n  background-color: #c82333;\r\n}\r\n\r\n.cart-total {\r\n  text-align: right;\r\n  padding-top: 15px;\r\n  border-top: 2px solid #28a745;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n  gap: 10px;\r\n}\r\n\r\n.cart-total h3 {\r\n  color: #343a40;\r\n  margin: 0;\r\n}\r\n\r\n/* Estilos para el formulario de datos del cliente */\r\n.customer-form {\r\n  width: 100%;\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 8px;\r\n  border: 1px solid #dee2e6;\r\n}\r\n\r\n.customer-form h4 {\r\n  color: #343a40;\r\n  margin-top: 0;\r\n  margin-bottom: 15px;\r\n  text-align: center;\r\n  font-size: 16px;\r\n  border-bottom: 1px solid #e9ecef;\r\n  padding-bottom: 8px;\r\n}\r\n\r\n.form-row {\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.form-input, .form-textarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ced4da;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  transition: border-color 0.3s;\r\n}\r\n\r\n.form-input:focus, .form-textarea:focus {\r\n  border-color: #28a745;\r\n  outline: none;\r\n}\r\n\r\n.form-textarea {\r\n  min-height: 80px;\r\n  resize: vertical;\r\n}\r\n\r\n/* Estilos para las opciones de pago */\r\n.payment-methods-selection {\r\n  width: 100%;\r\n  margin: 15px 0;\r\n}\r\n\r\n.payment-methods-selection h4 {\r\n  color: #343a40;\r\n  margin-top: 10px;\r\n  margin-bottom: 15px;\r\n  text-align: center;\r\n  font-size: 16px;\r\n  border-bottom: 1px solid #e9ecef;\r\n  padding-bottom: 8px;\r\n}\r\n\r\n.payment-options {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n}\r\n\r\n.payment-option {\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  padding: 8px 15px;\r\n  background-color: #f0f0f0;\r\n  border-radius: 4px;\r\n  transition: all 0.2s;\r\n  flex: 1;\r\n  min-width: 100px;\r\n  justify-content: center;\r\n  border: 2px solid transparent;\r\n}\r\n\r\n.payment-option:hover {\r\n  background-color: #e9ecef;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n}\r\n\r\n.payment-option input[type=\"radio\"] {\r\n  margin-right: 8px;\r\n  accent-color: #28a745;\r\n}\r\n\r\n.payment-option input[type=\"radio\"]:checked + .payment-option-text {\r\n  font-weight: bold;\r\n  color: #28a745;\r\n}\r\n\r\n.payment-option-text {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n}\r\n\r\n/* Estilo para opción seleccionada */\r\n.payment-option input[type=\"radio\"]:checked ~ .payment-option {\r\n  border-color: #28a745;\r\n  background-color: rgba(40, 167, 69, 0.1);\r\n}\r\n\r\n/* Botón flotante para ver pedido */\r\n.floating-cart-button {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  background-color: #28a745;\r\n  color: white;\r\n  border-radius: 50px;\r\n  padding: 10px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.2);\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  z-index: 98; /* Mantener por debajo del toast (9999) */\r\n  font-weight: bold;\r\n}\r\n\r\n/* Sistema de notificaciones toast */\r\n.toast-notification {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  padding: 15px 25px;\r\n  border-radius: 4px;\r\n  color: white;\r\n  z-index: 1000;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n  animation: slideIn 0.3s ease-out forwards;\r\n}\r\n\r\n@keyframes slideIn {\r\n  from {\r\n    transform: translateY(100%);\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n.toast-notification.success {\r\n  background-color: #28a745;\r\n}\r\n\r\n.toast-notification.error {\r\n  background-color: #dc3545;\r\n}\r\n\r\n.toast-notification.info {\r\n  background-color: #17a2b8;\r\n}\r\n\r\n.toast-notification.warning {\r\n  background-color: #ffc107;\r\n  color: #212529;\r\n}\r\n\r\n/* Estilos para la sección de formas de pago */\r\n.payment-section {\r\n  margin: 30px 0;\r\n  padding: 20px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.payment-section h2 {\r\n  color: #343a40;\r\n  font-size: 24px;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  padding-bottom: 10px;\r\n  border-bottom: 2px solid #28a745;\r\n}\r\n\r\n.payment-methods {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  justify-content: center;\r\n}\r\n\r\n.payment-method {\r\n  flex: 1;\r\n  min-width: 200px;\r\n  max-width: 300px;\r\n  padding: 15px;\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n  text-align: center;\r\n}\r\n\r\n.payment-method h3 {\r\n  margin-top: 0;\r\n  color: #343a40;\r\n  font-size: 18px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.payment-image {\r\n  max-width: 100%;\r\n  max-height: 200px;\r\n  object-fit: contain;\r\n  margin: 0 auto;\r\n  display: block;\r\n}\r\n\r\n/* Específicamente reducir el tamaño de la imagen de Nequi */\r\n.payment-method img[alt=\"Nequi\"] {\r\n  max-height: 150px;\r\n  width: auto;\r\n}\r\n\r\n.payment-detail {\r\n  margin-top: 10px;\r\n  font-size: 14px;\r\n  color: #6c757d;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}