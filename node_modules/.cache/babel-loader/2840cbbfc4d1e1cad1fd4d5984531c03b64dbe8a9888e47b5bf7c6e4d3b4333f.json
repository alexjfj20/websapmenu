{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport { ref, computed, onMounted, reactive, onUnmounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { getSharedMenu } from '../services/menuService';\nimport { saveReservation } from '../services/reservaService'; // Importamos el servicio de reservas\nimport ReservaForm from '../components/reservas/ReservaForm.vue';\nimport eventBus from '../utils/eventBus';\nimport { fetchBusinessInfoFromBackend, startBusinessInfoSyncInterval, stopBusinessInfoSyncInterval } from '../services/businessInfoService';\nexport default {\n  name: 'SharedMenuView',\n  components: {\n    ReservaForm\n  },\n  props: {\n    // Añade id como prop si lo necesitas\n    id: {\n      type: String,\n      default: ''\n    }\n  },\n  setup(props) {\n    const route = useRoute();\n    const menuId = computed(() => props.id || route.params.id);\n    const menuData = ref({\n      items: [],\n      businessInfo: {\n        name: 'Restaurante WebSAP',\n        description: 'Deliciosa comida para todos los gustos',\n        contact: 'info@websap.com',\n        address: 'Calle Principal #123',\n        logo: null,\n        paymentInfo: {\n          qrImage: null,\n          qrTitle: 'Escanea para pagar',\n          nequiNumber: null,\n          nequiImage: null,\n          bankInfo: 'Banco XYZ - Cuenta 123456789',\n          otherPaymentMethods: 'Aceptamos efectivo y tarjetas'\n        }\n      }\n    });\n    const isLoading = ref(true);\n    const error = ref(null);\n    const cartItems = ref([]);\n    const orderRef = ref(null);\n    const isProcessingOrder = ref(false);\n    const lastBusinessInfoUpdate = ref(null);\n    console.log(\"SharedMenuView montado, ID del menú:\", route.params.id);\n\n    // Sistema de notificaciones toast\n    const toast = ref({\n      visible: false,\n      message: '',\n      type: 'success',\n      // 'success', 'warning', 'error'\n      timeoutId: null\n    });\n\n    // Cargar menú cuando el componente se monte\n    onMounted(() => {\n      loadMenu();\n\n      // Suscribirse al evento de actualización de información del negocio\n      eventBus.on('business-info-updated', handleBusinessInfoUpdate);\n\n      // Iniciar la sincronización periódica\n      startBusinessInfoSyncInterval();\n    });\n\n    // Al desmontar el componente, cancelar suscripciones y detener intervalos\n    onUnmounted(() => {\n      eventBus.off('business-info-updated', handleBusinessInfoUpdate);\n      stopBusinessInfoSyncInterval();\n\n      // Limpiar timeout del toast si existe\n      if (toast.value.timeoutId) {\n        clearTimeout(toast.value.timeoutId);\n      }\n    });\n\n    // Manejar la actualización de información del negocio\n    const handleBusinessInfoUpdate = updatedInfo => {\n      console.log('Nueva información del negocio recibida en SharedMenuView:', updatedInfo);\n      if (!updatedInfo) return;\n\n      // Actualizar la información del negocio en menuData\n      menuData.value.businessInfo = {\n        ...updatedInfo\n      };\n      lastBusinessInfoUpdate.value = Date.now();\n\n      // Mostrar notificación sutil\n      showToast('Información del negocio actualizada', 'info');\n    };\n\n    // Cargar el menú desde la API\n    async function loadMenu() {\n      try {\n        isLoading.value = true;\n        error.value = null; // Resetear error al inicio\n        console.log(\"Cargando menú con ID:\", route.params.id);\n        if (!route.params.id) {\n          error.value = 'ID de menú no especificado';\n          isLoading.value = false;\n          return;\n        }\n\n        // Intenta cargar desde localStorage primero (por si hay un carrito guardado)\n        const savedCart = localStorage.getItem(`cart_${route.params.id}`);\n        if (savedCart) {\n          try {\n            cartItems.value = JSON.parse(savedCart);\n            console.log(\"Carrito recuperado de localStorage:\", cartItems.value);\n          } catch (e) {\n            console.error(\"Error al parsear carrito de localStorage:\", e);\n          }\n        }\n        try {\n          // Cargar el menú y los items\n          const data = await getSharedMenu(route.params.id);\n          if (data && data.items) {\n            // Asignar los items al menuData\n            menuData.value.items = data.items;\n\n            // Intentar cargar la información del negocio desde el backend\n            try {\n              const businessInfo = await fetchBusinessInfoFromBackend();\n              if (businessInfo) {\n                menuData.value.businessInfo = businessInfo;\n                lastBusinessInfoUpdate.value = Date.now();\n                console.log(\"Información del negocio cargada del backend:\", businessInfo);\n              }\n            } catch (businessInfoError) {\n              console.warn(\"No se pudo cargar información del negocio desde backend:\", businessInfoError);\n              // Mantener la información que vino con el menú si existe\n              if (data.businessInfo) {\n                menuData.value.businessInfo = data.businessInfo;\n              }\n            }\n            console.log(\"Menú cargado con éxito:\", menuData.value);\n\n            // Inicializar disponibilidad para cada ítem\n            menuData.value.items.forEach(item => {\n              // Si la disponibilidad es explícitamente 0, mantenerla así\n              // Si es undefined o null, usar 0 en lugar de un valor predeterminado de 10\n              item.availableQuantity = item.availableQuantity !== undefined ? Number(item.availableQuantity) : 0;\n              item.realAvailability = item.availableQuantity;\n            });\n\n            // Actualizar disponibilidad real considerando el carrito\n            updateAvailabilityInMenu();\n\n            // Guardar en localStorage como respaldo\n            try {\n              localStorage.setItem(`menu_${route.params.id}`, JSON.stringify(menuData.value));\n            } catch (saveError) {\n              console.warn('No se pudo guardar el menú en localStorage:', saveError);\n            }\n          } else {\n            throw new Error('Datos de menú no válidos');\n          }\n        } catch (apiError) {\n          console.error(\"Error al cargar el menú desde la API:\", apiError);\n\n          // Intentar recuperar desde localStorage como respaldo\n          try {\n            const cachedMenu = localStorage.getItem(`menu_${route.params.id}`);\n            if (cachedMenu) {\n              menuData.value = JSON.parse(cachedMenu);\n              console.log(\"Menú recuperado desde localStorage:\", menuData.value);\n              if (menuData.value && menuData.value.items) {\n                // Inicializar disponibilidad para cada ítem\n                menuData.value.items.forEach(item => {\n                  item.availableQuantity = item.availableQuantity !== undefined ? Number(item.availableQuantity) : 0;\n                  item.realAvailability = item.availableQuantity;\n                });\n\n                // Actualizar disponibilidad real considerando el carrito\n                updateAvailabilityInMenu();\n\n                // Mostrar notificación de que se está usando datos en caché\n                showToast('Usando datos almacenados localmente. Algunas funciones pueden estar limitadas.', 'warning');\n              } else {\n                throw new Error('Datos de menú en caché no válidos');\n              }\n            } else {\n              throw new Error('No se encontró el menú en caché');\n            }\n          } catch (cacheError) {\n            console.error(\"Error al recuperar menú desde caché:\", cacheError);\n            error.value = 'No se encontró el menú solicitado. Por favor, verifica el enlace o intenta más tarde.';\n          }\n        }\n      } catch (e) {\n        console.error(\"Error general al cargar el menú:\", e);\n        error.value = e.message || 'Error al cargar el menú';\n      } finally {\n        isLoading.value = false;\n      }\n    }\n\n    // Verificar si hay información de pago\n    const hasPaymentInfo = computed(() => {\n      const paymentInfo = menuData.value?.businessInfo?.paymentInfo;\n      if (!paymentInfo) return false;\n\n      // Verificar si hay al menos un campo de información de pago con datos\n      return !!(paymentInfo.qrImage && isValidImage(paymentInfo.qrImage) || paymentInfo.qrTitle || paymentInfo.nequiNumber || paymentInfo.nequiImage && isValidImage(paymentInfo.nequiImage) || paymentInfo.bankInfo || paymentInfo.otherPaymentMethods);\n    });\n\n    // Contador total de items\n    const totalItems = computed(() => {\n      return cartItems.value.reduce((total, item) => total + item.quantity, 0);\n    });\n\n    // Total del carrito\n    const cartTotal = computed(() => {\n      return cartItems.value.reduce((total, item) => {\n        return total + item.price * item.quantity;\n      }, 0);\n    });\n\n    // Formatear precio\n    function formatPrice(price) {\n      if (isNaN(Number(price))) return '0,00';\n\n      // Convertir a número y formatear con 2 decimales fijos\n      const numero = Number(price).toFixed(2);\n\n      // Separar parte entera y decimal\n      const [parteEntera, parteDecimal] = numero.split('.');\n\n      // Formatear parte entera con puntos como separadores de miles\n      const parteEnteraFormateada = parteEntera.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n\n      // Unir con coma como separador decimal\n      return `${parteEnteraFormateada},${parteDecimal}`;\n    }\n\n    // Agregar al carrito con verificación de disponibilidad\n    async function addToCart(item) {\n      // Verificación directa antes de hacer la comprobación completa\n      if (Number(item.availableQuantity) <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return;\n      }\n      const isAvailable = await checkAvailability(item);\n      if (!isAvailable) return;\n      const existingItem = cartItems.value.find(i => {\n        // Asegurar que ambos items tienen ID y compararlos, o comparar por nombre si no hay ID\n        if (item.id && i.id) {\n          return i.id === item.id;\n        }\n        return i.name === item.name;\n      });\n      if (existingItem) {\n        existingItem.quantity++;\n      } else {\n        cartItems.value.push({\n          id: item.id || Date.now().toString(),\n          name: item.name,\n          price: item.price,\n          quantity: 1,\n          availableQuantity: item.availableQuantity || 0 // Usar 0 como valor por defecto\n        });\n      }\n\n      // Guardar carrito en localStorage\n      saveCartToLocalStorage();\n\n      // Actualizar la disponibilidad en tiempo real\n      updateAvailabilityInMenu();\n\n      // Mostrar notificación de éxito\n      showToast(`${item.name} añadido al carrito`, 'success');\n    }\n\n    // Mostrar notificaciones toast\n    function showToast(message, type = 'success', duration = 5000) {\n      // Aumentar a 5 segundos\n      console.log(`[Toast] Mostrando notificación: ${message} (${type})`);\n\n      // Si ya hay un toast visible, limpiamos su timeout\n      if (toast.value.timeoutId) {\n        clearTimeout(toast.value.timeoutId);\n      }\n\n      // Configurar el nuevo toast\n      toast.value.message = message;\n      toast.value.type = type;\n      toast.value.visible = true;\n\n      // Debug: verificar que el estado del toast cambió\n      console.log(`[Toast] Estado: visible=${toast.value.visible}, message=${toast.value.message}`);\n\n      // Configurar timeout para ocultar después de la duración\n      toast.value.timeoutId = setTimeout(() => {\n        console.log(`[Toast] Ocultando notificación después de ${duration}ms`);\n        toast.value.visible = false;\n      }, duration);\n    }\n\n    // Guardar carrito en localStorage\n    function saveCartToLocalStorage() {\n      try {\n        localStorage.setItem(`cart_${route.params.id}`, JSON.stringify(cartItems.value));\n      } catch (e) {\n        console.error(\"Error al guardar carrito en localStorage:\", e);\n      }\n    }\n\n    // Incrementar cantidad\n    function increaseQuantity(index) {\n      const item = cartItems.value[index];\n\n      // Buscar el ítem en el menú\n      const menuItem = menuData.value.items?.find(i => i.id === item.id);\n      if (menuItem) {\n        // Verificar disponibilidad\n        const availableQuantity = menuItem.availableQuantity || 0;\n        if (item.quantity >= availableQuantity) {\n          showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n          return;\n        }\n      }\n\n      // Incrementar cantidad\n      item.quantity++;\n\n      // Guardar carrito y actualizar disponibilidad\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu();\n    }\n\n    // Reemplazar la función decreaseQuantity (líneas 409-416)\n    function decreaseQuantity(index) {\n      if (cartItems.value[index].quantity > 1) {\n        cartItems.value[index].quantity--;\n        saveCartToLocalStorage();\n        updateAvailabilityInMenu(); // Actualizar disponibilidad\n      } else {\n        removeFromCart(index);\n      }\n    }\n\n    // Reemplazar la función removeFromCart (líneas 419-422)\n    function removeFromCart(index) {\n      cartItems.value.splice(index, 1);\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu(); // Actualizar disponibilidad\n    }\n\n    // Completar pedido con actualización de inventario\n    async function completeOrder() {\n      try {\n        // Validaciones básicas\n        if (cartItems.value.length === 0) {\n          showToast('No hay ítems en el pedido', 'error');\n          return;\n        }\n        if (!customerInfo.value.name || !customerInfo.value.phone) {\n          showToast('Por favor complete su nombre y teléfono', 'error');\n          return;\n        }\n\n        // Indicar que está procesando\n        isProcessingOrder.value = true;\n\n        // Actualizar inventario\n        await updateInventory();\n\n        // Compartir en WhatsApp\n        openWhatsAppShare();\n        showToast('¡Pedido completado! Gracias por tu compra.', 'success');\n\n        // Limpiar carrito y datos del cliente después de completar\n        setTimeout(() => {\n          cartItems.value = [];\n          customerInfo.value = {\n            name: '',\n            phone: '',\n            email: '',\n            address: ''\n          };\n          additionalMessage.value = '';\n          isProcessingOrder.value = false;\n        }, 2000);\n      } catch (error) {\n        console.error('Error al completar el pedido:', error);\n        showToast('Error al procesar el pedido', 'error');\n        isProcessingOrder.value = false;\n      }\n    }\n\n    // Compartir pedido por WhatsApp sin actualizar inventario\n    function shareOrderByWhatsApp() {\n      // Validaciones básicas\n      if (cartItems.value.length === 0) {\n        showToast('No hay ítems en el pedido', 'error');\n        return;\n      }\n      if (!customerInfo.value.name || !customerInfo.value.phone) {\n        showToast('Por favor complete su nombre y teléfono', 'error');\n        return;\n      }\n\n      // Compartir directamente en WhatsApp sin actualizar inventario\n      openWhatsAppShare();\n      showToast('Pedido compartido por WhatsApp', 'success');\n    }\n    function openWhatsAppShare() {\n      // Construir mensaje de pedido para WhatsApp\n      let whatsappMessage = `*Pedido de ${customerInfo.value.name}*\\n\\n`;\n      whatsappMessage += '*Productos:*\\n';\n      cartItems.value.forEach(item => {\n        const subtotal = (item.price * item.quantity).toFixed(2);\n        whatsappMessage += `- ${item.quantity}x ${item.name}: $${formatPrice(item.price)} c/u = $${formatPrice(subtotal)}\\n`;\n      });\n      whatsappMessage += `\\n*Total: $${formatPrice(cartTotal.value)}*\\n\\n`;\n      if (customerInfo.value.phone) {\n        whatsappMessage += `*Teléfono:* ${customerInfo.value.phone}\\n`;\n      }\n      if (customerInfo.value.email) {\n        whatsappMessage += `*Email:* ${customerInfo.value.email}\\n`;\n      }\n      if (customerInfo.value.address) {\n        whatsappMessage += `*Dirección:* ${customerInfo.value.address}\\n`;\n      }\n      if (additionalMessage.value) {\n        whatsappMessage += `\\n*Notas adicionales:*\\n${additionalMessage.value}\\n`;\n      }\n\n      // Añadir método de pago seleccionado\n      whatsappMessage += `\\n*Forma de pago:* ${selectedPaymentMethod.value === 'qr' ? 'Código QR' : selectedPaymentMethod.value === 'nequi' ? 'Nequi' : 'Contra entrega'}\\n`;\n\n      // Formato para URL de WhatsApp\n      const encodedMessage = encodeURIComponent(whatsappMessage);\n      const whatsappUrl = `https://wa.me/?text=${encodedMessage}`;\n\n      // Abrir WhatsApp en una nueva ventana\n      window.open(whatsappUrl, '_blank');\n    }\n\n    // Desplazarse a la sección del pedido\n    function scrollToOrder() {\n      const orderSection = document.querySelector('.order-section');\n      if (orderSection) {\n        orderSection.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n\n    // Verificar disponibilidad de inventario\n    async function checkAvailability(item) {\n      // Obtener la disponibilidad base (valor original del inventario)\n      // Importante: asegurarse que sea un número\n      const baseAvailability = Number(item.availableQuantity) || 0;\n\n      // Verificación directa: si no hay stock, mostrar mensaje de error\n      if (baseAvailability <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return false;\n      }\n\n      // Obtener la cantidad actual en el carrito\n      const cartItem = cartItems.value.find(i => i.id === item.id);\n      const cartQuantity = cartItem ? cartItem.quantity : 0;\n\n      // Calcular disponibilidad real\n      const realAvailability = baseAvailability - cartQuantity;\n\n      // Verificar la disponibilidad considerando lo que ya está en el carrito\n      if (realAvailability <= 0) {\n        showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n        return false;\n      } else if (realAvailability <= 5) {\n        showToast(`¡Solo quedan ${realAvailability} unidades de \"${item.name}\"!`, 'warning');\n      }\n      return true;\n    }\n\n    // Actualizar inventario al completar pedido\n    async function updateInventory() {\n      try {\n        console.log('Actualizando inventario para los siguientes productos:');\n\n        // Usamos Promise.all para ejecutar todas las actualizaciones en paralelo\n        const updatePromises = cartItems.value.map(async item => {\n          if (!item.id) {\n            console.warn(`El producto ${item.name} no tiene ID, no se puede actualizar el inventario`);\n            return;\n          }\n          try {\n            // Obtener la disponibilidad actual\n            const storageService = await import('../services/storageService');\n            const availability = await storageService.checkItemAvailability(item.id);\n\n            // Validar que hay suficiente stock\n            if (availability.quantity < item.quantity) {\n              console.warn(`No hay suficiente stock para ${item.name}: disponible=${availability.quantity}, solicitado=${item.quantity}`);\n              return false;\n            }\n\n            // Calcular nueva cantidad\n            const newQuantity = Math.max(0, availability.quantity - item.quantity);\n\n            // Actualizar en la base de datos\n            await storageService.updateItemAvailability(item.id, newQuantity);\n            console.log(`- ${item.name}: ${item.quantity} unidades. Nuevo stock: ${newQuantity}`);\n\n            // Crear registro para el historial\n            const historyRecord = {\n              date: new Date().toISOString(),\n              type: 'decrease',\n              change: item.quantity,\n              previousQuantity: availability.quantity,\n              newQuantity: newQuantity,\n              reason: 'Pedido compartido por WhatsApp',\n              userId: null,\n              userName: 'Sistema'\n            };\n\n            // Añadir al historial (usando adminService para actualizaciones completas)\n            const adminService = await import('../services/adminService');\n            await adminService.updateItemStock(item.id, newQuantity, historyRecord);\n            return true;\n          } catch (error) {\n            console.error(`Error al actualizar el producto ${item.name}:`, error);\n            return false;\n          }\n        });\n\n        // Esperar a que todas las actualizaciones se completen\n        const results = await Promise.all(updatePromises);\n\n        // Verificar si todas las actualizaciones fueron exitosas\n        const allSuccessful = results.every(result => result !== false);\n\n        // Mostrar mensaje apropiado\n        if (allSuccessful) {\n          showToast('Inventario actualizado correctamente', 'success');\n        } else {\n          showToast('Algunos productos no pudieron ser actualizados', 'warning');\n        }\n        return allSuccessful;\n      } catch (error) {\n        console.error('Error al actualizar inventario:', error);\n        return false; // Error\n      }\n    }\n\n    // Añadir después de la función checkAvailability (línea 585)\n    // Función para actualizar la disponibilidad en tiempo real\n    function updateAvailabilityInMenu() {\n      if (!menuData.value?.items) return;\n\n      // Actualizar la disponibilidad de todos los ítems\n      menuData.value.items.forEach(menuItem => {\n        // Encontrar si este ítem está en el carrito\n        const cartItem = cartItems.value.find(i => i.id === menuItem.id);\n        const cartQuantity = cartItem ? cartItem.quantity : 0;\n\n        // Asegurarse de que availableQuantity sea un número exacto, no undefined o null\n        const baseAvailability = Number(menuItem.availableQuantity) || 0;\n\n        // Calcular disponibilidad real\n        menuItem.realAvailability = baseAvailability - cartQuantity;\n        console.log(`Disponibilidad actualizada para ${menuItem.name}: ${menuItem.realAvailability} unidades (base: ${baseAvailability}, carrito: ${cartQuantity})`);\n      });\n    }\n\n    // Verificar si una cadena de imagen es válida\n    function isValidImage(imageString) {\n      if (!imageString) return false;\n\n      // Verificar si es una URL\n      if (imageString.startsWith('http://') || imageString.startsWith('https://')) {\n        return true;\n      }\n\n      // Verificar si es una imagen en base64\n      if (imageString.startsWith('data:image/')) {\n        return true;\n      }\n      return false;\n    }\n\n    // Corregir formato de imagen si es necesario\n    function fixImageFormat(imageString) {\n      if (!imageString) return '';\n\n      // Si ya es una URL o base64 válido, devolverlo tal cual\n      if (isValidImage(imageString)) {\n        return imageString;\n      }\n\n      // Intentar convertir a base64 si no tiene el prefijo correcto\n      if (imageString.includes('/9j/') && !imageString.startsWith('data:image/')) {\n        return `data:image/jpeg;base64,${imageString}`;\n      }\n\n      // Si no se puede arreglar, devolver una imagen por defecto\n      return '';\n    }\n\n    // Datos del cliente\n    const customerInfo = ref({\n      name: '',\n      phone: '',\n      email: '',\n      address: ''\n    });\n\n    // Método de pago seleccionado\n    const selectedPaymentMethod = ref('cash'); // Por defecto contra entrega\n\n    // Mensaje adicional\n    const additionalMessage = ref('');\n\n    // Filtrar items regulares y especiales\n    const regularItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      const filtered = menuData.value.items.filter(item => !item.isSpecial);\n      console.log('Platos regulares:', filtered.length, filtered.map(i => i.name));\n      return filtered;\n    });\n    const specialItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      const filtered = menuData.value.items.filter(item => item.isSpecial === true);\n      console.log('Platos especiales:', filtered.length, filtered.map(i => i.name));\n      return filtered;\n    });\n\n    // Estado para el formulario de reserva\n    const showReservationForm = ref(false);\n    const isProcessingReservation = ref(false);\n    const reservationSuccess = ref(false);\n    const reservationError = ref(null);\n    const reservationData = ref({\n      fullName: '',\n      mobilePhone: '',\n      landlinePhone: '',\n      address: '',\n      email: '',\n      orderDate: getCurrentDate(),\n      // Set the initial value here\n      reservationDate: '',\n      reservationTime: '',\n      peopleCount: 1,\n      additionalNotes: ''\n    });\n\n    // Función para obtener la fecha actual en formato YYYY-MM-DD\n    function getCurrentDate() {\n      const today = new Date();\n      const year = today.getFullYear();\n      const month = String(today.getMonth() + 1).padStart(2, '0');\n      const day = String(today.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    }\n\n    // Función para enviar la reserva\n    async function submitReservation() {\n      isProcessingReservation.value = true;\n      reservationSuccess.value = false;\n      reservationError.value = null;\n      try {\n        // Utilizamos el servicio de reservas para guardar los datos\n        const result = await saveReservation(reservationData.value);\n        if (result.success) {\n          // Reserva guardada correctamente\n          reservationSuccess.value = true;\n          showToast('¡Reserva enviada con éxito! Recibirá un correo de confirmación en breve.', 'success');\n\n          // Enviar correo de confirmación (simulado)\n          console.log('Enviando correo de confirmación a:', reservationData.value.email);\n\n          // Limpiar el formulario y ocultarlo después de un tiempo\n          setTimeout(() => {\n            resetReservationForm();\n            showReservationForm.value = false;\n          }, 3000);\n        } else {\n          // Error al guardar la reserva\n          throw new Error(result.error || 'Error al procesar la reserva');\n        }\n      } catch (error) {\n        console.error('Error al enviar la reserva:', error);\n        reservationError.value = 'Ocurrió un error al procesar su reserva. Por favor, intente nuevamente.';\n        showToast('Error al procesar la reserva. Por favor, intente nuevamente.', 'error');\n      } finally {\n        isProcessingReservation.value = false;\n      }\n    }\n\n    // Función para cancelar la reserva\n    function cancelReservation() {\n      resetReservationForm();\n      showReservationForm.value = false;\n    }\n\n    // Función para reiniciar el formulario\n    function resetReservationForm() {\n      reservationData.value.fullName = '';\n      reservationData.value.mobilePhone = '';\n      reservationData.value.landlinePhone = '';\n      reservationData.value.address = '';\n      reservationData.value.email = '';\n      reservationData.value.orderDate = getCurrentDate();\n      reservationData.value.reservationDate = '';\n      reservationData.value.reservationTime = '';\n      reservationData.value.peopleCount = 1;\n      reservationData.value.additionalNotes = '';\n      reservationSuccess.value = false;\n      reservationError.value = null;\n    }\n\n    // Refrescar información del negocio manualmente\n    async function refreshBusinessInfo() {\n      try {\n        const businessInfo = await fetchBusinessInfoFromBackend(true);\n        if (businessInfo) {\n          menuData.value.businessInfo = businessInfo;\n          lastBusinessInfoUpdate.value = Date.now();\n          showToast('Información del negocio actualizada', 'success');\n        }\n      } catch (error) {\n        console.error('Error al refrescar información del negocio:', error);\n        showToast('Error al actualizar información del negocio', 'error');\n      }\n    }\n    return {\n      menuId,\n      isLoading,\n      error,\n      menuData,\n      regularItems,\n      specialItems,\n      cartItems,\n      cartTotal,\n      totalItems,\n      customerInfo,\n      selectedPaymentMethod,\n      additionalMessage,\n      addToCart,\n      removeFromCart,\n      increaseQuantity,\n      decreaseQuantity,\n      formatPrice,\n      completeOrder,\n      shareOrderByWhatsApp,\n      scrollToOrder,\n      isValidImage,\n      fixImageFormat,\n      hasPaymentInfo,\n      // Reservas\n      showReservationForm,\n      reservationData,\n      isProcessingReservation,\n      reservationSuccess,\n      reservationError,\n      submitReservation,\n      cancelReservation,\n      getCurrentDate,\n      // Añadir el objeto toast para que esté disponible en la plantilla\n      toast,\n      // Función para refrescar información del negocio\n      refreshBusinessInfo,\n      // Última actualización de la información del negocio\n      lastBusinessInfoUpdate\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","reactive","onUnmounted","useRoute","getSharedMenu","saveReservation","ReservaForm","eventBus","fetchBusinessInfoFromBackend","startBusinessInfoSyncInterval","stopBusinessInfoSyncInterval","name","components","props","id","type","String","default","setup","route","menuId","params","menuData","items","businessInfo","description","contact","address","logo","paymentInfo","qrImage","qrTitle","nequiNumber","nequiImage","bankInfo","otherPaymentMethods","isLoading","error","cartItems","orderRef","isProcessingOrder","lastBusinessInfoUpdate","console","log","toast","visible","message","timeoutId","loadMenu","on","handleBusinessInfoUpdate","off","value","clearTimeout","updatedInfo","Date","now","showToast","savedCart","localStorage","getItem","JSON","parse","e","data","businessInfoError","warn","forEach","item","availableQuantity","undefined","Number","realAvailability","updateAvailabilityInMenu","setItem","stringify","saveError","Error","apiError","cachedMenu","cacheError","hasPaymentInfo","isValidImage","totalItems","reduce","total","quantity","cartTotal","price","formatPrice","isNaN","numero","toFixed","parteEntera","parteDecimal","split","parteEnteraFormateada","replace","addToCart","isAvailable","checkAvailability","existingItem","find","i","push","toString","saveCartToLocalStorage","duration","setTimeout","increaseQuantity","index","menuItem","decreaseQuantity","removeFromCart","splice","completeOrder","length","customerInfo","phone","updateInventory","openWhatsAppShare","email","additionalMessage","shareOrderByWhatsApp","whatsappMessage","subtotal","selectedPaymentMethod","encodedMessage","encodeURIComponent","whatsappUrl","window","open","scrollToOrder","orderSection","document","querySelector","scrollIntoView","behavior","baseAvailability","cartItem","cartQuantity","updatePromises","map","storageService","availability","checkItemAvailability","newQuantity","Math","max","updateItemAvailability","historyRecord","date","toISOString","change","previousQuantity","reason","userId","userName","adminService","updateItemStock","results","Promise","all","allSuccessful","every","result","imageString","startsWith","fixImageFormat","includes","regularItems","filtered","filter","isSpecial","specialItems","showReservationForm","isProcessingReservation","reservationSuccess","reservationError","reservationData","fullName","mobilePhone","landlinePhone","orderDate","getCurrentDate","reservationDate","reservationTime","peopleCount","additionalNotes","today","year","getFullYear","month","getMonth","padStart","day","getDate","submitReservation","success","resetReservationForm","cancelReservation","refreshBusinessInfo"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\views\\SharedMenuView.vue"],"sourcesContent":["<template>\n  <div class=\"shared-menu-container\" :id=\"menuId\">\n    <div v-if=\"isLoading\" class=\"loading\">\n      <div class=\"spinner\"></div>\n      <p>Cargando menú...</p>\n    </div>\n    \n    <div v-else-if=\"error\" class=\"error\">\n      <p>{{ error }}</p>\n    </div>\n    \n    <div v-else class=\"menu-content\">\n      <!-- Información del negocio -->\n      <div v-if=\"menuData?.businessInfo\" class=\"business-info\">\n        <img v-if=\"menuData.businessInfo.logo && isValidImage(menuData.businessInfo.logo)\" :src=\"fixImageFormat(menuData.businessInfo.logo)\" alt=\"Logo\" class=\"business-logo\">\n        <h1>{{ menuData.businessInfo.name }}</h1>\n        <p class=\"description\">{{ menuData.businessInfo.description }}</p>\n        <div class=\"contact-info\" v-if=\"menuData.businessInfo.contact || menuData.businessInfo.address\">\n          <p v-if=\"menuData.businessInfo.contact\"><strong>Contacto:</strong> {{ menuData.businessInfo.contact }}</p>\n          <p v-if=\"menuData.businessInfo.address\"><strong>Dirección:</strong> {{ menuData.businessInfo.address }}</p>\n        </div>\n      </div>\n      \n      <!-- Lista de productos -->\n      <div>\n        <!-- Platos regulares -->\n        <div class=\"menu-list\">\n          <h2>Nuestro Menú</h2>\n          <div class=\"menu-items\">\n            <div v-for=\"(item, index) in regularItems\" :key=\"index\" class=\"menu-item\">\n              <div class=\"item-image-container\">\n                <img v-if=\"item.image && isValidImage(item.image)\" :src=\"fixImageFormat(item.image)\" alt=\"Imagen del producto\" class=\"item-image\">\n                <img v-else src=\"https://via.placeholder.com/150?text=Sin+Imagen\" alt=\"Sin imagen disponible\" class=\"item-image\">\n              </div>\n              <div class=\"item-details\">\n                <h3>{{ item.name }}</h3>\n                <p class=\"item-description\">{{ item.description }}</p>\n                <p class=\"item-price\">${{ formatPrice(item.price) }}</p>\n                <p class=\"includes-drink\" v-if=\"item.includesDrink\">Incluye refresco</p>\n                <button \n                  @click=\"addToCart(item)\" \n                  class=\"add-to-cart-btn\"\n                  :disabled=\"!item.realAvailability || item.realAvailability <= 0\"\n                  :class=\"{ 'disabled-btn': !item.realAvailability || item.realAvailability <= 0 }\"\n                >\n                  <span v-if=\"!item.realAvailability || item.realAvailability <= 0\" class=\"btn-icon\">❌</span>\n                  <span v-else class=\"btn-icon\">🛒</span>\n                  {{ !item.realAvailability || item.realAvailability <= 0 ? 'No disponible' : 'Añadir al pedido' }}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Platos especiales (solo se muestra si hay platos especiales) -->\n        <div v-if=\"specialItems.length > 0\" class=\"menu-list special-menu-list\">\n          <h2>Platos Especiales</h2>\n          <div class=\"menu-items\">\n            <div v-for=\"(item, index) in specialItems\" :key=\"index\" class=\"menu-item special-item\">\n              <div class=\"item-image-container\">\n                <img v-if=\"item.image && isValidImage(item.image)\" :src=\"fixImageFormat(item.image)\" alt=\"Imagen del producto\" class=\"item-image\">\n                <img v-else src=\"https://via.placeholder.com/150?text=Sin+Imagen\" alt=\"Sin imagen disponible\" class=\"item-image\">\n              </div>\n              <div class=\"item-details\">\n                <h3>{{ item.name }}</h3>\n                <p class=\"item-description\">{{ item.description }}</p>\n                <p class=\"item-price\">${{ formatPrice(item.price) }}</p>\n                <p class=\"includes-drink\" v-if=\"item.includesDrink\">Incluye refresco</p>\n                <button \n                  @click=\"addToCart(item)\" \n                  class=\"add-to-cart-btn special-button\"\n                  :disabled=\"!item.realAvailability || item.realAvailability <= 0\"\n                  :class=\"{ 'disabled-btn': !item.realAvailability || item.realAvailability <= 0 }\"\n                >\n                  <span v-if=\"!item.realAvailability || item.realAvailability <= 0\" class=\"btn-icon\">❌</span>\n                  <span v-else class=\"btn-icon\">🛒</span>\n                  {{ !item.realAvailability || item.realAvailability <= 0 ? 'No disponible' : 'Añadir al pedido' }}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Sección de \"Tu Pedido\" - Siempre visible aunque vacía -->\n        <div class=\"order-section\" ref=\"orderSection\">\n          <h2>Tu Pedido</h2>\n          \n          <div v-if=\"cartItems.length === 0\" class=\"empty-cart\">\n            <p>Tu pedido está vacío</p>\n            <p class=\"empty-cart-message\">Añade productos del menú para comenzar tu pedido</p>\n          </div>\n          \n          <div v-else class=\"cart-items\">\n            <div v-for=\"(item, index) in cartItems\" :key=\"index\" class=\"cart-item\">\n              <div class=\"cart-item-details\">\n                <h3>{{ item.name }}</h3>\n                <p>${{ formatPrice(item.price) }} x {{ item.quantity }}</p>\n              </div>\n              <div class=\"cart-item-actions\">\n                <button @click=\"decreaseQuantity(index)\" class=\"quantity-btn\">-</button>\n                <span class=\"quantity-display\">{{ item.quantity }}</span>\n                <button @click=\"increaseQuantity(index)\" class=\"quantity-btn\">+</button>\n                <button @click=\"removeFromCart(index)\" class=\"remove-btn\">\n                  <span class=\"btn-icon\">🗑️</span>\n                </button>\n              </div>\n            </div>\n            \n            <div class=\"cart-total\">\n              <h3>Total: ${{ formatPrice(cartTotal) }}</h3>\n              \n              <!-- Formulario de datos del cliente -->\n              <div class=\"customer-form\">\n                <h4>Datos del Cliente</h4>\n                <div class=\"form-row\">\n                  <input type=\"text\" v-model=\"customerInfo.name\" placeholder=\"Nombres completos\" class=\"form-input\">\n                </div>\n                <div class=\"form-row\">\n                  <input type=\"tel\" v-model=\"customerInfo.phone\" placeholder=\"Teléfono\" class=\"form-input\">\n                </div>\n                <div class=\"form-row\">\n                  <input type=\"email\" v-model=\"customerInfo.email\" placeholder=\"Correo electrónico\" class=\"form-input\">\n                </div>\n                <div class=\"form-row\">\n                  <input type=\"text\" v-model=\"customerInfo.address\" placeholder=\"Dirección de entrega\" class=\"form-input\">\n                </div>\n                \n                <!-- Lista horizontal de métodos de pago -->\n                <div class=\"payment-methods-selection\">\n                  <h4>Forma de Pago</h4>\n                  <div class=\"payment-options\">\n                    <label class=\"payment-option\">\n                      <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"qr\" name=\"paymentMethod\">\n                      <span class=\"payment-option-text\">QR</span>\n                    </label>\n                    <label class=\"payment-option\">\n                      <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"nequi\" name=\"paymentMethod\">\n                      <span class=\"payment-option-text\">Nequi</span>\n                    </label>\n                    <label class=\"payment-option\">\n                      <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"cash\" name=\"paymentMethod\">\n                      <span class=\"payment-option-text\">Contra entrega</span>\n                    </label>\n                  </div>\n                </div>\n                \n                <!-- Campo de mensaje adicional -->\n                <div class=\"form-row\">\n                  <textarea v-model=\"additionalMessage\" placeholder=\"Mensaje o instrucciones adicionales\" class=\"form-textarea\"></textarea>\n                </div>\n              </div>\n              \n              <div class=\"order-actions\">\n                <button @click=\"completeOrder\" class=\"complete-order-btn\">\n                  <span class=\"btn-icon\">✓</span> Completar Pedido\n                </button>\n                <button @click=\"shareOrderByWhatsApp\" class=\"whatsapp-order-btn\">\n                  <span class=\"btn-icon\">📱</span> Enviar por WhatsApp\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Botón flotante para ver pedido (visible cuando hay items y se hace scroll) -->\n        <div v-if=\"cartItems.length > 0\" class=\"floating-cart-button\" @click=\"scrollToOrder\">\n          <span class=\"cart-items-count\">{{ totalItems }}</span>\n          <span>Ver Pedido</span>\n        </div>\n        \n        <!-- Nueva sección: Forma de Pago -->\n        <div v-if=\"hasPaymentInfo\" class=\"payment-section\">\n          <h2>Forma de Pago</h2>\n          <div class=\"payment-methods\">\n            <div v-if=\"menuData?.businessInfo?.paymentInfo?.qrImage\" class=\"payment-method\">\n              <h3>{{ menuData?.businessInfo?.paymentInfo?.qrTitle || 'Código QR de Pago' }}</h3>\n              <img \n                v-if=\"menuData?.businessInfo?.paymentInfo?.qrImage && isValidImage(menuData?.businessInfo?.paymentInfo?.qrImage)\" \n                :src=\"fixImageFormat(menuData?.businessInfo?.paymentInfo?.qrImage)\" \n                alt=\"QR de Pago\" \n                class=\"payment-image\"\n              >\n            </div>\n            \n            <div v-if=\"menuData?.businessInfo?.paymentInfo?.nequiNumber || menuData?.businessInfo?.paymentInfo?.nequiImage\" class=\"payment-method\">\n              <h3>Pago con Nequi</h3>\n              <img \n                v-if=\"menuData?.businessInfo?.paymentInfo?.nequiImage && isValidImage(menuData?.businessInfo?.paymentInfo?.nequiImage)\" \n                :src=\"fixImageFormat(menuData?.businessInfo?.paymentInfo?.nequiImage)\" \n                alt=\"Nequi\" \n                class=\"payment-image\"\n              >\n              <p v-if=\"menuData?.businessInfo?.paymentInfo?.nequiNumber\" class=\"payment-detail\">\n                <strong>Número:</strong> {{ menuData?.businessInfo?.paymentInfo?.nequiNumber }}\n              </p>\n            </div>\n            \n            <div v-if=\"menuData?.businessInfo?.paymentInfo?.bankInfo\" class=\"payment-method\">\n              <h3>Pago Bancario</h3>\n              <p class=\"payment-detail\">\n                <strong>Información Bancaria:</strong> {{ menuData?.businessInfo?.paymentInfo?.bankInfo }}\n              </p>\n            </div>\n            \n            <div v-if=\"menuData?.businessInfo?.paymentInfo?.otherPaymentMethods\" class=\"payment-method\">\n              <h3>Otras Formas de Pago</h3>\n              <p class=\"payment-detail\">\n                <strong>Métodos Adicionales:</strong> {{ menuData?.businessInfo?.paymentInfo?.otherPaymentMethods }}\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Añadir el componente ReservaForm en una sección visible -->\n        <div class=\"reserva-section container mt-5\">\n          <h3 class=\"text-center mb-4\">¿Quieres hacer una reserva?</h3>\n          <ReservaForm />\n        </div>\n        \n        <!-- Sistema de notificaciones toast -->\n        <div v-if=\"toast.visible\" \n             class=\"toast-notification\" \n             :class=\"toast.type\">\n          {{ toast.message }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted, reactive, onUnmounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { getSharedMenu } from '../services/menuService';\nimport { saveReservation } from '../services/reservaService'; // Importamos el servicio de reservas\nimport ReservaForm from '../components/reservas/ReservaForm.vue';\nimport eventBus from '../utils/eventBus';\nimport { \n  fetchBusinessInfoFromBackend, \n  startBusinessInfoSyncInterval, \n  stopBusinessInfoSyncInterval \n} from '../services/businessInfoService';\n\nexport default {\n  name: 'SharedMenuView',\n  components: {\n    ReservaForm,\n  },\n  props: {\n    // Añade id como prop si lo necesitas\n    id: {\n      type: String,\n      default: ''\n    }\n  },\n  setup(props) {\n    const route = useRoute();\n    const menuId = computed(() => props.id || route.params.id);\n    const menuData = ref({\n      items: [],\n      businessInfo: {\n        name: 'Restaurante WebSAP',\n        description: 'Deliciosa comida para todos los gustos',\n        contact: 'info@websap.com',\n        address: 'Calle Principal #123',\n        logo: null,\n        paymentInfo: {\n          qrImage: null,\n          qrTitle: 'Escanea para pagar',\n          nequiNumber: null,\n          nequiImage: null,\n          bankInfo: 'Banco XYZ - Cuenta 123456789',\n          otherPaymentMethods: 'Aceptamos efectivo y tarjetas'\n        }\n      }\n    });\n    const isLoading = ref(true);\n    const error = ref(null);\n    const cartItems = ref([]);\n    const orderRef = ref(null);\n    const isProcessingOrder = ref(false);\n    const lastBusinessInfoUpdate = ref(null);\n    \n    console.log(\"SharedMenuView montado, ID del menú:\", route.params.id);\n\n    // Sistema de notificaciones toast\n    const toast = ref({\n      visible: false,\n      message: '',\n      type: 'success', // 'success', 'warning', 'error'\n      timeoutId: null\n    });\n\n    // Cargar menú cuando el componente se monte\n    onMounted(() => {\n      loadMenu();\n      \n      // Suscribirse al evento de actualización de información del negocio\n      eventBus.on('business-info-updated', handleBusinessInfoUpdate);\n      \n      // Iniciar la sincronización periódica\n      startBusinessInfoSyncInterval();\n    });\n    \n    // Al desmontar el componente, cancelar suscripciones y detener intervalos\n    onUnmounted(() => {\n      eventBus.off('business-info-updated', handleBusinessInfoUpdate);\n      stopBusinessInfoSyncInterval();\n      \n      // Limpiar timeout del toast si existe\n      if (toast.value.timeoutId) {\n        clearTimeout(toast.value.timeoutId);\n      }\n    });\n    \n    // Manejar la actualización de información del negocio\n    const handleBusinessInfoUpdate = (updatedInfo) => {\n      console.log('Nueva información del negocio recibida en SharedMenuView:', updatedInfo);\n      \n      if (!updatedInfo) return;\n      \n      // Actualizar la información del negocio en menuData\n      menuData.value.businessInfo = {\n        ...updatedInfo\n      };\n      \n      lastBusinessInfoUpdate.value = Date.now();\n      \n      // Mostrar notificación sutil\n      showToast('Información del negocio actualizada', 'info');\n    };\n\n    // Cargar el menú desde la API\n    async function loadMenu() {\n      try {\n        isLoading.value = true;\n        error.value = null; // Resetear error al inicio\n        console.log(\"Cargando menú con ID:\", route.params.id);\n        \n        if (!route.params.id) {\n          error.value = 'ID de menú no especificado';\n          isLoading.value = false;\n          return;\n        }\n        \n        // Intenta cargar desde localStorage primero (por si hay un carrito guardado)\n        const savedCart = localStorage.getItem(`cart_${route.params.id}`);\n        if (savedCart) {\n          try {\n            cartItems.value = JSON.parse(savedCart);\n            console.log(\"Carrito recuperado de localStorage:\", cartItems.value);\n          } catch (e) {\n            console.error(\"Error al parsear carrito de localStorage:\", e);\n          }\n        }\n        \n        try {\n          // Cargar el menú y los items\n          const data = await getSharedMenu(route.params.id);\n          \n          if (data && data.items) {\n            // Asignar los items al menuData\n            menuData.value.items = data.items;\n            \n            // Intentar cargar la información del negocio desde el backend\n            try {\n              const businessInfo = await fetchBusinessInfoFromBackend();\n              if (businessInfo) {\n                menuData.value.businessInfo = businessInfo;\n                lastBusinessInfoUpdate.value = Date.now();\n                console.log(\"Información del negocio cargada del backend:\", businessInfo);\n              }\n            } catch (businessInfoError) {\n              console.warn(\"No se pudo cargar información del negocio desde backend:\", businessInfoError);\n              // Mantener la información que vino con el menú si existe\n              if (data.businessInfo) {\n                menuData.value.businessInfo = data.businessInfo;\n              }\n            }\n            \n            console.log(\"Menú cargado con éxito:\", menuData.value);\n            \n            // Inicializar disponibilidad para cada ítem\n            menuData.value.items.forEach(item => {\n              // Si la disponibilidad es explícitamente 0, mantenerla así\n              // Si es undefined o null, usar 0 en lugar de un valor predeterminado de 10\n              item.availableQuantity = item.availableQuantity !== undefined ? \n                Number(item.availableQuantity) : 0;\n              item.realAvailability = item.availableQuantity;\n            });\n            \n            // Actualizar disponibilidad real considerando el carrito\n            updateAvailabilityInMenu();\n            \n            // Guardar en localStorage como respaldo\n            try {\n              localStorage.setItem(`menu_${route.params.id}`, JSON.stringify(menuData.value));\n            } catch (saveError) {\n              console.warn('No se pudo guardar el menú en localStorage:', saveError);\n            }\n          } else {\n            throw new Error('Datos de menú no válidos');\n          }\n        } catch (apiError) {\n          console.error(\"Error al cargar el menú desde la API:\", apiError);\n          \n          // Intentar recuperar desde localStorage como respaldo\n          try {\n            const cachedMenu = localStorage.getItem(`menu_${route.params.id}`);\n            if (cachedMenu) {\n              menuData.value = JSON.parse(cachedMenu);\n              console.log(\"Menú recuperado desde localStorage:\", menuData.value);\n              \n              if (menuData.value && menuData.value.items) {\n                // Inicializar disponibilidad para cada ítem\n                menuData.value.items.forEach(item => {\n                  item.availableQuantity = item.availableQuantity !== undefined ? \n                    Number(item.availableQuantity) : 0;\n                  item.realAvailability = item.availableQuantity;\n                });\n                \n                // Actualizar disponibilidad real considerando el carrito\n                updateAvailabilityInMenu();\n                \n                // Mostrar notificación de que se está usando datos en caché\n                showToast('Usando datos almacenados localmente. Algunas funciones pueden estar limitadas.', 'warning');\n              } else {\n                throw new Error('Datos de menú en caché no válidos');\n              }\n            } else {\n              throw new Error('No se encontró el menú en caché');\n            }\n          } catch (cacheError) {\n            console.error(\"Error al recuperar menú desde caché:\", cacheError);\n            error.value = 'No se encontró el menú solicitado. Por favor, verifica el enlace o intenta más tarde.';\n          }\n        }\n      } catch (e) {\n        console.error(\"Error general al cargar el menú:\", e);\n        error.value = e.message || 'Error al cargar el menú';\n      } finally {\n        isLoading.value = false;\n      }\n    }\n\n    // Verificar si hay información de pago\n    const hasPaymentInfo = computed(() => {\n      const paymentInfo = menuData.value?.businessInfo?.paymentInfo;\n      \n      if (!paymentInfo) return false;\n      \n      // Verificar si hay al menos un campo de información de pago con datos\n      return !!(\n        (paymentInfo.qrImage && isValidImage(paymentInfo.qrImage)) || \n        paymentInfo.qrTitle || \n        paymentInfo.nequiNumber || \n        (paymentInfo.nequiImage && isValidImage(paymentInfo.nequiImage)) || \n        paymentInfo.bankInfo || \n        paymentInfo.otherPaymentMethods\n      );\n    });\n    \n    // Contador total de items\n    const totalItems = computed(() => {\n      return cartItems.value.reduce((total, item) => total + item.quantity, 0);\n    });\n\n    // Total del carrito\n    const cartTotal = computed(() => {\n      return cartItems.value.reduce((total, item) => {\n        return total + (item.price * item.quantity);\n      }, 0);\n    });\n\n    // Formatear precio\n    function formatPrice(price) {\n      if (isNaN(Number(price))) return '0,00';\n      \n      // Convertir a número y formatear con 2 decimales fijos\n      const numero = Number(price).toFixed(2);\n      \n      // Separar parte entera y decimal\n      const [parteEntera, parteDecimal] = numero.split('.');\n      \n      // Formatear parte entera con puntos como separadores de miles\n      const parteEnteraFormateada = parteEntera.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n      \n      // Unir con coma como separador decimal\n      return `${parteEnteraFormateada},${parteDecimal}`;\n    }\n\n    // Agregar al carrito con verificación de disponibilidad\n    async function addToCart(item) {\n      // Verificación directa antes de hacer la comprobación completa\n      if (Number(item.availableQuantity) <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return;\n      }\n      \n      const isAvailable = await checkAvailability(item);\n      if (!isAvailable) return;\n      \n      const existingItem = cartItems.value.find(i => {\n        // Asegurar que ambos items tienen ID y compararlos, o comparar por nombre si no hay ID\n        if (item.id && i.id) {\n          return i.id === item.id;\n        }\n        return i.name === item.name;\n      });\n      \n      if (existingItem) {\n        existingItem.quantity++;\n      } else {\n        cartItems.value.push({\n          id: item.id || Date.now().toString(),\n          name: item.name,\n          price: item.price,\n          quantity: 1,\n          availableQuantity: item.availableQuantity || 0 // Usar 0 como valor por defecto\n        });\n      }\n      \n      // Guardar carrito en localStorage\n      saveCartToLocalStorage();\n      \n      // Actualizar la disponibilidad en tiempo real\n      updateAvailabilityInMenu();\n      \n      // Mostrar notificación de éxito\n      showToast(`${item.name} añadido al carrito`, 'success');\n    }\n    \n    // Mostrar notificaciones toast\n    function showToast(message, type = 'success', duration = 5000) { // Aumentar a 5 segundos\n      console.log(`[Toast] Mostrando notificación: ${message} (${type})`);\n      \n      // Si ya hay un toast visible, limpiamos su timeout\n      if (toast.value.timeoutId) {\n        clearTimeout(toast.value.timeoutId);\n      }\n      \n      // Configurar el nuevo toast\n      toast.value.message = message;\n      toast.value.type = type;\n      toast.value.visible = true;\n      \n      // Debug: verificar que el estado del toast cambió\n      console.log(`[Toast] Estado: visible=${toast.value.visible}, message=${toast.value.message}`);\n      \n      // Configurar timeout para ocultar después de la duración\n      toast.value.timeoutId = setTimeout(() => {\n        console.log(`[Toast] Ocultando notificación después de ${duration}ms`);\n        toast.value.visible = false;\n      }, duration);\n    }\n\n    // Guardar carrito en localStorage\n    function saveCartToLocalStorage() {\n      try {\n        localStorage.setItem(`cart_${route.params.id}`, JSON.stringify(cartItems.value));\n      } catch (e) {\n        console.error(\"Error al guardar carrito en localStorage:\", e);\n      }\n    }\n\n    // Incrementar cantidad\n    function increaseQuantity(index) {\n      const item = cartItems.value[index];\n      \n      // Buscar el ítem en el menú\n      const menuItem = menuData.value.items?.find(i => i.id === item.id);\n      if (menuItem) {\n        // Verificar disponibilidad\n        const availableQuantity = menuItem.availableQuantity || 0;\n        if (item.quantity >= availableQuantity) {\n          showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n          return;\n        }\n      }\n      \n      // Incrementar cantidad\n      item.quantity++;\n      \n      // Guardar carrito y actualizar disponibilidad\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu();\n    }\n\n    // Reemplazar la función decreaseQuantity (líneas 409-416)\n    function decreaseQuantity(index) {\n      if (cartItems.value[index].quantity > 1) {\n        cartItems.value[index].quantity--;\n        saveCartToLocalStorage();\n        updateAvailabilityInMenu(); // Actualizar disponibilidad\n      } else {\n        removeFromCart(index);\n      }\n    }\n\n    // Reemplazar la función removeFromCart (líneas 419-422)\n    function removeFromCart(index) {\n      cartItems.value.splice(index, 1);\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu(); // Actualizar disponibilidad\n    }\n    \n    // Completar pedido con actualización de inventario\n    async function completeOrder() {\n      try {\n        // Validaciones básicas\n        if (cartItems.value.length === 0) {\n          showToast('No hay ítems en el pedido', 'error');\n          return;\n        }\n        \n      if (!customerInfo.value.name || !customerInfo.value.phone) {\n          showToast('Por favor complete su nombre y teléfono', 'error');\n        return;\n      }\n      \n        // Indicar que está procesando\n      isProcessingOrder.value = true;\n      \n        // Actualizar inventario\n        await updateInventory();\n        \n        // Compartir en WhatsApp\n        openWhatsAppShare();\n        \n        showToast('¡Pedido completado! Gracias por tu compra.', 'success');\n        \n        // Limpiar carrito y datos del cliente después de completar\n        setTimeout(() => {\n        cartItems.value = [];\n        customerInfo.value = {\n          name: '',\n          phone: '',\n          email: '',\n          address: ''\n        };\n        additionalMessage.value = '';\n          isProcessingOrder.value = false;\n        }, 2000);\n      } catch (error) {\n        console.error('Error al completar el pedido:', error);\n        showToast('Error al procesar el pedido', 'error');\n        isProcessingOrder.value = false;\n      }\n    }\n    \n    // Compartir pedido por WhatsApp sin actualizar inventario\n    function shareOrderByWhatsApp() {\n      // Validaciones básicas\n      if (cartItems.value.length === 0) {\n        showToast('No hay ítems en el pedido', 'error');\n        return;\n      }\n      \n        if (!customerInfo.value.name || !customerInfo.value.phone) {\n        showToast('Por favor complete su nombre y teléfono', 'error');\n          return;\n        }\n        \n      // Compartir directamente en WhatsApp sin actualizar inventario\n      openWhatsAppShare();\n      \n      showToast('Pedido compartido por WhatsApp', 'success');\n    }\n\n    function openWhatsAppShare() {\n      // Construir mensaje de pedido para WhatsApp\n      let whatsappMessage = `*Pedido de ${customerInfo.value.name}*\\n\\n`;\n      whatsappMessage += '*Productos:*\\n';\n      \n      cartItems.value.forEach(item => {\n        const subtotal = (item.price * item.quantity).toFixed(2);\n        whatsappMessage += `- ${item.quantity}x ${item.name}: $${formatPrice(item.price)} c/u = $${formatPrice(subtotal)}\\n`;\n      });\n      \n      whatsappMessage += `\\n*Total: $${formatPrice(cartTotal.value)}*\\n\\n`;\n      \n      if (customerInfo.value.phone) {\n        whatsappMessage += `*Teléfono:* ${customerInfo.value.phone}\\n`;\n      }\n      \n      if (customerInfo.value.email) {\n        whatsappMessage += `*Email:* ${customerInfo.value.email}\\n`;\n      }\n      \n      if (customerInfo.value.address) {\n        whatsappMessage += `*Dirección:* ${customerInfo.value.address}\\n`;\n      }\n      \n      if (additionalMessage.value) {\n        whatsappMessage += `\\n*Notas adicionales:*\\n${additionalMessage.value}\\n`;\n      }\n      \n      // Añadir método de pago seleccionado\n      whatsappMessage += `\\n*Forma de pago:* ${selectedPaymentMethod.value === 'qr' ? 'Código QR' : \n                           (selectedPaymentMethod.value === 'nequi' ? 'Nequi' : 'Contra entrega')}\\n`;\n      \n      // Formato para URL de WhatsApp\n      const encodedMessage = encodeURIComponent(whatsappMessage);\n      const whatsappUrl = `https://wa.me/?text=${encodedMessage}`;\n      \n      // Abrir WhatsApp en una nueva ventana\n      window.open(whatsappUrl, '_blank');\n    }\n\n    // Desplazarse a la sección del pedido\n    function scrollToOrder() {\n      const orderSection = document.querySelector('.order-section');\n      if (orderSection) {\n        orderSection.scrollIntoView({ behavior: 'smooth' });\n      }\n    }\n\n    // Verificar disponibilidad de inventario\n    async function checkAvailability(item) {\n      // Obtener la disponibilidad base (valor original del inventario)\n      // Importante: asegurarse que sea un número\n      const baseAvailability = Number(item.availableQuantity) || 0;\n      \n      // Verificación directa: si no hay stock, mostrar mensaje de error\n      if (baseAvailability <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return false;\n      }\n      \n      // Obtener la cantidad actual en el carrito\n      const cartItem = cartItems.value.find(i => i.id === item.id);\n      const cartQuantity = cartItem ? cartItem.quantity : 0;\n      \n      // Calcular disponibilidad real\n      const realAvailability = baseAvailability - cartQuantity;\n      \n      // Verificar la disponibilidad considerando lo que ya está en el carrito\n      if (realAvailability <= 0) {\n        showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n        return false;\n      } else if (realAvailability <= 5) {\n        showToast(`¡Solo quedan ${realAvailability} unidades de \"${item.name}\"!`, 'warning');\n      }\n      \n      return true;\n    }\n\n    // Actualizar inventario al completar pedido\n    async function updateInventory() {\n      try {\n        console.log('Actualizando inventario para los siguientes productos:');\n        \n        // Usamos Promise.all para ejecutar todas las actualizaciones en paralelo\n        const updatePromises = cartItems.value.map(async (item) => {\n          if (!item.id) {\n            console.warn(`El producto ${item.name} no tiene ID, no se puede actualizar el inventario`);\n            return;\n          }\n          \n          try {\n            // Obtener la disponibilidad actual\n            const storageService = await import('../services/storageService');\n            const availability = await storageService.checkItemAvailability(item.id);\n            \n            // Validar que hay suficiente stock\n            if (availability.quantity < item.quantity) {\n              console.warn(`No hay suficiente stock para ${item.name}: disponible=${availability.quantity}, solicitado=${item.quantity}`);\n              return false;\n            }\n            \n            // Calcular nueva cantidad\n            const newQuantity = Math.max(0, availability.quantity - item.quantity);\n            \n            // Actualizar en la base de datos\n            await storageService.updateItemAvailability(item.id, newQuantity);\n            \n            console.log(`- ${item.name}: ${item.quantity} unidades. Nuevo stock: ${newQuantity}`);\n            \n            // Crear registro para el historial\n            const historyRecord = {\n              date: new Date().toISOString(),\n              type: 'decrease',\n              change: item.quantity,\n              previousQuantity: availability.quantity,\n              newQuantity: newQuantity,\n              reason: 'Pedido compartido por WhatsApp',\n              userId: null,\n              userName: 'Sistema'\n            };\n            \n            // Añadir al historial (usando adminService para actualizaciones completas)\n            const adminService = await import('../services/adminService');\n            await adminService.updateItemStock(item.id, newQuantity, historyRecord);\n            \n            return true;\n          } catch (error) {\n            console.error(`Error al actualizar el producto ${item.name}:`, error);\n            return false;\n          }\n        });\n        \n        // Esperar a que todas las actualizaciones se completen\n        const results = await Promise.all(updatePromises);\n        \n        // Verificar si todas las actualizaciones fueron exitosas\n        const allSuccessful = results.every(result => result !== false);\n        \n        // Mostrar mensaje apropiado\n        if (allSuccessful) {\n          showToast('Inventario actualizado correctamente', 'success');\n        } else {\n          showToast('Algunos productos no pudieron ser actualizados', 'warning');\n        }\n        \n        return allSuccessful;\n      } catch (error) {\n        console.error('Error al actualizar inventario:', error);\n        return false; // Error\n      }\n    }\n\n    // Añadir después de la función checkAvailability (línea 585)\n    // Función para actualizar la disponibilidad en tiempo real\n    function updateAvailabilityInMenu() {\n      if (!menuData.value?.items) return;\n      \n      // Actualizar la disponibilidad de todos los ítems\n      menuData.value.items.forEach(menuItem => {\n        // Encontrar si este ítem está en el carrito\n        const cartItem = cartItems.value.find(i => i.id === menuItem.id);\n        const cartQuantity = cartItem ? cartItem.quantity : 0;\n        \n        // Asegurarse de que availableQuantity sea un número exacto, no undefined o null\n        const baseAvailability = Number(menuItem.availableQuantity) || 0;\n        \n        // Calcular disponibilidad real\n        menuItem.realAvailability = baseAvailability - cartQuantity;\n        \n        console.log(`Disponibilidad actualizada para ${menuItem.name}: ${menuItem.realAvailability} unidades (base: ${baseAvailability}, carrito: ${cartQuantity})`);\n      });\n    }\n\n    // Verificar si una cadena de imagen es válida\n    function isValidImage(imageString) {\n      if (!imageString) return false;\n      \n      // Verificar si es una URL\n      if (imageString.startsWith('http://') || imageString.startsWith('https://')) {\n        return true;\n      }\n      \n      // Verificar si es una imagen en base64\n      if (imageString.startsWith('data:image/')) {\n        return true;\n      }\n      \n      return false;\n    }\n    \n    // Corregir formato de imagen si es necesario\n    function fixImageFormat(imageString) {\n      if (!imageString) return '';\n      \n      // Si ya es una URL o base64 válido, devolverlo tal cual\n      if (isValidImage(imageString)) {\n        return imageString;\n      }\n      \n      // Intentar convertir a base64 si no tiene el prefijo correcto\n      if (imageString.includes('/9j/') && !imageString.startsWith('data:image/')) {\n        return `data:image/jpeg;base64,${imageString}`;\n      }\n      \n      // Si no se puede arreglar, devolver una imagen por defecto\n      return '';\n    }\n\n    // Datos del cliente\n    const customerInfo = ref({\n      name: '',\n      phone: '',\n      email: '',\n      address: ''\n    });\n\n    // Método de pago seleccionado\n    const selectedPaymentMethod = ref('cash'); // Por defecto contra entrega\n\n    // Mensaje adicional\n    const additionalMessage = ref('');\n\n    // Filtrar items regulares y especiales\n    const regularItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      const filtered = menuData.value.items.filter(item => !item.isSpecial);\n      console.log('Platos regulares:', filtered.length, filtered.map(i => i.name));\n      return filtered;\n    });\n\n    const specialItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      const filtered = menuData.value.items.filter(item => item.isSpecial === true);\n      console.log('Platos especiales:', filtered.length, filtered.map(i => i.name));\n      return filtered;\n    });\n\n    // Estado para el formulario de reserva\n    const showReservationForm = ref(false);\n    const isProcessingReservation = ref(false);\n    const reservationSuccess = ref(false);\n    const reservationError = ref(null);\n    \n    const reservationData = ref({\n      fullName: '',\n      mobilePhone: '',\n      landlinePhone: '',\n      address: '',\n      email: '',\n      orderDate: getCurrentDate(), // Set the initial value here\n      reservationDate: '',\n      reservationTime: '',\n      peopleCount: 1,\n      additionalNotes: ''\n    });\n    \n    // Función para obtener la fecha actual en formato YYYY-MM-DD\n    function getCurrentDate() {\n      const today = new Date();\n      const year = today.getFullYear();\n      const month = String(today.getMonth() + 1).padStart(2, '0');\n      const day = String(today.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    }\n    \n    // Función para enviar la reserva\n    async function submitReservation() {\n      isProcessingReservation.value = true;\n      reservationSuccess.value = false;\n      reservationError.value = null;\n      \n      try {\n        // Utilizamos el servicio de reservas para guardar los datos\n        const result = await saveReservation(reservationData.value);\n        \n        if (result.success) {\n          // Reserva guardada correctamente\n          reservationSuccess.value = true;\n          showToast('¡Reserva enviada con éxito! Recibirá un correo de confirmación en breve.', 'success');\n          \n          // Enviar correo de confirmación (simulado)\n          console.log('Enviando correo de confirmación a:', reservationData.value.email);\n          \n          // Limpiar el formulario y ocultarlo después de un tiempo\n          setTimeout(() => {\n            resetReservationForm();\n            showReservationForm.value = false;\n          }, 3000);\n        } else {\n          // Error al guardar la reserva\n          throw new Error(result.error || 'Error al procesar la reserva');\n        }\n      } catch (error) {\n        console.error('Error al enviar la reserva:', error);\n        reservationError.value = 'Ocurrió un error al procesar su reserva. Por favor, intente nuevamente.';\n        showToast('Error al procesar la reserva. Por favor, intente nuevamente.', 'error');\n      } finally {\n        isProcessingReservation.value = false;\n      }\n    }\n    \n    // Función para cancelar la reserva\n    function cancelReservation() {\n      resetReservationForm();\n      showReservationForm.value = false;\n    }\n    \n    // Función para reiniciar el formulario\n    function resetReservationForm() {\n      reservationData.value.fullName = '';\n      reservationData.value.mobilePhone = '';\n      reservationData.value.landlinePhone = '';\n      reservationData.value.address = '';\n      reservationData.value.email = '';\n      reservationData.value.orderDate = getCurrentDate();\n      reservationData.value.reservationDate = '';\n      reservationData.value.reservationTime = '';\n      reservationData.value.peopleCount = 1;\n      reservationData.value.additionalNotes = '';\n      reservationSuccess.value = false;\n      reservationError.value = null;\n    }\n\n    // Refrescar información del negocio manualmente\n    async function refreshBusinessInfo() {\n      try {\n        const businessInfo = await fetchBusinessInfoFromBackend(true);\n        if (businessInfo) {\n          menuData.value.businessInfo = businessInfo;\n          lastBusinessInfoUpdate.value = Date.now();\n          showToast('Información del negocio actualizada', 'success');\n        }\n      } catch (error) {\n        console.error('Error al refrescar información del negocio:', error);\n        showToast('Error al actualizar información del negocio', 'error');\n      }\n    }\n\n    return {\n      menuId,\n      isLoading,\n      error,\n      menuData,\n      regularItems,\n      specialItems,\n      cartItems,\n      cartTotal,\n      totalItems,\n      customerInfo,\n      selectedPaymentMethod,\n      additionalMessage,\n      addToCart,\n      removeFromCart,\n      increaseQuantity,\n      decreaseQuantity,\n      formatPrice,\n      completeOrder,\n      shareOrderByWhatsApp,\n      scrollToOrder,\n      isValidImage,\n      fixImageFormat,\n      hasPaymentInfo,\n      // Reservas\n      showReservationForm,\n      reservationData,\n      isProcessingReservation,\n      reservationSuccess,\n      reservationError,\n      submitReservation,\n      cancelReservation,\n      getCurrentDate,\n      // Añadir el objeto toast para que esté disponible en la plantilla\n      toast,\n      // Función para refrescar información del negocio\n      refreshBusinessInfo,\n      // Última actualización de la información del negocio\n      lastBusinessInfoUpdate\n    };\n  }\n};\n</script>\n\n<style scoped>\n.shared-menu-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: 'Arial', sans-serif;\n}\n\n.loading, .error {\n  text-align: center;\n  padding: 50px;\n  font-size: 18px;\n}\n\n.error {\n  color: #d9534f;\n}\n\n.business-info {\n  text-align: center;\n  margin-bottom: 40px;\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n.business-logo {\n  max-width: 100%;\n  max-height: 150px;\n  object-fit: contain;\n  margin-bottom: 15px;\n}\n\n.business-info h1 {\n  color: #343a40;\n  margin-bottom: 10px;\n}\n\n.description {\n  font-style: italic;\n  color: #6c757d;\n  margin-bottom: 15px;\n}\n\n.contact-info {\n  font-size: 14px;\n  color: #495057;\n}\n\n.menu-list {\n  margin-bottom: 40px;\n}\n\n.menu-list h2 {\n  color: #28a745;\n  font-size: 24px;\n  text-align: center;\n  margin-bottom: 20px;\n  padding-bottom: 10px;\n  border-bottom: 2px solid #28a745;\n}\n\n.menu-items {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n}\n\n.menu-item {\n  background-color: white;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.menu-item:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n}\n\n.item-image-container {\n  width: 100%;\n  height: 200px;\n  overflow: hidden;\n}\n\n.item-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.no-image {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #f8f9fa;\n  color: #6c757d;\n  font-style: italic;\n}\n\n.item-details {\n  padding: 15px;\n}\n\n.item-details h3 {\n  margin-top: 0;\n  color: #343a40;\n  font-size: 18px;\n  margin-bottom: 10px;\n}\n\n.item-description {\n  color: #6c757d;\n  font-size: 14px;\n  margin-bottom: 10px;\n}\n\n.item-price {\n  font-size: 16px;\n  font-weight: bold;\n  color: #28a745;\n  margin-bottom: 10px;\n}\n\n.includes-drink {\n  font-size: 14px;\n  color: #6c757d;\n  font-style: italic;\n  margin-bottom: 10px;\n}\n\n.add-to-cart-btn {\n  width: 100%;\n  padding: 8px 15px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n  font-weight: bold;\n}\n\n.add-to-cart-btn:hover {\n  background-color: #218838;\n}\n\n/* Estilos mejorados para la sección de \"Tu Pedido\" */\n.order-section {\n  margin: 30px auto;\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  max-width: 800px;\n  border: 2px solid #28a745;\n  position: relative;\n}\n\n.order-section::before {\n  content: '';\n  position: absolute;\n  top: -10px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 0;\n  height: 0;\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-bottom: 10px solid #28a745;\n}\n\n.order-section h2 {\n  color: #343a40;\n  font-size: 24px;\n  text-align: center;\n  margin-bottom: 20px;\n  padding-bottom: 10px;\n  border-bottom: 2px solid #28a745;\n}\n\n.cart-items {\n  margin-bottom: 20px;\n}\n\n.cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n  border-bottom: 1px solid #dee2e6;\n  animation: fadeIn 0.3s ease;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(-10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.cart-item:last-child {\n  border-bottom: none;\n}\n\n.cart-item-details h3 {\n  margin: 0 0 5px 0;\n  font-size: 16px;\n}\n\n.cart-item-actions {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.quantity-btn {\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  background-color: #f8f9fa;\n  border: 1px solid #28a745;\n  color: #28a745;\n  font-weight: bold;\n  cursor: pointer;\n  transition: all 0.2s;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.quantity-btn:hover {\n  background-color: #28a745;\n  color: white;\n}\n\n.remove-btn {\n  padding: 5px 10px;\n  background-color: #dc3545;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.remove-btn:hover {\n  background-color: #c82333;\n}\n\n.cart-total {\n  text-align: right;\n  padding-top: 15px;\n  border-top: 2px solid #28a745;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  gap: 10px;\n}\n\n.cart-total h3 {\n  color: #343a40;\n  margin: 0;\n}\n\n/* Botón flotante para ver pedido */\n.floating-cart-button {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #28a745;\n  color: white;\n  border-radius: 50px;\n  padding: 10px 20px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.2);\n  cursor: pointer;\n  transition: all 0.3s;\n  z-index: 98; /* Mantener por debajo del toast (9999) */\n  font-weight: bold;\n}\n\n.floating-cart-button:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 6px 15px rgba(0,0,0,0.25);\n}\n\n.cart-items-count {\n  background-color: white;\n  color: #28a745;\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n}\n\n/* Estilos para la sección de forma de pago */\n.payment-section {\n  margin: 30px auto;\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  max-width: 800px;\n}\n\n.payment-section h2 {\n  color: #333;\n  font-size: 1.5rem;\n  margin-bottom: 20px;\n  text-align: center;\n  border-bottom: 2px solid #4CAF50;\n  padding-bottom: 10px;\n}\n\n.payment-methods {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  justify-content: center;\n}\n\n.payment-method {\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  padding: 15px;\n  width: 280px;\n  text-align: center;\n}\n\n.payment-method h3 {\n  margin-top: 0;\n  color: #333;\n  font-size: 1.2rem;\n  margin-bottom: 15px;\n}\n\n.payment-image {\n  width: 200px;\n  height: 200px;\n  object-fit: contain;\n  margin: 0 auto;\n  display: block;\n}\n\n.payment-detail {\n  margin-top: 15px;\n  font-size: 1rem;\n}\n\n@media (max-width: 640px) {\n  .payment-methods {\n    flex-direction: column;\n    align-items: center;\n  }\n  \n  .payment-method {\n    width: 100%;\n  }\n  \n  .floating-cart-button {\n    bottom: 10px;\n    right: 10px;\n    padding: 8px 16px;\n    font-size: 14px;\n  }\n}\n\n/* Spinner de carga mejorado */\n.loading {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 80px 20px;\n  text-align: center;\n}\n\n.spinner {\n  width: 50px;\n  height: 50px;\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #28a745;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin-bottom: 20px;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Mejoras en la sección de Tu Pedido */\n.empty-cart {\n  padding: 40px 0;\n  text-align: center;\n  color: #6c757d;\n}\n\n.empty-cart p {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 10px;\n}\n\n.empty-cart-message {\n  font-style: italic;\n  font-size: 14px;\n}\n\n/* Notificación de producto añadido */\n.add-to-cart-notification {\n  position: fixed;\n  bottom: -60px;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: #28a745;\n  color: white;\n  padding: 12px 25px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.2);\n  transition: bottom 0.5s ease;\n  z-index: 1000;\n}\n\n.add-to-cart-notification.show {\n  bottom: 30px;\n}\n\n/* Mejoras en botones */\n.btn-icon {\n  margin-right: 5px;\n}\n\n.add-to-cart-btn {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 10px 15px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s;\n  font-weight: bold;\n}\n\n.add-to-cart-btn:hover {\n  background-color: #218838;\n  transform: translateY(-2px);\n}\n\n.quantity-display {\n  min-width: 30px;\n  text-align: center;\n  font-weight: bold;\n}\n\n/* Estilos para acciones de pedido */\n.order-actions {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin-top: 15px;\n  gap: 10px;\n}\n\n.complete-order-btn,\n.whatsapp-order-btn {\n  border: none;\n  padding: 12px 20px;\n  border-radius: 4px;\n  font-weight: bold;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  gap: 8px;\n  height: 48px;\n  font-size: 16px;\n  width: 100%;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.complete-order-btn {\n  background-color: #28a745;\n  color: white;\n  margin: 0;\n}\n\ncomplete-order-btn:hover {\n  background-color: #218838;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n.whatsapp-order-btn {\n  background-color: #25D366;\n  color: white;\n  margin: 0;\n}\n\n.whatsapp-order-btn:hover {\n  background-color: #128C7E;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n.btn-icon {\n  font-size: 18px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n@media (min-width: 768px) {\n  .order-actions {\n    flex-direction: row;\n    gap: 15px;\n  }\n  \n  .complete-order-btn,\n  .whatsapp-order-btn {\n    flex: 1;\n  }\n}\n\n/* Estilos para el formulario de cliente */\n.customer-form {\n  width: 100%;\n  margin: 20px 0;\n  padding: 15px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  border: 1px solid #e0e0e0;\n}\n\n.customer-form h4 {\n  margin: 0 0 15px 0;\n  color: #333;\n  font-size: 16px;\n  border-bottom: 1px solid #ddd;\n  padding-bottom: 8px;\n}\n\n.form-row {\n  margin-bottom: 10px;\n}\n\n.form-input, .form-textarea {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n  transition: border-color 0.3s;\n}\n\n.form-input:focus, .form-textarea:focus {\n  border-color: #28a745;\n  outline: none;\n}\n\n.form-textarea {\n  min-height: 80px;\n  resize: vertical;\n}\n\n/* Estilos para las opciones de pago */\n.payment-methods-selection {\n  margin: 15px 0;\n}\n\n.payment-methods-selection h4 {\n  margin: 0 0 15px 0;\n  color: #333;\n  font-size: 16px;\n  border-bottom: 1px solid #ddd;\n  padding-bottom: 8px;\n}\n\n.payment-options {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  margin-top: 10px;\n}\n\n.payment-option {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  border: 1px solid #ddd;\n  padding: 8px 15px;\n  border-radius: 20px;\n  transition: all 0.3s;\n}\n\n.payment-option:hover {\n  background-color: #f0f0f0;\n}\n\n.payment-option input[type=\"radio\"] {\n  margin: 0;\n}\n\n.payment-option input[type=\"radio\"]:checked + .payment-option-text {\n  font-weight: bold;\n  color: #28a745;\n}\n\n.payment-option:has(input[type=\"radio\"]:checked) {\n  border-color: #28a745;\n  background-color: rgba(40, 167, 69, 0.1);\n}\n\n.payment-options {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  margin-top: 10px;\n}\n\n.payment-option {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  border: 1px solid #ddd;\n  padding: 8px 15px;\n  border-radius: 20px;\n  transition: all 0.3s;\n}\n\n.payment-option:hover {\n  background-color: #f0f0f0;\n}\n\n.payment-option input[type=\"radio\"] {\n  margin: 0;\n}\n\n.payment-option input[type=\"radio\"]:checked + .payment-option-text {\n  font-weight: bold;\n  color: #28a745;\n}\n\n.payment-option:has(input[type=\"radio\"]:checked) {\n  border-color: #28a745;\n  background-color: rgba(40, 167, 69, 0.1);\n}\n\n@media (max-width: 480px) {\n  .payment-options {\n    flex-direction: column;\n    gap: 8px;\n  }\n  \n  .payment-option {\n    width: 100%;\n  }\n}\n\n/* Estilos para el contenedor de reservas */\n.reservas-container {\n  margin: 40px 0;\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n/* Añadir estilos para la sección de reservas */\n.reserva-section {\n  padding: 30px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  margin-bottom: 40px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n}\n\n/* Estilos para la sección de reservas */\n.reservation-section {\n  margin-top: 40px;\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n}\n\n.reservation-container {\n  max-width: 800px;\n  margin: 0 auto;\n}\n\n.reservation-intro {\n  text-align: center;\n  padding: 20px;\n}\n\n.reservation-intro p {\n  margin-bottom: 20px;\n  font-size: 1.1rem;\n  color: #555;\n}\n\n.show-reservation-form-btn {\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: background-color 0.3s;\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.show-reservation-form-btn:hover {\n  background-color: #218838;\n}\n\n.reservation-form {\n  background-color: white;\n  padding: 25px;\n  border-radius: 8px;\n  box-shadow: 0 2px 15px rgba(0,0,0,0.1);\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: 500;\n  color: #333;\n}\n\n.form-group input,\n.form-group textarea {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 1rem;\n}\n\n.form-row {\n  display: flex;\n  gap: 15px;\n  margin-bottom: 15px;\n}\n\n.half-width {\n  flex: 1;\n}\n\n.form-actions {\n  display: flex;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.reservation-submit-btn {\n  flex: 1;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 12px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: background-color 0.3s;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n}\n\n.reservation-submit-btn:hover {\n  background-color: #218838;\n}\n\n.reservation-submit-btn:disabled {\n  background-color: #6c757d;\n  cursor: not-allowed;\n}\n\n.reservation-cancel-btn {\n  background-color: #dc3545;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 12px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\n.reservation-cancel-btn:hover {\n  background-color: #c82333;\n}\n\n/* Estilos para las notificaciones toast */\n.toast-notification {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  padding: 15px 25px;\n  border-radius: 4px;\n  color: white;\n  z-index: 1000;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n  animation: slideIn 0.3s ease-out forwards;\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateY(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n.toast-notification.success {\n  background-color: #28a745;\n}\n\n.toast-notification.error {\n  background-color: #dc3545;\n}\n\n.toast-notification.info {\n  background-color: #17a2b8;\n}\n\n.toast-notification.warning {\n  background-color: #ffc107;\n  color: #212529;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}