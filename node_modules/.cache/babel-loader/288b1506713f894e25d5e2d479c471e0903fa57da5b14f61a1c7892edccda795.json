{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport { ref, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { getUsersFromDB } from '../services/userService';\nimport { resetDatabase } from '../services/storageService';\nexport default {\n  name: 'LoginComponent',\n  setup() {\n    const loginForm = ref({\n      email: '',\n      password: ''\n    });\n    const users = ref([]);\n    const router = useRouter();\n    const loginError = ref('');\n    const resetMessage = ref('');\n    onMounted(async () => {\n      try {\n        const usersFromDB = await getUsersFromDB();\n        users.value = usersFromDB || [];\n        console.log(`Cargados ${users.value.length} usuarios desde IndexedDB`);\n      } catch (error) {\n        console.error('Error al cargar usuarios:', error);\n        users.value = [];\n        loginError.value = 'Error al cargar usuarios. Por favor, intente más tarde.';\n      }\n    });\n    const login = async () => {\n      loginError.value = '';\n\n      // Asegurarse de que users es un array antes de usar find\n      if (!Array.isArray(users.value)) {\n        users.value = [];\n      }\n      if (users.value.length === 0) {\n        loginError.value = 'No hay usuarios registrados. Por favor, regístrese primero.';\n        setTimeout(() => {\n          router.push('/register');\n        }, 2000);\n        return;\n      }\n      const user = users.value.find(user => user.email === loginForm.value.email && user.password === loginForm.value.password);\n      if (user) {\n        // Redirigir a la página del menú\n        router.push('/menu');\n      } else {\n        loginError.value = 'Credenciales inválidas. Por favor, intente nuevamente.';\n      }\n    };\n\n    // Función para reiniciar la base de datos\n    const resetDb = async () => {\n      if (confirm('¿Está seguro de que desea reiniciar la base de datos? Se perderán todos los datos.')) {\n        try {\n          resetMessage.value = 'Reiniciando base de datos...';\n          await resetDatabase();\n          resetMessage.value = 'Base de datos reiniciada con éxito. Por favor, recargue la página.';\n\n          // Recargar la página después de 2 segundos\n          setTimeout(() => {\n            window.location.reload();\n          }, 2000);\n        } catch (error) {\n          console.error('Error al reiniciar la base de datos:', error);\n          resetMessage.value = 'Error al reiniciar la base de datos: ' + error.message;\n        }\n      }\n    };\n    return {\n      loginForm,\n      users,\n      login,\n      loginError,\n      resetDb,\n      resetMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRouter","getUsersFromDB","resetDatabase","name","setup","loginForm","email","password","users","router","loginError","resetMessage","usersFromDB","value","console","log","length","error","login","Array","isArray","setTimeout","push","user","find","resetDb","confirm","window","location","reload","message"],"sources":["F:\\Driver google\\VUE.JS-2\\temp\\websap\\src\\components\\LoginComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"auth-container\">\r\n    <div class=\"auth-form-card\">\r\n      <h2 class=\"auth-title\">Iniciar Sesión</h2>\r\n      \r\n      <div v-if=\"loginError\" class=\"error-message\">\r\n        {{ loginError }}\r\n      </div>\r\n      \r\n      <form @submit.prevent=\"login\" class=\"auth-form\">\r\n        <div class=\"form-group\">\r\n          <label for=\"login-email\">Email:</label>\r\n          <input \r\n            type=\"email\" \r\n            id=\"login-email\" \r\n            v-model=\"loginForm.email\" \r\n            class=\"auth-input\"\r\n            required\r\n            placeholder=\"Ingresa tu correo electrónico\"\r\n          >\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"login-password\">Contraseña:</label>\r\n          <input \r\n            type=\"password\" \r\n            id=\"login-password\" \r\n            v-model=\"loginForm.password\" \r\n            class=\"auth-input\"\r\n            required\r\n            placeholder=\"Ingresa tu contraseña\"\r\n          >\r\n        </div>\r\n        <button type=\"submit\" class=\"auth-button\">Ingresar</button>\r\n      </form>\r\n      <div class=\"auth-links\">\r\n        <p>¿No tienes cuenta? <router-link to=\"/register\" class=\"auth-link\">Registrarse</router-link></p>\r\n      </div>\r\n      \r\n      <!-- Agregar botón para reiniciar la base de datos -->\r\n      <div class=\"debug-options\">\r\n        <button @click=\"resetDb\" class=\"reset-db-button\">Reiniciar Base de Datos</button>\r\n        <p v-if=\"resetMessage\" class=\"reset-message\">{{ resetMessage }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { getUsersFromDB } from '../services/userService';\r\nimport { resetDatabase } from '../services/storageService';\r\n\r\nexport default {\r\n  name: 'LoginComponent',\r\n  setup() {\r\n    const loginForm = ref({\r\n      email: '',\r\n      password: ''\r\n    });\r\n    \r\n    const users = ref([]);\r\n    const router = useRouter();\r\n    const loginError = ref('');\r\n    const resetMessage = ref('');\r\n    \r\n    onMounted(async () => {\r\n      try {\r\n        const usersFromDB = await getUsersFromDB();\r\n        users.value = usersFromDB || [];\r\n        console.log(`Cargados ${users.value.length} usuarios desde IndexedDB`);\r\n      } catch (error) {\r\n        console.error('Error al cargar usuarios:', error);\r\n        users.value = [];\r\n        loginError.value = 'Error al cargar usuarios. Por favor, intente más tarde.';\r\n      }\r\n    });\r\n    \r\n    const login = async () => {\r\n      loginError.value = '';\r\n      \r\n      // Asegurarse de que users es un array antes de usar find\r\n      if (!Array.isArray(users.value)) {\r\n        users.value = [];\r\n      }\r\n      \r\n      if (users.value.length === 0) {\r\n        loginError.value = 'No hay usuarios registrados. Por favor, regístrese primero.';\r\n        setTimeout(() => {\r\n          router.push('/register');\r\n        }, 2000);\r\n        return;\r\n      }\r\n      \r\n      const user = users.value.find(user => \r\n        user.email === loginForm.value.email && \r\n        user.password === loginForm.value.password\r\n      );\r\n      \r\n      if (user) {\r\n        // Redirigir a la página del menú\r\n        router.push('/menu');\r\n      } else {\r\n        loginError.value = 'Credenciales inválidas. Por favor, intente nuevamente.';\r\n      }\r\n    };\r\n    \r\n    // Función para reiniciar la base de datos\r\n    const resetDb = async () => {\r\n      if (confirm('¿Está seguro de que desea reiniciar la base de datos? Se perderán todos los datos.')) {\r\n        try {\r\n          resetMessage.value = 'Reiniciando base de datos...';\r\n          await resetDatabase();\r\n          resetMessage.value = 'Base de datos reiniciada con éxito. Por favor, recargue la página.';\r\n          \r\n          // Recargar la página después de 2 segundos\r\n          setTimeout(() => {\r\n            window.location.reload();\r\n          }, 2000);\r\n        } catch (error) {\r\n          console.error('Error al reiniciar la base de datos:', error);\r\n          resetMessage.value = 'Error al reiniciar la base de datos: ' + error.message;\r\n        }\r\n      }\r\n    };\r\n    \r\n    return {\r\n      loginForm,\r\n      users,\r\n      login,\r\n      loginError,\r\n      resetDb,\r\n      resetMessage\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.auth-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 80vh;\r\n  padding: 20px;\r\n}\r\n\r\n.auth-form-card {\r\n  width: 100%;\r\n  max-width: 450px;\r\n  background-color: white;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n  padding: 30px;\r\n}\r\n\r\n.auth-title {\r\n  text-align: center;\r\n  color: #4CAF50;\r\n  font-size: 28px;\r\n  margin-bottom: 30px;\r\n  font-weight: 600;\r\n}\r\n\r\n.auth-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.form-group label {\r\n  font-weight: 600;\r\n  color: #333;\r\n  font-size: 16px;\r\n}\r\n\r\n.auth-input {\r\n  padding: 14px;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 8px;\r\n  font-size: 16px;\r\n  transition: border-color 0.3s ease;\r\n}\r\n\r\n.auth-input:focus {\r\n  outline: none;\r\n  border-color: #4CAF50;\r\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n\r\n.auth-button {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  padding: 14px;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n  margin-top: 10px;\r\n}\r\n\r\n.auth-button:hover {\r\n  background-color: #388E3C;\r\n}\r\n\r\n.auth-links {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  color: #666;\r\n}\r\n\r\n.auth-link {\r\n  color: #4CAF50;\r\n  text-decoration: none;\r\n  font-weight: 600;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.auth-link:hover {\r\n  color: #388E3C;\r\n  text-decoration: underline;\r\n}\r\n\r\n@media (max-width: 500px) {\r\n  .auth-form-card {\r\n    padding: 20px;\r\n  }\r\n  \r\n  .auth-title {\r\n    font-size: 24px;\r\n  }\r\n}\r\n\r\n.error-message {\r\n  background-color: #ffebee;\r\n  color: #b71c1c;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.debug-options {\r\n  margin-top: 30px;\r\n  padding-top: 20px;\r\n  border-top: 1px dashed #ccc;\r\n  text-align: center;\r\n}\r\n\r\n.reset-db-button {\r\n  background-color: #f44336;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 8px 15px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n}\r\n\r\n.reset-db-button:hover {\r\n  background-color: #d32f2f;\r\n}\r\n\r\n.reset-message {\r\n  margin-top: 10px;\r\n  color: #d32f2f;\r\n  font-size: 14px;\r\n}\r\n</style>\r\n"],"mappings":";;;AAgDA,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,SAASC,SAAQ,QAAS,YAAY;AACtC,SAASC,cAAa,QAAS,yBAAyB;AACxD,SAASC,aAAY,QAAS,4BAA4B;AAE1D,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,KAAKA,CAAA,EAAG;IACN,MAAMC,SAAQ,GAAIP,GAAG,CAAC;MACpBQ,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,MAAMC,KAAI,GAAIV,GAAG,CAAC,EAAE,CAAC;IACrB,MAAMW,MAAK,GAAIT,SAAS,CAAC,CAAC;IAC1B,MAAMU,UAAS,GAAIZ,GAAG,CAAC,EAAE,CAAC;IAC1B,MAAMa,YAAW,GAAIb,GAAG,CAAC,EAAE,CAAC;IAE5BC,SAAS,CAAC,YAAY;MACpB,IAAI;QACF,MAAMa,WAAU,GAAI,MAAMX,cAAc,CAAC,CAAC;QAC1CO,KAAK,CAACK,KAAI,GAAID,WAAU,IAAK,EAAE;QAC/BE,OAAO,CAACC,GAAG,CAAC,YAAYP,KAAK,CAACK,KAAK,CAACG,MAAM,2BAA2B,CAAC;MACxE,EAAE,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDT,KAAK,CAACK,KAAI,GAAI,EAAE;QAChBH,UAAU,CAACG,KAAI,GAAI,yDAAyD;MAC9E;IACF,CAAC,CAAC;IAEF,MAAMK,KAAI,GAAI,MAAAA,CAAA,KAAY;MACxBR,UAAU,CAACG,KAAI,GAAI,EAAE;;MAErB;MACA,IAAI,CAACM,KAAK,CAACC,OAAO,CAACZ,KAAK,CAACK,KAAK,CAAC,EAAE;QAC/BL,KAAK,CAACK,KAAI,GAAI,EAAE;MAClB;MAEA,IAAIL,KAAK,CAACK,KAAK,CAACG,MAAK,KAAM,CAAC,EAAE;QAC5BN,UAAU,CAACG,KAAI,GAAI,6DAA6D;QAChFQ,UAAU,CAAC,MAAM;UACfZ,MAAM,CAACa,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC,EAAE,IAAI,CAAC;QACR;MACF;MAEA,MAAMC,IAAG,GAAIf,KAAK,CAACK,KAAK,CAACW,IAAI,CAACD,IAAG,IAC/BA,IAAI,CAACjB,KAAI,KAAMD,SAAS,CAACQ,KAAK,CAACP,KAAI,IACnCiB,IAAI,CAAChB,QAAO,KAAMF,SAAS,CAACQ,KAAK,CAACN,QACpC,CAAC;MAED,IAAIgB,IAAI,EAAE;QACR;QACAd,MAAM,CAACa,IAAI,CAAC,OAAO,CAAC;MACtB,OAAO;QACLZ,UAAU,CAACG,KAAI,GAAI,wDAAwD;MAC7E;IACF,CAAC;;IAED;IACA,MAAMY,OAAM,GAAI,MAAAA,CAAA,KAAY;MAC1B,IAAIC,OAAO,CAAC,oFAAoF,CAAC,EAAE;QACjG,IAAI;UACFf,YAAY,CAACE,KAAI,GAAI,8BAA8B;UACnD,MAAMX,aAAa,CAAC,CAAC;UACrBS,YAAY,CAACE,KAAI,GAAI,oEAAoE;;UAEzF;UACAQ,UAAU,CAAC,MAAM;YACfM,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;UAC1B,CAAC,EAAE,IAAI,CAAC;QACV,EAAE,OAAOZ,KAAK,EAAE;UACdH,OAAO,CAACG,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;UAC5DN,YAAY,CAACE,KAAI,GAAI,uCAAsC,GAAII,KAAK,CAACa,OAAO;QAC9E;MACF;IACF,CAAC;IAED,OAAO;MACLzB,SAAS;MACTG,KAAK;MACLU,KAAK;MACLR,UAAU;MACVe,OAAO;MACPd;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}