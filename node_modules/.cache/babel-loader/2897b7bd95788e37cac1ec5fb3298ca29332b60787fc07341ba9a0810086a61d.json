{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { alert, confirm } from '../../services/dialogService';\nimport * as adminService from '../../services/adminService';\nimport { hasRole, getCurrentUser } from '../../services/authService';\nexport default {\n  name: 'AdminUsers',\n  emits: ['user-created'],\n  // Declarar los eventos que emite el componente\n  setup(props, {\n    emit\n  }) {\n    // Obtener emit desde el contexto\n    const allUsers = ref([]); // Almacena todos los usuarios sin filtrar\n    const users = ref([]); // Usuarios filtrados para mostrar\n    const roles = ref([]);\n    const loading = ref(true);\n    const error = ref(null);\n\n    // Filtros\n    const searchTerm = ref('');\n    const roleFilter = ref('');\n    const statusFilter = ref('');\n\n    // Formulario\n    const showModal = ref(false);\n    const isEditing = ref(false);\n    const formData = ref({\n      id: null,\n      nombre: '',\n      email: '',\n      telefono: '',\n      password: '',\n      roles: [],\n      estado: 'activo'\n    });\n\n    // Obtener referencias a las funciones del servicio admin\n    const {\n      getUsers,\n      getRoles,\n      createUser,\n      updateUser,\n      cambiarEstadoUsuario,\n      deleteUser: removeUser\n    } = adminService;\n\n    // Búsqueda con debounce\n    let searchTimeout = null;\n\n    // Obtener si el usuario actual es Administrador (no Superadministrador)\n    const isOnlyAdmin = computed(() => {\n      return hasRole('Administrador') && !hasRole('Superadministrador');\n    });\n\n    // Obtener si el usuario actual es Superadministrador\n    const isSuperAdmin = computed(() => {\n      return hasRole('Superadministrador');\n    });\n\n    // Filtrar roles disponibles según el rol del usuario actual\n    const availableRoles = computed(() => {\n      if (isOnlyAdmin.value) {\n        // Si es solo Administrador, mostrar solo el rol de Empleado\n        return roles.value.filter(role => role.nombre === 'Empleado');\n      }\n      // Si es Superadministrador, mostrar todos los roles\n      return roles.value;\n    });\n\n    // Filtrar usuarios según el rol del usuario actual\n    const filteredUsers = computed(() => {\n      // Obtener el usuario actual\n      const currentUser = getCurrentUser();\n\n      // Filtrar usuarios\n      return allUsers.value.filter(user => {\n        // Si el usuario actual es el mismo que estamos revisando, siempre mostrarlo\n        if (currentUser && user.email === currentUser.email) {\n          return true;\n        }\n\n        // Ocultar el Super Administrador (superadmin@example.com) solo si el usuario actual NO es Superadministrador\n        if (user.email === 'superadmin@example.com' && !isSuperAdmin.value) {\n          return false;\n        }\n\n        // Si es solo Administrador, ocultar usuarios con rol de Superadministrador\n        if (isOnlyAdmin.value) {\n          if (user.roles && Array.isArray(user.roles) && user.roles.includes('Superadministrador')) {\n            return false;\n          }\n        }\n\n        // Si el usuario actual es susan@gmail.com o karen@gmail.com, mostrar solo su propio usuario\n        // pero permitir ver los usuarios que ellos mismos han creado\n        if (currentUser && (currentUser.email === 'susan@gmail.com' || currentUser.email === 'karen@gmail.com')) {\n          // Permitir ver usuarios creados por ellos mismos (implementación futura)\n          // Por ahora, solo mostrar su propio usuario\n          return user.email === currentUser.email;\n        }\n\n        // Aplicar filtros adicionales\n        if (roleFilter.value && (!user.roles || !user.roles.includes(roleFilter.value))) {\n          return false;\n        }\n        if (statusFilter.value && user.estado !== statusFilter.value) {\n          return false;\n        }\n        if (searchTerm.value && searchTerm.value.length >= 2) {\n          const term = searchTerm.value.toLowerCase();\n          const matchesName = user.nombre && user.nombre.toLowerCase().includes(term);\n          const matchesEmail = user.email && user.email.toLowerCase().includes(term);\n          return matchesName || matchesEmail;\n        }\n        return true;\n      });\n    });\n    onMounted(async () => {\n      try {\n        console.log(\"AdminUsers componente montado - inicializando...\");\n        // Inicializar la lista de usuarios vacía\n        allUsers.value = [];\n        users.value = [];\n        // Cargar datos\n        await Promise.all([fetchUsers(), fetchRoles()]);\n        console.log(\"Inicialización completa, usuarios cargados:\", users.value.length);\n      } catch (initError) {\n        console.error(\"Error durante la inicialización:\", initError);\n        error.value = `Error durante la inicialización: ${initError.message}`;\n      }\n    });\n\n    // Obtener usuarios con filtros aplicados\n    const fetchUsers = async () => {\n      try {\n        loading.value = true;\n        error.value = '';\n\n        // Limpiar la lista de usuarios actual para evitar datos residuales\n        allUsers.value = [];\n        users.value = [];\n        try {\n          console.log('Obteniendo usuarios con filtros:', {\n            searchTerm: searchTerm.value,\n            role: roleFilter.value,\n            status: statusFilter.value\n          });\n          const response = await getUsers({\n            searchTerm: searchTerm.value,\n            role: roleFilter.value,\n            status: statusFilter.value\n          });\n          if (response && response.success) {\n            console.log(`Recibidos ${response.data.length} usuarios de la API`);\n\n            // Guardar usuarios en la lista local\n            allUsers.value = response.data;\n\n            // Aplicar filtro para ocultar superadministradores y superadmin@example.com\n            users.value = filteredUsers.value;\n            return; // Salir de la función si todo fue exitoso\n          }\n\n          // Si llegamos aquí, hubo algún problema con la respuesta\n          console.warn(\"Respuesta no exitosa de la API o formato incorrecto:\", response);\n          throw new Error(response?.message || 'Error al cargar usuarios');\n        } catch (apiError) {\n          console.error(\"Error al llamar a la API:\", apiError);\n          throw apiError; // Propagar el error para que se maneje en el bloque catch externo\n        }\n      } catch (err) {\n        console.error('Error general al cargar usuarios:', err);\n        error.value = `Error al cargar usuarios: ${err.message || 'Error desconocido'}`;\n        // Inicializar arrays vacíos para evitar errores\n        allUsers.value = [];\n        users.value = [];\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Obtener roles disponibles\n    const fetchRoles = async () => {\n      try {\n        try {\n          const response = await getRoles();\n          if (response && response.success) {\n            roles.value = Array.isArray(response.data) ? response.data : [];\n            return; // Salir si todo fue exitoso\n          }\n\n          // Si llegamos aquí, hubo algún problema con la respuesta\n          console.warn(\"Respuesta no exitosa de la API de roles:\", response);\n          throw new Error(response?.message || 'Error al cargar roles');\n        } catch (apiError) {\n          console.error(\"Error al llamar a la API de roles:\", apiError);\n\n          // Usar roles básicos cuando la API falla para mantener la funcionalidad\n          roles.value = [{\n            id: 1,\n            nombre: 'Superadministrador',\n            descripcion: 'Control total del sistema'\n          }, {\n            id: 2,\n            nombre: 'Administrador',\n            descripcion: 'Gestión de usuarios y configuración'\n          }, {\n            id: 3,\n            nombre: 'Empleado',\n            descripcion: 'Operaciones básicas'\n          }];\n          console.log(\"Usando roles básicos para mantener la funcionalidad:\", roles.value.length);\n        }\n      } catch (err) {\n        console.error('Error general al cargar roles:', err);\n        // Inicializar con roles básicos para evitar errores\n        roles.value = [{\n          id: 1,\n          nombre: 'Superadministrador'\n        }, {\n          id: 2,\n          nombre: 'Administrador'\n        }, {\n          id: 3,\n          nombre: 'Empleado'\n        }];\n      }\n    };\n\n    // Manejar cambios en el campo de búsqueda con debounce\n    const handleSearchInput = () => {\n      clearTimeout(searchTimeout);\n      searchTimeout = setTimeout(() => {\n        // Si la búsqueda está vacía o tiene al menos 2 caracteres, realizar la búsqueda\n        if (searchTerm.value === '' || searchTerm.value.length >= 2) {\n          fetchUsers();\n        }\n      }, 300);\n    };\n\n    // Resetear filtros\n    const resetFilters = () => {\n      searchTerm.value = '';\n      roleFilter.value = '';\n      statusFilter.value = '';\n      fetchUsers();\n    };\n\n    // Mostrar formulario de creación\n    const showCreateForm = () => {\n      isEditing.value = false;\n      formData.value = {\n        id: null,\n        nombre: '',\n        email: '',\n        telefono: '',\n        password: '',\n        roles: ['Empleado'],\n        // Rol por defecto\n        estado: 'activo'\n      };\n      showModal.value = true;\n    };\n\n    // Editar usuario\n    const editUser = user => {\n      // No permitir editar usuarios superadministradores si el usuario actual es solo administrador\n      if (isOnlyAdmin.value && user.roles && Array.isArray(user.roles) && user.roles.includes('Superadministrador')) {\n        alert('No tienes permisos para editar usuarios con rol de Superadministrador');\n        return;\n      }\n      isEditing.value = true;\n      formData.value = {\n        id: user.id,\n        nombre: user.nombre,\n        email: user.email,\n        telefono: user.telefono || '',\n        password: '',\n        // Dejamos vacío para mantener la contraseña actual\n        roles: [...user.roles],\n        estado: user.estado\n      };\n      showModal.value = true;\n    };\n\n    // Guardar usuario (crear o actualizar)\n    const saveUser = async () => {\n      try {\n        loading.value = true;\n        error.value = ''; // Limpiar errores previos\n\n        // Validar que al menos se seleccionó un rol\n        if (!formData.value.roles.length) {\n          await alert('Debe seleccionar al menos un rol para el usuario');\n          loading.value = false;\n          return;\n        }\n\n        // Validar que un Administrador no asigne roles superiores\n        if (isOnlyAdmin.value) {\n          // Filtrar los roles para mantener solo el de Empleado\n          formData.value.roles = formData.value.roles.filter(role => role === 'Empleado');\n\n          // Si después del filtro no queda ningún rol, añadimos Empleado\n          if (formData.value.roles.length === 0) {\n            formData.value.roles = ['Empleado'];\n          }\n        }\n        if (isEditing.value) {\n          // Filtrar para enviar solo los campos necesarios\n          const userData = {\n            nombre: formData.value.nombre,\n            telefono: formData.value.telefono,\n            roles: formData.value.roles,\n            estado: formData.value.estado\n          };\n\n          // Si se proporciona una contraseña, incluirla\n          if (formData.value.password) {\n            userData.password = formData.value.password;\n          }\n          const response = await updateUser(formData.value.id, userData);\n          if (response && response.success) {\n            await alert(response.message || 'Usuario actualizado exitosamente');\n\n            // Actualizar el usuario en la lista local\n            const index = allUsers.value.findIndex(u => u.id === formData.value.id);\n            if (index !== -1) {\n              allUsers.value[index] = {\n                ...allUsers.value[index],\n                ...userData\n              };\n              // Refrescar la lista de usuarios filtrados\n              users.value = filteredUsers.value;\n            } else {\n              // Si no se encuentra el usuario, refrescar toda la lista\n              await fetchUsers();\n            }\n          } else {\n            throw new Error(response?.message || 'Error al actualizar usuario');\n          }\n        } else {\n          // Crear nuevo usuario\n          const userData = {\n            nombre: formData.value.nombre,\n            email: formData.value.email,\n            password: formData.value.password,\n            telefono: formData.value.telefono,\n            roles: formData.value.roles,\n            fecha_creacion: new Date().toISOString() // Añadir fecha de creación\n          };\n          try {\n            console.log(\"Llamando a createUser con:\", userData);\n            const response = await createUser(userData);\n            if (response && response.success) {\n              await alert(response.message || 'Usuario creado exitosamente');\n              showModal.value = false; // Cerrar el modal después de crear exitosamente\n\n              // Añadir directamente el usuario creado a la lista local\n              if (response.data) {\n                // Asegurarse de que el usuario tenga fecha de creación\n                const newUser = {\n                  ...response.data,\n                  fecha_creacion: response.data.fecha_creacion || new Date().toISOString()\n                };\n                allUsers.value = [newUser, ...allUsers.value];\n                // Refrescar la lista de usuarios filtrados\n                users.value = filteredUsers.value;\n              } else {\n                // Si no tenemos los datos del usuario creado, refrescar toda la lista\n                await fetchUsers();\n              }\n\n              // Emitir evento para refrescar estadísticas en el dashboard\n              emit('user-created');\n            } else {\n              throw new Error(response?.message || 'Error al crear usuario');\n            }\n          } catch (createError) {\n            console.error('Error al crear usuario:', createError);\n            error.value = createError.message || 'Error al crear usuario';\n            // No cerrar el modal para permitir corregir el error\n          }\n        }\n      } catch (err) {\n        console.error('Error al guardar el usuario:', err);\n        error.value = err.message || 'Error al guardar el usuario';\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Activar usuario\n    const activateUser = async user => {\n      // No permitir activar usuarios superadministradores si el usuario actual es solo administrador\n      if (isOnlyAdmin.value && user.roles && Array.isArray(user.roles) && user.roles.includes('Superadministrador')) {\n        alert('No tienes permisos para modificar usuarios con rol de Superadministrador');\n        return;\n      }\n      try {\n        const confirmed = await confirm(`¿Estás seguro de que deseas activar el usuario ${user.nombre}?`, {\n          title: 'Confirmar activación',\n          confirmText: 'Activar',\n          cancelText: 'Cancelar'\n        });\n        if (confirmed) {\n          loading.value = true;\n          console.log(`Activando usuario con ID: ${user.id}`);\n          const response = await cambiarEstadoUsuario(user.id, 'activo');\n          if (response && response.success) {\n            await alert(response.message || 'Usuario activado exitosamente');\n\n            // Actualizar estado del usuario localmente en la lista\n            const index = allUsers.value.findIndex(u => u.id === user.id);\n            if (index !== -1) {\n              allUsers.value[index].estado = 'activo';\n              // Refrescar la lista de usuarios filtrados\n              users.value = filteredUsers.value;\n            }\n          } else {\n            throw new Error(response?.message || 'Error al activar usuario');\n          }\n        }\n      } catch (err) {\n        console.error('Error al activar usuario:', err);\n        await alert(`Error al activar usuario: ${err.message || 'Error desconocido'}`);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Desactivar usuario\n    const deactivateUser = async user => {\n      // No permitir desactivar usuarios superadministradores si el usuario actual es solo administrador\n      if (isOnlyAdmin.value && user.roles && Array.isArray(user.roles) && user.roles.includes('Superadministrador')) {\n        alert('No tienes permisos para modificar usuarios con rol de Superadministrador');\n        return;\n      }\n      try {\n        const confirmed = await confirm(`¿Estás seguro de que deseas desactivar el usuario ${user.nombre}? No podrá acceder al sistema mientras esté inactivo.`, {\n          title: 'Confirmar desactivación'\n        });\n        if (confirmed) {\n          loading.value = true;\n          console.log(`Desactivando usuario con ID: ${user.id}`);\n          const response = await cambiarEstadoUsuario(user.id, 'inactivo');\n          if (response && response.success) {\n            await alert(response.message || 'Usuario desactivado exitosamente');\n\n            // Actualizar estado del usuario localmente en la lista\n            const index = allUsers.value.findIndex(u => u.id === user.id);\n            if (index !== -1) {\n              allUsers.value[index].estado = 'inactivo';\n              // Refrescar la lista de usuarios filtrados\n              users.value = filteredUsers.value;\n            }\n          } else {\n            throw new Error(response?.message || 'Error al desactivar usuario');\n          }\n        }\n      } catch (err) {\n        console.error('Error al desactivar usuario:', err);\n        await alert(`Error al desactivar usuario: ${err.message || 'Error desconocido'}`);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Eliminar usuario\n    const deleteUser = async user => {\n      // No permitir eliminar usuarios superadministradores si el usuario actual es solo administrador\n      if (isOnlyAdmin.value && user.roles && Array.isArray(user.roles) && user.roles.includes('Superadministrador')) {\n        alert('No tienes permisos para eliminar usuarios con rol de Superadministrador');\n        return;\n      }\n      try {\n        const confirmed = await confirm(`¿Estás seguro de que deseas eliminar permanentemente el usuario ${user.nombre}? Esta acción no se puede deshacer.`, {\n          title: 'Confirmar eliminación',\n          confirmText: 'Eliminar',\n          cancelText: 'Cancelar'\n        });\n        if (confirmed) {\n          loading.value = true;\n          console.log(`Eliminando usuario con ID: ${user.id}`);\n          const response = await removeUser(user.id);\n          if (response && response.success) {\n            await alert(response.message || 'Usuario eliminado exitosamente');\n\n            // Eliminar usuario de la lista local\n            allUsers.value = allUsers.value.filter(u => u.id !== user.id);\n            // Refrescar la lista de usuarios filtrados\n            users.value = filteredUsers.value;\n          } else {\n            throw new Error(response?.message || 'Error al eliminar usuario');\n          }\n        }\n      } catch (err) {\n        console.error('Error al eliminar usuario:', err);\n        await alert(`Error al eliminar usuario: ${err.message || 'Error desconocido'}`);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Cerrar modal\n    const closeModal = () => {\n      showModal.value = false;\n    };\n\n    // Formatear fecha\n    const formatDate = dateStr => {\n      // Si no hay fecha, usar la fecha actual en lugar de mostrar N/A\n      if (!dateStr) {\n        dateStr = new Date().toISOString();\n      }\n      try {\n        const date = new Date(dateStr);\n        if (isNaN(date.getTime())) return 'Fecha inválida';\n        return new Intl.DateTimeFormat('es-ES', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        }).format(date);\n      } catch (e) {\n        return 'Fecha inválida';\n      }\n    };\n    return {\n      users,\n      roles,\n      loading,\n      error,\n      searchTerm,\n      roleFilter,\n      statusFilter,\n      showModal,\n      isEditing,\n      formData,\n      fetchUsers,\n      handleSearchInput,\n      resetFilters,\n      showCreateForm,\n      editUser,\n      saveUser,\n      activateUser,\n      deactivateUser,\n      deleteUser,\n      closeModal,\n      formatDate,\n      availableRoles,\n      isOnlyAdmin,\n      filteredUsers\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","alert","confirm","adminService","hasRole","getCurrentUser","name","emits","setup","props","emit","allUsers","users","roles","loading","error","searchTerm","roleFilter","statusFilter","showModal","isEditing","formData","id","nombre","email","telefono","password","estado","getUsers","getRoles","createUser","updateUser","cambiarEstadoUsuario","deleteUser","removeUser","searchTimeout","isOnlyAdmin","isSuperAdmin","availableRoles","value","filter","role","filteredUsers","currentUser","user","Array","isArray","includes","length","term","toLowerCase","matchesName","matchesEmail","console","log","Promise","all","fetchUsers","fetchRoles","initError","message","status","response","success","data","warn","Error","apiError","err","descripcion","handleSearchInput","clearTimeout","setTimeout","resetFilters","showCreateForm","editUser","saveUser","userData","index","findIndex","u","fecha_creacion","Date","toISOString","newUser","createError","activateUser","confirmed","title","confirmText","cancelText","deactivateUser","closeModal","formatDate","dateStr","date","isNaN","getTime","Intl","DateTimeFormat","day","month","year","hour","minute","format","e"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\components\\admin\\AdminUsers.vue"],"sourcesContent":["<template>\n  <div class=\"users-container\">\n    <h2 class=\"section-title\">Gestión de Usuarios</h2>\n    \n    <!-- Controles de búsqueda y filtros -->\n    <div class=\"users-controls\">\n      <div class=\"search-container\">\n        <input \n          v-model=\"searchTerm\" \n          placeholder=\"Buscar usuario...\" \n          class=\"search-input\"\n          @input=\"handleSearchInput\"\n        />\n      </div>\n      \n      <div class=\"filters\">\n        <select v-model=\"roleFilter\" @change=\"fetchUsers\" class=\"filter-select\">\n          <option value=\"\">Todos los roles</option>\n          <option \n            v-for=\"role in roles\" \n            :key=\"role.id\" \n            :value=\"role.nombre\"\n          >\n            {{ role.nombre }}\n          </option>\n        </select>\n        \n        <select v-model=\"statusFilter\" @change=\"fetchUsers\" class=\"filter-select\">\n          <option value=\"\">Todos los estados</option>\n          <option value=\"activo\">Activos</option>\n          <option value=\"inactivo\">Inactivos</option>\n        </select>\n      </div>\n      \n      <div class=\"actions\">\n        <button @click=\"showCreateForm\" class=\"create-user-btn\">\n          <span class=\"btn-icon\">➕</span> Nuevo Usuario\n        </button>\n      </div>\n    </div>\n    \n    <!-- Tabla de usuarios -->\n    <div v-if=\"loading\" class=\"loading-container\">\n      <div class=\"spinner\"></div>\n      <p>Cargando usuarios...</p>\n    </div>\n    \n    <div v-else-if=\"error\" class=\"error-container\">\n      <p class=\"error-message\">{{ error }}</p>\n      <button @click=\"fetchUsers\" class=\"retry-btn\">Reintentar</button>\n    </div>\n    \n    <div v-else-if=\"users.length === 0\" class=\"empty-state\">\n      <div class=\"empty-icon\">👥</div>\n      <p class=\"empty-title\">No se encontraron usuarios</p>\n      <p class=\"empty-description\">No hay usuarios que coincidan con los criterios de búsqueda</p>\n      <button @click=\"resetFilters\" class=\"reset-filters-btn\">Limpiar filtros</button>\n    </div>\n    \n    <div v-else class=\"users-table-container\">\n      <table class=\"users-table\">\n        <thead>\n          <tr>\n            <th>Nombre</th>\n            <th>Email</th>\n            <th>Teléfono</th>\n            <th>Rol</th>\n            <th>Estado</th>\n            <th>Fecha de registro</th>\n            <th>Acciones</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"user in users\" :key=\"user.id\" :class=\"{'inactive-user': user.estado === 'inactivo'}\">\n            <td>{{ user.nombre }}</td>\n            <td>{{ user.email }}</td>\n            <td>{{ user.telefono || '-' }}</td>\n            <td>\n              <div class=\"roles-list\">\n                <span \n                  v-for=\"(role, index) in user.roles\" \n                  :key=\"index\" \n                  class=\"role-badge\"\n                  :class=\"{'admin-role': role === 'Administrador', 'superadmin-role': role === 'Superadministrador'}\"\n                >\n                  {{ role }}\n                </span>\n              </div>\n            </td>\n            <td>\n              <span \n                class=\"status-badge\" \n                :class=\"user.estado === 'activo' ? 'active-status' : 'inactive-status'\"\n              >\n                {{ user.estado === 'activo' ? 'Activo' : 'Inactivo' }}\n              </span>\n            </td>\n            <td>{{ formatDate(user.fecha_creacion) }}</td>\n            <td>\n              <div class=\"action-buttons\">\n                <button @click=\"editUser(user)\" class=\"edit-btn\" title=\"Editar\">\n                  <span class=\"btn-icon\">✏️</span>\n                </button>\n                <button \n                  v-if=\"user.estado === 'activo'\" \n                  @click=\"deactivateUser(user)\" \n                  class=\"deactivate-btn\" \n                  title=\"Desactivar\"\n                >\n                  <span class=\"btn-icon\">🔴</span>\n                </button>\n                <button \n                  v-else \n                  @click=\"activateUser(user)\" \n                  class=\"activate-btn\" \n                  title=\"Activar\"\n                >\n                  <span class=\"btn-icon\">🟢</span>\n                </button>\n                <button @click=\"deleteUser(user)\" class=\"delete-btn\" title=\"Eliminar\">\n                  <span class=\"btn-icon\">❌</span>\n                </button>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n    \n    <!-- Form Modal -->\n    <div v-if=\"showModal\" class=\"modal-overlay\" @click.self=\"closeModal\">\n      <div class=\"modal-container\">\n        <div class=\"modal-header\">\n          <h3>{{ isEditing ? 'Editar Usuario' : 'Crear Nuevo Usuario' }}</h3>\n          <button @click=\"closeModal\" class=\"close-btn\">&times;</button>\n        </div>\n        \n        <div class=\"modal-body\">\n          <form @submit.prevent=\"saveUser\" class=\"user-form\">\n            <div class=\"form-group\">\n              <label for=\"nombre\">Nombre completo</label>\n              <input\n                type=\"text\"\n                id=\"nombre\"\n                v-model=\"formData.nombre\"\n                required\n                placeholder=\"Ej: Juan Pérez\"\n              >\n            </div>\n            \n            <div class=\"form-group\">\n              <label for=\"email\">Correo electrónico</label>\n              <input\n                type=\"email\"\n                id=\"email\"\n                v-model=\"formData.email\"\n                required\n                placeholder=\"ejemplo@correo.com\"\n                :disabled=\"isEditing\"\n              >\n            </div>\n            \n            <div class=\"form-group\">\n              <label for=\"telefono\">Teléfono</label>\n              <input\n                type=\"tel\"\n                id=\"telefono\"\n                v-model=\"formData.telefono\"\n                placeholder=\"Ej: 3001234567\"\n              >\n            </div>\n            \n            <div class=\"form-group\">\n              <label for=\"password\">Contraseña {{ isEditing ? '(dejar en blanco para mantener actual)' : '' }}</label>\n              <input\n                type=\"password\"\n                id=\"password\"\n                v-model=\"formData.password\"\n                :required=\"!isEditing\"\n                placeholder=\"Contraseña segura\"\n                autocomplete=\"new-password\"\n              >\n            </div>\n            \n            <div class=\"form-group\">\n              <label>Roles</label>\n              <div class=\"roles-checkboxes\">\n                <div \n                  v-for=\"role in availableRoles\" \n                  :key=\"role.id\" \n                  class=\"role-checkbox\"\n                >\n                  <input \n                    type=\"checkbox\" \n                    :id=\"'role-' + role.id\" \n                    :value=\"role.nombre\" \n                    v-model=\"formData.roles\"\n                  >\n                  <label :for=\"'role-' + role.id\">{{ role.nombre }}</label>\n                </div>\n              </div>\n            </div>\n            \n            <div v-if=\"isEditing\" class=\"form-group\">\n              <label for=\"estado\">Estado</label>\n              <select id=\"estado\" v-model=\"formData.estado\">\n                <option value=\"activo\">Activo</option>\n                <option value=\"inactivo\">Inactivo</option>\n              </select>\n            </div>\n            \n            <div class=\"form-buttons\">\n              <button type=\"button\" @click=\"closeModal\" class=\"cancel-btn\">Cancelar</button>\n              <button type=\"submit\" class=\"save-btn\">{{ isEditing ? 'Actualizar' : 'Crear' }}</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted } from 'vue';\nimport { alert, confirm } from '../../services/dialogService';\nimport * as adminService from '../../services/adminService';\nimport { hasRole, getCurrentUser } from '../../services/authService';\n\nexport default {\n  name: 'AdminUsers',\n  emits: ['user-created'], // Declarar los eventos que emite el componente\n  setup(props, { emit }) { // Obtener emit desde el contexto\n    const allUsers = ref([]); // Almacena todos los usuarios sin filtrar\n    const users = ref([]); // Usuarios filtrados para mostrar\n    const roles = ref([]);\n    const loading = ref(true);\n    const error = ref(null);\n    \n    // Filtros\n    const searchTerm = ref('');\n    const roleFilter = ref('');\n    const statusFilter = ref('');\n    \n    // Formulario\n    const showModal = ref(false);\n    const isEditing = ref(false);\n    const formData = ref({\n      id: null,\n      nombre: '',\n      email: '',\n      telefono: '',\n      password: '',\n      roles: [],\n      estado: 'activo'\n    });\n    \n    // Obtener referencias a las funciones del servicio admin\n    const { \n      getUsers, \n      getRoles, \n      createUser, \n      updateUser, \n      cambiarEstadoUsuario, \n      deleteUser: removeUser \n    } = adminService;\n    \n    // Búsqueda con debounce\n    let searchTimeout = null;\n    \n    // Obtener si el usuario actual es Administrador (no Superadministrador)\n    const isOnlyAdmin = computed(() => {\n      return hasRole('Administrador') && !hasRole('Superadministrador');\n    });\n\n    // Obtener si el usuario actual es Superadministrador\n    const isSuperAdmin = computed(() => {\n      return hasRole('Superadministrador');\n    });\n\n    // Filtrar roles disponibles según el rol del usuario actual\n    const availableRoles = computed(() => {\n      if (isOnlyAdmin.value) {\n        // Si es solo Administrador, mostrar solo el rol de Empleado\n        return roles.value.filter(role => role.nombre === 'Empleado');\n      }\n      // Si es Superadministrador, mostrar todos los roles\n      return roles.value;\n    });\n\n    // Filtrar usuarios según el rol del usuario actual\n    const filteredUsers = computed(() => {\n      // Obtener el usuario actual\n      const currentUser = getCurrentUser();\n      \n      // Filtrar usuarios\n      return allUsers.value.filter(user => {\n        // Si el usuario actual es el mismo que estamos revisando, siempre mostrarlo\n        if (currentUser && user.email === currentUser.email) {\n          return true;\n        }\n        \n        // Ocultar el Super Administrador (superadmin@example.com) solo si el usuario actual NO es Superadministrador\n        if (user.email === 'superadmin@example.com' && !isSuperAdmin.value) {\n          return false;\n        }\n        \n        // Si es solo Administrador, ocultar usuarios con rol de Superadministrador\n        if (isOnlyAdmin.value) {\n          if (user.roles && Array.isArray(user.roles) && user.roles.includes('Superadministrador')) {\n            return false;\n          }\n        }\n        \n        // Si el usuario actual es susan@gmail.com o karen@gmail.com, mostrar solo su propio usuario\n        // pero permitir ver los usuarios que ellos mismos han creado\n        if (currentUser && (currentUser.email === 'susan@gmail.com' || currentUser.email === 'karen@gmail.com')) {\n          // Permitir ver usuarios creados por ellos mismos (implementación futura)\n          // Por ahora, solo mostrar su propio usuario\n          return user.email === currentUser.email;\n        }\n        \n        // Aplicar filtros adicionales\n        if (roleFilter.value && (!user.roles || !user.roles.includes(roleFilter.value))) {\n          return false;\n        }\n        \n        if (statusFilter.value && user.estado !== statusFilter.value) {\n          return false;\n        }\n        \n        if (searchTerm.value && searchTerm.value.length >= 2) {\n          const term = searchTerm.value.toLowerCase();\n          const matchesName = user.nombre && user.nombre.toLowerCase().includes(term);\n          const matchesEmail = user.email && user.email.toLowerCase().includes(term);\n          \n          return matchesName || matchesEmail;\n        }\n        \n        return true;\n      });\n    });\n    \n    onMounted(async () => {\n      try {\n        console.log(\"AdminUsers componente montado - inicializando...\");\n        // Inicializar la lista de usuarios vacía\n        allUsers.value = [];\n        users.value = [];\n        // Cargar datos\n        await Promise.all([\n          fetchUsers(),\n          fetchRoles()\n        ]);\n        console.log(\"Inicialización completa, usuarios cargados:\", users.value.length);\n      } catch (initError) {\n        console.error(\"Error durante la inicialización:\", initError);\n        error.value = `Error durante la inicialización: ${initError.message}`;\n      }\n    });\n    \n    // Obtener usuarios con filtros aplicados\n    const fetchUsers = async () => {\n      try {\n        loading.value = true;\n        error.value = '';\n        \n        // Limpiar la lista de usuarios actual para evitar datos residuales\n        allUsers.value = [];\n        users.value = [];\n        \n        try {\n          console.log('Obteniendo usuarios con filtros:', {\n            searchTerm: searchTerm.value,\n            role: roleFilter.value,\n            status: statusFilter.value\n          });\n          \n          const response = await getUsers({\n            searchTerm: searchTerm.value,\n            role: roleFilter.value,\n            status: statusFilter.value\n          });\n          \n          if (response && response.success) {\n            console.log(`Recibidos ${response.data.length} usuarios de la API`);\n            \n            // Guardar usuarios en la lista local\n            allUsers.value = response.data;\n            \n            // Aplicar filtro para ocultar superadministradores y superadmin@example.com\n            users.value = filteredUsers.value;\n            return; // Salir de la función si todo fue exitoso\n          }\n          \n          // Si llegamos aquí, hubo algún problema con la respuesta\n          console.warn(\"Respuesta no exitosa de la API o formato incorrecto:\", response);\n          throw new Error(response?.message || 'Error al cargar usuarios');\n          \n        } catch (apiError) {\n          console.error(\"Error al llamar a la API:\", apiError);\n          throw apiError; // Propagar el error para que se maneje en el bloque catch externo\n        }\n        \n      } catch (err) {\n        console.error('Error general al cargar usuarios:', err);\n        error.value = `Error al cargar usuarios: ${err.message || 'Error desconocido'}`;\n        // Inicializar arrays vacíos para evitar errores\n        allUsers.value = [];\n        users.value = [];\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    // Obtener roles disponibles\n    const fetchRoles = async () => {\n      try {\n        try {\n          const response = await getRoles();\n          \n          if (response && response.success) {\n            roles.value = Array.isArray(response.data) ? response.data : [];\n            return; // Salir si todo fue exitoso\n          }\n          \n          // Si llegamos aquí, hubo algún problema con la respuesta\n          console.warn(\"Respuesta no exitosa de la API de roles:\", response);\n          throw new Error(response?.message || 'Error al cargar roles');\n          \n        } catch (apiError) {\n          console.error(\"Error al llamar a la API de roles:\", apiError);\n          \n          // Usar roles básicos cuando la API falla para mantener la funcionalidad\n          roles.value = [\n            { id: 1, nombre: 'Superadministrador', descripcion: 'Control total del sistema' },\n            { id: 2, nombre: 'Administrador', descripcion: 'Gestión de usuarios y configuración' },\n            { id: 3, nombre: 'Empleado', descripcion: 'Operaciones básicas' }\n          ];\n          \n          console.log(\"Usando roles básicos para mantener la funcionalidad:\", roles.value.length);\n        }\n      } catch (err) {\n        console.error('Error general al cargar roles:', err);\n        // Inicializar con roles básicos para evitar errores\n        roles.value = [\n          { id: 1, nombre: 'Superadministrador' },\n          { id: 2, nombre: 'Administrador' },\n          { id: 3, nombre: 'Empleado' }\n        ];\n      }\n    };\n    \n    // Manejar cambios en el campo de búsqueda con debounce\n    const handleSearchInput = () => {\n      clearTimeout(searchTimeout);\n      searchTimeout = setTimeout(() => {\n        // Si la búsqueda está vacía o tiene al menos 2 caracteres, realizar la búsqueda\n        if (searchTerm.value === '' || searchTerm.value.length >= 2) {\n          fetchUsers();\n        }\n      }, 300);\n    };\n    \n    // Resetear filtros\n    const resetFilters = () => {\n      searchTerm.value = '';\n      roleFilter.value = '';\n      statusFilter.value = '';\n      fetchUsers();\n    };\n    \n    // Mostrar formulario de creación\n    const showCreateForm = () => {\n      isEditing.value = false;\n      formData.value = {\n        id: null,\n        nombre: '',\n        email: '',\n        telefono: '',\n        password: '',\n        roles: ['Empleado'], // Rol por defecto\n        estado: 'activo'\n      };\n      showModal.value = true;\n    };\n    \n    // Editar usuario\n    const editUser = (user) => {\n      // No permitir editar usuarios superadministradores si el usuario actual es solo administrador\n      if (isOnlyAdmin.value && user.roles && Array.isArray(user.roles) && user.roles.includes('Superadministrador')) {\n        alert('No tienes permisos para editar usuarios con rol de Superadministrador');\n        return;\n      }\n\n      isEditing.value = true;\n      formData.value = {\n        id: user.id,\n        nombre: user.nombre,\n        email: user.email,\n        telefono: user.telefono || '',\n        password: '', // Dejamos vacío para mantener la contraseña actual\n        roles: [...user.roles],\n        estado: user.estado\n      };\n      showModal.value = true;\n    };\n    \n    // Guardar usuario (crear o actualizar)\n    const saveUser = async () => {\n      try {\n        loading.value = true;\n        error.value = ''; // Limpiar errores previos\n        \n        // Validar que al menos se seleccionó un rol\n        if (!formData.value.roles.length) {\n          await alert('Debe seleccionar al menos un rol para el usuario');\n          loading.value = false;\n          return;\n        }\n\n        // Validar que un Administrador no asigne roles superiores\n        if (isOnlyAdmin.value) {\n          // Filtrar los roles para mantener solo el de Empleado\n          formData.value.roles = formData.value.roles.filter(role => role === 'Empleado');\n          \n          // Si después del filtro no queda ningún rol, añadimos Empleado\n          if (formData.value.roles.length === 0) {\n            formData.value.roles = ['Empleado'];\n          }\n        }\n        \n        if (isEditing.value) {\n          // Filtrar para enviar solo los campos necesarios\n          const userData = {\n            nombre: formData.value.nombre,\n            telefono: formData.value.telefono,\n            roles: formData.value.roles,\n            estado: formData.value.estado\n          };\n          \n          // Si se proporciona una contraseña, incluirla\n          if (formData.value.password) {\n            userData.password = formData.value.password;\n          }\n          \n          const response = await updateUser(formData.value.id, userData);\n          \n          if (response && response.success) {\n            await alert(response.message || 'Usuario actualizado exitosamente');\n            \n            // Actualizar el usuario en la lista local\n            const index = allUsers.value.findIndex(u => u.id === formData.value.id);\n            if (index !== -1) {\n              allUsers.value[index] = { ...allUsers.value[index], ...userData };\n              // Refrescar la lista de usuarios filtrados\n              users.value = filteredUsers.value;\n            } else {\n              // Si no se encuentra el usuario, refrescar toda la lista\n              await fetchUsers();\n            }\n          } else {\n            throw new Error(response?.message || 'Error al actualizar usuario');\n          }\n        } else {\n          // Crear nuevo usuario\n          const userData = {\n            nombre: formData.value.nombre,\n            email: formData.value.email,\n            password: formData.value.password,\n            telefono: formData.value.telefono,\n            roles: formData.value.roles,\n            fecha_creacion: new Date().toISOString() // Añadir fecha de creación\n          };\n          \n          try {\n            console.log(\"Llamando a createUser con:\", userData);\n            const response = await createUser(userData);\n            \n            if (response && response.success) {\n              await alert(response.message || 'Usuario creado exitosamente');\n              showModal.value = false; // Cerrar el modal después de crear exitosamente\n              \n              // Añadir directamente el usuario creado a la lista local\n              if (response.data) {\n                // Asegurarse de que el usuario tenga fecha de creación\n                const newUser = {\n                  ...response.data,\n                  fecha_creacion: response.data.fecha_creacion || new Date().toISOString()\n                };\n                allUsers.value = [newUser, ...allUsers.value];\n                // Refrescar la lista de usuarios filtrados\n                users.value = filteredUsers.value;\n              } else {\n                // Si no tenemos los datos del usuario creado, refrescar toda la lista\n                await fetchUsers();\n              }\n              \n              // Emitir evento para refrescar estadísticas en el dashboard\n              emit('user-created');\n            } else {\n              throw new Error(response?.message || 'Error al crear usuario');\n            }\n          } catch (createError) {\n            console.error('Error al crear usuario:', createError);\n            error.value = createError.message || 'Error al crear usuario';\n            // No cerrar el modal para permitir corregir el error\n          }\n        }\n      } catch (err) {\n        console.error('Error al guardar el usuario:', err);\n        error.value = err.message || 'Error al guardar el usuario';\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    // Activar usuario\n    const activateUser = async (user) => {\n      // No permitir activar usuarios superadministradores si el usuario actual es solo administrador\n      if (isOnlyAdmin.value && user.roles && Array.isArray(user.roles) && user.roles.includes('Superadministrador')) {\n        alert('No tienes permisos para modificar usuarios con rol de Superadministrador');\n        return;\n      }\n\n      try {\n        const confirmed = await confirm(\n          `¿Estás seguro de que deseas activar el usuario ${user.nombre}?`,\n          { \n            title: 'Confirmar activación',\n            confirmText: 'Activar',\n            cancelText: 'Cancelar' \n          }\n        );\n        \n        if (confirmed) {\n          loading.value = true;\n          \n          console.log(`Activando usuario con ID: ${user.id}`);\n          const response = await cambiarEstadoUsuario(user.id, 'activo');\n          \n          if (response && response.success) {\n            await alert(response.message || 'Usuario activado exitosamente');\n            \n            // Actualizar estado del usuario localmente en la lista\n            const index = allUsers.value.findIndex(u => u.id === user.id);\n            if (index !== -1) {\n              allUsers.value[index].estado = 'activo';\n              // Refrescar la lista de usuarios filtrados\n              users.value = filteredUsers.value;\n            }\n          } else {\n            throw new Error(response?.message || 'Error al activar usuario');\n          }\n        }\n      } catch (err) {\n        console.error('Error al activar usuario:', err);\n        await alert(`Error al activar usuario: ${err.message || 'Error desconocido'}`);\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    // Desactivar usuario\n    const deactivateUser = async (user) => {\n      // No permitir desactivar usuarios superadministradores si el usuario actual es solo administrador\n      if (isOnlyAdmin.value && user.roles && Array.isArray(user.roles) && user.roles.includes('Superadministrador')) {\n        alert('No tienes permisos para modificar usuarios con rol de Superadministrador');\n        return;\n      }\n\n      try {\n        const confirmed = await confirm(\n          `¿Estás seguro de que deseas desactivar el usuario ${user.nombre}? No podrá acceder al sistema mientras esté inactivo.`,\n          { title: 'Confirmar desactivación' }\n        );\n        \n        if (confirmed) {\n          loading.value = true;\n          \n          console.log(`Desactivando usuario con ID: ${user.id}`);\n          const response = await cambiarEstadoUsuario(user.id, 'inactivo');\n          \n          if (response && response.success) {\n            await alert(response.message || 'Usuario desactivado exitosamente');\n            \n            // Actualizar estado del usuario localmente en la lista\n            const index = allUsers.value.findIndex(u => u.id === user.id);\n            if (index !== -1) {\n              allUsers.value[index].estado = 'inactivo';\n              // Refrescar la lista de usuarios filtrados\n              users.value = filteredUsers.value;\n            }\n          } else {\n            throw new Error(response?.message || 'Error al desactivar usuario');\n          }\n        }\n      } catch (err) {\n        console.error('Error al desactivar usuario:', err);\n        await alert(`Error al desactivar usuario: ${err.message || 'Error desconocido'}`);\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    // Eliminar usuario\n    const deleteUser = async (user) => {\n      // No permitir eliminar usuarios superadministradores si el usuario actual es solo administrador\n      if (isOnlyAdmin.value && user.roles && Array.isArray(user.roles) && user.roles.includes('Superadministrador')) {\n        alert('No tienes permisos para eliminar usuarios con rol de Superadministrador');\n        return;\n      }\n\n      try {\n        const confirmed = await confirm(\n          `¿Estás seguro de que deseas eliminar permanentemente el usuario ${user.nombre}? Esta acción no se puede deshacer.`,\n          { \n            title: 'Confirmar eliminación',\n            confirmText: 'Eliminar',\n            cancelText: 'Cancelar' \n          }\n        );\n        \n        if (confirmed) {\n          loading.value = true;\n          \n          console.log(`Eliminando usuario con ID: ${user.id}`);\n          const response = await removeUser(user.id);\n          \n          if (response && response.success) {\n            await alert(response.message || 'Usuario eliminado exitosamente');\n            \n            // Eliminar usuario de la lista local\n            allUsers.value = allUsers.value.filter(u => u.id !== user.id);\n            // Refrescar la lista de usuarios filtrados\n            users.value = filteredUsers.value;\n          } else {\n            throw new Error(response?.message || 'Error al eliminar usuario');\n          }\n        }\n      } catch (err) {\n        console.error('Error al eliminar usuario:', err);\n        await alert(`Error al eliminar usuario: ${err.message || 'Error desconocido'}`);\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    // Cerrar modal\n    const closeModal = () => {\n      showModal.value = false;\n    };\n    \n    // Formatear fecha\n    const formatDate = (dateStr) => {\n      // Si no hay fecha, usar la fecha actual en lugar de mostrar N/A\n      if (!dateStr) {\n        dateStr = new Date().toISOString();\n      }\n      \n      try {\n        const date = new Date(dateStr);\n        if (isNaN(date.getTime())) return 'Fecha inválida';\n        \n        return new Intl.DateTimeFormat('es-ES', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        }).format(date);\n      } catch (e) {\n        return 'Fecha inválida';\n      }\n    };\n    \n    return {\n      users,\n      roles,\n      loading,\n      error,\n      searchTerm,\n      roleFilter,\n      statusFilter,\n      showModal,\n      isEditing,\n      formData,\n      fetchUsers,\n      handleSearchInput,\n      resetFilters,\n      showCreateForm,\n      editUser,\n      saveUser,\n      activateUser,\n      deactivateUser,\n      deleteUser,\n      closeModal,\n      formatDate,\n      availableRoles,\n      isOnlyAdmin,\n      filteredUsers\n    };\n  }\n}\n</script>\n\n<style scoped>\n.users-container {\n  padding: 0;\n}\n\n.section-title {\n  font-size: 24px;\n  margin-bottom: 30px;\n  color: #333;\n  border-bottom: 2px solid #4CAF50;\n  padding-bottom: 10px;\n}\n\n/* Controles y filtros */\n.users-controls {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  margin-bottom: 30px;\n}\n\n.search-container {\n  flex-grow: 1;\n  min-width: 250px;\n}\n\n.search-input {\n  width: 100%;\n  padding: 10px 15px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 16px;\n}\n\n.filters {\n  display: flex;\n  gap: 10px;\n}\n\n.filter-select {\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  background-color: white;\n}\n\n.actions {\n  margin-left: auto;\n}\n\n.create-user-btn {\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 10px 15px;\n  cursor: pointer;\n  font-weight: bold;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  transition: background-color 0.3s;\n}\n\n.create-user-btn:hover {\n  background-color: #45a049;\n}\n\n.btn-icon {\n  font-size: 16px;\n}\n\n/* Estados de carga y error */\n.loading-container, .error-container, .empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 50px 20px;\n  text-align: center;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  margin: 20px 0;\n}\n\n.spinner {\n  border: 4px solid rgba(0, 0, 0, 0.1);\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  border-left-color: #4CAF50;\n  animation: spin 1s linear infinite;\n  margin-bottom: 15px;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.error-message {\n  color: #f44336;\n  font-weight: bold;\n  margin-bottom: 15px;\n}\n\n.retry-btn {\n  background-color: #2196F3;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 10px 15px;\n  cursor: pointer;\n  font-weight: bold;\n}\n\n.retry-btn:hover {\n  background-color: #0b7dda;\n}\n\n.empty-icon {\n  font-size: 48px;\n  color: #ccc;\n  margin-bottom: 10px;\n}\n\n.empty-title {\n  font-size: 20px;\n  color: #666;\n  margin-bottom: 10px;\n}\n\n.empty-description {\n  color: #888;\n  margin-bottom: 20px;\n}\n\n.reset-filters-btn {\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 10px 15px;\n  cursor: pointer;\n  font-weight: bold;\n}\n\n.reset-filters-btn:hover {\n  background-color: #45a049;\n}\n\n/* Tabla de usuarios */\n.users-table-container {\n  overflow-x: auto;\n  margin-top: 20px;\n}\n\n.users-table {\n  width: 100%;\n  border-collapse: collapse;\n  box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.users-table th, .users-table td {\n  padding: 15px;\n  text-align: left;\n}\n\n.users-table th {\n  background-color: #4CAF50;\n  color: white;\n  font-weight: normal;\n}\n\n.users-table tr:nth-child(even) {\n  background-color: #f9f9f9;\n}\n\n.users-table tr:hover {\n  background-color: #f1f1f1;\n}\n\n.inactive-user {\n  opacity: 0.7;\n  background-color: #f5f5f5 !important;\n}\n\n/* Badges */\n.roles-list {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 5px;\n}\n\n.role-badge {\n  padding: 3px 8px;\n  border-radius: 20px;\n  font-size: 12px;\n  background-color: #e0e0e0;\n  color: #333;\n}\n\n.admin-role {\n  background-color: #2196F3;\n  color: white;\n}\n\n.superadmin-role {\n  background-color: #673AB7;\n  color: white;\n}\n\n.status-badge {\n  padding: 3px 8px;\n  border-radius: 20px;\n  font-size: 12px;\n}\n\n.active-status {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.inactive-status {\n  background-color: #f44336;\n  color: white;\n}\n\n/* Botones de acción */\n.action-buttons {\n  display: flex;\n  gap: 5px;\n}\n\n.edit-btn, .activate-btn, .deactivate-btn, .delete-btn {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s;\n}\n\n.edit-btn {\n  background-color: #2196F3;\n  color: white;\n}\n\n.edit-btn:hover {\n  background-color: #0b7dda;\n}\n\n.activate-btn {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.activate-btn:hover {\n  background-color: #45a049;\n}\n\n.deactivate-btn {\n  background-color: #FF9800;\n  color: white;\n}\n\n.deactivate-btn:hover {\n  background-color: #e68a00;\n}\n\n.delete-btn {\n  background-color: #f44336;\n  color: white;\n}\n\n.delete-btn:hover {\n  background-color: #d32f2f;\n}\n\n/* Modal */\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.modal-container {\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  width: 90%;\n  max-width: 500px;\n  max-height: 90vh;\n  overflow-y: auto;\n  animation: modalFadeIn 0.3s;\n}\n\n@keyframes modalFadeIn {\n  from { opacity: 0; transform: translateY(-20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px 20px;\n  border-bottom: 1px solid #eee;\n}\n\n.modal-header h3 {\n  margin: 0;\n  color: #333;\n}\n\n.close-btn {\n  background: none;\n  border: none;\n  font-size: 24px;\n  cursor: pointer;\n  color: #999;\n}\n\n.close-btn:hover {\n  color: #666;\n}\n\n.modal-body {\n  padding: 20px;\n}\n\n/* Formulario */\n.user-form {\n  display: grid;\n  gap: 15px;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.form-group label {\n  color: #666;\n  font-weight: 600;\n}\n\n.form-group input, .form-group select {\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n}\n\n.form-group input:focus, .form-group select:focus {\n  outline: none;\n  border-color: #4CAF50;\n}\n\n.form-group input:disabled {\n  background-color: #f5f5f5;\n  cursor: not-allowed;\n}\n\n.roles-checkboxes {\n  display: grid;\n  gap: 10px;\n}\n\n.role-checkbox {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.role-checkbox input[type=\"checkbox\"] {\n  width: auto;\n  margin: 0;\n}\n\n.form-buttons {\n  display: flex;\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.cancel-btn, .save-btn {\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: bold;\n  flex: 1;\n}\n\n.cancel-btn {\n  background-color: #f1f1f1;\n  color: #333;\n}\n\n.cancel-btn:hover {\n  background-color: #e1e1e1;\n}\n\n.save-btn {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.save-btn:hover {\n  background-color: #45a049;\n}\n\n@media (max-width: 768px) {\n  .users-controls {\n    flex-direction: column;\n  }\n  \n  .actions {\n    margin-left: 0;\n    width: 100%;\n  }\n  \n  .create-user-btn {\n    width: 100%;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}