{"ast":null,"code":"import { createApp } from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport { initializeDatabase } from './services/dbInitializer';\n\n// Añadir estilos globales\nimport './assets/global.css';\n// Añadir estilos de tema\nimport './assets/theme.css';\n\n// Importar utilidades de prueba para WhatsApp\nimport './utils/whatsappSimulator';\nimport './utils/testReservations';\n\n// Función para formatear fechas\nfunction formatDate(dateString) {\n  if (!dateString) return '';\n  try {\n    // Formato específico con T y Z: \"29T05:00:00.000Z/05/2025\"\n    if (typeof dateString === 'string' && dateString.includes('T') && dateString.includes('/')) {\n      const parts = dateString.split('/');\n      if (parts.length === 3) {\n        const day = parts[0].split('T')[0];\n        return `${day}/${parts[1]}/${parts[2]}`;\n      }\n    }\n\n    // Formato ISO: \"2025-05-29\"\n    if (typeof dateString === 'string' && dateString.includes('-')) {\n      const parts = dateString.split('-');\n      if (parts.length === 3) {\n        return `${parts[2]}/${parts[1]}/${parts[0]}`;\n      }\n    }\n\n    // Intentar parsear como objeto Date\n    const date = new Date(dateString);\n    if (!isNaN(date.getTime())) {\n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    }\n\n    // Si no se puede formatear, devolver el string original\n    return dateString;\n  } catch (error) {\n    console.error('Error al formatear fecha:', error);\n    return dateString;\n  }\n}\n\n// Inicializar la base de datos antes de montar la aplicación\nasync function init() {\n  try {\n    await initializeDatabase();\n    console.log('Base de datos inicializada correctamente');\n\n    // Crear y montar la aplicación solo después de que la BD esté lista\n    const app = createApp(App);\n\n    // Registrar filtro global para formatear fechas\n    app.config.globalProperties.$filters = {\n      formatDate\n    };\n    app.use(router);\n    app.mount('#app');\n  } catch (error) {\n    console.error('Error al inicializar la aplicación:', error);\n  }\n}\ninit();","map":{"version":3,"names":["createApp","App","router","initializeDatabase","formatDate","dateString","includes","parts","split","length","day","date","Date","isNaN","getTime","getDate","toString","padStart","month","getMonth","year","getFullYear","error","console","init","log","app","config","globalProperties","$filters","use","mount"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/main.js"],"sourcesContent":["import { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport { initializeDatabase } from './services/dbInitializer'\n\n// Añadir estilos globales\nimport './assets/global.css'\n// Añadir estilos de tema\nimport './assets/theme.css'\n\n// Importar utilidades de prueba para WhatsApp\nimport './utils/whatsappSimulator';\nimport './utils/testReservations';\n\n// Función para formatear fechas\nfunction formatDate(dateString) {\n    if (!dateString) return '';\n    \n    try {\n        // Formato específico con T y Z: \"29T05:00:00.000Z/05/2025\"\n        if (typeof dateString === 'string' && dateString.includes('T') && dateString.includes('/')) {\n            const parts = dateString.split('/');\n            if (parts.length === 3) {\n                const day = parts[0].split('T')[0];\n                return `${day}/${parts[1]}/${parts[2]}`;\n            }\n        }\n        \n        // Formato ISO: \"2025-05-29\"\n        if (typeof dateString === 'string' && dateString.includes('-')) {\n            const parts = dateString.split('-');\n            if (parts.length === 3) {\n                return `${parts[2]}/${parts[1]}/${parts[0]}`;\n            }\n        }\n        \n        // Intentar parsear como objeto Date\n        const date = new Date(dateString);\n        if (!isNaN(date.getTime())) {\n            const day = date.getDate().toString().padStart(2, '0');\n            const month = (date.getMonth() + 1).toString().padStart(2, '0');\n            const year = date.getFullYear();\n            return `${day}/${month}/${year}`;\n        }\n        \n        // Si no se puede formatear, devolver el string original\n        return dateString;\n    } catch (error) {\n        console.error('Error al formatear fecha:', error);\n        return dateString;\n    }\n}\n\n// Inicializar la base de datos antes de montar la aplicación\nasync function init() {\n    try {\n        await initializeDatabase();\n        console.log('Base de datos inicializada correctamente');\n        \n        // Crear y montar la aplicación solo después de que la BD esté lista\n        const app = createApp(App);\n        \n        // Registrar filtro global para formatear fechas\n        app.config.globalProperties.$filters = {\n            formatDate\n        };\n        \n        app.use(router);\n        app.mount('#app');\n    } catch (error) {\n        console.error('Error al inicializar la aplicación:', error);\n    }\n}\n\ninit();\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,KAAK;AAC/B,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,kBAAkB,QAAQ,0BAA0B;;AAE7D;AACA,OAAO,qBAAqB;AAC5B;AACA,OAAO,oBAAoB;;AAE3B;AACA,OAAO,2BAA2B;AAClC,OAAO,0BAA0B;;AAEjC;AACA,SAASC,UAAUA,CAACC,UAAU,EAAE;EAC5B,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE;EAE1B,IAAI;IACA;IACA,IAAI,OAAOA,UAAU,KAAK,QAAQ,IAAIA,UAAU,CAACC,QAAQ,CAAC,GAAG,CAAC,IAAID,UAAU,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;MACxF,MAAMC,KAAK,GAAGF,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC;MACnC,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;QACpB,MAAMC,GAAG,GAAGH,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClC,OAAO,GAAGE,GAAG,IAAIH,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;MAC3C;IACJ;;IAEA;IACA,IAAI,OAAOF,UAAU,KAAK,QAAQ,IAAIA,UAAU,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC5D,MAAMC,KAAK,GAAGF,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC;MACnC,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;QACpB,OAAO,GAAGF,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,EAAE;MAChD;IACJ;;IAEA;IACA,MAAMI,IAAI,GAAG,IAAIC,IAAI,CAACP,UAAU,CAAC;IACjC,IAAI,CAACQ,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE;MACxB,MAAMJ,GAAG,GAAGC,IAAI,CAACI,OAAO,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACtD,MAAMC,KAAK,GAAG,CAACP,IAAI,CAACQ,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAEH,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAC/D,MAAMG,IAAI,GAAGT,IAAI,CAACU,WAAW,CAAC,CAAC;MAC/B,OAAO,GAAGX,GAAG,IAAIQ,KAAK,IAAIE,IAAI,EAAE;IACpC;;IAEA;IACA,OAAOf,UAAU;EACrB,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAOjB,UAAU;EACrB;AACJ;;AAEA;AACA,eAAemB,IAAIA,CAAA,EAAG;EAClB,IAAI;IACA,MAAMrB,kBAAkB,CAAC,CAAC;IAC1BoB,OAAO,CAACE,GAAG,CAAC,0CAA0C,CAAC;;IAEvD;IACA,MAAMC,GAAG,GAAG1B,SAAS,CAACC,GAAG,CAAC;;IAE1B;IACAyB,GAAG,CAACC,MAAM,CAACC,gBAAgB,CAACC,QAAQ,GAAG;MACnCzB;IACJ,CAAC;IAEDsB,GAAG,CAACI,GAAG,CAAC5B,MAAM,CAAC;IACfwB,GAAG,CAACK,KAAK,CAAC,MAAM,CAAC;EACrB,CAAC,CAAC,OAAOT,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;EAC/D;AACJ;AAEAE,IAAI,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}