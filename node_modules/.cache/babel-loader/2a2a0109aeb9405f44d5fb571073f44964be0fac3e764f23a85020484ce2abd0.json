{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nconst DB_NAME = 'websapDatabase';\nconst DB_VERSION = 1;\nconst MENU_STORE = 'menuItems';\nconst IMAGE_STORE = 'menuImages';\nconst SOLD_ITEMS_STORE = 'soldItems';\nconst BUSINESS_INFO_STORE = 'businessInfo';\n\n// Abrir la conexión a la base de datos\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onerror = event => {\n      reject('Error al abrir la base de datos: ' + event.target.errorCode);\n    };\n    request.onsuccess = event => {\n      const db = event.target.result;\n      resolve(db);\n    };\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n\n      // Crear almacén para elementos del menú\n      if (!db.objectStoreNames.contains(MENU_STORE)) {\n        db.createObjectStore(MENU_STORE, {\n          keyPath: 'id'\n        });\n      }\n\n      // Crear almacén para imágenes\n      if (!db.objectStoreNames.contains(IMAGE_STORE)) {\n        db.createObjectStore(IMAGE_STORE, {\n          keyPath: 'id'\n        });\n      }\n\n      // Crear almacén para elementos vendidos\n      if (!db.objectStoreNames.contains(SOLD_ITEMS_STORE)) {\n        db.createObjectStore(SOLD_ITEMS_STORE, {\n          keyPath: 'id'\n        });\n      }\n\n      // Crear almacén para información del negocio\n      if (!db.objectStoreNames.contains(BUSINESS_INFO_STORE)) {\n        db.createObjectStore(BUSINESS_INFO_STORE, {\n          keyPath: 'id'\n        });\n      }\n    };\n  });\n}\n\n// Guardar elementos del menú\nexport async function saveMenuItems(items) {\n  try {\n    // Primero procesamos todas las imágenes y creamos copias de los objetos\n    const processedItems = [];\n    for (const item of items) {\n      // Crear una copia del elemento\n      const itemToStore = {\n        ...item\n      };\n\n      // Asegurarse de que el elemento tiene un id\n      if (!itemToStore.id) {\n        itemToStore.id = Date.now() + Math.random().toString(36).substring(2, 10);\n      }\n\n      // Si tiene imagen, guardarla por separado antes de la transacción principal\n      if (itemToStore.image && typeof itemToStore.image === 'string' && itemToStore.image.length > 0) {\n        try {\n          await saveMenuImage(itemToStore.id, itemToStore.image);\n          itemToStore.image = null;\n          itemToStore.hasStoredImage = true;\n        } catch (imageError) {\n          console.warn('Error al guardar imagen, continuando sin imagen:', imageError);\n          // Si hay error al guardar la imagen, continuamos sin ella\n          itemToStore.image = null;\n          itemToStore.hasStoredImage = false;\n        }\n      }\n      processedItems.push(itemToStore);\n    }\n\n    // Ahora guardamos todos los items en una sola transacción\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(MENU_STORE);\n\n    // Usamos Promise.all para manejar todas las operaciones put juntas\n    const putPromises = processedItems.map(item => {\n      return new Promise((resolve, reject) => {\n        const request = store.put(item);\n        request.onsuccess = () => resolve();\n        request.onerror = e => reject(e.target.error);\n      });\n    });\n\n    // Esperamos a que se completen todas las operaciones put\n    await Promise.all(putPromises);\n\n    // Esperamos a que se complete la transacción\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar elementos del menú:', error);\n    throw error;\n  }\n}\n\n// Guardar imagen de un elemento del menú\nexport async function saveMenuImage(itemId, imageData) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([IMAGE_STORE], 'readwrite');\n    const store = transaction.objectStore(IMAGE_STORE);\n    store.put({\n      id: itemId,\n      data: imageData\n    });\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar imagen:', error);\n    throw error;\n  }\n}\n\n// Obtener todos los elementos del menú\nexport async function getMenuItems() {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE], 'readonly');\n    const store = transaction.objectStore(MENU_STORE);\n    const request = store.getAll();\n    return new Promise((resolve, reject) => {\n      request.onsuccess = async () => {\n        let items = request.result;\n\n        // Verificar que todos los elementos tengan IDs únicos\n        const uniqueItems = [];\n        const seenIds = new Set();\n        for (const item of items) {\n          // Si el elemento no tiene ID o es un ID duplicado, generamos uno nuevo\n          if (!item.id || seenIds.has(item.id)) {\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\n          }\n\n          // Marcar este ID como visto\n          seenIds.add(item.id);\n          uniqueItems.push(item);\n        }\n\n        // Recuperar imágenes para cada elemento\n        for (const item of uniqueItems) {\n          if (item.hasStoredImage) {\n            item.image = await getMenuImage(item.id);\n          }\n        }\n        resolve(uniqueItems);\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener elementos del menú:', error);\n    throw error;\n  }\n}\n\n// Eliminar un elemento del menú\nexport async function deleteMenuItem(itemId) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE, IMAGE_STORE], 'readwrite');\n    const menuStore = transaction.objectStore(MENU_STORE);\n    const imageStore = transaction.objectStore(IMAGE_STORE);\n\n    // Eliminar el elemento\n    menuStore.delete(itemId);\n    // Eliminar la imagen asociada\n    imageStore.delete(itemId);\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al eliminar elemento del menú:', error);\n    throw error;\n  }\n}\n\n// Obtener imagen de un elemento del menú\nexport async function getMenuImage(itemId) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([IMAGE_STORE], 'readonly');\n    const store = transaction.objectStore(IMAGE_STORE);\n    const request = store.get(itemId);\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        if (request.result) {\n          resolve(request.result.data);\n        } else {\n          resolve(null);\n        }\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener imagen:', error);\n    throw error;\n  }\n}\n\n// Guardar información del negocio\nexport async function saveBusinessInfo(info) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readwrite');\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\n\n    // Usar un ID fijo para la información del negocio\n    const businessInfo = {\n      ...info,\n      id: 'business_info_1'\n    };\n    store.put(businessInfo);\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar información del negocio:', error);\n    throw error;\n  }\n}\n\n// Obtener información del negocio\nexport async function getBusinessInfo() {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readonly');\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\n    const request = store.get('business_info_1');\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        resolve(request.result || {});\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener información del negocio:', error);\n    return {};\n  }\n}\n\n// Guardar elementos vendidos\nexport async function saveSoldItems(items) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readwrite');\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\n\n    // Usar un ID fijo para los elementos vendidos\n    store.put({\n      id: 'sold_items_1',\n      items\n    });\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar elementos vendidos:', error);\n    throw error;\n  }\n}\n\n// Obtener elementos vendidos\nexport async function getSoldItems() {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readonly');\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\n    const request = store.get('sold_items_1');\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        if (request.result) {\n          resolve(request.result.items);\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener elementos vendidos:', error);\n    return [];\n  }\n}\n\n// Migrar datos de localStorage a IndexedDB\nexport async function migrateFromLocalStorage() {\n  try {\n    console.log(\"Iniciando migración desde localStorage...\");\n    let success = true;\n\n    // Migrar información del negocio\n    const businessInfo = localStorage.getItem('businessInfo');\n    if (businessInfo) {\n      console.log(\"Migrando información del negocio...\");\n      try {\n        await saveBusinessInfo(JSON.parse(businessInfo));\n      } catch (error) {\n        console.error('Error al migrar información de negocio:', error);\n        success = false;\n      }\n    }\n\n    // Migrar elementos del menú\n    const menuItems = localStorage.getItem('menuItems');\n    if (menuItems) {\n      console.log(\"Migrando elementos del menú...\");\n      try {\n        const parsedMenuItems = JSON.parse(menuItems);\n\n        // Asegurarse de que cada elemento tiene un ID\n        const processedMenuItems = parsedMenuItems.map(item => {\n          if (!item.id) {\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\n          }\n          return item;\n        });\n        await saveMenuItems(processedMenuItems);\n        console.log(`Migrados ${processedMenuItems.length} elementos de menú.`);\n      } catch (error) {\n        console.error('Error al migrar elementos del menú:', error);\n        success = false;\n      }\n    }\n\n    // Migrar elementos vendidos\n    const soldItems = localStorage.getItem('soldItems');\n    if (soldItems) {\n      console.log(\"Migrando elementos vendidos...\");\n      try {\n        await saveSoldItems(JSON.parse(soldItems));\n      } catch (error) {\n        console.error('Error al migrar elementos vendidos:', error);\n        success = false;\n      }\n    }\n    console.log(success ? \"Migración completada exitosamente.\" : \"Migración completada con errores.\");\n    return success;\n  } catch (error) {\n    console.error('Error al migrar datos desde localStorage:', error);\n    return false;\n  }\n}\n\n// Comprimir imagen\nexport function compressImage(base64Image, maxWidth = 800, maxHeight = 600, quality = 0.7) {\n  return new Promise(resolve => {\n    const img = new Image();\n    img.onload = () => {\n      // Crear un canvas para comprimir la imagen\n      const canvas = document.createElement('canvas');\n      let width = img.width;\n      let height = img.height;\n\n      // Calcular nuevas dimensiones manteniendo proporción\n      if (width > height) {\n        if (width > maxWidth) {\n          height = Math.round(height * maxWidth / width);\n          width = maxWidth;\n        }\n      } else {\n        if (height > maxHeight) {\n          width = Math.round(width * maxHeight / height);\n          height = maxHeight;\n        }\n      }\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, width, height);\n\n      // Obtener imagen comprimida como JPEG con calidad reducida\n      const compressedImage = canvas.toDataURL('image/jpeg', quality);\n      resolve(compressedImage);\n    };\n    img.src = base64Image;\n  });\n}","map":{"version":3,"names":["DB_NAME","DB_VERSION","MENU_STORE","IMAGE_STORE","SOLD_ITEMS_STORE","BUSINESS_INFO_STORE","openDatabase","Promise","resolve","reject","request","indexedDB","open","onerror","event","target","errorCode","onsuccess","db","result","onupgradeneeded","objectStoreNames","contains","createObjectStore","keyPath","saveMenuItems","items","processedItems","item","itemToStore","id","Date","now","Math","random","toString","substring","image","length","saveMenuImage","hasStoredImage","imageError","console","warn","push","transaction","store","objectStore","putPromises","map","put","e","error","all","oncomplete","itemId","imageData","data","getMenuItems","getAll","uniqueItems","seenIds","Set","has","add","getMenuImage","deleteMenuItem","menuStore","imageStore","delete","get","saveBusinessInfo","info","businessInfo","getBusinessInfo","saveSoldItems","getSoldItems","migrateFromLocalStorage","log","success","localStorage","getItem","JSON","parse","menuItems","parsedMenuItems","processedMenuItems","soldItems","compressImage","base64Image","maxWidth","maxHeight","quality","img","Image","onload","canvas","document","createElement","width","height","round","ctx","getContext","drawImage","compressedImage","toDataURL","src"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/storageService.js"],"sourcesContent":["const DB_NAME = 'websapDatabase';\r\nconst DB_VERSION = 1;\r\nconst MENU_STORE = 'menuItems';\r\nconst IMAGE_STORE = 'menuImages';\r\nconst SOLD_ITEMS_STORE = 'soldItems'; \r\nconst BUSINESS_INFO_STORE = 'businessInfo';\r\n\r\n// Abrir la conexión a la base de datos\r\nfunction openDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n    \r\n    request.onerror = (event) => {\r\n      reject('Error al abrir la base de datos: ' + event.target.errorCode);\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      resolve(db);\r\n    };\r\n    \r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      \r\n      // Crear almacén para elementos del menú\r\n      if (!db.objectStoreNames.contains(MENU_STORE)) {\r\n        db.createObjectStore(MENU_STORE, { keyPath: 'id' });\r\n      }\r\n      \r\n      // Crear almacén para imágenes\r\n      if (!db.objectStoreNames.contains(IMAGE_STORE)) {\r\n        db.createObjectStore(IMAGE_STORE, { keyPath: 'id' });\r\n      }\r\n      \r\n      // Crear almacén para elementos vendidos\r\n      if (!db.objectStoreNames.contains(SOLD_ITEMS_STORE)) {\r\n        db.createObjectStore(SOLD_ITEMS_STORE, { keyPath: 'id' });\r\n      }\r\n      \r\n      // Crear almacén para información del negocio\r\n      if (!db.objectStoreNames.contains(BUSINESS_INFO_STORE)) {\r\n        db.createObjectStore(BUSINESS_INFO_STORE, { keyPath: 'id' });\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\n// Guardar elementos del menú\r\nexport async function saveMenuItems(items) {\r\n  try {\r\n    // Primero procesamos todas las imágenes y creamos copias de los objetos\r\n    const processedItems = [];\r\n    for (const item of items) {\r\n      // Crear una copia del elemento\r\n      const itemToStore = { ...item };\r\n      \r\n      // Asegurarse de que el elemento tiene un id\r\n      if (!itemToStore.id) {\r\n        itemToStore.id = Date.now() + Math.random().toString(36).substring(2, 10);\r\n      }\r\n      \r\n      // Si tiene imagen, guardarla por separado antes de la transacción principal\r\n      if (itemToStore.image && typeof itemToStore.image === 'string' && itemToStore.image.length > 0) {\r\n        try {\r\n          await saveMenuImage(itemToStore.id, itemToStore.image);\r\n          itemToStore.image = null;\r\n          itemToStore.hasStoredImage = true;\r\n        } catch (imageError) {\r\n          console.warn('Error al guardar imagen, continuando sin imagen:', imageError);\r\n          // Si hay error al guardar la imagen, continuamos sin ella\r\n          itemToStore.image = null;\r\n          itemToStore.hasStoredImage = false;\r\n        }\r\n      }\r\n      \r\n      processedItems.push(itemToStore);\r\n    }\r\n    \r\n    // Ahora guardamos todos los items en una sola transacción\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([MENU_STORE], 'readwrite');\r\n    const store = transaction.objectStore(MENU_STORE);\r\n    \r\n    // Usamos Promise.all para manejar todas las operaciones put juntas\r\n    const putPromises = processedItems.map(item => {\r\n      return new Promise((resolve, reject) => {\r\n        const request = store.put(item);\r\n        request.onsuccess = () => resolve();\r\n        request.onerror = (e) => reject(e.target.error);\r\n      });\r\n    });\r\n    \r\n    // Esperamos a que se completen todas las operaciones put\r\n    await Promise.all(putPromises);\r\n    \r\n    // Esperamos a que se complete la transacción\r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar elementos del menú:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Guardar imagen de un elemento del menú\r\nexport async function saveMenuImage(itemId, imageData) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([IMAGE_STORE], 'readwrite');\r\n    const store = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    store.put({ id: itemId, data: imageData });\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar imagen:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener todos los elementos del menú\r\nexport async function getMenuItems() {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([MENU_STORE], 'readonly');\r\n    const store = transaction.objectStore(MENU_STORE);\r\n    \r\n    const request = store.getAll();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = async () => {\r\n        let items = request.result;\r\n        \r\n        // Verificar que todos los elementos tengan IDs únicos\r\n        const uniqueItems = [];\r\n        const seenIds = new Set();\r\n        \r\n        for (const item of items) {\r\n          // Si el elemento no tiene ID o es un ID duplicado, generamos uno nuevo\r\n          if (!item.id || seenIds.has(item.id)) {\r\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\r\n          }\r\n          \r\n          // Marcar este ID como visto\r\n          seenIds.add(item.id);\r\n          uniqueItems.push(item);\r\n        }\r\n        \r\n        // Recuperar imágenes para cada elemento\r\n        for (const item of uniqueItems) {\r\n          if (item.hasStoredImage) {\r\n            item.image = await getMenuImage(item.id);\r\n          }\r\n        }\r\n        \r\n        resolve(uniqueItems);\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener elementos del menú:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Eliminar un elemento del menú\r\nexport async function deleteMenuItem(itemId) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([MENU_STORE, IMAGE_STORE], 'readwrite');\r\n    const menuStore = transaction.objectStore(MENU_STORE);\r\n    const imageStore = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    // Eliminar el elemento\r\n    menuStore.delete(itemId);\r\n    // Eliminar la imagen asociada\r\n    imageStore.delete(itemId);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al eliminar elemento del menú:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener imagen de un elemento del menú\r\nexport async function getMenuImage(itemId) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([IMAGE_STORE], 'readonly');\r\n    const store = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    const request = store.get(itemId);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        if (request.result) {\r\n          resolve(request.result.data);\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener imagen:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Guardar información del negocio\r\nexport async function saveBusinessInfo(info) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readwrite');\r\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\r\n    \r\n    // Usar un ID fijo para la información del negocio\r\n    const businessInfo = { ...info, id: 'business_info_1' };\r\n    store.put(businessInfo);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar información del negocio:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener información del negocio\r\nexport async function getBusinessInfo() {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readonly');\r\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\r\n    \r\n    const request = store.get('business_info_1');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        resolve(request.result || {});\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener información del negocio:', error);\r\n    return {};\r\n  }\r\n}\r\n\r\n// Guardar elementos vendidos\r\nexport async function saveSoldItems(items) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readwrite');\r\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\r\n    \r\n    // Usar un ID fijo para los elementos vendidos\r\n    store.put({ id: 'sold_items_1', items });\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar elementos vendidos:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener elementos vendidos\r\nexport async function getSoldItems() {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readonly');\r\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\r\n    \r\n    const request = store.get('sold_items_1');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        if (request.result) {\r\n          resolve(request.result.items);\r\n        } else {\r\n          resolve([]);\r\n        }\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener elementos vendidos:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Migrar datos de localStorage a IndexedDB\r\nexport async function migrateFromLocalStorage() {\r\n  try {\r\n    console.log(\"Iniciando migración desde localStorage...\");\r\n    \r\n    let success = true;\r\n    \r\n    // Migrar información del negocio\r\n    const businessInfo = localStorage.getItem('businessInfo');\r\n    if (businessInfo) {\r\n      console.log(\"Migrando información del negocio...\");\r\n      try {\r\n        await saveBusinessInfo(JSON.parse(businessInfo));\r\n      } catch (error) {\r\n        console.error('Error al migrar información de negocio:', error);\r\n        success = false;\r\n      }\r\n    }\r\n    \r\n    // Migrar elementos del menú\r\n    const menuItems = localStorage.getItem('menuItems');\r\n    if (menuItems) {\r\n      console.log(\"Migrando elementos del menú...\");\r\n      try {\r\n        const parsedMenuItems = JSON.parse(menuItems);\r\n        \r\n        // Asegurarse de que cada elemento tiene un ID\r\n        const processedMenuItems = parsedMenuItems.map(item => {\r\n          if (!item.id) {\r\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\r\n          }\r\n          return item;\r\n        });\r\n        \r\n        await saveMenuItems(processedMenuItems);\r\n        console.log(`Migrados ${processedMenuItems.length} elementos de menú.`);\r\n      } catch (error) {\r\n        console.error('Error al migrar elementos del menú:', error);\r\n        success = false;\r\n      }\r\n    }\r\n    \r\n    // Migrar elementos vendidos\r\n    const soldItems = localStorage.getItem('soldItems');\r\n    if (soldItems) {\r\n      console.log(\"Migrando elementos vendidos...\");\r\n      try {\r\n        await saveSoldItems(JSON.parse(soldItems));\r\n      } catch (error) {\r\n        console.error('Error al migrar elementos vendidos:', error);\r\n        success = false;\r\n      }\r\n    }\r\n    \r\n    console.log(success ? \"Migración completada exitosamente.\" : \"Migración completada con errores.\");\r\n    return success;\r\n  } catch (error) {\r\n    console.error('Error al migrar datos desde localStorage:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Comprimir imagen\r\nexport function compressImage(base64Image, maxWidth = 800, maxHeight = 600, quality = 0.7) {\r\n  return new Promise((resolve) => {\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      // Crear un canvas para comprimir la imagen\r\n      const canvas = document.createElement('canvas');\r\n      \r\n      let width = img.width;\r\n      let height = img.height;\r\n      \r\n      // Calcular nuevas dimensiones manteniendo proporción\r\n      if (width > height) {\r\n        if (width > maxWidth) {\r\n          height = Math.round((height * maxWidth) / width);\r\n          width = maxWidth;\r\n        }\r\n      } else {\r\n        if (height > maxHeight) {\r\n          width = Math.round((width * maxHeight) / height);\r\n          height = maxHeight;\r\n        }\r\n      }\r\n      \r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      \r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0, width, height);\r\n      \r\n      // Obtener imagen comprimida como JPEG con calidad reducida\r\n      const compressedImage = canvas.toDataURL('image/jpeg', quality);\r\n      resolve(compressedImage);\r\n    };\r\n    img.src = base64Image;\r\n  });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}