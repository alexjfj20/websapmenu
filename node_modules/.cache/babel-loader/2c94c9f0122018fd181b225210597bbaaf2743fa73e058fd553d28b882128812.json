{"ast":null,"code":"/**\n * Utilidad para simular el envío de reservas desde WhatsApp\n * Esta es una herramienta de desarrollo que permite probar la funcionalidad\n * de recepción de reservas desde WhatsApp sin necesidad de integrar realmente\n * con la API de WhatsApp.\n */\n\n/**\n * Simula el envío de una reserva desde WhatsApp\n * @param {Object} reservationData - Datos de la reserva\n * @returns {Promise<Object>} - Resultado de la operación\n */\nexport async function simulateWhatsAppReservation(reservationData = {}) {\n  try {\n    // Datos por defecto para la reserva\n    const defaultData = {\n      nombre: 'Cliente de WhatsApp',\n      telefono: '612345678',\n      email: 'whatsapp@example.com',\n      fecha: new Date().toISOString().split('T')[0],\n      // Hoy\n      hora: '20:00',\n      personas: 2,\n      notas: 'Reserva realizada desde WhatsApp'\n    };\n\n    // Combinar datos por defecto con los proporcionados\n    const data = {\n      ...defaultData,\n      ...reservationData\n    };\n\n    // Crear el mensaje que se enviará\n    const message = {\n      type: 'whatsapp_reservation',\n      reservation: data,\n      timestamp: Date.now()\n    };\n    console.log('Simulando reserva desde WhatsApp:', message);\n\n    // Enviar el mensaje a la ventana actual (simulando que viene de WhatsApp)\n    window.postMessage(message, '*');\n\n    // Esperar respuesta (simulada)\n    return new Promise(resolve => {\n      const handleResponse = event => {\n        // Verificar que el mensaje sea una respuesta a nuestra solicitud\n        if (event.data && event.data.type === 'whatsapp_reservation_response') {\n          // Eliminar el listener una vez recibida la respuesta\n          window.removeEventListener('message', handleResponse);\n          console.log('Respuesta recibida:', event.data);\n          resolve(event.data);\n        }\n      };\n\n      // Escuchar la respuesta\n      window.addEventListener('message', handleResponse);\n\n      // Establecer un tiempo límite para la respuesta (5 segundos)\n      setTimeout(() => {\n        window.removeEventListener('message', handleResponse);\n        resolve({\n          success: false,\n          message: 'Tiempo de espera agotado'\n        });\n      }, 5000);\n    });\n  } catch (error) {\n    console.error('Error al simular reserva desde WhatsApp:', error);\n    return {\n      success: false,\n      message: error.message\n    };\n  }\n}\n\n/**\n * Función para probar la simulación de reserva desde la consola del navegador\n * Ejemplo de uso: window.testWhatsAppReservation()\n */\nexport function setupWhatsAppSimulatorForConsole() {\n  // Exponer la función en el objeto window para poder llamarla desde la consola\n  window.testWhatsAppReservation = async (customData = {}) => {\n    const result = await simulateWhatsAppReservation(customData);\n    console.log('Resultado de la simulación:', result);\n    return result;\n  };\n  console.log('Simulador de WhatsApp configurado. Usa window.testWhatsAppReservation() para probar.');\n}","map":{"version":3,"names":["simulateWhatsAppReservation","reservationData","defaultData","nombre","telefono","email","fecha","Date","toISOString","split","hora","personas","notas","data","message","type","reservation","timestamp","now","console","log","window","postMessage","Promise","resolve","handleResponse","event","removeEventListener","addEventListener","setTimeout","success","error","setupWhatsAppSimulatorForConsole","testWhatsAppReservation","customData","result"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/utils/whatsappSimulator.js"],"sourcesContent":["/**\n * Utilidad para simular el envío de reservas desde WhatsApp\n * Esta es una herramienta de desarrollo que permite probar la funcionalidad\n * de recepción de reservas desde WhatsApp sin necesidad de integrar realmente\n * con la API de WhatsApp.\n */\n\n/**\n * Simula el envío de una reserva desde WhatsApp\n * @param {Object} reservationData - Datos de la reserva\n * @returns {Promise<Object>} - Resultado de la operación\n */\nexport async function simulateWhatsAppReservation(reservationData = {}) {\n  try {\n    // Datos por defecto para la reserva\n    const defaultData = {\n      nombre: 'Cliente de WhatsApp',\n      telefono: '612345678',\n      email: 'whatsapp@example.com',\n      fecha: new Date().toISOString().split('T')[0], // Hoy\n      hora: '20:00',\n      personas: 2,\n      notas: 'Reserva realizada desde WhatsApp'\n    };\n    \n    // Combinar datos por defecto con los proporcionados\n    const data = { ...defaultData, ...reservationData };\n    \n    // Crear el mensaje que se enviará\n    const message = {\n      type: 'whatsapp_reservation',\n      reservation: data,\n      timestamp: Date.now()\n    };\n    \n    console.log('Simulando reserva desde WhatsApp:', message);\n    \n    // Enviar el mensaje a la ventana actual (simulando que viene de WhatsApp)\n    window.postMessage(message, '*');\n    \n    // Esperar respuesta (simulada)\n    return new Promise((resolve) => {\n      const handleResponse = (event) => {\n        // Verificar que el mensaje sea una respuesta a nuestra solicitud\n        if (event.data && event.data.type === 'whatsapp_reservation_response') {\n          // Eliminar el listener una vez recibida la respuesta\n          window.removeEventListener('message', handleResponse);\n          \n          console.log('Respuesta recibida:', event.data);\n          resolve(event.data);\n        }\n      };\n      \n      // Escuchar la respuesta\n      window.addEventListener('message', handleResponse);\n      \n      // Establecer un tiempo límite para la respuesta (5 segundos)\n      setTimeout(() => {\n        window.removeEventListener('message', handleResponse);\n        resolve({\n          success: false,\n          message: 'Tiempo de espera agotado'\n        });\n      }, 5000);\n    });\n  } catch (error) {\n    console.error('Error al simular reserva desde WhatsApp:', error);\n    return {\n      success: false,\n      message: error.message\n    };\n  }\n}\n\n/**\n * Función para probar la simulación de reserva desde la consola del navegador\n * Ejemplo de uso: window.testWhatsAppReservation()\n */\nexport function setupWhatsAppSimulatorForConsole() {\n  // Exponer la función en el objeto window para poder llamarla desde la consola\n  window.testWhatsAppReservation = async (customData = {}) => {\n    const result = await simulateWhatsAppReservation(customData);\n    console.log('Resultado de la simulación:', result);\n    return result;\n  };\n  \n  console.log('Simulador de WhatsApp configurado. Usa window.testWhatsAppReservation() para probar.');\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeA,2BAA2BA,CAACC,eAAe,GAAG,CAAC,CAAC,EAAE;EACtE,IAAI;IACF;IACA,MAAMC,WAAW,GAAG;MAClBC,MAAM,EAAE,qBAAqB;MAC7BC,QAAQ,EAAE,WAAW;MACrBC,KAAK,EAAE,sBAAsB;MAC7BC,KAAK,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAAE;MAC/CC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC;MACXC,KAAK,EAAE;IACT,CAAC;;IAED;IACA,MAAMC,IAAI,GAAG;MAAE,GAAGX,WAAW;MAAE,GAAGD;IAAgB,CAAC;;IAEnD;IACA,MAAMa,OAAO,GAAG;MACdC,IAAI,EAAE,sBAAsB;MAC5BC,WAAW,EAAEH,IAAI;MACjBI,SAAS,EAAEV,IAAI,CAACW,GAAG,CAAC;IACtB,CAAC;IAEDC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEN,OAAO,CAAC;;IAEzD;IACAO,MAAM,CAACC,WAAW,CAACR,OAAO,EAAE,GAAG,CAAC;;IAEhC;IACA,OAAO,IAAIS,OAAO,CAAEC,OAAO,IAAK;MAC9B,MAAMC,cAAc,GAAIC,KAAK,IAAK;QAChC;QACA,IAAIA,KAAK,CAACb,IAAI,IAAIa,KAAK,CAACb,IAAI,CAACE,IAAI,KAAK,+BAA+B,EAAE;UACrE;UACAM,MAAM,CAACM,mBAAmB,CAAC,SAAS,EAAEF,cAAc,CAAC;UAErDN,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEM,KAAK,CAACb,IAAI,CAAC;UAC9CW,OAAO,CAACE,KAAK,CAACb,IAAI,CAAC;QACrB;MACF,CAAC;;MAED;MACAQ,MAAM,CAACO,gBAAgB,CAAC,SAAS,EAAEH,cAAc,CAAC;;MAElD;MACAI,UAAU,CAAC,MAAM;QACfR,MAAM,CAACM,mBAAmB,CAAC,SAAS,EAAEF,cAAc,CAAC;QACrDD,OAAO,CAAC;UACNM,OAAO,EAAE,KAAK;UACdhB,OAAO,EAAE;QACX,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAChE,OAAO;MACLD,OAAO,EAAE,KAAK;MACdhB,OAAO,EAAEiB,KAAK,CAACjB;IACjB,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASkB,gCAAgCA,CAAA,EAAG;EACjD;EACAX,MAAM,CAACY,uBAAuB,GAAG,OAAOC,UAAU,GAAG,CAAC,CAAC,KAAK;IAC1D,MAAMC,MAAM,GAAG,MAAMnC,2BAA2B,CAACkC,UAAU,CAAC;IAC5Df,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEe,MAAM,CAAC;IAClD,OAAOA,MAAM;EACf,CAAC;EAEDhB,OAAO,CAACC,GAAG,CAAC,sFAAsF,CAAC;AACrG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}