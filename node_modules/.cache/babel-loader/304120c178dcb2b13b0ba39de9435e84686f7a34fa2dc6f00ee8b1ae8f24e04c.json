{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n// Lista de usuarios predefinidos para pruebas\nconst DEFAULT_USERS = [{\n  id: 1,\n  email: 'superadmin@example.com',\n  password: 'SuperAdmin2023',\n  nombre: 'Superadministrador',\n  roles: ['Superadministrador']\n}, {\n  id: 2,\n  email: 'admin@example.com',\n  password: 'Admin2023',\n  nombre: 'Administrador',\n  roles: ['Administrador']\n}, {\n  id: 3,\n  email: 'empleado@example.com',\n  password: 'Empleado2023',\n  nombre: 'Empleado',\n  roles: ['Empleado']\n}, {\n  id: 4,\n  email: 'test@test.com',\n  password: '123456',\n  nombre: 'Usuario de Prueba',\n  roles: ['Empleado']\n}, {\n  id: 5,\n  email: 'admin',\n  password: 'admin',\n  nombre: 'SuperAdmin',\n  roles: ['Superadministrador', 'Empleado']\n},\n// Añadir el usuario que intentas usar\n{\n  id: 6,\n  email: 'superadmin@gmail.com',\n  password: 'SuperAdmin2023',\n  nombre: 'Super Administrador Gmail',\n  roles: ['Superadministrador']\n}];\n\n// Usuario actualmente autenticado\nlet currentUser = null;\n\n/**\r\n * Obtiene los usuarios almacenados en IndexedDB (creados desde el panel de administración)\r\n * @returns {Promise<Array>} Lista de usuarios o array vacío si hay error\r\n */\nasync function getStoredUsers() {\n  // Simplificar y devolver directamente los usuarios predefinidos\n  console.log(\"Usando lista de usuarios predefinida\");\n  return DEFAULT_USERS;\n}\n\n/**\r\n * Genera un token simple para autenticación\r\n * @param {Object} user - Datos del usuario\r\n * @returns {string} Token generado\r\n */\nfunction generateToken(user) {\n  // En una aplicación real, usaríamos JWT u otra implementación segura\n  // Para este ejemplo, simplemente codificamos algunos datos del usuario\n  const payload = {\n    id: user.id,\n    email: user.email,\n    roles: user.roles,\n    timestamp: new Date().getTime()\n  };\n  return btoa(JSON.stringify(payload));\n}\n\n/**\r\n * Función para iniciar sesión\r\n * @param {string} email - Correo electrónico del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\nasync function login(email, password) {\n  console.log(\"Intentando iniciar sesión como:\", email);\n  try {\n    // Obtener usuarios desde IndexedDB o lista predefinida\n    const usuarios = await getStoredUsers();\n    console.log(\"Total de usuarios disponibles:\", usuarios.length);\n\n    // Buscar usuario por email (ignorando mayúsculas/minúsculas)\n    const usuario = usuarios.find(u => u.email && u.email.toLowerCase() === email.toLowerCase());\n    if (!usuario) {\n      console.log(\"No se encontró usuario con las credenciales proporcionadas\");\n      throw new Error(\"Credenciales incorrectas\");\n    }\n\n    // Verificar contraseña\n    if (usuario.password && usuario.password.startsWith('$2')) {\n      // En entorno de navegador, no podemos usar bcrypt directamente\n      // Solo comparamos contraseñas en texto plano\n      console.log(\"Verificación de bcrypt no disponible en navegador\");\n      // Lanzar error si la contraseña no coincide\n      throw new Error(\"Error en el sistema de autenticación\");\n    } else if (usuario.password !== password) {\n      // Para contraseñas en texto plano\n      console.log(\"Contraseña incorrecta (texto plano)\");\n      throw new Error(\"Credenciales incorrectas\");\n    }\n\n    // Crear objeto de usuario autenticado\n    const authenticatedUser = {\n      id: usuario.id,\n      email: usuario.email,\n      nombre: usuario.nombre || email.split('@')[0],\n      roles: usuario.roles || ['Usuario'],\n      token: generateToken(usuario)\n    };\n\n    // Guardar en memoria y localStorage\n    currentUser = authenticatedUser;\n    localStorage.setItem('isLoggedIn', 'true');\n    localStorage.setItem('currentUser', JSON.stringify(authenticatedUser));\n    return authenticatedUser;\n  } catch (error) {\n    console.log(\"Error en login:\", error);\n    throw error;\n  }\n}\n\n/**\r\n * Cierra la sesión del usuario actual\r\n */\nfunction logout() {\n  currentUser = null;\n  localStorage.removeItem('isLoggedIn');\n  localStorage.removeItem('currentUser');\n}\n\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\nfunction isAuthenticated() {\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser) {\n        currentUser = storedUser;\n      }\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n      return false;\n    }\n  }\n  return !!currentUser;\n}\n\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\nfunction getCurrentUser() {\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser) {\n        currentUser = storedUser;\n      }\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n      return null;\n    }\n  }\n  return currentUser;\n}\n\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\nfunction hasRole(roleName) {\n  const user = getCurrentUser();\n  if (!user || !user.roles) {\n    return false;\n  }\n\n  // Si roles es un array, verificar si contiene el rol\n  if (Array.isArray(user.roles)) {\n    return user.roles.includes(roleName);\n  }\n\n  // Si roles es un string, verificar si es igual al rol buscado\n  if (typeof user.roles === 'string') {\n    return user.roles === roleName;\n  }\n  return false;\n}\nexport { login, logout, isAuthenticated, hasRole, getCurrentUser };\nexport default {\n  login,\n  logout,\n  isAuthenticated,\n  hasRole,\n  getCurrentUser\n};","map":{"version":3,"names":["DEFAULT_USERS","id","email","password","nombre","roles","currentUser","getStoredUsers","console","log","generateToken","user","payload","timestamp","Date","getTime","btoa","JSON","stringify","login","usuarios","length","usuario","find","u","toLowerCase","Error","startsWith","authenticatedUser","split","token","localStorage","setItem","error","logout","removeItem","isAuthenticated","getItem","storedUser","parse","e","getCurrentUser","hasRole","roleName","Array","isArray","includes"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/authService.js"],"sourcesContent":["// Lista de usuarios predefinidos para pruebas\r\nconst DEFAULT_USERS = [\r\n  {\r\n    id: 1,\r\n    email: 'superadmin@example.com',\r\n    password: 'SuperAdmin2023',\r\n    nombre: 'Superadministrador',\r\n    roles: ['Superadministrador']\r\n  },\r\n  {\r\n    id: 2,\r\n    email: 'admin@example.com',\r\n    password: 'Admin2023',\r\n    nombre: 'Administrador',\r\n    roles: ['Administrador']\r\n  },\r\n  {\r\n    id: 3,\r\n    email: 'empleado@example.com',\r\n    password: 'Empleado2023',\r\n    nombre: 'Empleado',\r\n    roles: ['Empleado']\r\n  },\r\n  {\r\n    id: 4,\r\n    email: 'test@test.com',\r\n    password: '123456',\r\n    nombre: 'Usuario de Prueba',\r\n    roles: ['Empleado']\r\n  },\r\n  {\r\n    id: 5,\r\n    email: 'admin',\r\n    password: 'admin',\r\n    nombre: 'SuperAdmin',\r\n    roles: ['Superadministrador', 'Empleado']\r\n  },\r\n  // Añadir el usuario que intentas usar\r\n  {\r\n    id: 6,\r\n    email: 'superadmin@gmail.com',\r\n    password: 'SuperAdmin2023',\r\n    nombre: 'Super Administrador Gmail',\r\n    roles: ['Superadministrador']\r\n  }\r\n];\r\n\r\n// Usuario actualmente autenticado\r\nlet currentUser = null;\r\n\r\n/**\r\n * Obtiene los usuarios almacenados en IndexedDB (creados desde el panel de administración)\r\n * @returns {Promise<Array>} Lista de usuarios o array vacío si hay error\r\n */\r\nasync function getStoredUsers() {\r\n  // Simplificar y devolver directamente los usuarios predefinidos\r\n  console.log(\"Usando lista de usuarios predefinida\");\r\n  return DEFAULT_USERS;\r\n}\r\n\r\n/**\r\n * Genera un token simple para autenticación\r\n * @param {Object} user - Datos del usuario\r\n * @returns {string} Token generado\r\n */\r\nfunction generateToken(user) {\r\n  // En una aplicación real, usaríamos JWT u otra implementación segura\r\n  // Para este ejemplo, simplemente codificamos algunos datos del usuario\r\n  const payload = {\r\n    id: user.id,\r\n    email: user.email,\r\n    roles: user.roles,\r\n    timestamp: new Date().getTime()\r\n  };\r\n  \r\n  return btoa(JSON.stringify(payload));\r\n}\r\n\r\n/**\r\n * Función para iniciar sesión\r\n * @param {string} email - Correo electrónico del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\r\nasync function login(email, password) {\r\n  console.log(\"Intentando iniciar sesión como:\", email);\r\n  \r\n  try {\r\n    // Obtener usuarios desde IndexedDB o lista predefinida\r\n    const usuarios = await getStoredUsers();\r\n    console.log(\"Total de usuarios disponibles:\", usuarios.length);\r\n    \r\n    // Buscar usuario por email (ignorando mayúsculas/minúsculas)\r\n    const usuario = usuarios.find(u => \r\n      u.email && u.email.toLowerCase() === email.toLowerCase()\r\n    );\r\n    \r\n    if (!usuario) {\r\n      console.log(\"No se encontró usuario con las credenciales proporcionadas\");\r\n      throw new Error(\"Credenciales incorrectas\");\r\n    }\r\n    \r\n    // Verificar contraseña\r\n    if (usuario.password && usuario.password.startsWith('$2')) {\r\n      // En entorno de navegador, no podemos usar bcrypt directamente\r\n      // Solo comparamos contraseñas en texto plano\r\n      console.log(\"Verificación de bcrypt no disponible en navegador\");\r\n      // Lanzar error si la contraseña no coincide\r\n      throw new Error(\"Error en el sistema de autenticación\");\r\n    } else if (usuario.password !== password) {\r\n      // Para contraseñas en texto plano\r\n      console.log(\"Contraseña incorrecta (texto plano)\");\r\n      throw new Error(\"Credenciales incorrectas\");\r\n    }\r\n    \r\n    // Crear objeto de usuario autenticado\r\n    const authenticatedUser = {\r\n      id: usuario.id,\r\n      email: usuario.email,\r\n      nombre: usuario.nombre || email.split('@')[0],\r\n      roles: usuario.roles || ['Usuario'],\r\n      token: generateToken(usuario)\r\n    };\r\n    \r\n    // Guardar en memoria y localStorage\r\n    currentUser = authenticatedUser;\r\n    localStorage.setItem('isLoggedIn', 'true');\r\n    localStorage.setItem('currentUser', JSON.stringify(authenticatedUser));\r\n    \r\n    return authenticatedUser;\r\n  } catch (error) {\r\n    console.log(\"Error en login:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Cierra la sesión del usuario actual\r\n */\r\nfunction logout() {\r\n  currentUser = null;\r\n  localStorage.removeItem('isLoggedIn');\r\n  localStorage.removeItem('currentUser');\r\n}\r\n\r\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\r\nfunction isAuthenticated() {\r\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\r\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser) {\r\n        currentUser = storedUser;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  return !!currentUser;\r\n}\r\n\r\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\r\nfunction getCurrentUser() {\r\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\r\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser) {\r\n        currentUser = storedUser;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  return currentUser;\r\n}\r\n\r\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\r\nfunction hasRole(roleName) {\r\n  const user = getCurrentUser();\r\n  \r\n  if (!user || !user.roles) {\r\n    return false;\r\n  }\r\n  \r\n  // Si roles es un array, verificar si contiene el rol\r\n  if (Array.isArray(user.roles)) {\r\n    return user.roles.includes(roleName);\r\n  }\r\n  \r\n  // Si roles es un string, verificar si es igual al rol buscado\r\n  if (typeof user.roles === 'string') {\r\n    return user.roles === roleName;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\nexport {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}