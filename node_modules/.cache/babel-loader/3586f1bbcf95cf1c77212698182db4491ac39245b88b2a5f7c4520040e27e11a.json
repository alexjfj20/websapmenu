{"ast":null,"code":"import { ref } from 'vue';\nimport { createPlato, debugIndexedDB, testCreatePlato } from '@/services/indexedDBService';\nexport default {\n  name: 'PlatoFormHandler',\n  setup() {\n    const platoData = ref({\n      name: '',\n      description: '',\n      price: 0,\n      category: '',\n      is_available: true,\n      image_url: ''\n    });\n    const lastSavedPlato = ref(null);\n    const error = ref(null);\n    const resetForm = () => {\n      platoData.value = {\n        name: '',\n        description: '',\n        price: 0,\n        category: '',\n        is_available: true,\n        image_url: ''\n      };\n    };\n    const handleSubmit = async () => {\n      try {\n        error.value = null;\n        console.log('Enviando formulario con datos:', platoData.value);\n        if (!platoData.value.name || platoData.value.name.trim() === '') {\n          throw new Error('El nombre del plato es obligatorio');\n        }\n        if (isNaN(platoData.value.price) || platoData.value.price < 0) {\n          throw new Error('El precio debe ser un número válido mayor o igual a cero');\n        }\n\n        // Llamamos directamente a createPlato con los datos del formulario\n        console.log('Llamando a createPlato desde el formulario');\n        const savedPlato = await createPlato({\n          ...platoData.value,\n          price: Number(platoData.value.price) // Asegurar que sea un número\n        });\n        console.log('Plato guardado correctamente:', savedPlato);\n        lastSavedPlato.value = savedPlato;\n        resetForm();\n\n        // Mostrar mensaje de éxito\n        alert('¡Plato guardado exitosamente!');\n      } catch (err) {\n        console.error('Error al guardar el plato:', err);\n        error.value = err.message || 'Error desconocido al guardar el plato';\n      }\n    };\n    const runTest = async () => {\n      try {\n        error.value = null;\n        console.log('Ejecutando prueba de guardado...');\n        const testResult = await testCreatePlato();\n        lastSavedPlato.value = testResult;\n        console.log('Prueba completada exitosamente');\n      } catch (err) {\n        console.error('Error en la prueba:', err);\n        error.value = err.message || 'Error desconocido en la prueba';\n      }\n    };\n    const debugDatabase = async () => {\n      try {\n        error.value = null;\n        console.log('Iniciando depuración de la base de datos...');\n        const debugResult = await debugIndexedDB();\n        console.log('Depuración completada:', debugResult);\n        alert(`Platos en la BD: ${debugResult.platos.length}, Cola: ${debugResult.syncQueue.length}`);\n      } catch (err) {\n        console.error('Error en depuración:', err);\n        error.value = err.message || 'Error desconocido en depuración';\n      }\n    };\n    return {\n      platoData,\n      lastSavedPlato,\n      error,\n      handleSubmit,\n      runTest,\n      debugDatabase\n    };\n  }\n};","map":{"version":3,"names":["ref","createPlato","debugIndexedDB","testCreatePlato","name","setup","platoData","description","price","category","is_available","image_url","lastSavedPlato","error","resetForm","value","handleSubmit","console","log","trim","Error","isNaN","savedPlato","Number","alert","err","message","runTest","testResult","debugDatabase","debugResult","platos","length","syncQueue"],"sources":["F:\\Driver google\\VUE.JS-2\\temp\\websap\\src\\components\\PlatoFormHandler.vue"],"sourcesContent":["<template>\r\n  <div class=\"plato-form-handler\">\r\n    <h3>Depuración de Guardado de Platos</h3>\r\n    \r\n    <div class=\"form-container\">\r\n      <form @submit.prevent=\"handleSubmit\" class=\"debug-form\">\r\n        <div class=\"form-group\">\r\n          <label for=\"name\">Nombre del Plato *</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"name\" \r\n            v-model=\"platoData.name\" \r\n            required\r\n            class=\"form-control\"\r\n          />\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"description\">Descripción</label>\r\n          <textarea \r\n            id=\"description\" \r\n            v-model=\"platoData.description\"\r\n            class=\"form-control\"\r\n          ></textarea>\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"price\">Precio *</label>\r\n          <input \r\n            type=\"number\" \r\n            id=\"price\" \r\n            v-model.number=\"platoData.price\" \r\n            min=\"0\" \r\n            step=\"0.01\" \r\n            required\r\n            class=\"form-control\"\r\n          />\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"category\">Categoría</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"category\" \r\n            v-model=\"platoData.category\"\r\n            class=\"form-control\"\r\n          />\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label>\r\n            <input \r\n              type=\"checkbox\" \r\n              v-model=\"platoData.is_available\"\r\n            />\r\n            Disponible\r\n          </label>\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"image_url\">URL de Imagen</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"image_url\" \r\n            v-model=\"platoData.image_url\"\r\n            class=\"form-control\"\r\n          />\r\n        </div>\r\n        \r\n        <div class=\"actions\">\r\n          <button type=\"submit\" class=\"btn btn-primary\">Guardar Plato</button>\r\n          <button type=\"button\" @click=\"runTest\" class=\"btn btn-secondary\">\r\n            Ejecutar Prueba\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n    \r\n    <div v-if=\"lastSavedPlato\" class=\"result-container\">\r\n      <h4>Último Plato Guardado:</h4>\r\n      <pre>{{ JSON.stringify(lastSavedPlato, null, 2) }}</pre>\r\n    </div>\r\n    \r\n    <div v-if=\"error\" class=\"error-container\">\r\n      <h4>Error:</h4>\r\n      <pre>{{ error }}</pre>\r\n    </div>\r\n    \r\n    <div class=\"debug-actions\">\r\n      <button @click=\"debugDatabase\" class=\"btn btn-info\">\r\n        Depurar Base de Datos\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\nimport { createPlato, debugIndexedDB, testCreatePlato } from '@/services/indexedDBService';\r\n\r\nexport default {\r\n  name: 'PlatoFormHandler',\r\n  \r\n  setup() {\r\n    const platoData = ref({\r\n      name: '',\r\n      description: '',\r\n      price: 0,\r\n      category: '',\r\n      is_available: true,\r\n      image_url: ''\r\n    });\r\n    \r\n    const lastSavedPlato = ref(null);\r\n    const error = ref(null);\r\n    \r\n    const resetForm = () => {\r\n      platoData.value = {\r\n        name: '',\r\n        description: '',\r\n        price: 0,\r\n        category: '',\r\n        is_available: true,\r\n        image_url: ''\r\n      };\r\n    };\r\n    \r\n    const handleSubmit = async () => {\r\n      try {\r\n        error.value = null;\r\n        console.log('Enviando formulario con datos:', platoData.value);\r\n        \r\n        if (!platoData.value.name || platoData.value.name.trim() === '') {\r\n          throw new Error('El nombre del plato es obligatorio');\r\n        }\r\n        \r\n        if (isNaN(platoData.value.price) || platoData.value.price < 0) {\r\n          throw new Error('El precio debe ser un número válido mayor o igual a cero');\r\n        }\r\n        \r\n        // Llamamos directamente a createPlato con los datos del formulario\r\n        console.log('Llamando a createPlato desde el formulario');\r\n        const savedPlato = await createPlato({\r\n          ...platoData.value,\r\n          price: Number(platoData.value.price) // Asegurar que sea un número\r\n        });\r\n        \r\n        console.log('Plato guardado correctamente:', savedPlato);\r\n        lastSavedPlato.value = savedPlato;\r\n        resetForm();\r\n        \r\n        // Mostrar mensaje de éxito\r\n        alert('¡Plato guardado exitosamente!');\r\n      } catch (err) {\r\n        console.error('Error al guardar el plato:', err);\r\n        error.value = err.message || 'Error desconocido al guardar el plato';\r\n      }\r\n    };\r\n    \r\n    const runTest = async () => {\r\n      try {\r\n        error.value = null;\r\n        console.log('Ejecutando prueba de guardado...');\r\n        const testResult = await testCreatePlato();\r\n        lastSavedPlato.value = testResult;\r\n        console.log('Prueba completada exitosamente');\r\n      } catch (err) {\r\n        console.error('Error en la prueba:', err);\r\n        error.value = err.message || 'Error desconocido en la prueba';\r\n      }\r\n    };\r\n    \r\n    const debugDatabase = async () => {\r\n      try {\r\n        error.value = null;\r\n        console.log('Iniciando depuración de la base de datos...');\r\n        const debugResult = await debugIndexedDB();\r\n        console.log('Depuración completada:', debugResult);\r\n        alert(`Platos en la BD: ${debugResult.platos.length}, Cola: ${debugResult.syncQueue.length}`);\r\n      } catch (err) {\r\n        console.error('Error en depuración:', err);\r\n        error.value = err.message || 'Error desconocido en depuración';\r\n      }\r\n    };\r\n    \r\n    return {\r\n      platoData,\r\n      lastSavedPlato,\r\n      error,\r\n      handleSubmit,\r\n      runTest,\r\n      debugDatabase\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.plato-form-handler {\r\n  padding: 20px;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.debug-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 15px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.form-control {\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\n.actions {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.btn {\r\n  padding: 8px 15px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n}\r\n\r\n.btn-primary {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n}\r\n\r\n.btn-secondary {\r\n  background-color: #2196F3;\r\n  color: white;\r\n}\r\n\r\n.btn-info {\r\n  background-color: #9C27B0;\r\n  color: white;\r\n}\r\n\r\n.result-container, .error-container {\r\n  margin-top: 20px;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.result-container {\r\n  background-color: #E8F5E9;\r\n  border: 1px solid #4CAF50;\r\n}\r\n\r\n.error-container {\r\n  background-color: #FFEBEE;\r\n  border: 1px solid #F44336;\r\n}\r\n\r\npre {\r\n  white-space: pre-wrap;\r\n  word-wrap: break-word;\r\n  background-color: #f5f5f5;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  max-height: 300px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.debug-actions {\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}