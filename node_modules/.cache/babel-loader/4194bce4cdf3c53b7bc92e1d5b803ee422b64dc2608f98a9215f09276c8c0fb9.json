{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n// Servicio para la gesti√≥n de reservas\nimport apiService from './apiService';\nimport eventBus from '../utils/eventBus';\n\n// Almacenamiento local para las reservas (simulando una base de datos)\nlet reservationsStore = [];\n\n// Intentar cargar reservas guardadas en localStorage al iniciar\ntry {\n  const savedReservations = localStorage.getItem('websap_reservations');\n  if (savedReservations) {\n    reservationsStore = JSON.parse(savedReservations);\n    console.log('Reservas cargadas desde localStorage:', reservationsStore.length);\n  }\n} catch (error) {\n  console.error('Error al cargar reservas desde localStorage:', error);\n}\n\n// Funci√≥n para guardar las reservas en localStorage\nfunction saveReservationsToStorage() {\n  try {\n    localStorage.setItem('websap_reservations', JSON.stringify(reservationsStore));\n  } catch (error) {\n    console.error('Error al guardar reservas en localStorage:', error);\n  }\n}\n\n// Funci√≥n para guardar una nueva reserva\nexport async function saveReservation(reservationData) {\n  try {\n    // Generar un ID √∫nico para la reserva\n    const reservationId = 'res_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n\n    // Crear el objeto de reserva con los datos recibidos\n    const reservation = {\n      id: reservationId,\n      fullName: reservationData.fullName,\n      mobilePhone: reservationData.mobilePhone,\n      landlinePhone: reservationData.landlinePhone || '',\n      email: reservationData.email || '',\n      address: reservationData.address || '',\n      date: reservationData.reservationDate,\n      time: reservationData.reservationTime,\n      peopleCount: reservationData.peopleCount,\n      notes: reservationData.additionalNotes || '',\n      status: 'pending',\n      // Estado inicial: pendiente\n      createdAt: new Date().toISOString(),\n      source: reservationData.source || 'web' // Fuente de la reserva: web o whatsapp\n    };\n    try {\n      // Intentar guardar en el backend\n      const response = await apiService.post('/whatsapp/reservas', {\n        nombre: reservation.fullName,\n        telefono: reservation.mobilePhone,\n        email: reservation.email,\n        fecha: reservation.date,\n        hora: reservation.time,\n        personas: reservation.peopleCount,\n        notas: reservation.notes\n      });\n      if (response.data && response.data.success) {\n        console.log('Reserva guardada en el backend:', response.data);\n        reservation.id = response.data.reservationId || reservation.id;\n      }\n    } catch (apiError) {\n      console.warn('No se pudo guardar la reserva en el backend, usando almacenamiento local:', apiError);\n    }\n\n    // Guardar la reserva en nuestro almacenamiento local\n    reservationsStore.unshift(reservation);\n    saveReservationsToStorage();\n\n    // Emitimos un evento para notificar a otros componentes sobre la nueva reserva\n    eventBus.emit('nueva-reserva', reservation);\n    console.log('Reserva guardada correctamente:', reservation);\n    return {\n      success: true,\n      reservation\n    };\n  } catch (error) {\n    console.error('Error al guardar la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar la reserva'\n    };\n  }\n}\n\n// Funci√≥n para obtener todas las reservas\nexport async function getReservations() {\n  try {\n    // Intentar obtener reservas desde el backend\n    try {\n      const response = await apiService.get('/whatsapp/reservas');\n      if (response && response.success && Array.isArray(response.reservas)) {\n        console.log('‚úÖ Reservas obtenidas desde el backend:', response.reservas.length);\n\n        // Formatear las fechas antes de guardarlas\n        const formattedReservations = response.reservas.map(reservation => {\n          // Crear una copia para no modificar el original\n          const formattedReservation = {\n            ...reservation\n          };\n\n          // Formatear la fecha si tiene el formato problem√°tico\n          if (formattedReservation.date && formattedReservation.date.includes('T') && formattedReservation.date.includes('/')) {\n            try {\n              const parts = formattedReservation.date.split('/');\n              if (parts.length === 3) {\n                const day = parts[0].split('T')[0];\n                formattedReservation.date = `${day}/${parts[1]}/${parts[2]}`;\n              }\n            } catch (error) {\n              console.error('Error al formatear fecha:', error);\n            }\n          }\n          return formattedReservation;\n        });\n\n        // Actualizar el almacenamiento local con las reservas formateadas\n        reservationsStore = formattedReservations;\n        saveReservationsToStorage();\n        return {\n          success: true,\n          reservations: formattedReservations\n        };\n      }\n    } catch (error) {\n      console.warn('Error al obtener reservas desde el backend, usando datos locales:', error);\n    }\n\n    // Si no se pudieron obtener del backend o hubo un error, usar los datos locales\n    console.log('üìã Usando datos de reservas locales:', reservationsStore.length);\n\n    // Formatear las fechas de las reservas locales\n    const formattedLocalReservations = reservationsStore.map(reservation => {\n      // Crear una copia para no modificar el original\n      const formattedReservation = {\n        ...reservation\n      };\n\n      // Formatear la fecha si tiene el formato problem√°tico\n      if (formattedReservation.date && formattedReservation.date.includes('T') && formattedReservation.date.includes('/')) {\n        try {\n          const parts = formattedReservation.date.split('/');\n          if (parts.length === 3) {\n            const day = parts[0].split('T')[0];\n            formattedReservation.date = `${day}/${parts[1]}/${parts[2]}`;\n          }\n        } catch (error) {\n          console.error('Error al formatear fecha:', error);\n        }\n      }\n      return formattedReservation;\n    });\n    return {\n      success: true,\n      reservations: formattedLocalReservations\n    };\n  } catch (error) {\n    console.error('‚ùå Error al obtener reservas:', error);\n    return {\n      success: false,\n      error: error.message || 'Error desconocido al obtener reservas'\n    };\n  }\n}\n\n// Funci√≥n para actualizar el estado de una reserva\nexport async function updateReservationStatus(reservationId, status) {\n  try {\n    // Intentar actualizar en el backend\n    try {\n      const response = await apiService.put(`/whatsapp/reservas/${reservationId}`, {\n        estado: status === 'confirmed' ? 'confirmada' : status === 'cancelled' ? 'cancelada' : 'pendiente'\n      });\n      if (response.data && response.data.success) {\n        console.log('Estado de reserva actualizado en el backend:', response.data);\n      }\n    } catch (apiError) {\n      console.warn('No se pudo actualizar el estado de la reserva en el backend:', apiError);\n    }\n\n    // Buscar la reserva en nuestro almacenamiento local\n    const reservationIndex = reservationsStore.findIndex(res => res.id === reservationId);\n    if (reservationIndex === -1) {\n      throw new Error('Reserva no encontrada');\n    }\n\n    // Actualizar el estado\n    reservationsStore[reservationIndex].status = status;\n\n    // Guardar los cambios en localStorage\n    saveReservationsToStorage();\n\n    // Emitir evento de actualizaci√≥n\n    eventBus.emit('reserva-actualizada', {\n      id: reservationId,\n      status\n    });\n    return {\n      success: true,\n      message: 'Estado de reserva actualizado correctamente'\n    };\n  } catch (error) {\n    console.error('Error al actualizar el estado de la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al actualizar el estado de la reserva'\n    };\n  }\n}\n\n// Funci√≥n para guardar una reserva desde WhatsApp\nexport async function saveWhatsAppReservation(whatsappData) {\n  try {\n    console.log('Procesando reserva desde WhatsApp:', whatsappData);\n\n    // Generar un ID √∫nico para la reserva si no tiene uno\n    const reservationId = 'whatsapp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n\n    // Verificar si ya existe una reserva con datos similares para evitar duplicados\n    const existingReservation = reservationsStore.find(res => res.source === 'whatsapp' && res.fullName === (whatsappData.nombre || 'Cliente sin nombre') && res.mobilePhone === (whatsappData.telefono || '') && res.date === (whatsappData.fecha || new Date().toISOString().split('T')[0]) && res.time === (whatsappData.hora || '19:00'));\n    if (existingReservation) {\n      console.log('‚ö†Ô∏è Ya existe una reserva similar, evitando duplicado:', existingReservation);\n      return {\n        success: true,\n        reservation: existingReservation,\n        message: 'Reserva existente recuperada'\n      };\n    }\n\n    // Crear objeto de reserva para el frontend\n    const reservation = {\n      id: reservationId,\n      fullName: whatsappData.nombre || 'Cliente sin nombre',\n      mobilePhone: whatsappData.telefono || '',\n      email: whatsappData.email || '',\n      date: whatsappData.fecha || new Date().toISOString().split('T')[0],\n      time: whatsappData.hora || '19:00',\n      peopleCount: whatsappData.personas || 2,\n      notes: whatsappData.notas || 'Reserva realizada por WhatsApp',\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n      source: 'whatsapp'\n    };\n\n    // A√±adir a nuestro almacenamiento local\n    reservationsStore.unshift(reservation);\n    saveReservationsToStorage();\n    console.log('‚úÖ Reserva de WhatsApp guardada localmente:', reservation);\n\n    // Emitir evento de nueva reserva\n    eventBus.emit('nueva-reserva', reservation);\n    eventBus.emit('refresh-reservations');\n\n    // Intentar guardar en el backend (pero no esperar por la respuesta)\n    try {\n      console.log('üîÑ Intentando guardar reserva en el backend...');\n      apiService.post('/whatsapp/reservas', {\n        nombre: whatsappData.nombre || 'Cliente sin nombre',\n        telefono: whatsappData.telefono || '',\n        email: whatsappData.email || '',\n        fecha: whatsappData.fecha || new Date().toISOString().split('T')[0],\n        hora: whatsappData.hora || '19:00',\n        personas: whatsappData.personas || 2,\n        notas: whatsappData.notas || 'Reserva realizada por WhatsApp'\n      }).then(response => {\n        console.log('‚úÖ Reserva de WhatsApp guardada en el backend:', response);\n      }).catch(error => {\n        console.warn('‚ö†Ô∏è Error al guardar en el backend, pero la reserva se guard√≥ localmente:', error);\n      });\n    } catch (apiError) {\n      console.warn('‚ö†Ô∏è Error al intentar guardar en el backend:', apiError);\n    }\n    return {\n      success: true,\n      reservation\n    };\n  } catch (error) {\n    console.error('‚ùå Error al guardar reserva desde WhatsApp:', error);\n    return {\n      success: false,\n      error: error.message || 'Error desconocido al guardar la reserva'\n    };\n  }\n}\n\n/**\n * Elimina una reserva espec√≠fica\n * @param {string} reservationId - ID de la reserva a eliminar\n * @returns {Promise<Object>} - Resultado de la operaci√≥n\n */\nexport async function deleteReservation(reservationId) {\n  try {\n    // Intentar eliminar en el backend primero\n    try {\n      const response = await apiService.delete(`/reservas/${reservationId}`);\n      console.log('Reserva eliminada en el backend:', response);\n    } catch (apiError) {\n      console.warn('No se pudo eliminar la reserva en el backend:', apiError);\n      // Continuamos con la eliminaci√≥n local aunque falle el backend\n    }\n\n    // Eliminar de nuestro almacenamiento local\n    const index = reservationsStore.findIndex(r => r.id === reservationId);\n    if (index !== -1) {\n      reservationsStore.splice(index, 1);\n      saveReservationsToStorage();\n\n      // Emitir evento de actualizaci√≥n\n      eventBus.emit('reserva-eliminada', {\n        id: reservationId\n      });\n      return {\n        success: true,\n        message: 'Reserva eliminada correctamente'\n      };\n    } else {\n      return {\n        success: false,\n        error: 'No se encontr√≥ la reserva especificada'\n      };\n    }\n  } catch (error) {\n    console.error('Error al eliminar reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al eliminar la reserva'\n    };\n  }\n}\n\n/**\n * Verifica si una reserva tiene m√°s de X d√≠as de antig√ºedad\n * @param {Object} reservation - Reserva a verificar\n * @param {number} days - N√∫mero de d√≠as para considerar antigua\n * @returns {boolean} - true si la reserva es m√°s antigua que los d√≠as especificados\n */\nexport function isReservationOlderThan(reservation, days = 30) {\n  if (!reservation || !reservation.date) return false;\n  const reservationDate = new Date(reservation.date);\n  const today = new Date();\n\n  // Calcular la diferencia en milisegundos\n  const diffTime = today - reservationDate;\n  // Convertir a d√≠as\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  return diffDays > days;\n}","map":{"version":3,"names":["apiService","eventBus","reservationsStore","savedReservations","localStorage","getItem","JSON","parse","console","log","length","error","saveReservationsToStorage","setItem","stringify","saveReservation","reservationData","reservationId","Date","now","Math","random","toString","substr","reservation","id","fullName","mobilePhone","landlinePhone","email","address","date","reservationDate","time","reservationTime","peopleCount","notes","additionalNotes","status","createdAt","toISOString","source","response","post","nombre","telefono","fecha","hora","personas","notas","data","success","apiError","warn","unshift","emit","message","getReservations","get","Array","isArray","reservas","formattedReservations","map","formattedReservation","includes","parts","split","day","reservations","formattedLocalReservations","updateReservationStatus","put","estado","reservationIndex","findIndex","res","Error","saveWhatsAppReservation","whatsappData","existingReservation","find","then","catch","deleteReservation","delete","index","r","splice","isReservationOlderThan","days","today","diffTime","diffDays","ceil"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/reservaService.js"],"sourcesContent":["// Servicio para la gesti√≥n de reservas\nimport apiService from './apiService';\nimport eventBus from '../utils/eventBus';\n\n// Almacenamiento local para las reservas (simulando una base de datos)\nlet reservationsStore = [];\n\n// Intentar cargar reservas guardadas en localStorage al iniciar\ntry {\n  const savedReservations = localStorage.getItem('websap_reservations');\n  if (savedReservations) {\n    reservationsStore = JSON.parse(savedReservations);\n    console.log('Reservas cargadas desde localStorage:', reservationsStore.length);\n  }\n} catch (error) {\n  console.error('Error al cargar reservas desde localStorage:', error);\n}\n\n// Funci√≥n para guardar las reservas en localStorage\nfunction saveReservationsToStorage() {\n  try {\n    localStorage.setItem('websap_reservations', JSON.stringify(reservationsStore));\n  } catch (error) {\n    console.error('Error al guardar reservas en localStorage:', error);\n  }\n}\n\n// Funci√≥n para guardar una nueva reserva\nexport async function saveReservation(reservationData) {\n  try {\n    // Generar un ID √∫nico para la reserva\n    const reservationId = 'res_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    \n    // Crear el objeto de reserva con los datos recibidos\n    const reservation = {\n      id: reservationId,\n      fullName: reservationData.fullName,\n      mobilePhone: reservationData.mobilePhone,\n      landlinePhone: reservationData.landlinePhone || '',\n      email: reservationData.email || '',\n      address: reservationData.address || '',\n      date: reservationData.reservationDate,\n      time: reservationData.reservationTime,\n      peopleCount: reservationData.peopleCount,\n      notes: reservationData.additionalNotes || '',\n      status: 'pending', // Estado inicial: pendiente\n      createdAt: new Date().toISOString(),\n      source: reservationData.source || 'web' // Fuente de la reserva: web o whatsapp\n    };\n    \n    try {\n      // Intentar guardar en el backend\n      const response = await apiService.post('/whatsapp/reservas', {\n        nombre: reservation.fullName,\n        telefono: reservation.mobilePhone,\n        email: reservation.email,\n        fecha: reservation.date,\n        hora: reservation.time,\n        personas: reservation.peopleCount,\n        notas: reservation.notes\n      });\n      \n      if (response.data && response.data.success) {\n        console.log('Reserva guardada en el backend:', response.data);\n        reservation.id = response.data.reservationId || reservation.id;\n      }\n    } catch (apiError) {\n      console.warn('No se pudo guardar la reserva en el backend, usando almacenamiento local:', apiError);\n    }\n    \n    // Guardar la reserva en nuestro almacenamiento local\n    reservationsStore.unshift(reservation);\n    saveReservationsToStorage();\n    \n    // Emitimos un evento para notificar a otros componentes sobre la nueva reserva\n    eventBus.emit('nueva-reserva', reservation);\n    \n    console.log('Reserva guardada correctamente:', reservation);\n    \n    return {\n      success: true,\n      reservation\n    };\n  } catch (error) {\n    console.error('Error al guardar la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar la reserva'\n    };\n  }\n}\n\n// Funci√≥n para obtener todas las reservas\nexport async function getReservations() {\n  try {\n    // Intentar obtener reservas desde el backend\n    try {\n      const response = await apiService.get('/whatsapp/reservas');\n      \n      if (response && response.success && Array.isArray(response.reservas)) {\n        console.log('‚úÖ Reservas obtenidas desde el backend:', response.reservas.length);\n        \n        // Formatear las fechas antes de guardarlas\n        const formattedReservations = response.reservas.map(reservation => {\n          // Crear una copia para no modificar el original\n          const formattedReservation = { ...reservation };\n          \n          // Formatear la fecha si tiene el formato problem√°tico\n          if (formattedReservation.date && formattedReservation.date.includes('T') && formattedReservation.date.includes('/')) {\n            try {\n              const parts = formattedReservation.date.split('/');\n              if (parts.length === 3) {\n                const day = parts[0].split('T')[0];\n                formattedReservation.date = `${day}/${parts[1]}/${parts[2]}`;\n              }\n            } catch (error) {\n              console.error('Error al formatear fecha:', error);\n            }\n          }\n          \n          return formattedReservation;\n        });\n        \n        // Actualizar el almacenamiento local con las reservas formateadas\n        reservationsStore = formattedReservations;\n        saveReservationsToStorage();\n        \n        return {\n          success: true,\n          reservations: formattedReservations\n        };\n      }\n    } catch (error) {\n      console.warn('Error al obtener reservas desde el backend, usando datos locales:', error);\n    }\n    \n    // Si no se pudieron obtener del backend o hubo un error, usar los datos locales\n    console.log('üìã Usando datos de reservas locales:', reservationsStore.length);\n    \n    // Formatear las fechas de las reservas locales\n    const formattedLocalReservations = reservationsStore.map(reservation => {\n      // Crear una copia para no modificar el original\n      const formattedReservation = { ...reservation };\n      \n      // Formatear la fecha si tiene el formato problem√°tico\n      if (formattedReservation.date && formattedReservation.date.includes('T') && formattedReservation.date.includes('/')) {\n        try {\n          const parts = formattedReservation.date.split('/');\n          if (parts.length === 3) {\n            const day = parts[0].split('T')[0];\n            formattedReservation.date = `${day}/${parts[1]}/${parts[2]}`;\n          }\n        } catch (error) {\n          console.error('Error al formatear fecha:', error);\n        }\n      }\n      \n      return formattedReservation;\n    });\n    \n    return {\n      success: true,\n      reservations: formattedLocalReservations\n    };\n  } catch (error) {\n    console.error('‚ùå Error al obtener reservas:', error);\n    return {\n      success: false,\n      error: error.message || 'Error desconocido al obtener reservas'\n    };\n  }\n}\n\n// Funci√≥n para actualizar el estado de una reserva\nexport async function updateReservationStatus(reservationId, status) {\n  try {\n    // Intentar actualizar en el backend\n    try {\n      const response = await apiService.put(`/whatsapp/reservas/${reservationId}`, {\n        estado: status === 'confirmed' ? 'confirmada' : \n                status === 'cancelled' ? 'cancelada' : 'pendiente'\n      });\n      \n      if (response.data && response.data.success) {\n        console.log('Estado de reserva actualizado en el backend:', response.data);\n      }\n    } catch (apiError) {\n      console.warn('No se pudo actualizar el estado de la reserva en el backend:', apiError);\n    }\n    \n    // Buscar la reserva en nuestro almacenamiento local\n    const reservationIndex = reservationsStore.findIndex(res => res.id === reservationId);\n    \n    if (reservationIndex === -1) {\n      throw new Error('Reserva no encontrada');\n    }\n    \n    // Actualizar el estado\n    reservationsStore[reservationIndex].status = status;\n    \n    // Guardar los cambios en localStorage\n    saveReservationsToStorage();\n    \n    // Emitir evento de actualizaci√≥n\n    eventBus.emit('reserva-actualizada', {\n      id: reservationId,\n      status\n    });\n    \n    return {\n      success: true,\n      message: 'Estado de reserva actualizado correctamente'\n    };\n  } catch (error) {\n    console.error('Error al actualizar el estado de la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al actualizar el estado de la reserva'\n    };\n  }\n}\n\n// Funci√≥n para guardar una reserva desde WhatsApp\nexport async function saveWhatsAppReservation(whatsappData) {\n  try {\n    console.log('Procesando reserva desde WhatsApp:', whatsappData);\n    \n    // Generar un ID √∫nico para la reserva si no tiene uno\n    const reservationId = 'whatsapp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    \n    // Verificar si ya existe una reserva con datos similares para evitar duplicados\n    const existingReservation = reservationsStore.find(res => \n      res.source === 'whatsapp' && \n      res.fullName === (whatsappData.nombre || 'Cliente sin nombre') &&\n      res.mobilePhone === (whatsappData.telefono || '') &&\n      res.date === (whatsappData.fecha || new Date().toISOString().split('T')[0]) &&\n      res.time === (whatsappData.hora || '19:00')\n    );\n    \n    if (existingReservation) {\n      console.log('‚ö†Ô∏è Ya existe una reserva similar, evitando duplicado:', existingReservation);\n      return {\n        success: true,\n        reservation: existingReservation,\n        message: 'Reserva existente recuperada'\n      };\n    }\n    \n    // Crear objeto de reserva para el frontend\n    const reservation = {\n      id: reservationId,\n      fullName: whatsappData.nombre || 'Cliente sin nombre',\n      mobilePhone: whatsappData.telefono || '',\n      email: whatsappData.email || '',\n      date: whatsappData.fecha || new Date().toISOString().split('T')[0],\n      time: whatsappData.hora || '19:00',\n      peopleCount: whatsappData.personas || 2,\n      notes: whatsappData.notas || 'Reserva realizada por WhatsApp',\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n      source: 'whatsapp'\n    };\n    \n    // A√±adir a nuestro almacenamiento local\n    reservationsStore.unshift(reservation);\n    saveReservationsToStorage();\n    \n    console.log('‚úÖ Reserva de WhatsApp guardada localmente:', reservation);\n    \n    // Emitir evento de nueva reserva\n    eventBus.emit('nueva-reserva', reservation);\n    eventBus.emit('refresh-reservations');\n    \n    // Intentar guardar en el backend (pero no esperar por la respuesta)\n    try {\n      console.log('üîÑ Intentando guardar reserva en el backend...');\n      apiService.post('/whatsapp/reservas', {\n        nombre: whatsappData.nombre || 'Cliente sin nombre',\n        telefono: whatsappData.telefono || '',\n        email: whatsappData.email || '',\n        fecha: whatsappData.fecha || new Date().toISOString().split('T')[0],\n        hora: whatsappData.hora || '19:00',\n        personas: whatsappData.personas || 2,\n        notas: whatsappData.notas || 'Reserva realizada por WhatsApp'\n      }).then(response => {\n        console.log('‚úÖ Reserva de WhatsApp guardada en el backend:', response);\n      }).catch(error => {\n        console.warn('‚ö†Ô∏è Error al guardar en el backend, pero la reserva se guard√≥ localmente:', error);\n      });\n    } catch (apiError) {\n      console.warn('‚ö†Ô∏è Error al intentar guardar en el backend:', apiError);\n    }\n    \n    return {\n      success: true,\n      reservation\n    };\n    \n  } catch (error) {\n    console.error('‚ùå Error al guardar reserva desde WhatsApp:', error);\n    return {\n      success: false,\n      error: error.message || 'Error desconocido al guardar la reserva'\n    };\n  }\n}\n\n/**\n * Elimina una reserva espec√≠fica\n * @param {string} reservationId - ID de la reserva a eliminar\n * @returns {Promise<Object>} - Resultado de la operaci√≥n\n */\nexport async function deleteReservation(reservationId) {\n  try {\n    // Intentar eliminar en el backend primero\n    try {\n      const response = await apiService.delete(`/reservas/${reservationId}`);\n      console.log('Reserva eliminada en el backend:', response);\n    } catch (apiError) {\n      console.warn('No se pudo eliminar la reserva en el backend:', apiError);\n      // Continuamos con la eliminaci√≥n local aunque falle el backend\n    }\n    \n    // Eliminar de nuestro almacenamiento local\n    const index = reservationsStore.findIndex(r => r.id === reservationId);\n    if (index !== -1) {\n      reservationsStore.splice(index, 1);\n      saveReservationsToStorage();\n      \n      // Emitir evento de actualizaci√≥n\n      eventBus.emit('reserva-eliminada', { id: reservationId });\n      \n      return {\n        success: true,\n        message: 'Reserva eliminada correctamente'\n      };\n    } else {\n      return {\n        success: false,\n        error: 'No se encontr√≥ la reserva especificada'\n      };\n    }\n  } catch (error) {\n    console.error('Error al eliminar reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al eliminar la reserva'\n    };\n  }\n}\n\n/**\n * Verifica si una reserva tiene m√°s de X d√≠as de antig√ºedad\n * @param {Object} reservation - Reserva a verificar\n * @param {number} days - N√∫mero de d√≠as para considerar antigua\n * @returns {boolean} - true si la reserva es m√°s antigua que los d√≠as especificados\n */\nexport function isReservationOlderThan(reservation, days = 30) {\n  if (!reservation || !reservation.date) return false;\n  \n  const reservationDate = new Date(reservation.date);\n  const today = new Date();\n  \n  // Calcular la diferencia en milisegundos\n  const diffTime = today - reservationDate;\n  // Convertir a d√≠as\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  \n  return diffDays > days;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}