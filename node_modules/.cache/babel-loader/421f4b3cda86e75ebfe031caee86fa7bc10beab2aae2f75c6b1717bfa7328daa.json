{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"admin-reservas\"\n};\nconst _hoisted_2 = {\n  class: \"reservas-header\"\n};\nconst _hoisted_3 = {\n  class: \"action-buttons\"\n};\nconst _hoisted_4 = [\"disabled\"];\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  key: 1\n};\nconst _hoisted_7 = [\"disabled\"];\nconst _hoisted_8 = {\n  class: \"reservas-container\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"loading-spinner\"\n};\nconst _hoisted_10 = {\n  key: 1,\n  class: \"no-reservations\"\n};\nconst _hoisted_11 = {\n  key: 2,\n  class: \"reservations-list\"\n};\nconst _hoisted_12 = {\n  class: \"table-responsive\"\n};\nconst _hoisted_13 = {\n  class: \"reservation-table\"\n};\nconst _hoisted_14 = [\"href\"];\nconst _hoisted_15 = {\n  class: \"actions-cell\"\n};\nconst _hoisted_16 = [\"onClick\"];\nconst _hoisted_17 = [\"onClick\", \"disabled\"];\nconst _hoisted_18 = [\"onClick\", \"disabled\"];\nconst _hoisted_19 = {\n  key: 0,\n  class: \"reservation-modal\"\n};\nconst _hoisted_20 = {\n  class: \"modal-content\"\n};\nconst _hoisted_21 = {\n  class: \"reservation-details\"\n};\nconst _hoisted_22 = {\n  key: 0\n};\nconst _hoisted_23 = {\n  key: 1\n};\nconst _hoisted_24 = {\n  key: 2\n};\nconst _hoisted_25 = {\n  key: 3\n};\nconst _hoisted_26 = {\n  class: \"modal-actions\"\n};\nconst _hoisted_27 = [\"disabled\"];\nconst _hoisted_28 = [\"disabled\"];\nconst _hoisted_29 = {\n  key: 1,\n  class: \"delete-modal-overlay\"\n};\nconst _hoisted_30 = {\n  class: \"delete-modal\"\n};\nconst _hoisted_31 = {\n  class: \"delete-modal-header\"\n};\nconst _hoisted_32 = {\n  class: \"delete-modal-footer\"\n};\nconst _hoisted_33 = [\"disabled\"];\nconst _hoisted_34 = {\n  key: 0\n};\nconst _hoisted_35 = {\n  key: 1\n};\nimport { ref, onMounted, reactive, onUnmounted, computed } from 'vue';\nimport { getReservations, updateReservationStatus, deleteReservation, isReservationOlderThan } from '../../services/reservaService';\nimport eventBus from '../../utils/eventBus';\nimport apiService from '../../services/apiService';\n\n// Props\nconst maxRetries = 5;\nexport default {\n  __name: 'AdminReservas',\n  props: {\n    readOnly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    const props = __props;\n    const reservations = ref([]);\n    const isLoading = ref(true);\n    const selectedReservation = ref(null);\n    const showDeleteModal = ref(false);\n\n    // Variables para el sistema de reintentos de notificaciones\n    const notificationRetries = ref(0);\n    const notificationConnectStatus = ref('idle'); // 'idle', 'connecting', 'connected', 'error'\n    const retryTimeout = ref(null);\n    const toast = reactive({\n      visible: false,\n      message: '',\n      type: 'info'\n    });\n    const showToast = (message, type = 'info') => {\n      toast.message = message;\n      toast.type = type;\n      toast.visible = true;\n      setTimeout(() => {\n        toast.visible = false;\n      }, 5000);\n    };\n\n    // Funci√≥n para actualizar la lista de reservas (llamada cuando hay una nueva)\n    // IMPORTANTE: Definir refreshReservations antes de usarla en otras funciones\n    const refreshReservations = async () => {\n      console.log('üîÑ Actualizando lista de reservas...');\n      try {\n        // Guardamos el estado de carga\n        const wasLoading = isLoading.value;\n        isLoading.value = true;\n\n        // Cargamos nuevamente las reservas desde el servicio\n        const result = await getReservations();\n        if (result.success) {\n          reservations.value = result.reservations;\n          console.log('‚úÖ Lista de reservas actualizada correctamente:', reservations.value.length);\n        } else {\n          throw new Error(result.error || 'Error al actualizar las reservas');\n        }\n      } catch (error) {\n        console.error('‚ùå Error al actualizar reservas:', error);\n        showToast('Error al actualizar las reservas', 'error');\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    // Funci√≥n para reproducir sonido de notificaci√≥n\n    const playNotificationSound = () => {\n      try {\n        const audio = new Audio('/notification.mp3');\n        audio.play().catch(e => console.log('No se pudo reproducir sonido:', e));\n      } catch (error) {\n        console.error('Error al reproducir sonido:', error);\n      }\n    };\n\n    // Funci√≥n para cargar las reservas\n    const loadReservations = async () => {\n      isLoading.value = true;\n      try {\n        console.log('üîÑ Cargando reservas...');\n        // Utilizamos el servicio de reservas para obtener los datos\n        const result = await getReservations();\n        if (result.success) {\n          reservations.value = result.reservations;\n          console.log('‚úÖ Reservas cargadas correctamente:', reservations.value.length);\n\n          // Verificar notificaciones no le√≠das despu√©s de cargar reservas\n          checkNotifications();\n        } else {\n          throw new Error(result.error || 'Error al cargar las reservas');\n        }\n      } catch (error) {\n        console.error('‚ùå Error al cargar reservas:', error);\n        showToast('Error al cargar las reservas', 'error');\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    // Funci√≥n para verificar notificaciones de reservas de WhatsApp con sistema de reintentos\n    const checkNotifications = async (forceCheck = false) => {\n      // Si ya estamos en un estado de error y hemos alcanzado el m√°ximo de reintentos, no intentar nuevamente\n      // a menos que se fuerce una verificaci√≥n\n      if (notificationConnectStatus.value === 'error' && notificationRetries.value >= maxRetries && !forceCheck) {\n        return;\n      }\n\n      // Actualizar estado a 'connecting'\n      notificationConnectStatus.value = 'connecting';\n      try {\n        // Intentar obtener notificaciones del servidor\n        const response = await apiService.get('/whatsapp/notificaciones').catch(err => {\n          // Si hay un error de conexi√≥n, incrementar conteo de reintentos\n          notificationRetries.value++;\n\n          // Calcular tiempo de espera exponencial (2^intentos * 1000 ms, max 30 segundos)\n          const retryMs = Math.min(Math.pow(2, notificationRetries.value) * 1000, 30000);\n          console.log(`No se pudieron verificar notificaciones (intento ${notificationRetries.value}/${maxRetries}), reintentando en ${retryMs / 1000}s`);\n\n          // Si no hemos alcanzado el m√°ximo de reintentos, programar un nuevo intento\n          if (notificationRetries.value < maxRetries) {\n            // Limpiar timeout anterior si existe\n            if (retryTimeout.value) clearTimeout(retryTimeout.value);\n\n            // Programar nuevo intento\n            retryTimeout.value = setTimeout(() => {\n              checkNotifications(true);\n            }, retryMs);\n          } else {\n            // Establecer estado de error despu√©s de agotar los reintentos\n            notificationConnectStatus.value = 'error';\n            console.log('M√°ximo de reintentos alcanzado, desistiendo de verificar notificaciones');\n          }\n          return null;\n        });\n\n        // Solo procesar la respuesta si se obtuvo correctamente\n        if (response && response.success) {\n          // Resetear conteo de reintentos si la conexi√≥n fue exitosa\n          notificationRetries.value = 0;\n          notificationConnectStatus.value = 'connected';\n\n          // Si hay nuevas notificaciones, mostrar toast y actualizar lista\n          if (response.hayNotificaciones) {\n            showToast(`${response.cantidad} nueva(s) reserva(s) de WhatsApp`, 'success');\n            // Reproducir sonido de notificaci√≥n si est√° disponible\n            playNotificationSound();\n            // Refrescar lista de reservas\n            refreshReservations();\n          }\n        }\n      } catch (error) {\n        // Capturar cualquier otro error pero no mostrar errores en consola en producci√≥n\n        if (process.env.NODE_ENV === 'development') {\n          console.error('Error al verificar notificaciones:', error);\n        }\n        // No propagar el error para evitar que la aplicaci√≥n se interrumpa\n      }\n    };\n\n    // Funci√≥n para manejar nuevas reservas recibidas a trav√©s del eventBus\n    const handleNuevaReserva = reservation => {\n      console.log('üîî Nueva reserva recibida:', reservation);\n\n      // Verificamos si la reserva ya existe en la lista (para evitar duplicados)\n      const existingIndex = reservations.value.findIndex(r => r.id === reservation.id);\n      if (existingIndex >= 0) {\n        // Si la reserva ya existe, actualizamos sus datos\n        reservations.value[existingIndex] = {\n          ...reservation\n        };\n        console.log('üîÑ Reserva actualizada:', reservation.id);\n      } else {\n        // Si es una nueva reserva, la a√±adimos al principio de la lista\n        reservations.value.unshift(reservation);\n        console.log('‚ûï Nueva reserva a√±adida:', reservation.id);\n\n        // Mostrar notificaci√≥n de nueva reserva\n        showToast(`Nueva reserva recibida de ${reservation.fullName}`, 'success');\n\n        // Reproducir sonido de notificaci√≥n\n        playNotificationSound();\n      }\n    };\n\n    // Funci√≥n para manejar actualizaciones de reservas\n    const handleReservaActualizada = data => {\n      console.log('üîÑ Actualizaci√≥n de reserva recibida:', data);\n\n      // Buscamos la reserva en la lista y actualizamos su estado\n      const index = reservations.value.findIndex(res => res.id === data.id);\n      if (index !== -1) {\n        reservations.value[index].status = data.status;\n        console.log('‚úÖ Estado de reserva actualizado a:', data.status);\n      }\n    };\n\n    // Verificar notificaciones peri√≥dicamente (cada 30 segundos)\n    let notificationInterval = null;\n    onMounted(() => {\n      // Cargar las reservas iniciales\n      loadReservations();\n\n      // Escuchar eventos de nuevas reservas\n      eventBus.on('nueva-reserva', handleNuevaReserva);\n\n      // Escuchar eventos de actualizaci√≥n de reservas\n      eventBus.on('reserva-actualizada', handleReservaActualizada);\n\n      // Escuchar eventos para refrescar reservas\n      eventBus.on('refresh-reservations', refreshReservations);\n\n      // Iniciar verificaci√≥n peri√≥dica de notificaciones\n      notificationInterval = setInterval(checkNotifications, 30000); // cada 30 segundos\n\n      console.log('‚úÖ AdminReservas montado y escuchando eventos');\n    });\n\n    // Limpiar los listeners y el intervalo al desmontar el componente\n    onUnmounted(() => {\n      eventBus.off('nueva-reserva', handleNuevaReserva);\n      eventBus.off('reserva-actualizada', handleReservaActualizada);\n      eventBus.off('refresh-reservations', refreshReservations);\n\n      // Limpiar intervalo de verificaci√≥n de notificaciones\n      if (notificationInterval) {\n        clearInterval(notificationInterval);\n      }\n\n      // Limpiar timeout de reintento de notificaciones\n      if (retryTimeout.value) {\n        clearTimeout(retryTimeout.value);\n      }\n      console.log('üõë AdminReservas desmontado');\n    });\n\n    // Exponer funciones para uso externo\n    __expose({\n      refreshReservations\n    });\n\n    // Funci√≥n para formatear fecha (maneja m√∫ltiples formatos y los convierte a DD/MM/YYYY)\n    const formatDate = dateString => {\n      if (!dateString) return '';\n      try {\n        // Verificar si es el formato problem√°tico con T y Z\n        if (dateString.includes('T') && dateString.includes('/')) {\n          // Formato como \"29T05:00:00.000Z/05/2025\"\n          const parts = dateString.split('/');\n          if (parts.length === 3) {\n            // Extraer el d√≠a del primer segmento (antes de la T)\n            const day = parts[0].split('T')[0];\n            // Construir la fecha en formato DD/MM/YYYY\n            return `${day}/${parts[1]}/${parts[2]}`;\n          }\n        }\n\n        // Formato ISO (YYYY-MM-DD)\n        if (dateString.includes('-')) {\n          const parts = dateString.split('-');\n          if (parts.length === 3) {\n            return `${parts[2]}/${parts[1]}/${parts[0]}`;\n          }\n        }\n\n        // Si ya est√° en formato DD/MM/YYYY, devolverlo tal cual\n        if (dateString.includes('/') && !dateString.includes('T')) {\n          return dateString;\n        }\n\n        // Intentar parsear como fecha y formatear\n        const date = new Date(dateString);\n        if (!isNaN(date.getTime())) {\n          const day = date.getDate().toString().padStart(2, '0');\n          const month = (date.getMonth() + 1).toString().padStart(2, '0');\n          const year = date.getFullYear();\n          return `${day}/${month}/${year}`;\n        }\n\n        // Si no se pudo formatear, devolver el string original\n        return dateString;\n      } catch (error) {\n        console.error('Error al formatear fecha:', error);\n        return dateString;\n      }\n    };\n\n    // Obtener etiqueta del estado\n    const getStatusLabel = status => {\n      switch (status) {\n        case 'confirmed':\n          return 'Confirmada';\n        case 'pending':\n          return 'Pendiente';\n        case 'cancelled':\n          return 'Cancelada';\n        default:\n          return status;\n      }\n    };\n\n    // Ver detalles de la reserva\n    const viewReservation = reservation => {\n      selectedReservation.value = reservation;\n    };\n\n    // Confirmar reserva\n    const confirmReservation = async reservation => {\n      try {\n        // Utilizamos el servicio para actualizar el estado\n        const result = await updateReservationStatus(reservation.id, 'confirmed');\n        if (result.success) {\n          // Actualizamos el estado localmente\n          reservation.status = 'confirmed';\n          showToast('Reserva confirmada correctamente', 'success');\n        } else {\n          throw new Error(result.error || 'Error al confirmar la reserva');\n        }\n      } catch (error) {\n        console.error('Error al confirmar reserva:', error);\n        showToast('Error al confirmar la reserva', 'error');\n      }\n    };\n\n    // Cancelar reserva\n    const cancelReservation = async reservation => {\n      try {\n        // Utilizamos el servicio para actualizar el estado\n        const result = await updateReservationStatus(reservation.id, 'cancelled');\n        if (result.success) {\n          // Actualizamos el estado localmente\n          reservation.status = 'cancelled';\n          showToast('Reserva cancelada correctamente', 'success');\n        } else {\n          throw new Error(result.error || 'Error al cancelar la reserva');\n        }\n      } catch (error) {\n        console.error('Error al cancelar reserva:', error);\n        showToast('Error al cancelar la reserva', 'error');\n      }\n    };\n\n    // Contactar al cliente\n    const contactCustomer = reservation => {\n      if (reservation.mobilePhone) {\n        window.location.href = `tel:${reservation.mobilePhone}`;\n      } else {\n        showToast('No hay n√∫mero de tel√©fono disponible', 'warning');\n      }\n    };\n\n    // Confirmar eliminaci√≥n de reservas antiguas\n    const confirmDeleteOldReservations = async () => {\n      isLoading.value = true;\n      try {\n        const oldReservations = reservations.value.filter(reservation => isReservationOlderThan(reservation, 30));\n        if (oldReservations.length === 0) {\n          showToast('No hay reservas antiguas para eliminar', 'info');\n          isLoading.value = false;\n          return;\n        }\n        let successCount = 0;\n        let errorCount = 0;\n\n        // Eliminar cada reserva antigua una por una\n        for (const reservation of oldReservations) {\n          try {\n            const result = await deleteReservation(reservation.id);\n            if (result.success) {\n              successCount++;\n            } else {\n              errorCount++;\n              console.error('Error al eliminar reserva:', reservation.id, result.error);\n            }\n          } catch (error) {\n            errorCount++;\n            console.error('Error al eliminar reserva:', reservation.id, error);\n          }\n        }\n\n        // Actualizar la lista de reservas\n        await refreshReservations();\n        if (successCount > 0) {\n          showToast(`${successCount} reservas antiguas eliminadas correctamente`, 'success');\n        }\n        if (errorCount > 0) {\n          showToast(`No se pudieron eliminar ${errorCount} reservas`, 'warning');\n        }\n      } catch (error) {\n        console.error('Error al eliminar reservas antiguas:', error);\n        showToast('Error al eliminar las reservas antiguas', 'error');\n      } finally {\n        isLoading.value = false;\n        showDeleteModal.value = false;\n      }\n    };\n\n    // Verificar si hay reservas antiguas\n    const hasOldReservations = computed(() => {\n      return reservations.value.some(reservation => isReservationOlderThan(reservation, 30));\n    });\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[8] || (_cache[8] = _createElementVNode(\"h2\", {\n        class: \"admin-section-title\"\n      }, \"Gesti√≥n de Reservas\", -1)), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n        class: \"refresh-btn\",\n        onClick: refreshReservations,\n        disabled: isLoading.value,\n        title: \"Actualizar reservas\"\n      }, [isLoading.value ? (_openBlock(), _createElementBlock(\"span\", _hoisted_5, \"Actualizando...\")) : (_openBlock(), _createElementBlock(\"span\", _hoisted_6, \"üîÑ Actualizar\"))], 8, _hoisted_4), _createElementVNode(\"button\", {\n        class: \"delete-old-btn\",\n        onClick: _cache[0] || (_cache[0] = $event => showDeleteModal.value = true),\n        disabled: isLoading.value || !hasOldReservations.value,\n        title: \"Eliminar reservas antiguas (m√°s de 30 d√≠as)\"\n      }, _cache[7] || (_cache[7] = [_createElementVNode(\"span\", null, \"üóëÔ∏è Eliminar Antiguas\", -1)]), 8, _hoisted_7)])]), _createElementVNode(\"div\", _hoisted_8, [isLoading.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, _cache[9] || (_cache[9] = [_createElementVNode(\"div\", {\n        class: \"spinner\"\n      }, null, -1), _createElementVNode(\"p\", null, \"Cargando reservas...\", -1)]))) : reservations.value.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, _cache[10] || (_cache[10] = [_createElementVNode(\"p\", null, \"A√∫n no hay reservas registradas\", -1)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"table\", _hoisted_13, [_cache[11] || (_cache[11] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Fecha\"), _createElementVNode(\"th\", null, \"Hora\"), _createElementVNode(\"th\", null, \"Cliente\"), _createElementVNode(\"th\", null, \"Tel√©fono\"), _createElementVNode(\"th\", null, \"Personas\"), _createElementVNode(\"th\", null, \"Estado\"), _createElementVNode(\"th\", null, \"Acciones\")])], -1)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(reservations.value, (reservation, index) => {\n        return _openBlock(), _createElementBlock(\"tr\", {\n          key: index,\n          class: _normalizeClass({\n            'confirmed': reservation.status === 'confirmed',\n            'pending': reservation.status === 'pending',\n            'cancelled': reservation.status === 'cancelled'\n          })\n        }, [_createElementVNode(\"td\", null, _toDisplayString(formatDate(reservation.date)), 1), _createElementVNode(\"td\", null, _toDisplayString(reservation.time), 1), _createElementVNode(\"td\", null, _toDisplayString(reservation.fullName), 1), _createElementVNode(\"td\", null, [_createElementVNode(\"a\", {\n          href: `tel:${reservation.mobilePhone}`\n        }, _toDisplayString(reservation.mobilePhone), 9, _hoisted_14)]), _createElementVNode(\"td\", null, _toDisplayString(reservation.peopleCount), 1), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", {\n          class: _normalizeClass([\"status-badge\", reservation.status])\n        }, _toDisplayString(getStatusLabel(reservation.status)), 3)]), _createElementVNode(\"td\", _hoisted_15, [_createElementVNode(\"button\", {\n          onClick: $event => viewReservation(reservation),\n          class: \"action-btn view-btn\",\n          title: \"Ver detalles\"\n        }, \" üëÅÔ∏è \", 8, _hoisted_16), !__props.readOnly ? (_openBlock(), _createElementBlock(\"button\", {\n          key: 0,\n          onClick: $event => confirmReservation(reservation),\n          class: \"action-btn confirm-btn\",\n          title: \"Confirmar reserva\",\n          disabled: reservation.status === 'confirmed'\n        }, \" ‚úÖ \", 8, _hoisted_17)) : _createCommentVNode(\"\", true), !__props.readOnly ? (_openBlock(), _createElementBlock(\"button\", {\n          key: 1,\n          onClick: $event => cancelReservation(reservation),\n          class: \"action-btn cancel-btn\",\n          title: \"Cancelar reserva\",\n          disabled: reservation.status === 'cancelled'\n        }, \" ‚ùå \", 8, _hoisted_18)) : _createCommentVNode(\"\", true)])], 2);\n      }), 128))])])])]))]), selectedReservation.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_19, [_createElementVNode(\"div\", _hoisted_20, [_createElementVNode(\"span\", {\n        class: \"close-modal\",\n        onClick: _cache[1] || (_cache[1] = $event => selectedReservation.value = null)\n      }, \"√ó\"), _cache[23] || (_cache[23] = _createElementVNode(\"h3\", null, \"Detalles de la Reserva\", -1)), _createElementVNode(\"div\", _hoisted_21, [_createElementVNode(\"p\", null, [_cache[12] || (_cache[12] = _createElementVNode(\"strong\", null, \"Cliente:\", -1)), _createTextVNode(\" \" + _toDisplayString(selectedReservation.value.fullName), 1)]), _createElementVNode(\"p\", null, [_cache[13] || (_cache[13] = _createElementVNode(\"strong\", null, \"Tel√©fono M√≥vil:\", -1)), _createTextVNode(\" \" + _toDisplayString(selectedReservation.value.mobilePhone), 1)]), selectedReservation.value.landlinePhone ? (_openBlock(), _createElementBlock(\"p\", _hoisted_22, [_cache[14] || (_cache[14] = _createElementVNode(\"strong\", null, \"Tel√©fono Fijo:\", -1)), _createTextVNode(\" \" + _toDisplayString(selectedReservation.value.landlinePhone), 1)])) : _createCommentVNode(\"\", true), selectedReservation.value.email ? (_openBlock(), _createElementBlock(\"p\", _hoisted_23, [_cache[15] || (_cache[15] = _createElementVNode(\"strong\", null, \"Email:\", -1)), _createTextVNode(\" \" + _toDisplayString(selectedReservation.value.email), 1)])) : _createCommentVNode(\"\", true), selectedReservation.value.address ? (_openBlock(), _createElementBlock(\"p\", _hoisted_24, [_cache[16] || (_cache[16] = _createElementVNode(\"strong\", null, \"Direcci√≥n:\", -1)), _createTextVNode(\" \" + _toDisplayString(selectedReservation.value.address), 1)])) : _createCommentVNode(\"\", true), _createElementVNode(\"p\", null, [_cache[17] || (_cache[17] = _createElementVNode(\"strong\", null, \"Fecha:\", -1)), _createTextVNode(\" \" + _toDisplayString(formatDate(selectedReservation.value.date)), 1)]), _createElementVNode(\"p\", null, [_cache[18] || (_cache[18] = _createElementVNode(\"strong\", null, \"Hora:\", -1)), _createTextVNode(\" \" + _toDisplayString(selectedReservation.value.time), 1)]), _createElementVNode(\"p\", null, [_cache[19] || (_cache[19] = _createElementVNode(\"strong\", null, \"N√∫mero de Personas:\", -1)), _createTextVNode(\" \" + _toDisplayString(selectedReservation.value.peopleCount), 1)]), selectedReservation.value.notes ? (_openBlock(), _createElementBlock(\"p\", _hoisted_25, [_cache[20] || (_cache[20] = _createElementVNode(\"strong\", null, \"Notas Adicionales:\", -1)), _createTextVNode(\" \" + _toDisplayString(selectedReservation.value.notes), 1)])) : _createCommentVNode(\"\", true), _createElementVNode(\"p\", null, [_cache[21] || (_cache[21] = _createElementVNode(\"strong\", null, \"Estado:\", -1)), _cache[22] || (_cache[22] = _createTextVNode()), _createElementVNode(\"span\", {\n        class: _normalizeClass([\"status-badge\", selectedReservation.value.status])\n      }, _toDisplayString(getStatusLabel(selectedReservation.value.status)), 3)])]), _createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"button\", {\n        onClick: _cache[2] || (_cache[2] = $event => confirmReservation(selectedReservation.value)),\n        class: \"action-btn confirm-btn\",\n        disabled: selectedReservation.value.status === 'confirmed'\n      }, \" Confirmar Reserva \", 8, _hoisted_27), _createElementVNode(\"button\", {\n        onClick: _cache[3] || (_cache[3] = $event => cancelReservation(selectedReservation.value)),\n        class: \"action-btn cancel-btn\",\n        disabled: selectedReservation.value.status === 'cancelled'\n      }, \" Cancelar Reserva \", 8, _hoisted_28), _createElementVNode(\"button\", {\n        onClick: _cache[4] || (_cache[4] = $event => contactCustomer(selectedReservation.value)),\n        class: \"action-btn contact-btn\"\n      }, \" Contactar Cliente \")])])])) : _createCommentVNode(\"\", true), showDeleteModal.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_29, [_createElementVNode(\"div\", _hoisted_30, [_createElementVNode(\"div\", _hoisted_31, [_cache[24] || (_cache[24] = _createElementVNode(\"h3\", null, \"Confirmar eliminaci√≥n\", -1)), _createElementVNode(\"button\", {\n        class: \"close-modal\",\n        onClick: _cache[5] || (_cache[5] = $event => showDeleteModal.value = false)\n      }, \"√ó\")]), _cache[25] || (_cache[25] = _createElementVNode(\"div\", {\n        class: \"delete-modal-body\"\n      }, [_createElementVNode(\"div\", {\n        class: \"delete-icon\"\n      }, [_createElementVNode(\"span\", null, \"üóëÔ∏è\")]), _createElementVNode(\"p\", null, \"¬øEst√°s seguro de eliminar las reservas antiguas?\"), _createElementVNode(\"p\", {\n        class: \"delete-modal-info\"\n      }, \"Esta acci√≥n eliminar√° todas las reservas con m√°s de 30 d√≠as de antig√ºedad y no se puede deshacer.\")], -1)), _createElementVNode(\"div\", _hoisted_32, [_createElementVNode(\"button\", {\n        class: \"cancel-btn\",\n        onClick: _cache[6] || (_cache[6] = $event => showDeleteModal.value = false)\n      }, \"Cancelar\"), _createElementVNode(\"button\", {\n        class: \"confirm-btn\",\n        onClick: confirmDeleteOldReservations,\n        disabled: isLoading.value\n      }, [isLoading.value ? (_openBlock(), _createElementBlock(\"span\", _hoisted_34, \"Eliminando...\")) : (_openBlock(), _createElementBlock(\"span\", _hoisted_35, \"Eliminar\"))], 8, _hoisted_33)])])])) : _createCommentVNode(\"\", true), toast.visible ? (_openBlock(), _createElementBlock(\"div\", {\n        key: 2,\n        class: _normalizeClass([\"toast-notification\", toast.type])\n      }, _toDisplayString(toast.message), 3)) : _createCommentVNode(\"\", true)]);\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","reactive","onUnmounted","computed","getReservations","updateReservationStatus","deleteReservation","isReservationOlderThan","eventBus","apiService","maxRetries","props","__props","reservations","isLoading","selectedReservation","showDeleteModal","notificationRetries","notificationConnectStatus","retryTimeout","toast","visible","message","type","showToast","setTimeout","refreshReservations","console","log","wasLoading","value","result","success","length","Error","error","playNotificationSound","audio","Audio","play","catch","e","loadReservations","checkNotifications","forceCheck","response","get","err","retryMs","Math","min","pow","clearTimeout","hayNotificaciones","cantidad","process","env","NODE_ENV","handleNuevaReserva","reservation","existingIndex","findIndex","r","id","unshift","fullName","handleReservaActualizada","data","index","res","status","notificationInterval","on","setInterval","off","clearInterval","__expose","formatDate","dateString","includes","parts","split","day","date","Date","isNaN","getTime","getDate","toString","padStart","month","getMonth","year","getFullYear","getStatusLabel","viewReservation","confirmReservation","cancelReservation","contactCustomer","mobilePhone","window","location","href","confirmDeleteOldReservations","oldReservations","filter","successCount","errorCount","hasOldReservations","some"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/components/admin/AdminReservas.vue"],"sourcesContent":["<template>\n  <div class=\"admin-reservas\">\n    <div class=\"reservas-header\">\n      <h2 class=\"admin-section-title\">Gesti√≥n de Reservas</h2>\n      <div class=\"action-buttons\">\n        <button \n          class=\"refresh-btn\" \n          @click=\"refreshReservations\" \n          :disabled=\"isLoading\"\n          title=\"Actualizar reservas\"\n        >\n          <span v-if=\"isLoading\">Actualizando...</span>\n          <span v-else>üîÑ Actualizar</span>\n        </button>\n        \n        <button \n          class=\"delete-old-btn\" \n          @click=\"showDeleteModal = true\" \n          :disabled=\"isLoading || !hasOldReservations\"\n          title=\"Eliminar reservas antiguas (m√°s de 30 d√≠as)\"\n        >\n          <span>üóëÔ∏è Eliminar Antiguas</span>\n        </button>\n      </div>\n    </div>\n    \n    <div class=\"reservas-container\">\n      <div v-if=\"isLoading\" class=\"loading-spinner\">\n        <div class=\"spinner\"></div>\n        <p>Cargando reservas...</p>\n      </div>\n      \n      <div v-else-if=\"reservations.length === 0\" class=\"no-reservations\">\n        <p>A√∫n no hay reservas registradas</p>\n      </div>\n      \n      <div v-else class=\"reservations-list\">\n        <div class=\"table-responsive\">\n          <table class=\"reservation-table\">\n            <thead>\n              <tr>\n                <th>Fecha</th>\n                <th>Hora</th>\n                <th>Cliente</th>\n                <th>Tel√©fono</th>\n                <th>Personas</th>\n                <th>Estado</th>\n                <th>Acciones</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(reservation, index) in reservations\" :key=\"index\" :class=\"{ 'confirmed': reservation.status === 'confirmed', 'pending': reservation.status === 'pending', 'cancelled': reservation.status === 'cancelled' }\">\n                <td>{{ formatDate(reservation.date) }}</td>\n                <td>{{ reservation.time }}</td>\n                <td>{{ reservation.fullName }}</td>\n                <td>\n                  <a :href=\"`tel:${reservation.mobilePhone}`\">{{ reservation.mobilePhone }}</a>\n                </td>\n                <td>{{ reservation.peopleCount }}</td>\n                <td>\n                  <span class=\"status-badge\" :class=\"reservation.status\">\n                    {{ getStatusLabel(reservation.status) }}\n                  </span>\n                </td>\n                <td class=\"actions-cell\">\n                  <button @click=\"viewReservation(reservation)\" class=\"action-btn view-btn\" title=\"Ver detalles\">\n                    üëÅÔ∏è\n                  </button>\n                  <button \n                    v-if=\"!readOnly\" \n                    @click=\"confirmReservation(reservation)\" \n                    class=\"action-btn confirm-btn\" \n                    title=\"Confirmar reserva\" \n                    :disabled=\"reservation.status === 'confirmed'\"\n                  >\n                    ‚úÖ\n                  </button>\n                  <button \n                    v-if=\"!readOnly\" \n                    @click=\"cancelReservation(reservation)\" \n                    class=\"action-btn cancel-btn\" \n                    title=\"Cancelar reserva\" \n                    :disabled=\"reservation.status === 'cancelled'\"\n                  >\n                    ‚ùå\n                  </button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Modal para ver detalles de la reserva -->\n    <div v-if=\"selectedReservation\" class=\"reservation-modal\">\n      <div class=\"modal-content\">\n        <span class=\"close-modal\" @click=\"selectedReservation = null\">&times;</span>\n        <h3>Detalles de la Reserva</h3>\n        \n        <div class=\"reservation-details\">\n          <p><strong>Cliente:</strong> {{ selectedReservation.fullName }}</p>\n          <p><strong>Tel√©fono M√≥vil:</strong> {{ selectedReservation.mobilePhone }}</p>\n          <p v-if=\"selectedReservation.landlinePhone\"><strong>Tel√©fono Fijo:</strong> {{ selectedReservation.landlinePhone }}</p>\n          <p v-if=\"selectedReservation.email\"><strong>Email:</strong> {{ selectedReservation.email }}</p>\n          <p v-if=\"selectedReservation.address\"><strong>Direcci√≥n:</strong> {{ selectedReservation.address }}</p>\n          <p><strong>Fecha:</strong> {{ formatDate(selectedReservation.date) }}</p>\n          <p><strong>Hora:</strong> {{ selectedReservation.time }}</p>\n          <p><strong>N√∫mero de Personas:</strong> {{ selectedReservation.peopleCount }}</p>\n          <p v-if=\"selectedReservation.notes\"><strong>Notas Adicionales:</strong> {{ selectedReservation.notes }}</p>\n          <p><strong>Estado:</strong> <span class=\"status-badge\" :class=\"selectedReservation.status\">{{ getStatusLabel(selectedReservation.status) }}</span></p>\n        </div>\n        \n        <div class=\"modal-actions\">\n          <button @click=\"confirmReservation(selectedReservation)\" class=\"action-btn confirm-btn\" :disabled=\"selectedReservation.status === 'confirmed'\">\n            Confirmar Reserva\n          </button>\n          <button @click=\"cancelReservation(selectedReservation)\" class=\"action-btn cancel-btn\" :disabled=\"selectedReservation.status === 'cancelled'\">\n            Cancelar Reserva\n          </button>\n          <button @click=\"contactCustomer(selectedReservation)\" class=\"action-btn contact-btn\">\n            Contactar Cliente\n          </button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Modal de confirmaci√≥n para eliminar reservas antiguas -->\n    <div v-if=\"showDeleteModal\" class=\"delete-modal-overlay\">\n      <div class=\"delete-modal\">\n        <div class=\"delete-modal-header\">\n          <h3>Confirmar eliminaci√≥n</h3>\n          <button class=\"close-modal\" @click=\"showDeleteModal = false\">&times;</button>\n        </div>\n        <div class=\"delete-modal-body\">\n          <div class=\"delete-icon\">\n            <span>üóëÔ∏è</span>\n          </div>\n          <p>¬øEst√°s seguro de eliminar las reservas antiguas?</p>\n          <p class=\"delete-modal-info\">Esta acci√≥n eliminar√° todas las reservas con m√°s de 30 d√≠as de antig√ºedad y no se puede deshacer.</p>\n        </div>\n        <div class=\"delete-modal-footer\">\n          <button class=\"cancel-btn\" @click=\"showDeleteModal = false\">Cancelar</button>\n          <button class=\"confirm-btn\" @click=\"confirmDeleteOldReservations\" :disabled=\"isLoading\">\n            <span v-if=\"isLoading\">Eliminando...</span>\n            <span v-else>Eliminar</span>\n          </button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- A√±adir notificaci√≥n toast -->\n    <div v-if=\"toast.visible\" class=\"toast-notification\" :class=\"toast.type\">\n      {{ toast.message }}\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, reactive, onUnmounted, computed } from 'vue';\nimport { \n  getReservations, \n  updateReservationStatus, \n  deleteReservation, \n  isReservationOlderThan \n} from '../../services/reservaService';\nimport eventBus from '../../utils/eventBus';\nimport apiService from '../../services/apiService';\n\n// Props\nconst props = defineProps({\n  readOnly: {\n    type: Boolean,\n    default: false\n  }\n});\n\nconst reservations = ref([]);\nconst isLoading = ref(true);\nconst selectedReservation = ref(null);\nconst showDeleteModal = ref(false);\n\n// Variables para el sistema de reintentos de notificaciones\nconst notificationRetries = ref(0);\nconst maxRetries = 5;\nconst notificationConnectStatus = ref('idle'); // 'idle', 'connecting', 'connected', 'error'\nconst retryTimeout = ref(null);\n\nconst toast = reactive({\n  visible: false,\n  message: '',\n  type: 'info'\n});\n\nconst showToast = (message, type = 'info') => {\n  toast.message = message;\n  toast.type = type;\n  toast.visible = true;\n  \n  setTimeout(() => {\n    toast.visible = false;\n  }, 5000);\n};\n\n// Funci√≥n para actualizar la lista de reservas (llamada cuando hay una nueva)\n// IMPORTANTE: Definir refreshReservations antes de usarla en otras funciones\nconst refreshReservations = async () => {\n  console.log('üîÑ Actualizando lista de reservas...');\n  \n  try {\n    // Guardamos el estado de carga\n    const wasLoading = isLoading.value;\n    isLoading.value = true;\n    \n    // Cargamos nuevamente las reservas desde el servicio\n    const result = await getReservations();\n    \n    if (result.success) {\n      reservations.value = result.reservations;\n      console.log('‚úÖ Lista de reservas actualizada correctamente:', reservations.value.length);\n    } else {\n      throw new Error(result.error || 'Error al actualizar las reservas');\n    }\n  } catch (error) {\n    console.error('‚ùå Error al actualizar reservas:', error);\n    showToast('Error al actualizar las reservas', 'error');\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Funci√≥n para reproducir sonido de notificaci√≥n\nconst playNotificationSound = () => {\n  try {\n    const audio = new Audio('/notification.mp3');\n    audio.play().catch(e => console.log('No se pudo reproducir sonido:', e));\n  } catch (error) {\n    console.error('Error al reproducir sonido:', error);\n  }\n};\n\n// Funci√≥n para cargar las reservas\nconst loadReservations = async () => {\n  isLoading.value = true;\n  try {\n    console.log('üîÑ Cargando reservas...');\n    // Utilizamos el servicio de reservas para obtener los datos\n    const result = await getReservations();\n    \n    if (result.success) {\n      reservations.value = result.reservations;\n      console.log('‚úÖ Reservas cargadas correctamente:', reservations.value.length);\n      \n      // Verificar notificaciones no le√≠das despu√©s de cargar reservas\n      checkNotifications();\n    } else {\n      throw new Error(result.error || 'Error al cargar las reservas');\n    }\n  } catch (error) {\n    console.error('‚ùå Error al cargar reservas:', error);\n    showToast('Error al cargar las reservas', 'error');\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Funci√≥n para verificar notificaciones de reservas de WhatsApp con sistema de reintentos\nconst checkNotifications = async (forceCheck = false) => {\n  // Si ya estamos en un estado de error y hemos alcanzado el m√°ximo de reintentos, no intentar nuevamente\n  // a menos que se fuerce una verificaci√≥n\n  if (notificationConnectStatus.value === 'error' && \n      notificationRetries.value >= maxRetries && \n      !forceCheck) {\n    return;\n  }\n  \n  // Actualizar estado a 'connecting'\n  notificationConnectStatus.value = 'connecting';\n  \n  try {\n    // Intentar obtener notificaciones del servidor\n    const response = await apiService.get('/whatsapp/notificaciones')\n      .catch(err => {\n        // Si hay un error de conexi√≥n, incrementar conteo de reintentos\n        notificationRetries.value++;\n        \n        // Calcular tiempo de espera exponencial (2^intentos * 1000 ms, max 30 segundos)\n        const retryMs = Math.min(Math.pow(2, notificationRetries.value) * 1000, 30000);\n        \n        console.log(`No se pudieron verificar notificaciones (intento ${notificationRetries.value}/${maxRetries}), reintentando en ${retryMs/1000}s`);\n        \n        // Si no hemos alcanzado el m√°ximo de reintentos, programar un nuevo intento\n        if (notificationRetries.value < maxRetries) {\n          // Limpiar timeout anterior si existe\n          if (retryTimeout.value) clearTimeout(retryTimeout.value);\n          \n          // Programar nuevo intento\n          retryTimeout.value = setTimeout(() => {\n            checkNotifications(true);\n          }, retryMs);\n        } else {\n          // Establecer estado de error despu√©s de agotar los reintentos\n          notificationConnectStatus.value = 'error';\n          console.log('M√°ximo de reintentos alcanzado, desistiendo de verificar notificaciones');\n        }\n        \n        return null;\n      });\n    \n    // Solo procesar la respuesta si se obtuvo correctamente\n    if (response && response.success) {\n      // Resetear conteo de reintentos si la conexi√≥n fue exitosa\n      notificationRetries.value = 0;\n      notificationConnectStatus.value = 'connected';\n      \n      // Si hay nuevas notificaciones, mostrar toast y actualizar lista\n      if (response.hayNotificaciones) {\n        showToast(`${response.cantidad} nueva(s) reserva(s) de WhatsApp`, 'success');\n        // Reproducir sonido de notificaci√≥n si est√° disponible\n        playNotificationSound();\n        // Refrescar lista de reservas\n        refreshReservations();\n      }\n    }\n  } catch (error) {\n    // Capturar cualquier otro error pero no mostrar errores en consola en producci√≥n\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error al verificar notificaciones:', error);\n    }\n    // No propagar el error para evitar que la aplicaci√≥n se interrumpa\n  }\n};\n\n// Funci√≥n para manejar nuevas reservas recibidas a trav√©s del eventBus\nconst handleNuevaReserva = (reservation) => {\n  console.log('üîî Nueva reserva recibida:', reservation);\n  \n  // Verificamos si la reserva ya existe en la lista (para evitar duplicados)\n  const existingIndex = reservations.value.findIndex(r => r.id === reservation.id);\n  \n  if (existingIndex >= 0) {\n    // Si la reserva ya existe, actualizamos sus datos\n    reservations.value[existingIndex] = { ...reservation };\n    console.log('üîÑ Reserva actualizada:', reservation.id);\n  } else {\n    // Si es una nueva reserva, la a√±adimos al principio de la lista\n    reservations.value.unshift(reservation);\n    console.log('‚ûï Nueva reserva a√±adida:', reservation.id);\n    \n    // Mostrar notificaci√≥n de nueva reserva\n    showToast(`Nueva reserva recibida de ${reservation.fullName}`, 'success');\n    \n    // Reproducir sonido de notificaci√≥n\n    playNotificationSound();\n  }\n};\n\n// Funci√≥n para manejar actualizaciones de reservas\nconst handleReservaActualizada = (data) => {\n  console.log('üîÑ Actualizaci√≥n de reserva recibida:', data);\n  \n  // Buscamos la reserva en la lista y actualizamos su estado\n  const index = reservations.value.findIndex(res => res.id === data.id);\n  if (index !== -1) {\n    reservations.value[index].status = data.status;\n    console.log('‚úÖ Estado de reserva actualizado a:', data.status);\n  }\n};\n\n// Verificar notificaciones peri√≥dicamente (cada 30 segundos)\nlet notificationInterval = null;\n\nonMounted(() => {\n  // Cargar las reservas iniciales\n  loadReservations();\n  \n  // Escuchar eventos de nuevas reservas\n  eventBus.on('nueva-reserva', handleNuevaReserva);\n  \n  // Escuchar eventos de actualizaci√≥n de reservas\n  eventBus.on('reserva-actualizada', handleReservaActualizada);\n  \n  // Escuchar eventos para refrescar reservas\n  eventBus.on('refresh-reservations', refreshReservations);\n  \n  // Iniciar verificaci√≥n peri√≥dica de notificaciones\n  notificationInterval = setInterval(checkNotifications, 30000); // cada 30 segundos\n  \n  console.log('‚úÖ AdminReservas montado y escuchando eventos');\n});\n\n// Limpiar los listeners y el intervalo al desmontar el componente\nonUnmounted(() => {\n  eventBus.off('nueva-reserva', handleNuevaReserva);\n  eventBus.off('reserva-actualizada', handleReservaActualizada);\n  eventBus.off('refresh-reservations', refreshReservations);\n  \n  // Limpiar intervalo de verificaci√≥n de notificaciones\n  if (notificationInterval) {\n    clearInterval(notificationInterval);\n  }\n  \n  // Limpiar timeout de reintento de notificaciones\n  if (retryTimeout.value) {\n    clearTimeout(retryTimeout.value);\n  }\n  \n  console.log('üõë AdminReservas desmontado');\n});\n\n// Exponer funciones para uso externo\ndefineExpose({ refreshReservations });\n\n// Funci√≥n para formatear fecha (maneja m√∫ltiples formatos y los convierte a DD/MM/YYYY)\nconst formatDate = (dateString) => {\n  if (!dateString) return '';\n  \n  try {\n    // Verificar si es el formato problem√°tico con T y Z\n    if (dateString.includes('T') && dateString.includes('/')) {\n      // Formato como \"29T05:00:00.000Z/05/2025\"\n      const parts = dateString.split('/');\n      if (parts.length === 3) {\n        // Extraer el d√≠a del primer segmento (antes de la T)\n        const day = parts[0].split('T')[0];\n        // Construir la fecha en formato DD/MM/YYYY\n        return `${day}/${parts[1]}/${parts[2]}`;\n      }\n    }\n    \n    // Formato ISO (YYYY-MM-DD)\n    if (dateString.includes('-')) {\n      const parts = dateString.split('-');\n      if (parts.length === 3) {\n        return `${parts[2]}/${parts[1]}/${parts[0]}`;\n      }\n    }\n    \n    // Si ya est√° en formato DD/MM/YYYY, devolverlo tal cual\n    if (dateString.includes('/') && !dateString.includes('T')) {\n      return dateString;\n    }\n    \n    // Intentar parsear como fecha y formatear\n    const date = new Date(dateString);\n    if (!isNaN(date.getTime())) {\n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    }\n    \n    // Si no se pudo formatear, devolver el string original\n    return dateString;\n  } catch (error) {\n    console.error('Error al formatear fecha:', error);\n    return dateString;\n  }\n};\n\n// Obtener etiqueta del estado\nconst getStatusLabel = (status) => {\n  switch (status) {\n    case 'confirmed':\n      return 'Confirmada';\n    case 'pending':\n      return 'Pendiente';\n    case 'cancelled':\n      return 'Cancelada';\n    default:\n      return status;\n  }\n};\n\n// Ver detalles de la reserva\nconst viewReservation = (reservation) => {\n  selectedReservation.value = reservation;\n};\n\n// Confirmar reserva\nconst confirmReservation = async (reservation) => {\n  try {\n    // Utilizamos el servicio para actualizar el estado\n    const result = await updateReservationStatus(reservation.id, 'confirmed');\n    \n    if (result.success) {\n      // Actualizamos el estado localmente\n      reservation.status = 'confirmed';\n      showToast('Reserva confirmada correctamente', 'success');\n    } else {\n      throw new Error(result.error || 'Error al confirmar la reserva');\n    }\n  } catch (error) {\n    console.error('Error al confirmar reserva:', error);\n    showToast('Error al confirmar la reserva', 'error');\n  }\n};\n\n// Cancelar reserva\nconst cancelReservation = async (reservation) => {\n  try {\n    // Utilizamos el servicio para actualizar el estado\n    const result = await updateReservationStatus(reservation.id, 'cancelled');\n    \n    if (result.success) {\n      // Actualizamos el estado localmente\n      reservation.status = 'cancelled';\n      showToast('Reserva cancelada correctamente', 'success');\n    } else {\n      throw new Error(result.error || 'Error al cancelar la reserva');\n    }\n  } catch (error) {\n    console.error('Error al cancelar reserva:', error);\n    showToast('Error al cancelar la reserva', 'error');\n  }\n};\n\n// Contactar al cliente\nconst contactCustomer = (reservation) => {\n  if (reservation.mobilePhone) {\n    window.location.href = `tel:${reservation.mobilePhone}`;\n  } else {\n    showToast('No hay n√∫mero de tel√©fono disponible', 'warning');\n  }\n};\n\n// Confirmar eliminaci√≥n de reservas antiguas\nconst confirmDeleteOldReservations = async () => {\n  isLoading.value = true;\n  try {\n    const oldReservations = reservations.value.filter(reservation => isReservationOlderThan(reservation, 30));\n    \n    if (oldReservations.length === 0) {\n      showToast('No hay reservas antiguas para eliminar', 'info');\n      isLoading.value = false;\n      return;\n    }\n    \n    let successCount = 0;\n    let errorCount = 0;\n    \n    // Eliminar cada reserva antigua una por una\n    for (const reservation of oldReservations) {\n      try {\n        const result = await deleteReservation(reservation.id);\n        if (result.success) {\n          successCount++;\n        } else {\n          errorCount++;\n          console.error('Error al eliminar reserva:', reservation.id, result.error);\n        }\n      } catch (error) {\n        errorCount++;\n        console.error('Error al eliminar reserva:', reservation.id, error);\n      }\n    }\n    \n    // Actualizar la lista de reservas\n    await refreshReservations();\n    \n    if (successCount > 0) {\n      showToast(`${successCount} reservas antiguas eliminadas correctamente`, 'success');\n    }\n    \n    if (errorCount > 0) {\n      showToast(`No se pudieron eliminar ${errorCount} reservas`, 'warning');\n    }\n  } catch (error) {\n    console.error('Error al eliminar reservas antiguas:', error);\n    showToast('Error al eliminar las reservas antiguas', 'error');\n  } finally {\n    isLoading.value = false;\n    showDeleteModal.value = false;\n  }\n};\n\n// Verificar si hay reservas antiguas\nconst hasOldReservations = computed(() => {\n  return reservations.value.some(reservation => isReservationOlderThan(reservation, 30));\n});\n</script>\n\n<style scoped>\n.admin-reservas {\n  padding: 20px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n.admin-section-title {\n  color: #333;\n  font-size: 1.5rem;\n  margin-bottom: 20px;\n  padding-bottom: 10px;\n  border-bottom: 2px solid #4CAF50;\n}\n\n.loading-spinner {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 40px;\n}\n\n.spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #4CAF50;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin-bottom: 15px;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.no-reservations {\n  text-align: center;\n  padding: 40px;\n  color: #666;\n  font-style: italic;\n}\n\n.table-responsive {\n  overflow-x: auto;\n}\n\n.reservation-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\n.reservation-table th, \n.reservation-table td {\n  padding: 12px 15px;\n  text-align: left;\n  border-bottom: 1px solid #ddd;\n}\n\n.reservation-table th {\n  background-color: #f5f5f5;\n  font-weight: bold;\n  color: #333;\n}\n\n.reservation-table tr:hover {\n  background-color: #f9f9f9;\n}\n\n.reservation-table tr.confirmed {\n  background-color: rgba(76, 175, 80, 0.1);\n}\n\n.reservation-table tr.pending {\n  background-color: rgba(255, 193, 7, 0.1);\n}\n\n.reservation-table tr.cancelled {\n  background-color: rgba(244, 67, 54, 0.1);\n}\n\n.status-badge {\n  display: inline-block;\n  padding: 4px 8px;\n  border-radius: 12px;\n  font-size: 0.8rem;\n  font-weight: bold;\n}\n\n.status-badge.confirmed {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.status-badge.pending {\n  background-color: #FFC107;\n  color: #333;\n}\n\n.status-badge.cancelled {\n  background-color: #F44336;\n  color: white;\n}\n\n.actions-cell {\n  white-space: nowrap;\n}\n\n.action-btn {\n  background: none;\n  border: none;\n  font-size: 1.2rem;\n  cursor: pointer;\n  margin: 0 3px;\n  padding: 5px;\n  border-radius: 4px;\n  transition: background-color 0.3s;\n}\n\n.action-btn:hover {\n  background-color: #f0f0f0;\n}\n\n.action-btn:disabled {\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n\n.view-btn:hover {\n  background-color: #e3f2fd;\n}\n\n.confirm-btn:hover {\n  background-color: #e8f5e9;\n}\n\n.cancel-btn:hover {\n  background-color: #ffebee;\n}\n\n/* Estilos para el modal */\n.reservation-modal {\n  position: fixed;\n  z-index: 1000;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0,0,0,0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.modal-content {\n  background-color: #fff;\n  border-radius: 8px;\n  padding: 20px;\n  width: 90%;\n  max-width: 500px;\n  max-height: 80vh;\n  overflow-y: auto;\n  position: relative;\n  box-shadow: 0 4px 20px rgba(0,0,0,0.2);\n}\n\n.close-modal {\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  font-size: 24px;\n  cursor: pointer;\n  color: #666;\n}\n\n.close-modal:hover {\n  color: #000;\n}\n\n.modal-content h3 {\n  margin-top: 0;\n  margin-bottom: 20px;\n  padding-bottom: 10px;\n  border-bottom: 1px solid #eee;\n  color: #333;\n}\n\n.reservation-details p {\n  margin: 8px 0;\n  line-height: 1.5;\n}\n\n.modal-actions {\n  margin-top: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.modal-actions .action-btn {\n  flex: 1;\n  padding: 10px;\n  font-size: 0.9rem;\n  border-radius: 4px;\n  text-align: center;\n  min-width: 120px;\n}\n\n.modal-actions .confirm-btn {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.modal-actions .cancel-btn {\n  background-color: #F44336;\n  color: white;\n}\n\n.modal-actions .contact-btn {\n  background-color: #2196F3;\n  color: white;\n}\n\n.modal-actions .action-btn:hover {\n  opacity: 0.9;\n}\n\n.modal-actions .action-btn:disabled {\n  background-color: #ccc;\n  color: #666;\n}\n\n@media (max-width: 768px) {\n  .reservation-table th, \n  .reservation-table td {\n    padding: 8px 10px;\n    font-size: 0.9rem;\n  }\n  \n  .actions-cell {\n    display: flex;\n  }\n  \n  .modal-actions {\n    flex-direction: column;\n  }\n  \n  .modal-content {\n    width: 95%;\n    padding: 15px;\n  }\n}\n\n.reservas-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.refresh-btn {\n  background-color: #f0f0f0;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 8px 15px;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n.refresh-btn:hover {\n  background-color: #e0e0e0;\n}\n\n.refresh-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.delete-old-btn {\n  background-color: #f0f0f0;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 8px 15px;\n  cursor: pointer;\n  transition: all 0.3s;\n  margin-left: 10px;\n}\n\n.delete-old-btn:hover {\n  background-color: #e0e0e0;\n}\n\n.delete-old-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.delete-modal-overlay {\n  position: fixed;\n  z-index: 1000;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0,0,0,0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.delete-modal {\n  background-color: #fff;\n  border-radius: 8px;\n  padding: 20px;\n  width: 90%;\n  max-width: 400px;\n  max-height: 80vh;\n  overflow-y: auto;\n  position: relative;\n  box-shadow: 0 4px 20px rgba(0,0,0,0.2);\n}\n\n.delete-modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.delete-modal-header h3 {\n  margin-top: 0;\n  margin-bottom: 10px;\n  padding-bottom: 10px;\n  border-bottom: 1px solid #eee;\n  color: #333;\n}\n\n.close-modal {\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  font-size: 24px;\n  cursor: pointer;\n  color: #666;\n}\n\n.close-modal:hover {\n  color: #000;\n}\n\n.delete-modal-body {\n  text-align: center;\n  margin-bottom: 20px;\n}\n\n.delete-icon {\n  font-size: 48px;\n  margin-bottom: 10px;\n}\n\n.delete-modal-info {\n  font-size: 0.9rem;\n  color: #666;\n  margin-bottom: 20px;\n}\n\n.delete-modal-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 20px;\n}\n\n.delete-modal-footer .cancel-btn {\n  background-color: #f0f0f0;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 8px 15px;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n.delete-modal-footer .cancel-btn:hover {\n  background-color: #e0e0e0;\n}\n\n.delete-modal-footer .confirm-btn {\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  padding: 8px 15px;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n.delete-modal-footer .confirm-btn:hover {\n  opacity: 0.9;\n}\n\n.delete-modal-footer .confirm-btn:disabled {\n  background-color: #ccc;\n  color: #666;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}