{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/**\n * Servicio para gestionar las operaciones administrativas\n */\nimport * as storageService from './storageService';\nimport apiService from './apiService';\n\n// Lista local de usuarios para mantener estado entre llamadas\nlet localUsers = [];\n\n/**\n * Obtiene estadísticas para el dashboard de administrador\n * @returns {Promise<Object>} Estadísticas del sistema\n */\nexport async function getDashboardStats() {\n  try {\n    // En desarrollo, devolver datos simulados pero con lógica para actualizarlos\n    if (process.env.NODE_ENV === 'development') {\n      // Obtener usuarios actuales para tener un conteo real\n      const usersResponse = await getUsers();\n      const userCount = usersResponse && usersResponse.success && Array.isArray(usersResponse.data) ? usersResponse.data.length : 45; // Valor por defecto si no podemos obtener el conteo real\n\n      // Calcular usuarios activos/inactivos\n      const activeUsers = usersResponse && usersResponse.success && Array.isArray(usersResponse.data) ? usersResponse.data.filter(user => user.estado === 'activo').length : Math.floor(userCount * 0.75); // Aproximadamente 75% activos por defecto\n\n      const inactiveUsers = userCount - activeUsers;\n      console.log(`Estadísticas actualizadas: ${userCount} usuarios totales (${activeUsers} activos, ${inactiveUsers} inactivos)`);\n      return {\n        success: true,\n        data: {\n          totalUsers: userCount,\n          activeUsers: activeUsers,\n          inactiveUsers: inactiveUsers,\n          activePayments: 28,\n          pendingPayments: 8,\n          overduePayments: 3,\n          totalIncome: 15750000,\n          status: 'Normal',\n          lastBackup: new Date().toISOString(),\n          recentActivity: [\n          // Añadir actividad reciente de creación de usuario si se ha creado uno recientemente\n          {\n            tipo: 'user_login',\n            usuario_nombre: 'Admin',\n            accion: 'inició sesión en el sistema',\n            fecha: new Date().toISOString()\n          }, {\n            tipo: 'system',\n            usuario_nombre: 'Sistema',\n            accion: 'realizó una sincronización de datos',\n            fecha: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n          }]\n        }\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    const response = await apiService.get('/admin/dashboard');\n    return response;\n  } catch (error) {\n    console.error('Error al obtener estadísticas del dashboard:', error);\n\n    // En caso de error, devolver datos simulados básicos\n    return {\n      success: true,\n      data: {\n        totalUsers: 45,\n        activeUsers: 38,\n        inactiveUsers: 7,\n        activePayments: 28,\n        pendingPayments: 8,\n        overduePayments: 3,\n        totalIncome: 15750000,\n        status: 'Normal',\n        lastBackup: new Date().toISOString(),\n        recentActivity: [{\n          tipo: 'system',\n          usuario_nombre: 'Sistema',\n          accion: 'inició en modo de respaldo',\n          fecha: new Date().toISOString()\n        }]\n      }\n    };\n  }\n}\n\n/**\n * Obtiene los elementos del menú\n * @returns {Promise<Object>} Lista de elementos del menú\n */\nexport async function getMenuItems() {\n  try {\n    // En desarrollo, simular llamada a la API\n    if (process.env.NODE_ENV === 'development') {\n      // Obtener datos del servicio de almacenamiento\n      const menuItems = await storageService.getMenuItems();\n      return {\n        success: true,\n        data: menuItems\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    const response = await apiService.get('/admin/menu-items');\n    return response;\n  } catch (error) {\n    console.error('Error al obtener elementos del menú:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener elementos del menú'\n    };\n  }\n}\n\n/**\n * Obtiene los elementos vendidos para el inventario\n * @returns {Promise<Object>} Lista de elementos vendidos\n */\nexport async function getSoldItems() {\n  try {\n    // En desarrollo, simular llamada a la API\n    if (process.env.NODE_ENV === 'development') {\n      return {\n        success: true,\n        data: [{\n          id: 1,\n          name: 'Hamburguesa Clásica',\n          quantity: 45,\n          price: 12000\n        }, {\n          id: 2,\n          name: 'Pizza Margherita',\n          quantity: 38,\n          price: 18000\n        }, {\n          id: 3,\n          name: 'Ensalada César',\n          quantity: 22,\n          price: 9000\n        }, {\n          id: 4,\n          name: 'Pasta Carbonara',\n          quantity: 30,\n          price: 15000\n        }, {\n          id: 5,\n          name: 'Sushi Variado',\n          quantity: 15,\n          price: 25000\n        }]\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    const response = await apiService.get('/admin/sold-items');\n    return response;\n  } catch (error) {\n    console.error('Error al obtener elementos vendidos:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener elementos vendidos'\n    };\n  }\n}\n\n/**\n * Obtiene los usuarios del sistema\n * @param {Object} options Opciones de filtrado y paginación\n * @returns {Promise<Array>} Lista de usuarios\n */\nexport async function getUsers(options = {}) {\n  try {\n    // Intentar obtener los usuarios desde la API\n    try {\n      const response = await apiService.get('/admin/users', options);\n      if (response && response.success) {\n        localUsers = response.data || [];\n        return {\n          success: true,\n          data: localUsers\n        };\n      }\n    } catch (apiError) {\n      console.warn('Error al obtener usuarios desde la API, usando datos locales:', apiError);\n\n      // Si estamos en modo de desarrollo y la API falla, usar datos simulados\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Usando datos de usuarios simulados en modo desarrollo');\n\n        // Si ya tenemos usuarios locales, devolverlos\n        if (localUsers.length > 0) {\n          return {\n            success: true,\n            data: localUsers\n          };\n        }\n\n        // Generar datos de ejemplo si no tenemos usuarios locales\n        const mockUsers = [{\n          id: 1,\n          nombre: 'Admin Principal',\n          email: 'admin@ejemplo.com',\n          rol: 'Superadministrador',\n          estado: 'activo',\n          ultimo_acceso: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n        }, {\n          id: 2,\n          nombre: 'Juan Pérez',\n          email: 'juan@ejemplo.com',\n          rol: 'Administrador',\n          estado: 'activo',\n          ultimo_acceso: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString()\n        }, {\n          id: 3,\n          nombre: 'María López',\n          email: 'maria@ejemplo.com',\n          rol: 'Empleado',\n          estado: 'activo',\n          ultimo_acceso: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()\n        }, {\n          id: 4,\n          nombre: 'Carlos Rodríguez',\n          email: 'carlos@ejemplo.com',\n          rol: 'Empleado',\n          estado: 'inactivo',\n          ultimo_acceso: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()\n        }];\n\n        // Guardar los usuarios simulados en la variable local\n        localUsers = mockUsers;\n        return {\n          success: true,\n          data: mockUsers\n        };\n      }\n\n      // Si no estamos en desarrollo, propagar el error\n      throw apiError;\n    }\n\n    // Si llegamos aquí es porque la API devolvió éxito pero sin datos\n    return {\n      success: false,\n      error: 'No se pudieron obtener los usuarios'\n    };\n  } catch (error) {\n    console.error('Error al obtener usuarios:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener usuarios'\n    };\n  }\n}\n\n/**\n * Obtiene los registros del sistema\n * @returns {Promise<Object>} Lista de logs\n */\nexport async function getLogs() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        data: [{\n          id: 1,\n          timestamp: new Date().toISOString(),\n          type: 'info',\n          user: 'Admin',\n          message: 'Inicio de sesión exitoso',\n          details: {\n            ip: '192.168.1.1',\n            userAgent: 'Chrome/96.0'\n          }\n        }, {\n          id: 2,\n          timestamp: new Date(Date.now() - 3600000).toISOString(),\n          // 1 hora atrás\n          type: 'warning',\n          user: 'Sistema',\n          message: 'Intento de acceso fallido',\n          details: {\n            ip: '203.0.113.1',\n            userAgent: 'Edge/96.0',\n            attempts: 3\n          }\n        }, {\n          id: 3,\n          timestamp: new Date(Date.now() - 7200000).toISOString(),\n          // 2 horas atrás\n          type: 'error',\n          user: 'Sistema',\n          message: 'Error en la creación de backup',\n          details: {\n            error: 'Espacio insuficiente',\n            code: 'E0023'\n          }\n        }, {\n          id: 4,\n          timestamp: new Date(Date.now() - 86400000).toISOString(),\n          // 1 día atrás\n          type: 'success',\n          user: 'Juan Pérez',\n          message: 'Nuevo usuario creado',\n          details: {\n            newUser: 'carlos@ejemplo.com'\n          }\n        }]\n      });\n    }, 500);\n  });\n}\n\n/**\n * Descarga los registros del sistema en formato CSV\n * @returns {Promise<Object>} Resultado de la operación con datos CSV\n */\nexport async function downloadLogsCSV() {\n  try {\n    // Primero obtenemos los logs\n    const logsResponse = await getLogs();\n    if (!logsResponse.success || !Array.isArray(logsResponse.data)) {\n      throw new Error('No se pudieron obtener los logs para descargar');\n    }\n\n    // Convertir los logs a formato CSV\n    const logs = logsResponse.data;\n\n    // Cabeceras del CSV\n    const headers = ['ID', 'Fecha', 'Tipo', 'Usuario', 'Mensaje', 'Detalles'];\n\n    // Filas de datos\n    const rows = logs.map(log => [log.id || '', log.timestamp || '', log.type || '', log.user || 'Sistema', log.message || '', log.details ? JSON.stringify(log.details) : '']);\n\n    // Combinar cabeceras y filas\n    const csvContent = [headers.join(','), ...rows.map(row => row.map(cell => `\"${String(cell).replace(/\"/g, '\"\"')}\"`).join(','))].join('\\n');\n    return {\n      success: true,\n      data: csvContent,\n      message: 'Logs descargados correctamente'\n    };\n  } catch (error) {\n    console.error('Error al descargar logs en CSV:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al descargar logs'\n    };\n  }\n}\n\n/**\n * Obtiene un elemento del menú por su ID\n * @param {string} itemId - ID del elemento a obtener\n * @returns {Promise<Object>} Elemento del menú\n */\nexport async function getMenuItem(itemId) {\n  try {\n    // En desarrollo, usar el servicio de almacenamiento local\n    if (process.env.NODE_ENV === 'development') {\n      const menuItems = await storageService.getMenuItems();\n      const item = menuItems.find(item => item.id === itemId);\n      if (!item) {\n        return {\n          success: false,\n          message: 'Elemento no encontrado'\n        };\n      }\n      return {\n        success: true,\n        data: item\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    const response = await apiService.get(`/admin/menu-items/${itemId}`);\n    return response;\n  } catch (error) {\n    console.error(`Error al obtener elemento del menú con ID ${itemId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Obtiene los roles disponibles en el sistema\n * @returns {Promise<Object>} Lista de roles\n */\nexport async function getRoles() {\n  try {\n    // En desarrollo, devolver roles simulados\n    if (process.env.NODE_ENV === 'development') {\n      return {\n        success: true,\n        data: [{\n          id: 1,\n          nombre: 'Superadministrador',\n          descripcion: 'Control total del sistema'\n        }, {\n          id: 2,\n          nombre: 'Administrador',\n          descripcion: 'Gestión de usuarios y configuración'\n        }, {\n          id: 3,\n          nombre: 'Empleado',\n          descripcion: 'Operaciones básicas'\n        }]\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    const response = await apiService.get('/admin/roles');\n    return response;\n  } catch (error) {\n    console.error('Error al obtener roles:', error);\n    return {\n      success: false,\n      message: error.message,\n      data: []\n    };\n  }\n}\n\n/**\n * Crea un nuevo usuario\n * @param {Object} userData - Datos del nuevo usuario\n * @returns {Promise<Object>} Resultado de la operación\n */\nexport async function createUser(userData) {\n  try {\n    // En desarrollo, simular creación\n    if (process.env.NODE_ENV === 'development') {\n      // Validar datos mínimos\n      if (!userData.nombre || !userData.email || !userData.password) {\n        return {\n          success: false,\n          message: 'Faltan datos obligatorios'\n        };\n      }\n\n      // Verificar si el correo ya existe\n      const existingUser = localUsers.find(user => user.email === userData.email);\n      if (existingUser) {\n        return {\n          success: false,\n          message: 'El correo electrónico ya está registrado'\n        };\n      }\n\n      // Generar ID único\n      const newId = localUsers.length > 0 ? Math.max(...localUsers.map(user => user.id)) + 1 : 1;\n\n      // Crear nuevo usuario\n      const newUser = {\n        id: newId,\n        nombre: userData.nombre,\n        email: userData.email,\n        telefono: userData.telefono || '',\n        // En un entorno real, la contraseña se hashearía\n        password: userData.password,\n        roles: userData.roles || ['Empleado'],\n        estado: 'activo',\n        fecha_creacion: new Date().toISOString()\n      };\n\n      // Añadir a la lista local\n      localUsers.push(newUser);\n      console.log(`Usuario creado: ${newUser.nombre} (${newUser.email})`);\n      return {\n        success: true,\n        message: 'Usuario creado correctamente',\n        data: {\n          id: newUser.id,\n          nombre: newUser.nombre,\n          email: newUser.email,\n          roles: newUser.roles,\n          estado: newUser.estado\n        }\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    const response = await apiService.post('/admin/users', userData);\n    return response;\n  } catch (error) {\n    console.error('Error al crear usuario:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al crear usuario'\n    };\n  }\n}\n\n/**\n * Actualiza un usuario existente\n * @param {number} userId - ID del usuario a actualizar\n * @param {Object} userData - Nuevos datos del usuario\n * @returns {Promise<Object>} Resultado de la operación\n */\nexport async function updateUser(userId, userData) {\n  try {\n    // En desarrollo, simular actualización\n    if (process.env.NODE_ENV === 'development') {\n      // Buscar usuario por ID\n      const userIndex = localUsers.findIndex(user => user.id === userId);\n      if (userIndex === -1) {\n        return {\n          success: false,\n          message: 'Usuario no encontrado'\n        };\n      }\n\n      // Actualizar datos\n      const updatedUser = {\n        ...localUsers[userIndex],\n        ...userData,\n        // Mantener ID y correo original\n        id: userId,\n        email: localUsers[userIndex].email\n      };\n\n      // Actualizar en la lista local\n      localUsers[userIndex] = updatedUser;\n      console.log(`Usuario actualizado: ${updatedUser.nombre} (ID: ${updatedUser.id})`);\n      return {\n        success: true,\n        message: 'Usuario actualizado correctamente',\n        data: {\n          id: updatedUser.id,\n          nombre: updatedUser.nombre,\n          email: updatedUser.email,\n          roles: updatedUser.roles,\n          estado: updatedUser.estado\n        }\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    const response = await apiService.put(`/admin/users/${userId}`, userData);\n    return response;\n  } catch (error) {\n    console.error('Error al actualizar usuario:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al actualizar usuario'\n    };\n  }\n}\n\n/**\n * Cambia el estado de un usuario (activo/inactivo)\n * @param {number} userId - ID del usuario\n * @param {string} estado - Nuevo estado ('activo' o 'inactivo')\n * @returns {Promise<Object>} Resultado de la operación\n */\nexport async function cambiarEstadoUsuario(userId, estado) {\n  try {\n    // Validar estado\n    if (estado !== 'activo' && estado !== 'inactivo') {\n      return {\n        success: false,\n        message: 'Estado inválido'\n      };\n    }\n\n    // En desarrollo, simular cambio de estado\n    if (process.env.NODE_ENV === 'development') {\n      // Buscar usuario por ID\n      const userIndex = localUsers.findIndex(user => user.id === userId);\n      if (userIndex === -1) {\n        return {\n          success: false,\n          message: 'Usuario no encontrado'\n        };\n      }\n\n      // Actualizar estado\n      localUsers[userIndex].estado = estado;\n      console.log(`Estado de usuario ${userId} cambiado a: ${estado}`);\n      return {\n        success: true,\n        message: `Usuario ${estado === 'activo' ? 'activado' : 'desactivado'} correctamente`,\n        data: {\n          id: localUsers[userIndex].id,\n          estado: localUsers[userIndex].estado\n        }\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    const response = await apiService.put(`/admin/users/${userId}/estado`, {\n      estado\n    });\n    return response;\n  } catch (error) {\n    console.error('Error al cambiar estado de usuario:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al cambiar estado de usuario'\n    };\n  }\n}\n\n/**\n * Elimina un usuario\n * @param {number} userId - ID del usuario a eliminar\n * @returns {Promise<Object>} Resultado de la operación\n */\nexport async function deleteUser(userId) {\n  try {\n    // En desarrollo, simular eliminación\n    if (process.env.NODE_ENV === 'development') {\n      // Buscar usuario por ID\n      const userIndex = localUsers.findIndex(user => user.id === userId);\n      if (userIndex === -1) {\n        return {\n          success: false,\n          message: 'Usuario no encontrado'\n        };\n      }\n\n      // Eliminar de la lista local\n      const deletedUser = localUsers.splice(userIndex, 1)[0];\n      console.log(`Usuario eliminado: ${deletedUser.nombre} (ID: ${deletedUser.id})`);\n      return {\n        success: true,\n        message: 'Usuario eliminado correctamente'\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    const response = await apiService.delete(`/admin/users/${userId}`);\n    return response;\n  } catch (error) {\n    console.error('Error al eliminar usuario:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al eliminar usuario'\n    };\n  }\n}\n\n/**\n * Realiza un respaldo del sistema\n * @returns {Promise<Object>} Resultado de la operación\n */\nexport async function createBackup() {\n  try {\n    // En desarrollo, simular respaldo\n    if (process.env.NODE_ENV === 'development') {\n      // Simular tiempo de procesamiento\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      const backupId = Date.now().toString();\n      const backupDate = new Date().toISOString();\n      console.log(`Respaldo creado: ${backupId} (${backupDate})`);\n      return {\n        success: true,\n        message: 'Respaldo creado correctamente',\n        data: {\n          id: backupId,\n          fecha: backupDate,\n          tamaño: '2.3 MB',\n          estado: 'Completado'\n        }\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    const response = await apiService.post('/admin/backups');\n    return response;\n  } catch (error) {\n    console.error('Error al crear respaldo:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al crear respaldo'\n    };\n  }\n}\n\n/**\n * Obtiene la lista de respaldos\n * @returns {Promise<Object>} Lista de respaldos\n */\nexport async function getBackups() {\n  try {\n    // En desarrollo, devolver respaldos simulados\n    if (process.env.NODE_ENV === 'development') {\n      const now = Date.now();\n      return {\n        success: true,\n        data: [{\n          id: '1',\n          fecha: new Date(now - 3600000).toISOString(),\n          // 1 hora atrás\n          tamaño: '2.3 MB',\n          usuario: 'Admin',\n          estado: 'Completado',\n          tipo: 'Manual'\n        }, {\n          id: '2',\n          fecha: new Date(now - 86400000).toISOString(),\n          // 1 día atrás\n          tamaño: '2.1 MB',\n          usuario: 'Sistema',\n          estado: 'Completado',\n          tipo: 'Automático'\n        }, {\n          id: '3',\n          fecha: new Date(now - 172800000).toISOString(),\n          // 2 días atrás\n          tamaño: '2.0 MB',\n          usuario: 'Sistema',\n          estado: 'Completado',\n          tipo: 'Automático'\n        }]\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    const response = await apiService.get('/admin/backups');\n    return response;\n  } catch (error) {\n    console.error('Error al obtener respaldos:', error);\n    return {\n      success: false,\n      message: error.message,\n      data: []\n    };\n  }\n}\n\n/**\n * Restaura el sistema desde un respaldo\n * @param {string} backupId - ID del respaldo a restaurar\n * @returns {Promise<Object>} Resultado de la operación\n */\nexport async function restoreBackup(backupId) {\n  try {\n    // En desarrollo, simular restauración\n    if (process.env.NODE_ENV === 'development') {\n      // Simular tiempo de procesamiento\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      console.log(`Restauración desde respaldo ${backupId} completada`);\n      return {\n        success: true,\n        message: 'Sistema restaurado correctamente'\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    const response = await apiService.post(`/admin/backups/${backupId}/restore`);\n    return response;\n  } catch (error) {\n    console.error('Error al restaurar desde respaldo:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al restaurar desde respaldo'\n    };\n  }\n}\n\n/**\n * Elimina un respaldo\n * @param {string} backupId - ID del respaldo a eliminar\n * @returns {Promise<Object>} Resultado de la operación\n */\nexport async function deleteBackup(backupId) {\n  try {\n    // En desarrollo, simular eliminación\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`Respaldo ${backupId} eliminado`);\n      return {\n        success: true,\n        message: 'Respaldo eliminado correctamente'\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    const response = await apiService.delete(`/admin/backups/${backupId}`);\n    return response;\n  } catch (error) {\n    console.error('Error al eliminar respaldo:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al eliminar respaldo'\n    };\n  }\n}","map":{"version":3,"names":["storageService","apiService","localUsers","getDashboardStats","process","env","NODE_ENV","usersResponse","getUsers","userCount","success","Array","isArray","data","length","activeUsers","filter","user","estado","Math","floor","inactiveUsers","console","log","totalUsers","activePayments","pendingPayments","overduePayments","totalIncome","status","lastBackup","Date","toISOString","recentActivity","tipo","usuario_nombre","accion","fecha","now","response","get","error","getMenuItems","menuItems","message","getSoldItems","id","name","quantity","price","options","apiError","warn","mockUsers","nombre","email","rol","ultimo_acceso","getLogs","Promise","resolve","setTimeout","timestamp","type","details","ip","userAgent","attempts","code","newUser","downloadLogsCSV","logsResponse","Error","logs","headers","rows","map","JSON","stringify","csvContent","join","row","cell","String","replace","getMenuItem","itemId","item","find","getRoles","descripcion","createUser","userData","password","existingUser","newId","max","telefono","roles","fecha_creacion","push","post","updateUser","userId","userIndex","findIndex","updatedUser","put","cambiarEstadoUsuario","deleteUser","deletedUser","splice","delete","createBackup","backupId","toString","backupDate","tamaño","getBackups","usuario","restoreBackup","deleteBackup"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/adminService.js"],"sourcesContent":["/**\n * Servicio para gestionar las operaciones administrativas\n */\nimport * as storageService from './storageService';\nimport apiService from './apiService';\n\n// Lista local de usuarios para mantener estado entre llamadas\nlet localUsers = [];\n\n/**\n * Obtiene estadísticas para el dashboard de administrador\n * @returns {Promise<Object>} Estadísticas del sistema\n */\nexport async function getDashboardStats() {\n  try {\n    // En desarrollo, devolver datos simulados pero con lógica para actualizarlos\n    if (process.env.NODE_ENV === 'development') {\n      // Obtener usuarios actuales para tener un conteo real\n      const usersResponse = await getUsers();\n      \n      const userCount = (usersResponse && usersResponse.success && Array.isArray(usersResponse.data)) \n        ? usersResponse.data.length \n        : 45; // Valor por defecto si no podemos obtener el conteo real\n\n      // Calcular usuarios activos/inactivos\n      const activeUsers = usersResponse && usersResponse.success && Array.isArray(usersResponse.data)\n        ? usersResponse.data.filter(user => user.estado === 'activo').length\n        : Math.floor(userCount * 0.75); // Aproximadamente 75% activos por defecto\n        \n      const inactiveUsers = userCount - activeUsers;\n\n      console.log(`Estadísticas actualizadas: ${userCount} usuarios totales (${activeUsers} activos, ${inactiveUsers} inactivos)`);\n\n      return {\n        success: true,\n        data: {\n          totalUsers: userCount,\n          activeUsers: activeUsers,\n          inactiveUsers: inactiveUsers,\n          activePayments: 28,\n          pendingPayments: 8,\n          overduePayments: 3,\n          totalIncome: 15750000,\n          status: 'Normal',\n          lastBackup: new Date().toISOString(),\n          recentActivity: [\n            // Añadir actividad reciente de creación de usuario si se ha creado uno recientemente\n            {\n              tipo: 'user_login',\n              usuario_nombre: 'Admin',\n              accion: 'inició sesión en el sistema',\n              fecha: new Date().toISOString()\n            },\n            {\n              tipo: 'system',\n              usuario_nombre: 'Sistema',\n              accion: 'realizó una sincronización de datos',\n              fecha: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n            }\n          ]\n        }\n      };\n    }\n    \n    // En producción, hacer la llamada a la API real\n    const response = await apiService.get('/admin/dashboard');\n    return response;\n  } catch (error) {\n    console.error('Error al obtener estadísticas del dashboard:', error);\n    \n    // En caso de error, devolver datos simulados básicos\n    return {\n      success: true,\n      data: {\n        totalUsers: 45,\n        activeUsers: 38,\n        inactiveUsers: 7,\n        activePayments: 28,\n        pendingPayments: 8,\n        overduePayments: 3,\n        totalIncome: 15750000,\n        status: 'Normal',\n        lastBackup: new Date().toISOString(),\n        recentActivity: [\n          {\n            tipo: 'system',\n            usuario_nombre: 'Sistema',\n            accion: 'inició en modo de respaldo',\n            fecha: new Date().toISOString()\n          }\n        ]\n      }\n    };\n  }\n}\n\n/**\n * Obtiene los elementos del menú\n * @returns {Promise<Object>} Lista de elementos del menú\n */\nexport async function getMenuItems() {\n  try {\n    // En desarrollo, simular llamada a la API\n    if (process.env.NODE_ENV === 'development') {\n      // Obtener datos del servicio de almacenamiento\n      const menuItems = await storageService.getMenuItems();\n      return {\n        success: true,\n        data: menuItems,\n      };\n    }\n    \n    // En producción, hacer la llamada a la API real\n    const response = await apiService.get('/admin/menu-items');\n    return response;\n  } catch (error) {\n    console.error('Error al obtener elementos del menú:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener elementos del menú'\n    };\n  }\n}\n\n/**\n * Obtiene los elementos vendidos para el inventario\n * @returns {Promise<Object>} Lista de elementos vendidos\n */\nexport async function getSoldItems() {\n  try {\n    // En desarrollo, simular llamada a la API\n    if (process.env.NODE_ENV === 'development') {\n      return {\n        success: true,\n        data: [\n          { id: 1, name: 'Hamburguesa Clásica', quantity: 45, price: 12000 },\n          { id: 2, name: 'Pizza Margherita', quantity: 38, price: 18000 },\n          { id: 3, name: 'Ensalada César', quantity: 22, price: 9000 },\n          { id: 4, name: 'Pasta Carbonara', quantity: 30, price: 15000 },\n          { id: 5, name: 'Sushi Variado', quantity: 15, price: 25000 }\n        ]\n      };\n    }\n    \n    // En producción, hacer la llamada a la API real\n    const response = await apiService.get('/admin/sold-items');\n    return response;\n  } catch (error) {\n    console.error('Error al obtener elementos vendidos:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener elementos vendidos'\n    };\n  }\n}\n\n/**\n * Obtiene los usuarios del sistema\n * @param {Object} options Opciones de filtrado y paginación\n * @returns {Promise<Array>} Lista de usuarios\n */\nexport async function getUsers(options = {}) {\n  try {\n    // Intentar obtener los usuarios desde la API\n    try {\n      const response = await apiService.get('/admin/users', options);\n      if (response && response.success) {\n        localUsers = response.data || [];\n        return {\n          success: true,\n          data: localUsers\n        };\n      }\n    } catch (apiError) {\n      console.warn('Error al obtener usuarios desde la API, usando datos locales:', apiError);\n      \n      // Si estamos en modo de desarrollo y la API falla, usar datos simulados\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Usando datos de usuarios simulados en modo desarrollo');\n        \n        // Si ya tenemos usuarios locales, devolverlos\n        if (localUsers.length > 0) {\n          return {\n            success: true,\n            data: localUsers\n          };\n        }\n        \n        // Generar datos de ejemplo si no tenemos usuarios locales\n        const mockUsers = [\n          {\n            id: 1,\n            nombre: 'Admin Principal',\n            email: 'admin@ejemplo.com',\n            rol: 'Superadministrador',\n            estado: 'activo',\n            ultimo_acceso: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n          },\n          {\n            id: 2,\n            nombre: 'Juan Pérez',\n            email: 'juan@ejemplo.com',\n            rol: 'Administrador',\n            estado: 'activo',\n            ultimo_acceso: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString()\n          },\n          {\n            id: 3,\n            nombre: 'María López',\n            email: 'maria@ejemplo.com',\n            rol: 'Empleado',\n            estado: 'activo',\n            ultimo_acceso: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()\n          },\n          {\n            id: 4,\n            nombre: 'Carlos Rodríguez',\n            email: 'carlos@ejemplo.com',\n            rol: 'Empleado',\n            estado: 'inactivo',\n            ultimo_acceso: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()\n          }\n        ];\n        \n        // Guardar los usuarios simulados en la variable local\n        localUsers = mockUsers;\n        \n        return {\n          success: true,\n          data: mockUsers\n        };\n      }\n      \n      // Si no estamos en desarrollo, propagar el error\n      throw apiError;\n    }\n    \n    // Si llegamos aquí es porque la API devolvió éxito pero sin datos\n    return {\n      success: false,\n      error: 'No se pudieron obtener los usuarios'\n    };\n  } catch (error) {\n    console.error('Error al obtener usuarios:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener usuarios'\n    };\n  }\n}\n\n/**\n * Obtiene los registros del sistema\n * @returns {Promise<Object>} Lista de logs\n */\nexport async function getLogs() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        data: [\n          {\n            id: 1,\n            timestamp: new Date().toISOString(),\n            type: 'info',\n            user: 'Admin',\n            message: 'Inicio de sesión exitoso',\n            details: { ip: '192.168.1.1', userAgent: 'Chrome/96.0' }\n          },\n          {\n            id: 2,\n            timestamp: new Date(Date.now() - 3600000).toISOString(), // 1 hora atrás\n            type: 'warning',\n            user: 'Sistema',\n            message: 'Intento de acceso fallido',\n            details: { ip: '203.0.113.1', userAgent: 'Edge/96.0', attempts: 3 }\n          },\n          {\n            id: 3,\n            timestamp: new Date(Date.now() - 7200000).toISOString(), // 2 horas atrás\n            type: 'error',\n            user: 'Sistema',\n            message: 'Error en la creación de backup',\n            details: { error: 'Espacio insuficiente', code: 'E0023' }\n          },\n          {\n            id: 4,\n            timestamp: new Date(Date.now() - 86400000).toISOString(), // 1 día atrás\n            type: 'success',\n            user: 'Juan Pérez',\n            message: 'Nuevo usuario creado',\n            details: { newUser: 'carlos@ejemplo.com' }\n          }\n        ]\n      });\n    }, 500);\n  });\n}\n\n/**\n * Descarga los registros del sistema en formato CSV\n * @returns {Promise<Object>} Resultado de la operación con datos CSV\n */\nexport async function downloadLogsCSV() {\n  try {\n    // Primero obtenemos los logs\n    const logsResponse = await getLogs();\n    \n    if (!logsResponse.success || !Array.isArray(logsResponse.data)) {\n      throw new Error('No se pudieron obtener los logs para descargar');\n    }\n    \n    // Convertir los logs a formato CSV\n    const logs = logsResponse.data;\n    \n    // Cabeceras del CSV\n    const headers = ['ID', 'Fecha', 'Tipo', 'Usuario', 'Mensaje', 'Detalles'];\n    \n    // Filas de datos\n    const rows = logs.map(log => [\n      log.id || '',\n      log.timestamp || '',\n      log.type || '',\n      log.user || 'Sistema',\n      log.message || '',\n      log.details ? JSON.stringify(log.details) : ''\n    ]);\n    \n    // Combinar cabeceras y filas\n    const csvContent = [\n      headers.join(','),\n      ...rows.map(row => row.map(cell => `\"${String(cell).replace(/\"/g, '\"\"')}\"`).join(','))\n    ].join('\\n');\n    \n    return {\n      success: true,\n      data: csvContent,\n      message: 'Logs descargados correctamente'\n    };\n  } catch (error) {\n    console.error('Error al descargar logs en CSV:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al descargar logs'\n    };\n  }\n}\n\n/**\n * Obtiene un elemento del menú por su ID\n * @param {string} itemId - ID del elemento a obtener\n * @returns {Promise<Object>} Elemento del menú\n */\nexport async function getMenuItem(itemId) {\n  try {\n    // En desarrollo, usar el servicio de almacenamiento local\n    if (process.env.NODE_ENV === 'development') {\n      const menuItems = await storageService.getMenuItems();\n      const item = menuItems.find(item => item.id === itemId);\n      \n      if (!item) {\n        return {\n          success: false,\n          message: 'Elemento no encontrado'\n        };\n      }\n      \n      return {\n        success: true,\n        data: item\n      };\n    }\n    \n    // En producción, hacer la llamada a la API real\n    const response = await apiService.get(`/admin/menu-items/${itemId}`);\n    return response;\n  } catch (error) {\n    console.error(`Error al obtener elemento del menú con ID ${itemId}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Obtiene los roles disponibles en el sistema\n * @returns {Promise<Object>} Lista de roles\n */\nexport async function getRoles() {\n  try {\n    // En desarrollo, devolver roles simulados\n    if (process.env.NODE_ENV === 'development') {\n      return {\n        success: true,\n        data: [\n          { id: 1, nombre: 'Superadministrador', descripcion: 'Control total del sistema' },\n          { id: 2, nombre: 'Administrador', descripcion: 'Gestión de usuarios y configuración' },\n          { id: 3, nombre: 'Empleado', descripcion: 'Operaciones básicas' }\n        ]\n      };\n    }\n    \n    // En producción, hacer la llamada a la API real\n    const response = await apiService.get('/admin/roles');\n    return response;\n  } catch (error) {\n    console.error('Error al obtener roles:', error);\n    return {\n      success: false,\n      message: error.message,\n      data: []\n    };\n  }\n}\n\n/**\n * Crea un nuevo usuario\n * @param {Object} userData - Datos del nuevo usuario\n * @returns {Promise<Object>} Resultado de la operación\n */\nexport async function createUser(userData) {\n  try {\n    // En desarrollo, simular creación\n    if (process.env.NODE_ENV === 'development') {\n      // Validar datos mínimos\n      if (!userData.nombre || !userData.email || !userData.password) {\n        return {\n          success: false,\n          message: 'Faltan datos obligatorios'\n        };\n      }\n      \n      // Verificar si el correo ya existe\n      const existingUser = localUsers.find(user => user.email === userData.email);\n      if (existingUser) {\n        return {\n          success: false,\n          message: 'El correo electrónico ya está registrado'\n        };\n      }\n      \n      // Generar ID único\n      const newId = localUsers.length > 0 \n        ? Math.max(...localUsers.map(user => user.id)) + 1 \n        : 1;\n      \n      // Crear nuevo usuario\n      const newUser = {\n        id: newId,\n        nombre: userData.nombre,\n        email: userData.email,\n        telefono: userData.telefono || '',\n        // En un entorno real, la contraseña se hashearía\n        password: userData.password,\n        roles: userData.roles || ['Empleado'],\n        estado: 'activo',\n        fecha_creacion: new Date().toISOString()\n      };\n      \n      // Añadir a la lista local\n      localUsers.push(newUser);\n      \n      console.log(`Usuario creado: ${newUser.nombre} (${newUser.email})`);\n      \n      return {\n        success: true,\n        message: 'Usuario creado correctamente',\n        data: {\n          id: newUser.id,\n          nombre: newUser.nombre,\n          email: newUser.email,\n          roles: newUser.roles,\n          estado: newUser.estado\n        }\n      };\n    }\n    \n    // En producción, hacer la llamada a la API real\n    const response = await apiService.post('/admin/users', userData);\n    return response;\n  } catch (error) {\n    console.error('Error al crear usuario:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al crear usuario'\n    };\n  }\n}\n\n/**\n * Actualiza un usuario existente\n * @param {number} userId - ID del usuario a actualizar\n * @param {Object} userData - Nuevos datos del usuario\n * @returns {Promise<Object>} Resultado de la operación\n */\nexport async function updateUser(userId, userData) {\n  try {\n    // En desarrollo, simular actualización\n    if (process.env.NODE_ENV === 'development') {\n      // Buscar usuario por ID\n      const userIndex = localUsers.findIndex(user => user.id === userId);\n      \n      if (userIndex === -1) {\n        return {\n          success: false,\n          message: 'Usuario no encontrado'\n        };\n      }\n      \n      // Actualizar datos\n      const updatedUser = {\n        ...localUsers[userIndex],\n        ...userData,\n        // Mantener ID y correo original\n        id: userId,\n        email: localUsers[userIndex].email\n      };\n      \n      // Actualizar en la lista local\n      localUsers[userIndex] = updatedUser;\n      \n      console.log(`Usuario actualizado: ${updatedUser.nombre} (ID: ${updatedUser.id})`);\n      \n      return {\n        success: true,\n        message: 'Usuario actualizado correctamente',\n        data: {\n          id: updatedUser.id,\n          nombre: updatedUser.nombre,\n          email: updatedUser.email,\n          roles: updatedUser.roles,\n          estado: updatedUser.estado\n        }\n      };\n    }\n    \n    // En producción, hacer la llamada a la API real\n    const response = await apiService.put(`/admin/users/${userId}`, userData);\n    return response;\n  } catch (error) {\n    console.error('Error al actualizar usuario:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al actualizar usuario'\n    };\n  }\n}\n\n/**\n * Cambia el estado de un usuario (activo/inactivo)\n * @param {number} userId - ID del usuario\n * @param {string} estado - Nuevo estado ('activo' o 'inactivo')\n * @returns {Promise<Object>} Resultado de la operación\n */\nexport async function cambiarEstadoUsuario(userId, estado) {\n  try {\n    // Validar estado\n    if (estado !== 'activo' && estado !== 'inactivo') {\n      return {\n        success: false,\n        message: 'Estado inválido'\n      };\n    }\n    \n    // En desarrollo, simular cambio de estado\n    if (process.env.NODE_ENV === 'development') {\n      // Buscar usuario por ID\n      const userIndex = localUsers.findIndex(user => user.id === userId);\n      \n      if (userIndex === -1) {\n        return {\n          success: false,\n          message: 'Usuario no encontrado'\n        };\n      }\n      \n      // Actualizar estado\n      localUsers[userIndex].estado = estado;\n      \n      console.log(`Estado de usuario ${userId} cambiado a: ${estado}`);\n      \n      return {\n        success: true,\n        message: `Usuario ${estado === 'activo' ? 'activado' : 'desactivado'} correctamente`,\n        data: {\n          id: localUsers[userIndex].id,\n          estado: localUsers[userIndex].estado\n        }\n      };\n    }\n    \n    // En producción, hacer la llamada a la API real\n    const response = await apiService.put(`/admin/users/${userId}/estado`, { estado });\n    return response;\n  } catch (error) {\n    console.error('Error al cambiar estado de usuario:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al cambiar estado de usuario'\n    };\n  }\n}\n\n/**\n * Elimina un usuario\n * @param {number} userId - ID del usuario a eliminar\n * @returns {Promise<Object>} Resultado de la operación\n */\nexport async function deleteUser(userId) {\n  try {\n    // En desarrollo, simular eliminación\n    if (process.env.NODE_ENV === 'development') {\n      // Buscar usuario por ID\n      const userIndex = localUsers.findIndex(user => user.id === userId);\n      \n      if (userIndex === -1) {\n        return {\n          success: false,\n          message: 'Usuario no encontrado'\n        };\n      }\n      \n      // Eliminar de la lista local\n      const deletedUser = localUsers.splice(userIndex, 1)[0];\n      \n      console.log(`Usuario eliminado: ${deletedUser.nombre} (ID: ${deletedUser.id})`);\n      \n      return {\n        success: true,\n        message: 'Usuario eliminado correctamente'\n      };\n    }\n    \n    // En producción, hacer la llamada a la API real\n    const response = await apiService.delete(`/admin/users/${userId}`);\n    return response;\n  } catch (error) {\n    console.error('Error al eliminar usuario:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al eliminar usuario'\n    };\n  }\n}\n\n/**\n * Realiza un respaldo del sistema\n * @returns {Promise<Object>} Resultado de la operación\n */\nexport async function createBackup() {\n  try {\n    // En desarrollo, simular respaldo\n    if (process.env.NODE_ENV === 'development') {\n      // Simular tiempo de procesamiento\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      const backupId = Date.now().toString();\n      const backupDate = new Date().toISOString();\n      \n      console.log(`Respaldo creado: ${backupId} (${backupDate})`);\n      \n      return {\n        success: true,\n        message: 'Respaldo creado correctamente',\n        data: {\n          id: backupId,\n          fecha: backupDate,\n          tamaño: '2.3 MB',\n          estado: 'Completado'\n        }\n      };\n    }\n    \n    // En producción, hacer la llamada a la API real\n    const response = await apiService.post('/admin/backups');\n    return response;\n  } catch (error) {\n    console.error('Error al crear respaldo:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al crear respaldo'\n    };\n  }\n}\n\n/**\n * Obtiene la lista de respaldos\n * @returns {Promise<Object>} Lista de respaldos\n */\nexport async function getBackups() {\n  try {\n    // En desarrollo, devolver respaldos simulados\n    if (process.env.NODE_ENV === 'development') {\n      const now = Date.now();\n      \n      return {\n        success: true,\n        data: [\n          {\n            id: '1',\n            fecha: new Date(now - 3600000).toISOString(), // 1 hora atrás\n            tamaño: '2.3 MB',\n            usuario: 'Admin',\n            estado: 'Completado',\n            tipo: 'Manual'\n          },\n          {\n            id: '2',\n            fecha: new Date(now - 86400000).toISOString(), // 1 día atrás\n            tamaño: '2.1 MB',\n            usuario: 'Sistema',\n            estado: 'Completado',\n            tipo: 'Automático'\n          },\n          {\n            id: '3',\n            fecha: new Date(now - 172800000).toISOString(), // 2 días atrás\n            tamaño: '2.0 MB',\n            usuario: 'Sistema',\n            estado: 'Completado',\n            tipo: 'Automático'\n          }\n        ]\n      };\n    }\n    \n    // En producción, hacer la llamada a la API real\n    const response = await apiService.get('/admin/backups');\n    return response;\n  } catch (error) {\n    console.error('Error al obtener respaldos:', error);\n    return {\n      success: false,\n      message: error.message,\n      data: []\n    };\n  }\n}\n\n/**\n * Restaura el sistema desde un respaldo\n * @param {string} backupId - ID del respaldo a restaurar\n * @returns {Promise<Object>} Resultado de la operación\n */\nexport async function restoreBackup(backupId) {\n  try {\n    // En desarrollo, simular restauración\n    if (process.env.NODE_ENV === 'development') {\n      // Simular tiempo de procesamiento\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      console.log(`Restauración desde respaldo ${backupId} completada`);\n      \n      return {\n        success: true,\n        message: 'Sistema restaurado correctamente'\n      };\n    }\n    \n    // En producción, hacer la llamada a la API real\n    const response = await apiService.post(`/admin/backups/${backupId}/restore`);\n    return response;\n  } catch (error) {\n    console.error('Error al restaurar desde respaldo:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al restaurar desde respaldo'\n    };\n  }\n}\n\n/**\n * Elimina un respaldo\n * @param {string} backupId - ID del respaldo a eliminar\n * @returns {Promise<Object>} Resultado de la operación\n */\nexport async function deleteBackup(backupId) {\n  try {\n    // En desarrollo, simular eliminación\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`Respaldo ${backupId} eliminado`);\n      \n      return {\n        success: true,\n        message: 'Respaldo eliminado correctamente'\n      };\n    }\n    \n    // En producción, hacer la llamada a la API real\n    const response = await apiService.delete(`/admin/backups/${backupId}`);\n    return response;\n  } catch (error) {\n    console.error('Error al eliminar respaldo:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al eliminar respaldo'\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}