{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { getBusinessInfo, compressImage, checkItemAvailability } from './storageService';\nconst DB_NAME = 'websapDatabase';\nconst DB_VERSION = 3; // Debe coincidir con el resto de servicios\nconst SHARED_MENU_STORE = 'sharedMenus';\nconst IMAGE_STORE = 'menuImages';\n\n// Abrir la conexión a la base de datos\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      console.log(\"Intentando abrir la base de datos con versión:\", DB_VERSION);\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\n        reject('Error al abrir la base de datos: ' + event.target.errorCode);\n      };\n      request.onsuccess = event => {\n        const db = event.target.result;\n        console.log(\"Base de datos abierta con éxito, versión:\", db.version);\n\n        // Verificar que todos los almacenes necesarios existen\n        const existingStores = Array.from(db.objectStoreNames);\n        console.log(\"Almacenes existentes:\", existingStores);\n        if (!existingStores.includes(SHARED_MENU_STORE)) {\n          console.error(`El almacén ${SHARED_MENU_STORE} no existe en la base de datos`);\n          reject(new Error(`El almacén ${SHARED_MENU_STORE} no existe en la base de datos`));\n          return;\n        }\n        resolve(db);\n      };\n      request.onupgradeneeded = event => {\n        console.log(\"Actualizando estructura de la base de datos a versión:\", event.newVersion);\n        const db = event.target.result;\n\n        // Crear almacén para menús compartidos si no existe\n        if (!db.objectStoreNames.contains(SHARED_MENU_STORE)) {\n          console.log('Creando almacén:', SHARED_MENU_STORE);\n          db.createObjectStore(SHARED_MENU_STORE, {\n            keyPath: 'id'\n          });\n        }\n\n        // Crear almacén para imágenes si no existe\n        if (!db.objectStoreNames.contains(IMAGE_STORE)) {\n          console.log('Creando almacén:', IMAGE_STORE);\n          db.createObjectStore(IMAGE_STORE, {\n            keyPath: 'id'\n          });\n        }\n      };\n    } catch (error) {\n      console.error(\"Error crítico en IndexedDB:\", error);\n      reject(error);\n    }\n  });\n}\n\n/**\n * Genera un ID único para un menú\n * @returns {string} Un ID único\n */\nfunction generateMenuId() {\n  return Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10);\n}\n\n/**\n * Guarda un menú compartido y devuelve su ID\n * @param {Array} menuItems - Elementos del menú a guardar\n * @returns {Promise<String>} - ID del menú compartido\n */\nexport async function saveMenu(menuItems) {\n  try {\n    // Generar un ID único para el menú compartido\n    const menuId = generateMenuId();\n\n    // Obtener información del negocio para incluirla en el menú compartido\n    const businessInfo = await getBusinessInfo();\n\n    // Preprocesar los elementos del menú - comprimir imágenes y normalizar isSpecial\n    const processedItems = await Promise.all(menuItems.map(async item => {\n      const processedItem = {\n        ...item\n      };\n      processedItem.isSpecial = Boolean(item.isSpecial);\n      console.log(`[saveMenu] Guardando ${item.name} con isSpecial=${processedItem.isSpecial}`);\n\n      // Comprimir la imagen si existe\n      if (processedItem.image && typeof processedItem.image === 'string' && processedItem.image.length > 0) {\n        try {\n          // Usar una calidad más baja para compartir\n          processedItem.image = await compressImage(processedItem.image, 400, 300, 0.5);\n        } catch (err) {\n          console.warn('Error al comprimir imagen:', err);\n          processedItem.image = null;\n        }\n      }\n      return processedItem;\n    }));\n\n    // Crear objeto del menú con información del negocio incluida\n    const menuData = {\n      id: menuId,\n      items: processedItems,\n      businessInfo: businessInfo,\n      // Incluir la información del negocio (con datos de pago)\n      createdAt: new Date().toISOString()\n    };\n\n    // Verificar tamaño del objeto\n    try {\n      const jsonSize = JSON.stringify(menuData).length / (1024 * 1024); // Tamaño en MB\n      console.log(`Tamaño del menú a guardar: ${jsonSize.toFixed(2)} MB`);\n      if (jsonSize > 50) {\n        throw new Error(`El menú es demasiado grande (${jsonSize.toFixed(2)} MB). Reduce el tamaño de las imágenes.`);\n      }\n    } catch (error) {\n      console.error('Error al verificar tamaño del menú:', error);\n      throw new Error('Error al verificar tamaño del menú');\n    }\n\n    // Guardar en IndexedDB\n    const db = await openDatabase();\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(SHARED_MENU_STORE);\n    await new Promise((resolve, reject) => {\n      const request = store.put(menuData);\n      request.onsuccess = () => {\n        console.log(`Menú guardado exitosamente con ID: ${menuId}`);\n        resolve();\n      };\n      request.onerror = e => {\n        console.error('Error al guardar el menú:', e.target.error);\n        reject(e.target.error);\n      };\n    });\n\n    // Añadir logs de depuración\n    console.log('[saveMenu] Items a guardar:', menuItems.length);\n    console.log('[saveMenu] Items especiales:', menuItems.filter(item => item.isSpecial).length);\n    console.log('[saveMenu] Items regulares:', menuItems.filter(item => !item.isSpecial).length);\n    return menuId;\n  } catch (error) {\n    console.error('Error al guardar el menú compartido:', error);\n    throw error;\n  }\n}\n\n/**\n * Obtiene un menú compartido por su ID\n * @param {String} menuId - ID del menú compartido\n * @returns {Promise<Object>} - Datos del menú compartido\n */\nexport async function getSharedMenu(menuId) {\n  try {\n    console.log(`Intentando recuperar menú con ID: ${menuId}`);\n\n    // Verificar que tenemos un ID válido\n    if (!menuId) {\n      console.error('ID de menú no proporcionado');\n      return null;\n    }\n\n    // Primero intentamos obtener el menú desde IndexedDB\n    let menuData = null;\n    try {\n      const db = await openDatabase();\n      const transaction = db.transaction([SHARED_MENU_STORE], 'readonly');\n      const store = transaction.objectStore(SHARED_MENU_STORE);\n      menuData = await new Promise((resolve, reject) => {\n        const request = store.get(menuId);\n        request.onsuccess = () => {\n          console.log(\"Resultado de búsqueda del menú en IndexedDB:\", request.result);\n\n          // Verificar que el resultado existe antes de intentar acceder a sus propiedades\n          if (request.result) {\n            console.log('Menú recuperado desde IndexedDB:', request.result);\n\n            // Verificar que el menú tiene la propiedad items y es un array\n            if (request.result.items && Array.isArray(request.result.items)) {\n              console.log('Items especiales:', request.result.items.filter(i => i.isSpecial));\n              console.log('Items regulares:', request.result.items.filter(i => !i.isSpecial));\n            } else {\n              console.warn('El menú en IndexedDB no tiene items o no es un array:', request.result);\n            }\n          } else {\n            console.warn(`No se encontró menú con ID: ${menuId} en la base de datos local`);\n          }\n          resolve(request.result);\n        };\n        request.onerror = e => {\n          console.error('Error al recuperar el menú desde IndexedDB:', e.target.error);\n          reject(e.target.error);\n        };\n      });\n    } catch (error) {\n      console.error('Error al acceder a IndexedDB:', error);\n      // Continuamos con el flujo para intentar obtener el menú desde el servidor\n    }\n\n    // Si no encontramos el menú en IndexedDB, intentamos obtenerlo desde el servidor\n    if (!menuData) {\n      console.log(`Menú no encontrado en IndexedDB, intentando obtenerlo desde el servidor...`);\n      try {\n        // Importamos apiService usando import dinámico para evitar problemas de dependencia circular\n        const apiService = await import('./apiService');\n\n        // Hacemos la petición al servidor para obtener el menú\n        const response = await apiService.default.get(`/platos/menu/${menuId}`);\n        if (response && response.success && response.data) {\n          console.log('Menú recuperado desde el servidor:', response.data);\n          menuData = response.data;\n\n          // Guardamos el menú en IndexedDB para futuras consultas\n          try {\n            await saveSharedMenu(menuData);\n            console.log('Menú guardado en IndexedDB para uso futuro');\n          } catch (saveError) {\n            console.error('Error al guardar el menú en IndexedDB:', saveError);\n            // Continuamos aunque no se pueda guardar en IndexedDB\n          }\n        } else {\n          console.warn('No se pudo obtener el menú desde el servidor:', response);\n        }\n      } catch (apiError) {\n        console.error('Error al obtener el menú desde el servidor:', apiError);\n        // Si hay un error al obtener desde el servidor, continuamos con menuData = null\n      }\n    }\n\n    // Si el menú no tiene información de negocio, intentar obtenerla\n    if (menuData && !menuData.businessInfo) {\n      const businessInfo = await getBusinessInfo();\n      menuData.businessInfo = businessInfo;\n    }\n    if (!menuData) {\n      console.warn(`No se encontró menú con ID: ${menuId} ni en IndexedDB ni en el servidor`);\n    }\n\n    // Añadir logs de depuración con verificaciones de seguridad\n    console.log('[getSharedMenu] Menú recuperado:', menuData);\n\n    // Usar el operador de encadenamiento opcional para evitar errores\n    const specialItems = menuData?.items?.filter(i => i.isSpecial) || [];\n    const regularItems = menuData?.items?.filter(i => !i.isSpecial) || [];\n    console.log('[getSharedMenu] Items especiales:', specialItems.length);\n    console.log('[getSharedMenu] Items regulares:', regularItems.length);\n    return menuData;\n  } catch (error) {\n    console.error('Error al obtener el menú compartido:', error);\n    throw error;\n  }\n}\n\n/**\n * Alias para getSharedMenu para mantener compatibilidad con código existente\n * @param {String} menuId - ID del menú compartido\n * @returns {Promise<Object>} - Datos del menú compartido\n */\nexport async function getMenu(menuId) {\n  console.log('Intentando recuperar menú con ID:', menuId);\n  try {\n    const db = await openDatabase();\n    const tx = db.transaction('sharedMenus', 'readonly');\n    const store = tx.objectStore('sharedMenus');\n\n    // Obtener el menú de la base de datos\n    const request = store.get(menuId);\n    const result = await new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        console.log('Resultado de búsqueda del menú:', request.result);\n        resolve(request.result);\n      };\n      request.onerror = e => {\n        console.error('Error al recuperar el menú:', e.target.error);\n        reject(e.target.error);\n      };\n    });\n\n    // Verificar si se encontró el menú\n    if (!result) {\n      console.warn(`No se encontró menú con ID: ${menuId}`);\n      return null;\n    }\n\n    // Verificar si el menú tiene items y es un array\n    if (result && result.items && Array.isArray(result.items)) {\n      console.log('[menuService] Procesando items en getMenu()');\n\n      // Procesar cada item para normalizar isSpecial\n      const processedItems = result.items.map(item => {\n        // Si isSpecial no existe, asignar false por defecto\n        if (item.isSpecial === undefined) {\n          console.log(`[menuService] Item ${item.name || 'sin nombre'} sin propiedad isSpecial, asignando false`);\n          return {\n            ...item,\n            isSpecial: false\n          };\n        }\n\n        // Normalizar isSpecial a un valor booleano\n        const normalizedIsSpecial = item.isSpecial === true || item.isSpecial === 'true' || item.isSpecial === 1 || item.isSpecial === '1';\n        if (typeof item.isSpecial !== 'boolean') {\n          console.log(`[menuService] Normalizando isSpecial para ${item.name}: ${item.isSpecial} (${typeof item.isSpecial}) → ${normalizedIsSpecial}`);\n        }\n        return {\n          ...item,\n          isSpecial: normalizedIsSpecial\n        };\n      });\n      console.log(`[menuService] Procesados ${processedItems.length} items:`, processedItems.map(i => ({\n        name: i.name,\n        isSpecial: i.isSpecial\n      })));\n\n      // Devolver el objeto completo con los items procesados\n      return {\n        ...result,\n        items: processedItems\n      }; // Devuelve el objeto completo con los items procesados\n    } else {\n      console.warn('El menú no tiene items o no es un array:', result);\n\n      // Si no tiene items, devolver el resultado tal cual\n      return result;\n    }\n  } catch (error) {\n    console.error('Error al obtener menú compartido:', error);\n    throw error;\n  }\n}\n\n/**\n * Limpia menús antiguos que ya no son necesarios\n * @returns {Promise<void>}\n */\nexport async function cleanOldMenus() {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(SHARED_MENU_STORE);\n    const now = new Date();\n    const allMenus = await new Promise((resolve, reject) => {\n      const request = store.getAll();\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = e => {\n        console.error('Error al obtener menús:', e.target.error);\n        reject(e.target.error);\n      };\n    });\n\n    // Eliminar menús más antiguos de 7 días\n    const menusToDelete = allMenus.filter(menu => {\n      const createdDate = new Date(menu.createdAt);\n      const diff = now.getTime() - createdDate.getTime();\n      const days = Math.ceil(diff / (1000 * 3600 * 24));\n      return days > 7;\n    });\n    for (const menu of menusToDelete) {\n      store.delete(menu.id);\n    }\n    console.log(`Se eliminaron ${menusToDelete.length} menús antiguos`);\n  } catch (error) {\n    console.error('Error al limpiar menús antiguos:', error);\n  }\n}\n\n// Añadir después de getSharedMenu\nexport async function syncMenuAvailability(menuId) {\n  try {\n    const sharedMenu = await getSharedMenu(menuId);\n    if (!sharedMenu || !sharedMenu.items) return null;\n\n    // Actualizar la disponibilidad de cada item\n    const updatedItems = await Promise.all(sharedMenu.items.map(async item => {\n      const availability = await checkItemAvailability(item.id);\n      return {\n        ...item,\n        availableQuantity: availability.quantity\n      };\n    }));\n\n    // Actualizar el menú con las nuevas disponibilidades\n    const db = await openDatabase();\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(SHARED_MENU_STORE);\n    const updatedMenu = {\n      ...sharedMenu,\n      items: updatedItems,\n      lastSync: new Date().toISOString()\n    };\n    await store.put(updatedMenu);\n    return updatedMenu;\n  } catch (error) {\n    console.error('Error al sincronizar disponibilidad:', error);\n    return null;\n  }\n}","map":{"version":3,"names":["getBusinessInfo","compressImage","checkItemAvailability","DB_NAME","DB_VERSION","SHARED_MENU_STORE","IMAGE_STORE","openDatabase","Promise","resolve","reject","console","log","request","indexedDB","open","onerror","event","error","target","errorCode","onsuccess","db","result","version","existingStores","Array","from","objectStoreNames","includes","Error","onupgradeneeded","newVersion","contains","createObjectStore","keyPath","generateMenuId","Math","random","toString","substring","saveMenu","menuItems","menuId","businessInfo","processedItems","all","map","item","processedItem","isSpecial","Boolean","name","image","length","err","warn","menuData","id","items","createdAt","Date","toISOString","jsonSize","JSON","stringify","toFixed","transaction","store","objectStore","put","e","filter","getSharedMenu","get","isArray","i","apiService","response","default","success","data","saveSharedMenu","saveError","apiError","specialItems","regularItems","getMenu","tx","undefined","normalizedIsSpecial","cleanOldMenus","now","allMenus","getAll","menusToDelete","menu","createdDate","diff","getTime","days","ceil","delete","syncMenuAvailability","sharedMenu","updatedItems","availability","availableQuantity","quantity","updatedMenu","lastSync"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/menuService.js"],"sourcesContent":["import { getBusinessInfo, compressImage, checkItemAvailability } from './storageService';\n\nconst DB_NAME = 'websapDatabase';\nconst DB_VERSION = 3; // Debe coincidir con el resto de servicios\nconst SHARED_MENU_STORE = 'sharedMenus';\nconst IMAGE_STORE = 'menuImages';\n\n// Abrir la conexión a la base de datos\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      console.log(\"Intentando abrir la base de datos con versión:\", DB_VERSION);\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      \n      request.onerror = (event) => {\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\n        reject('Error al abrir la base de datos: ' + event.target.errorCode);\n      };\n      \n      request.onsuccess = (event) => {\n        const db = event.target.result;\n        console.log(\"Base de datos abierta con éxito, versión:\", db.version);\n        \n        // Verificar que todos los almacenes necesarios existen\n        const existingStores = Array.from(db.objectStoreNames);\n        console.log(\"Almacenes existentes:\", existingStores);\n        \n        if (!existingStores.includes(SHARED_MENU_STORE)) {\n          console.error(`El almacén ${SHARED_MENU_STORE} no existe en la base de datos`);\n          reject(new Error(`El almacén ${SHARED_MENU_STORE} no existe en la base de datos`));\n          return;\n        }\n        \n        resolve(db);\n      };\n      \n      request.onupgradeneeded = (event) => {\n        console.log(\"Actualizando estructura de la base de datos a versión:\", event.newVersion);\n        const db = event.target.result;\n        \n        // Crear almacén para menús compartidos si no existe\n        if (!db.objectStoreNames.contains(SHARED_MENU_STORE)) {\n          console.log('Creando almacén:', SHARED_MENU_STORE);\n          db.createObjectStore(SHARED_MENU_STORE, { keyPath: 'id' });\n        }\n        \n        // Crear almacén para imágenes si no existe\n        if (!db.objectStoreNames.contains(IMAGE_STORE)) {\n          console.log('Creando almacén:', IMAGE_STORE);\n          db.createObjectStore(IMAGE_STORE, { keyPath: 'id' });\n        }\n      };\n    } catch (error) {\n      console.error(\"Error crítico en IndexedDB:\", error);\n      reject(error);\n    }\n  });\n}\n\n/**\n * Genera un ID único para un menú\n * @returns {string} Un ID único\n */\nfunction generateMenuId() {\n  return Math.random().toString(36).substring(2, 10) + \n         Math.random().toString(36).substring(2, 10);\n}\n\n/**\n * Guarda un menú compartido y devuelve su ID\n * @param {Array} menuItems - Elementos del menú a guardar\n * @returns {Promise<String>} - ID del menú compartido\n */\nexport async function saveMenu(menuItems) {\n  try {\n    // Generar un ID único para el menú compartido\n    const menuId = generateMenuId();\n    \n    // Obtener información del negocio para incluirla en el menú compartido\n    const businessInfo = await getBusinessInfo();\n    \n    // Preprocesar los elementos del menú - comprimir imágenes y normalizar isSpecial\n    const processedItems = await Promise.all(menuItems.map(async (item) => {\n      const processedItem = { ...item };\n      processedItem.isSpecial = Boolean(item.isSpecial);\n      console.log(`[saveMenu] Guardando ${item.name} con isSpecial=${processedItem.isSpecial}`);\n      \n      // Comprimir la imagen si existe\n      if (processedItem.image && typeof processedItem.image === 'string' && processedItem.image.length > 0) {\n        try {\n          // Usar una calidad más baja para compartir\n          processedItem.image = await compressImage(processedItem.image, 400, 300, 0.5);\n        } catch (err) {\n          console.warn('Error al comprimir imagen:', err);\n          processedItem.image = null;\n        }\n      }\n      \n      return processedItem;\n    }));\n    \n    // Crear objeto del menú con información del negocio incluida\n    const menuData = {\n      id: menuId,\n      items: processedItems,\n      businessInfo: businessInfo, // Incluir la información del negocio (con datos de pago)\n      createdAt: new Date().toISOString()\n    };\n    \n    // Verificar tamaño del objeto\n    try {\n      const jsonSize = JSON.stringify(menuData).length / (1024 * 1024); // Tamaño en MB\n      console.log(`Tamaño del menú a guardar: ${jsonSize.toFixed(2)} MB`);\n      \n      if (jsonSize > 50) {\n        throw new Error(`El menú es demasiado grande (${jsonSize.toFixed(2)} MB). Reduce el tamaño de las imágenes.`);\n      }\n    } catch (error) {\n      console.error('Error al verificar tamaño del menú:', error);\n      throw new Error('Error al verificar tamaño del menú');\n    }\n    \n    // Guardar en IndexedDB\n    const db = await openDatabase();\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(SHARED_MENU_STORE);\n    \n    await new Promise((resolve, reject) => {\n      const request = store.put(menuData);\n      \n      request.onsuccess = () => {\n        console.log(`Menú guardado exitosamente con ID: ${menuId}`);\n        resolve();\n      };\n      \n      request.onerror = (e) => {\n        console.error('Error al guardar el menú:', e.target.error);\n        reject(e.target.error);\n      };\n    });\n    \n    // Añadir logs de depuración\n    console.log('[saveMenu] Items a guardar:', menuItems.length);\n    console.log('[saveMenu] Items especiales:', menuItems.filter(item => item.isSpecial).length);\n    console.log('[saveMenu] Items regulares:', menuItems.filter(item => !item.isSpecial).length);\n    \n    return menuId;\n  } catch (error) {\n    console.error('Error al guardar el menú compartido:', error);\n    throw error;\n  }\n}\n\n/**\n * Obtiene un menú compartido por su ID\n * @param {String} menuId - ID del menú compartido\n * @returns {Promise<Object>} - Datos del menú compartido\n */\nexport async function getSharedMenu(menuId) {\n  try {\n    console.log(`Intentando recuperar menú con ID: ${menuId}`);\n    \n    // Verificar que tenemos un ID válido\n    if (!menuId) {\n      console.error('ID de menú no proporcionado');\n      return null;\n    }\n\n    // Primero intentamos obtener el menú desde IndexedDB\n    let menuData = null;\n    \n    try {\n      const db = await openDatabase();\n      const transaction = db.transaction([SHARED_MENU_STORE], 'readonly');\n      const store = transaction.objectStore(SHARED_MENU_STORE);\n      \n      menuData = await new Promise((resolve, reject) => {\n        const request = store.get(menuId);\n        \n        request.onsuccess = () => {\n          console.log(\"Resultado de búsqueda del menú en IndexedDB:\", request.result);\n          \n          // Verificar que el resultado existe antes de intentar acceder a sus propiedades\n          if (request.result) {\n            console.log('Menú recuperado desde IndexedDB:', request.result);\n            \n            // Verificar que el menú tiene la propiedad items y es un array\n            if (request.result.items && Array.isArray(request.result.items)) {\n              console.log('Items especiales:', request.result.items.filter(i => i.isSpecial));\n              console.log('Items regulares:', request.result.items.filter(i => !i.isSpecial));\n            } else {\n              console.warn('El menú en IndexedDB no tiene items o no es un array:', request.result);\n            }\n          } else {\n            console.warn(`No se encontró menú con ID: ${menuId} en la base de datos local`);\n          }\n          \n          resolve(request.result);\n        };\n        \n        request.onerror = (e) => {\n          console.error('Error al recuperar el menú desde IndexedDB:', e.target.error);\n          reject(e.target.error);\n        };\n      });\n    } catch (error) {\n      console.error('Error al acceder a IndexedDB:', error);\n      // Continuamos con el flujo para intentar obtener el menú desde el servidor\n    }\n    \n    // Si no encontramos el menú en IndexedDB, intentamos obtenerlo desde el servidor\n    if (!menuData) {\n      console.log(`Menú no encontrado en IndexedDB, intentando obtenerlo desde el servidor...`);\n      \n      try {\n        // Importamos apiService usando import dinámico para evitar problemas de dependencia circular\n        const apiService = await import('./apiService');\n        \n        // Hacemos la petición al servidor para obtener el menú\n        const response = await apiService.default.get(`/platos/menu/${menuId}`);\n        \n        if (response && response.success && response.data) {\n          console.log('Menú recuperado desde el servidor:', response.data);\n          menuData = response.data;\n          \n          // Guardamos el menú en IndexedDB para futuras consultas\n          try {\n            await saveSharedMenu(menuData);\n            console.log('Menú guardado en IndexedDB para uso futuro');\n          } catch (saveError) {\n            console.error('Error al guardar el menú en IndexedDB:', saveError);\n            // Continuamos aunque no se pueda guardar en IndexedDB\n          }\n        } else {\n          console.warn('No se pudo obtener el menú desde el servidor:', response);\n        }\n      } catch (apiError) {\n        console.error('Error al obtener el menú desde el servidor:', apiError);\n        // Si hay un error al obtener desde el servidor, continuamos con menuData = null\n      }\n    }\n    \n    // Si el menú no tiene información de negocio, intentar obtenerla\n    if (menuData && !menuData.businessInfo) {\n      const businessInfo = await getBusinessInfo();\n      menuData.businessInfo = businessInfo;\n    }\n\n    if (!menuData) {\n      console.warn(`No se encontró menú con ID: ${menuId} ni en IndexedDB ni en el servidor`);\n    }\n    \n    // Añadir logs de depuración con verificaciones de seguridad\n    console.log('[getSharedMenu] Menú recuperado:', menuData);\n    \n    // Usar el operador de encadenamiento opcional para evitar errores\n    const specialItems = menuData?.items?.filter(i => i.isSpecial) || [];\n    const regularItems = menuData?.items?.filter(i => !i.isSpecial) || [];\n    \n    console.log('[getSharedMenu] Items especiales:', specialItems.length);\n    console.log('[getSharedMenu] Items regulares:', regularItems.length);\n    \n    return menuData;\n  } catch (error) {\n    console.error('Error al obtener el menú compartido:', error);\n    throw error;\n  }\n}\n\n/**\n * Alias para getSharedMenu para mantener compatibilidad con código existente\n * @param {String} menuId - ID del menú compartido\n * @returns {Promise<Object>} - Datos del menú compartido\n */\nexport async function getMenu(menuId) {\n  console.log('Intentando recuperar menú con ID:', menuId);\n  try {\n    const db = await openDatabase();\n    const tx = db.transaction('sharedMenus', 'readonly');\n    const store = tx.objectStore('sharedMenus');\n    \n    // Obtener el menú de la base de datos\n    const request = store.get(menuId);\n    const result = await new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        console.log('Resultado de búsqueda del menú:', request.result);\n        resolve(request.result);\n      };\n      \n      request.onerror = (e) => {\n        console.error('Error al recuperar el menú:', e.target.error);\n        reject(e.target.error);\n      };\n    });\n    \n    // Verificar si se encontró el menú\n    if (!result) {\n      console.warn(`No se encontró menú con ID: ${menuId}`);\n      return null;\n    }\n    \n    // Verificar si el menú tiene items y es un array\n    if (result && result.items && Array.isArray(result.items)) {\n      console.log('[menuService] Procesando items en getMenu()');\n      \n      // Procesar cada item para normalizar isSpecial\n      const processedItems = result.items.map(item => {\n        // Si isSpecial no existe, asignar false por defecto\n        if (item.isSpecial === undefined) {\n          console.log(`[menuService] Item ${item.name || 'sin nombre'} sin propiedad isSpecial, asignando false`);\n          return { ...item, isSpecial: false };\n        }\n        \n        // Normalizar isSpecial a un valor booleano\n        const normalizedIsSpecial = \n          item.isSpecial === true || \n          item.isSpecial === 'true' || \n          item.isSpecial === 1 || \n          item.isSpecial === '1';\n        \n        if (typeof item.isSpecial !== 'boolean') {\n          console.log(`[menuService] Normalizando isSpecial para ${item.name}: ${item.isSpecial} (${typeof item.isSpecial}) → ${normalizedIsSpecial}`);\n        }\n        \n        return { ...item, isSpecial: normalizedIsSpecial };\n      });\n      \n      console.log(`[menuService] Procesados ${processedItems.length} items:`, \n        processedItems.map(i => ({ name: i.name, isSpecial: i.isSpecial })));\n      \n      // Devolver el objeto completo con los items procesados\n      return {\n        ...result,\n        items: processedItems\n      }; // Devuelve el objeto completo con los items procesados\n    } else {\n      console.warn('El menú no tiene items o no es un array:', result);\n      \n      // Si no tiene items, devolver el resultado tal cual\n      return result;\n    }\n  } catch (error) {\n    console.error('Error al obtener menú compartido:', error);\n    throw error;\n  }\n}\n\n/**\n * Limpia menús antiguos que ya no son necesarios\n * @returns {Promise<void>}\n */\nexport async function cleanOldMenus() {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(SHARED_MENU_STORE);\n    \n    const now = new Date();\n    const allMenus = await new Promise((resolve, reject) => {\n      const request = store.getAll();\n      \n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      \n      request.onerror = (e) => {\n        console.error('Error al obtener menús:', e.target.error);\n        reject(e.target.error);\n      };\n    });\n    \n    // Eliminar menús más antiguos de 7 días\n    const menusToDelete = allMenus.filter(menu => {\n      const createdDate = new Date(menu.createdAt);\n      const diff = now.getTime() - createdDate.getTime();\n      const days = Math.ceil(diff / (1000 * 3600 * 24));\n      return days > 7;\n    });\n    \n    for (const menu of menusToDelete) {\n      store.delete(menu.id);\n    }\n    \n    console.log(`Se eliminaron ${menusToDelete.length} menús antiguos`);\n  } catch (error) {\n    console.error('Error al limpiar menús antiguos:', error);\n  }\n}\n\n// Añadir después de getSharedMenu\nexport async function syncMenuAvailability(menuId) {\n  try {\n    const sharedMenu = await getSharedMenu(menuId);\n    if (!sharedMenu || !sharedMenu.items) return null;\n\n    // Actualizar la disponibilidad de cada item\n    const updatedItems = await Promise.all(sharedMenu.items.map(async (item) => {\n      const availability = await checkItemAvailability(item.id);\n      return {\n        ...item,\n        availableQuantity: availability.quantity\n      };\n    }));\n\n    // Actualizar el menú con las nuevas disponibilidades\n    const db = await openDatabase();\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(SHARED_MENU_STORE);\n\n    const updatedMenu = {\n      ...sharedMenu,\n      items: updatedItems,\n      lastSync: new Date().toISOString()\n    };\n\n    await store.put(updatedMenu);\n    return updatedMenu;\n  } catch (error) {\n    console.error('Error al sincronizar disponibilidad:', error);\n    return null;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}