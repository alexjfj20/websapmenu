{"ast":null,"code":"import { alert } from './dialogService';\n\n// Lista de usuarios predefinidos para pruebas\nconst USERS = [{\n  id: 1,\n  email: 'admin@example.com',\n  password: 'password',\n  nombre: 'Administrador',\n  roles: ['Superadministrador']\n}, {\n  id: 2,\n  email: 'test@test.com',\n  password: '123456',\n  nombre: 'Usuario de Prueba',\n  roles: ['Empleado']\n}, {\n  id: 3,\n  email: 'admin',\n  password: 'admin',\n  nombre: 'SuperAdmin',\n  roles: ['Superadministrador', 'Empleado']\n}];\n\n// Usuario actualmente autenticado\nlet currentUser = null;\n\n/**\r\n * Intenta iniciar sesión con las credenciales proporcionadas\r\n * @param {string} email - Correo electrónico o nombre de usuario\r\n * @param {string} password - Contraseña\r\n * @returns {Promise<Object>} - Promesa que se resuelve con el usuario o se rechaza con un error\r\n */\nexport async function login(email, password) {\n  // Simular una llamada a la API esperando 500ms\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  // Buscar usuario por email o nombre de usuario\n  const user = USERS.find(u => u.email.toLowerCase() === email.toLowerCase() && u.password === password);\n  if (user) {\n    // Hacer una copia del usuario sin la contraseña\n    const {\n      password,\n      ...userWithoutPassword\n    } = user;\n    currentUser = userWithoutPassword;\n\n    // Guardar estado de autenticación en localStorage\n    localStorage.setItem('isLoggedIn', 'true');\n    localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n    return userWithoutPassword;\n  } else {\n    throw new Error('Credenciales incorrectas');\n  }\n}\n\n/**\r\n * Cierra la sesión del usuario actual\r\n */\nexport function logout() {\n  currentUser = null;\n  localStorage.removeItem('isLoggedIn');\n  localStorage.removeItem('currentUser');\n}\n\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\nexport function isAuthenticated() {\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser) {\n        currentUser = storedUser;\n      }\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n      return false;\n    }\n  }\n  return !!currentUser;\n}\n\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\nexport function getCurrentUser() {\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser) {\n        currentUser = storedUser;\n      }\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n      return null;\n    }\n  }\n  return currentUser;\n}\n\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\nexport function hasRole(roleName) {\n  const user = getCurrentUser();\n  if (!user || !user.roles) {\n    return false;\n  }\n\n  // Si roles es un array, verificar si contiene el rol\n  if (Array.isArray(user.roles)) {\n    return user.roles.includes(roleName);\n  }\n\n  // Si roles es un string, verificar si es igual al rol buscado\n  if (typeof user.roles === 'string') {\n    return user.roles === roleName;\n  }\n  return false;\n}\nexport default {\n  login,\n  logout,\n  isAuthenticated,\n  hasRole,\n  getCurrentUser\n};","map":{"version":3,"names":["alert","USERS","id","email","password","nombre","roles","currentUser","login","Promise","resolve","setTimeout","user","find","u","toLowerCase","userWithoutPassword","localStorage","setItem","JSON","stringify","Error","logout","removeItem","isAuthenticated","getItem","storedUser","parse","e","console","error","getCurrentUser","hasRole","roleName","Array","isArray","includes"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/authService.js"],"sourcesContent":["import { alert } from './dialogService';\r\n\r\n// Lista de usuarios predefinidos para pruebas\r\nconst USERS = [\r\n  {\r\n    id: 1,\r\n    email: 'admin@example.com',\r\n    password: 'password',\r\n    nombre: 'Administrador',\r\n    roles: ['Superadministrador']\r\n  },\r\n  {\r\n    id: 2,\r\n    email: 'test@test.com',\r\n    password: '123456',\r\n    nombre: 'Usuario de Prueba',\r\n    roles: ['Empleado']\r\n  },\r\n  {\r\n    id: 3,\r\n    email: 'admin',\r\n    password: 'admin',\r\n    nombre: 'SuperAdmin',\r\n    roles: ['Superadministrador', 'Empleado']\r\n  }\r\n];\r\n\r\n// Usuario actualmente autenticado\r\nlet currentUser = null;\r\n\r\n/**\r\n * Intenta iniciar sesión con las credenciales proporcionadas\r\n * @param {string} email - Correo electrónico o nombre de usuario\r\n * @param {string} password - Contraseña\r\n * @returns {Promise<Object>} - Promesa que se resuelve con el usuario o se rechaza con un error\r\n */\r\nexport async function login(email, password) {\r\n  // Simular una llamada a la API esperando 500ms\r\n  await new Promise(resolve => setTimeout(resolve, 500));\r\n\r\n  // Buscar usuario por email o nombre de usuario\r\n  const user = USERS.find(u => \r\n    (u.email.toLowerCase() === email.toLowerCase()) && (u.password === password)\r\n  );\r\n\r\n  if (user) {\r\n    // Hacer una copia del usuario sin la contraseña\r\n    const { password, ...userWithoutPassword } = user;\r\n    currentUser = userWithoutPassword;\r\n    \r\n    // Guardar estado de autenticación en localStorage\r\n    localStorage.setItem('isLoggedIn', 'true');\r\n    localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\r\n    \r\n    return userWithoutPassword;\r\n  } else {\r\n    throw new Error('Credenciales incorrectas');\r\n  }\r\n}\r\n\r\n/**\r\n * Cierra la sesión del usuario actual\r\n */\r\nexport function logout() {\r\n  currentUser = null;\r\n  localStorage.removeItem('isLoggedIn');\r\n  localStorage.removeItem('currentUser');\r\n}\r\n\r\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\r\nexport function isAuthenticated() {\r\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\r\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser) {\r\n        currentUser = storedUser;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  return !!currentUser;\r\n}\r\n\r\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\r\nexport function getCurrentUser() {\r\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\r\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser) {\r\n        currentUser = storedUser;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  return currentUser;\r\n}\r\n\r\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\r\nexport function hasRole(roleName) {\r\n  const user = getCurrentUser();\r\n  \r\n  if (!user || !user.roles) {\r\n    return false;\r\n  }\r\n  \r\n  // Si roles es un array, verificar si contiene el rol\r\n  if (Array.isArray(user.roles)) {\r\n    return user.roles.includes(roleName);\r\n  }\r\n  \r\n  // Si roles es un string, verificar si es igual al rol buscado\r\n  if (typeof user.roles === 'string') {\r\n    return user.roles === roleName;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}