{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\n// src/services/syncService.js\n\n// Servicio para gestionar la sincronizaci√≥n y el estado de la conexi√≥n\nimport { getPendingPlatos, updatePlatoSyncStatus, getSyncQueue, removeFromSyncQueue, preparePlatoForSync, openDB } from './indexedDBService';\n\n// Constantes desde el servicio IndexedDB\nconst PLATOS_STORE = 'platos';\nconst API_URL = 'http://localhost:3000/api';\n\n// Configuraci√≥n espec√≠fica para mejorar la sincronizaci√≥n\nconst SYNC_CONFIG = {\n  // Desactivar verificaci√≥n de disponibilidad del servidor si causa problemas\n  skipServerAvailabilityCheck: true,\n  // Limitar a√∫n m√°s el tama√±o m√°ximo de los platos para sincronizaci√≥n\n  maxPlatoSize: 30000,\n  // 30KB m√°ximo\n  // Intervalos de reintento m√°s largos\n  retryIntervals: [5000, 15000, 30000],\n  // M√°ximo n√∫mero de reintentos\n  maxRetries: 2,\n  // URL del endpoint principal para platos\n  platoUrl: `${API_URL}/platos`,\n  // URL alternativa para sincronizaci√≥n de emergencia (m√°s b√°sica)\n  emergencyPlatoUrl: `${API_URL}/platos/minimal`,\n  // Usar endpoint de sincronizaci√≥n de emergencia\n  useEmergencyEndpoint: true\n};\n\n// Estado de la sincronizaci√≥n\nlet isSyncing = false;\nlet _isOnline = navigator.onLine;\n\n// Alternativa m√°s simple para verificar la conexi√≥n\nconst isOnline = async () => {\n  // Primero comprobamos el estado de navigator.onLine\n  if (!navigator.onLine) {\n    return false;\n  }\n\n  // Intentamos hacer un fetch a un recurso peque√±o (como un favicon)\n  try {\n    const response = await fetch(`${API_URL}/favicon.ico`, {\n      method: 'HEAD',\n      // Solo pedimos las cabeceras, no el contenido\n      mode: 'no-cors',\n      // Modo no-cors para evitar problemas de CORS\n      cache: 'no-store',\n      credentials: 'omit'\n    });\n    return true; // Si no hay excepci√≥n, asumimos que estamos en l√≠nea\n  } catch (error) {\n    console.error('Error al verificar estado de conexi√≥n:', error);\n    return false;\n  }\n};\n\n// Configurar escuchas para eventos de conexi√≥n\nconst setupConnectionListeners = () => {\n  window.addEventListener('online', async () => {\n    console.log('Evento online detectado');\n    _isOnline = await isOnline();\n    if (_isOnline) {\n      console.log('Conexi√≥n a Internet restablecida');\n      // Sincronizar cuando se recupera la conexi√≥n\n      syncData();\n    }\n  });\n  window.addEventListener('offline', () => {\n    console.log('Evento offline detectado');\n    _isOnline = false;\n    console.log('Conexi√≥n a Internet perdida');\n  });\n\n  // Verificar estado inicial\n  isOnline().then(online => {\n    console.log(`Estado inicial de conexi√≥n: ${online ? 'En l√≠nea' : 'Fuera de l√≠nea'}`);\n  });\n};\n\n// Crear versi√≥n minimalista de un plato para sincronizaci√≥n de emergencia\nconst createMinimalPlato = plato => {\n  return {\n    id: plato.id,\n    name: plato.name?.substring(0, 50) || 'Plato sin nombre',\n    price: Number(plato.price) || 0,\n    description: (plato.description?.substring(0, 100) || '') + '...',\n    includesDrink: Boolean(plato.includesDrink),\n    availableQuantity: Number(plato.availableQuantity) || 0,\n    is_available: true,\n    createdAt: plato.createdAt || new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    minimal_sync: true // Marca para indicar que es una versi√≥n minimalista\n  };\n};\n\n// Verificar si el servidor est√° realmente disponible\nconst checkServerAvailability = async () => {\n  // Si la verificaci√≥n est√° desactivada, asumir que el servidor est√° disponible\n  if (SYNC_CONFIG.skipServerAvailabilityCheck) {\n    console.log('üîÑ Omitiendo verificaci√≥n de disponibilidad del servidor (desactivada en configuraci√≥n)');\n    return true;\n  }\n  try {\n    // Usar una petici√≥n minimalista sin headers adicionales\n    const xhr = new XMLHttpRequest();\n\n    // Configurar un timeout corto para la verificaci√≥n\n    return new Promise(resolve => {\n      const timeoutId = setTimeout(() => {\n        console.warn('‚è±Ô∏è Timeout en verificaci√≥n de servidor');\n        xhr.abort();\n        resolve(false);\n      }, 3000);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          resolve(xhr.status >= 200 && xhr.status < 300);\n        }\n      };\n      xhr.onerror = function () {\n        clearTimeout(timeoutId);\n        console.warn('‚ùå Error en verificaci√≥n de servidor');\n        resolve(false);\n      };\n\n      // Usar m√©todo simple GET sin headers complejos\n      xhr.open('GET', `${API_URL}/ping`, true);\n      xhr.send();\n    });\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Error al verificar disponibilidad del servidor:', error);\n    return false;\n  }\n};\n\n// Marcar un plato como problem√°tico para evitar intentos continuos\nconst markPlatoAsSyncProblematic = async platoId => {\n  try {\n    // Actualizar el estado del plato en IndexedDB\n    const db = await openDB();\n    const transaction = db.transaction([PLATOS_STORE], 'readwrite');\n    const store = transaction.objectStore(PLATOS_STORE);\n\n    // Obtener el plato\n    const getRequest = store.get(platoId);\n    return new Promise((resolve, reject) => {\n      getRequest.onsuccess = event => {\n        const plato = event.target.result;\n        if (!plato) {\n          reject(new Error(`Plato ID ${platoId} no encontrado`));\n          return;\n        }\n\n        // Marcar como problem√°tico y cambiar estado de sincronizaci√≥n\n        plato.sync_problematic = true;\n        plato.syncStatus = 'sync_error';\n        plato.lastSyncAttempt = new Date().toISOString();\n\n        // Guardar los cambios\n        const updateRequest = store.put(plato);\n        updateRequest.onsuccess = () => {\n          console.log(`‚úÖ Plato ID ${platoId} marcado como problem√°tico para sincronizaci√≥n`);\n          resolve(true);\n        };\n        updateRequest.onerror = event => {\n          reject(new Error(`Error al actualizar plato: ${event.target.error}`));\n        };\n      };\n      getRequest.onerror = event => {\n        reject(new Error(`Error al obtener plato: ${event.target.error}`));\n      };\n    });\n  } catch (error) {\n    console.error('‚ùå Error al marcar plato como problem√°tico:', error);\n    throw error;\n  }\n};\n\n// Funci√≥n para probar la conexi√≥n con el servidor (modo ultra-ligero)\nconst testServerConnection = async () => {\n  console.log('üîÑ Probando conexi√≥n con el servidor (modo emergencia)...');\n  try {\n    // Crear un objeto XMLHttpRequest directamente - sin headers\n    const xhr = new XMLHttpRequest();\n\n    // Configurar una promesa para manejar la respuesta\n    const responsePromise = new Promise(resolve => {\n      // Configurar timeout\n      const timeoutId = setTimeout(() => {\n        console.warn('‚è±Ô∏è Timeout en la prueba de conexi√≥n');\n        xhr.abort();\n        resolve(false);\n      }, 5000);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log('‚úÖ Conexi√≥n b√°sica establecida');\n            resolve(true);\n          } else if (xhr.status === 431) {\n            console.error('‚ùå Error 431: Request Header Fields Too Large');\n            // Intentar con endpoint de emergencia sin headers\n            tryEmergencyEndpoint().then(resolve);\n          } else {\n            console.error(`‚ùå Error en prueba de conexi√≥n: ${xhr.status}`);\n            resolve(false);\n          }\n        }\n      };\n      xhr.onerror = function () {\n        clearTimeout(timeoutId);\n        console.error('‚ùå Error de red en prueba de conexi√≥n');\n        // Intentar con endpoint de emergencia sin headers\n        tryEmergencyEndpoint().then(resolve);\n      };\n    });\n\n    // Realizar una solicitud GET simple sin headers\n    xhr.open('GET', `${API_URL}/test/ultra-minimal`, true);\n    // No a√±adir ning√∫n header\n    xhr.send();\n    return await responsePromise;\n  } catch (error) {\n    console.error('‚ùå Error en prueba de conexi√≥n:', error);\n    return tryEmergencyEndpoint();\n  }\n};\n\n// Probar endpoint de emergencia absoluto\nconst tryEmergencyEndpoint = async () => {\n  console.log('üö® Intentando conexi√≥n de emergencia sin headers...');\n  try {\n    const xhr = new XMLHttpRequest();\n    const responsePromise = new Promise(resolve => {\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log('‚úÖ Conexi√≥n de emergencia establecida');\n            resolve(true);\n          } else {\n            console.error(`‚ùå Error en conexi√≥n de emergencia: ${xhr.status}`);\n            resolve(false);\n          }\n        }\n      };\n      xhr.onerror = function () {\n        console.error('‚ùå Error de red en conexi√≥n de emergencia');\n        resolve(false);\n      };\n    });\n\n    // Usar endpoint de emergencia sin query params ni headers\n    xhr.open('GET', `${API_URL}/test/emergency`, true);\n    xhr.send();\n    return await responsePromise;\n  } catch (error) {\n    console.error('‚ùå Error en prueba de emergencia:', error);\n    return false;\n  }\n};\n\n// URL para conexiones directas sin headers\nconst RAW_URL = 'http://localhost:3000/raw';\n\n// Funci√≥n ultra-minimalista para probar conexi√≥n\nconst testRawConnection = async () => {\n  console.log('üîÑ Probando conexi√≥n directa sin headers...');\n  try {\n    // Usar XMLHttpRequest sin cookies ni headers personalizados\n    const xhr = new XMLHttpRequest();\n    return new Promise(resolve => {\n      const timeoutId = setTimeout(() => {\n        console.warn('‚è±Ô∏è Timeout en conexi√≥n directa');\n        xhr.abort();\n        resolve(false);\n      }, 3000);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log('‚úÖ Conexi√≥n directa exitosa');\n            resolve(true);\n          } else {\n            console.error(`‚ùå Error en conexi√≥n directa: ${xhr.status}`);\n            resolve(false);\n          }\n        }\n      };\n      xhr.onerror = function () {\n        clearTimeout(timeoutId);\n        console.error('‚ùå Error de red en conexi√≥n directa');\n        resolve(false);\n      };\n\n      // Usar URL sin query params\n      xhr.open('GET', `${RAW_URL}/ping`, true);\n      // No establecer ning√∫n header\n      xhr.withCredentials = false; // Importante: evitar enviar cookies\n      xhr.send();\n    });\n  } catch (error) {\n    console.error('‚ùå Error en prueba directa:', error);\n    return false;\n  }\n};\n\n// Probar MySQL sin headers\nconst testRawMySQLConnection = async () => {\n  console.log('üîÑ Probando conexi√≥n directa a MySQL...');\n  try {\n    const xhr = new XMLHttpRequest();\n    return new Promise(resolve => {\n      const timeoutId = setTimeout(() => {\n        console.warn('‚è±Ô∏è Timeout en conexi√≥n directa a MySQL');\n        xhr.abort();\n        resolve(false);\n      }, 3000);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log(`‚úÖ Conexi√≥n directa a MySQL exitosa: ${xhr.responseText}`);\n            resolve(true);\n          } else {\n            console.error(`‚ùå Error en conexi√≥n directa a MySQL: ${xhr.status}`);\n            resolve(false);\n          }\n        }\n      };\n      xhr.onerror = function () {\n        clearTimeout(timeoutId);\n        console.error('‚ùå Error de red en conexi√≥n directa a MySQL');\n        resolve(false);\n      };\n\n      // Usar URL sin query params\n      xhr.open('GET', `${RAW_URL}/mysql`, true);\n      // No establecer ning√∫n header\n      xhr.withCredentials = false; // Importante: evitar enviar cookies\n      xhr.send();\n    });\n  } catch (error) {\n    console.error('‚ùå Error en prueba directa de MySQL:', error);\n    return false;\n  }\n};\n\n// Sincronizar plato mediante conexi√≥n directa sin headers\nconst syncPlatoDirectly = async (platoId, platoName, platoPrice) => {\n  console.log(`üîÑ Sincronizando plato ${platoId} mediante conexi√≥n directa...`);\n  try {\n    const xhr = new XMLHttpRequest();\n    return new Promise(resolve => {\n      const timeoutId = setTimeout(() => {\n        console.warn('‚è±Ô∏è Timeout en sincronizaci√≥n directa');\n        xhr.abort();\n        resolve(false);\n      }, 5000);\n      xhr.onreadystatechange = async function () {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log(`‚úÖ Sincronizaci√≥n directa exitosa para plato ${platoId}`);\n            try {\n              await updatePlatoSyncStatus(platoId, 'synced');\n            } catch (error) {\n              console.error('Error al actualizar estado:', error);\n            }\n            resolve(true);\n          } else {\n            console.error(`‚ùå Error en sincronizaci√≥n directa: ${xhr.status}`);\n            resolve(false);\n          }\n        }\n      };\n      xhr.onerror = function () {\n        clearTimeout(timeoutId);\n        console.error('‚ùå Error de red en sincronizaci√≥n directa');\n        resolve(false);\n      };\n\n      // Usar URL con query params para pasar datos m√≠nimos\n      const url = `${RAW_URL}/sync?id=${encodeURIComponent(platoId)}&name=${encodeURIComponent(platoName || '')}&price=${encodeURIComponent(platoPrice || 0)}`;\n      xhr.open('POST', url, true);\n      xhr.withCredentials = false; // Importante: evitar enviar cookies\n      xhr.send();\n    });\n  } catch (error) {\n    console.error('‚ùå Error en sincronizaci√≥n directa:', error);\n    return false;\n  }\n};\n\n// M√©todo ultra-minimal usando XMLHttpRequest sin headers\nconst tryUltraMinimalSync = async (data, platoId) => {\n  try {\n    console.log('üö® Intentando sincronizaci√≥n ultra-minimal para plato:', platoId);\n\n    // Crear un objeto XMLHttpRequest directamente\n    const xhr = new XMLHttpRequest();\n\n    // Configurar una promesa para manejar la respuesta\n    const responsePromise = new Promise(resolve => {\n      // Configurar timeout\n      const timeoutId = setTimeout(() => {\n        console.warn('‚è±Ô∏è Timeout en sincronizaci√≥n ultra-minimal');\n        xhr.abort();\n        resolve(false);\n      }, 15000);\n      xhr.onreadystatechange = async function () {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log('‚úÖ Sincronizaci√≥n ultra-minimal exitosa');\n            try {\n              await updatePlatoSyncStatus(platoId, 'synced');\n            } catch (dbError) {\n              console.error('Error al actualizar estado en BD:', dbError);\n            }\n            resolve(true);\n          } else {\n            console.error(`‚ùå Error en sincronizaci√≥n ultra-minimal: ${xhr.status}`);\n            resolve(false);\n          }\n        }\n      };\n      xhr.onerror = function () {\n        clearTimeout(timeoutId);\n        console.error('‚ùå Error de red en sincronizaci√≥n ultra-minimal');\n        resolve(false);\n      };\n    });\n\n    // Usar m√©todo POST con datos minimalistas\n    xhr.open('POST', `${API_URL}/platos/emergency-sync`, true);\n\n    // Solo agregar Content-Type, nada m√°s\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    // Preparar datos ultra-minimalistas\n    const minimalData = {\n      id: data.id,\n      name: (data.name || \"\").substring(0, 30),\n      price: Number(data.price) || 0\n    };\n\n    // Enviar los datos\n    xhr.send(JSON.stringify(minimalData));\n    return await responsePromise;\n  } catch (error) {\n    console.error('‚ùå Error en sincronizaci√≥n ultra-minimal:', error);\n    return false;\n  }\n};\n\n// M√©todo alternativo de sincronizaci√≥n con opciones m√°s resilientes\nconst syncPlatoUsingAlternativeMethod = async (preparedPlato, platoId, retryCount = 0) => {\n  const maxRetries = 3;\n  try {\n    console.log('üì° Usando m√©todo alternativo de sincronizaci√≥n...');\n\n    // Usar XMLHttpRequest para mayor control sobre la conexi√≥n\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      // Configurar timeout largo\n      xhr.timeout = 60000; // 60 segundos\n\n      xhr.onreadystatechange = async function () {\n        if (xhr.readyState === 4) {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log('‚úÖ Sincronizaci√≥n exitosa usando m√©todo alternativo');\n            try {\n              // Actualizar estado en la base de datos\n              await updatePlatoSyncStatus(platoId, 'synced');\n            } catch (dbError) {\n              console.error('‚ö†Ô∏è Error al actualizar estado en BD:', dbError);\n            }\n            resolve(true);\n          } else {\n            console.error(`‚ùå Error en sincronizaci√≥n alternativa: ${xhr.status}`);\n\n            // Si hay error 500 y a√∫n tenemos reintentos\n            if (xhr.status === 500 && retryCount < maxRetries) {\n              console.warn(`‚ö†Ô∏è Reintentando (${retryCount + 1}/${maxRetries})...`);\n\n              // Espera exponencial entre reintentos\n              setTimeout(async () => {\n                try {\n                  const result = await syncPlatoUsingAlternativeMethod(preparedPlato, platoId, retryCount + 1);\n                  resolve(result);\n                } catch (retryError) {\n                  reject(retryError);\n                }\n              }, 5000 * Math.pow(2, retryCount));\n            } else {\n              reject(new Error(`Error HTTP: ${xhr.status}`));\n            }\n          }\n        }\n      };\n      xhr.ontimeout = function () {\n        console.error('‚ùå Timeout en la solicitud alternativa');\n        reject(new Error('Timeout en la solicitud'));\n      };\n      xhr.onerror = function () {\n        console.error('‚ùå Error de red en solicitud alternativa');\n\n        // Reintento con backoff si todav√≠a hay intentos disponibles\n        if (retryCount < maxRetries) {\n          console.warn(`‚ö†Ô∏è Error de red, reintentando (${retryCount + 1}/${maxRetries})...`);\n          setTimeout(async () => {\n            try {\n              const result = await syncPlatoUsingAlternativeMethod(preparedPlato, platoId, retryCount + 1);\n              resolve(result);\n            } catch (retryError) {\n              reject(retryError);\n            }\n          }, 5000 * Math.pow(2, retryCount));\n        } else {\n          reject(new Error('Error de red persistente'));\n        }\n      };\n\n      // Abrir conexi√≥n con m√©todo POST\n      xhr.open('POST', `${API_URL}/platos`, true);\n\n      // Establecer headers\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n      // Enviar los datos\n      xhr.send(JSON.stringify(preparedPlato));\n    });\n  } catch (error) {\n    console.error('‚ùå Error en m√©todo alternativo de sincronizaci√≥n:', error);\n    throw error;\n  }\n};\n\n// Sincronizar un plato con el servidor\nconst syncPlatoToServer = async (plato, retryCount = 0) => {\n  const maxRetries = SYNC_CONFIG.maxRetries;\n\n  // Si el plato est√° marcado como problem√°tico, omitirlo\n  if (plato.sync_problematic) {\n    console.warn(`‚ö†Ô∏è Omitiendo plato ${plato.id} marcado como problem√°tico para sincronizaci√≥n`);\n    return false;\n  }\n  console.log(`Sincronizando plato ${plato.id} con el servidor (intento ${retryCount + 1}/${maxRetries + 1})...`);\n  try {\n    // Omitir verificaci√≥n si est√° desactivada\n    if (!SYNC_CONFIG.skipServerAvailabilityCheck) {\n      // Verificar si el servidor est√° disponible\n      const serverAvailable = await checkServerAvailability();\n      if (!serverAvailable) {\n        console.error('‚ùå El servidor no est√° disponible. Posponiendo sincronizaci√≥n.');\n        return false;\n      }\n    }\n\n    // Preparar datos ultra-minimalistas para sincronizaci√≥n\n    let syncData;\n    try {\n      // Intentar usar la funci√≥n de preparaci√≥n normal\n      const preparedPlato = preparePlatoForSync(plato);\n\n      // Verificar tama√±o y aplicar l√≠mites estrictos\n      const dataSize = JSON.stringify(preparedPlato).length;\n      if (dataSize > SYNC_CONFIG.maxPlatoSize) {\n        console.warn(`‚ö†Ô∏è Plato demasiado grande (${dataSize} bytes). Usando versi√≥n ultra-minimalista.`);\n        syncData = createUltraMinimalPlato(plato);\n      } else {\n        syncData = preparedPlato;\n      }\n    } catch (prepError) {\n      console.error('‚ùå Error al preparar datos:', prepError);\n      syncData = createUltraMinimalPlato(plato);\n    }\n\n    // Usar el m√©todo m√°s confiable para sincronizaci√≥n\n    return await syncMinimalDataOnly(syncData, plato.id, retryCount);\n  } catch (error) {\n    console.error('‚ùå Error en sincronizaci√≥n:', error);\n    if (retryCount >= maxRetries) {\n      try {\n        await markPlatoAsSyncProblematic(plato.id);\n      } catch (markError) {\n        console.error('Error al marcar plato como problem√°tico:', markError);\n      }\n    }\n    return false;\n  }\n};\n\n// Versi√≥n ultra-minimalista para casos extremos\nconst createUltraMinimalPlato = plato => {\n  return {\n    id: plato.id,\n    name: plato.name?.substring(0, 30) || 'Plato sin nombre',\n    price: Number(plato.price) || 0,\n    // Omitir todo lo que no sea absolutamente esencial\n    is_ultra_minimal: true\n  };\n};\n\n// M√©todo de sincronizaci√≥n extremadamente simplificado para problemas persistentes\n// Actualizando para usar el m√©todo ultra-minimal cuando hay error 431\nconst syncMinimalDataOnly = async (data, platoId, retryCount = 0) => {\n  const maxRetries = SYNC_CONFIG.maxRetries;\n\n  // Usar datos ultra-minimalistas para evitar problemas de tama√±o\n  const minimalData = {\n    id: data.id,\n    name: data.name?.substring(0, 50) || 'Plato sin nombre',\n    price: Number(data.price) || 0,\n    description: data.description?.substring(0, 100) || '',\n    availableQuantity: Number(data.availableQuantity) || 0,\n    is_available: Boolean(data.is_available),\n    // Eliminar la imagen para esta sincronizaci√≥n\n    minimal_sync: true\n  };\n  return new Promise(resolve => {\n    // Establecer timeout para toda la operaci√≥n\n    const operationTimeoutId = setTimeout(() => {\n      console.warn('‚è±Ô∏è Timeout global de la operaci√≥n de sincronizaci√≥n');\n      resolve(false);\n    }, 30000);\n    const xhr = new XMLHttpRequest();\n\n    // Configurar timeouts m√°s estrictos\n    xhr.timeout = 15000;\n    xhr.onreadystatechange = async function () {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          clearTimeout(operationTimeoutId);\n          try {\n            await updatePlatoSyncStatus(platoId, 'synced');\n            console.log(`‚úÖ Sincronizaci√≥n exitosa para plato ${platoId}`);\n          } catch (error) {\n            console.error('Error al actualizar estado:', error);\n          }\n          resolve(true);\n        } else if (xhr.status === 0 || xhr.status === 431) {\n          console.error(`‚ùå Error ${xhr.status} - Intentando m√©todo ultra-directo`);\n          // Usar m√©todo directo sin headers como √∫ltima opci√≥n\n          const success = await syncPlatoDirectly(data.id, data.name?.substring(0, 30) || 'Sin nombre', Number(data.price) || 0);\n          clearTimeout(operationTimeoutId);\n          resolve(success);\n        } else {\n          console.error(`‚ùå Error HTTP ${xhr.status} en sincronizaci√≥n`);\n          handleRetry();\n        }\n      }\n    };\n    xhr.ontimeout = function () {\n      console.warn('‚è±Ô∏è Timeout de la petici√≥n HTTP');\n      handleRetry();\n    };\n    xhr.onerror = function () {\n      console.error('‚ùå Error de red en sincronizaci√≥n');\n      handleRetry();\n    };\n\n    // Funci√≥n para manejar reintentos\n    const handleRetry = () => {\n      if (retryCount < maxRetries) {\n        const delay = SYNC_CONFIG.retryIntervals[retryCount] || 5000;\n        console.log(`üîÑ Reintentando en ${delay}ms... (${retryCount + 1}/${maxRetries})`);\n        setTimeout(() => {\n          clearTimeout(operationTimeoutId);\n          syncMinimalDataOnly(data, platoId, retryCount + 1).then(success => resolve(success));\n        }, delay);\n      } else {\n        clearTimeout(operationTimeoutId);\n        console.warn('‚ùå Agotados todos los reintentos de sincronizaci√≥n');\n        resolve(false);\n      }\n    };\n    try {\n      // Usar m√©todo POST con headers m√≠nimos\n      xhr.open('POST', `${API_URL}/platos/minimal`, true);\n      xhr.setRequestHeader('Content-Type', 'application/json');\n\n      // Enviar los datos minimalistas\n      xhr.send(JSON.stringify(minimalData));\n    } catch (error) {\n      console.error('‚ùå Error al iniciar la petici√≥n:', error);\n      handleRetry();\n    }\n  });\n};\n\n// Procesar la cola de sincronizaci√≥n\nconst processSyncQueue = async () => {\n  if (!(await isOnline()) || isSyncing) {\n    console.log(`No se puede procesar la cola. En l√≠nea: ${_isOnline}, Sincronizando: ${isSyncing}`);\n    return false;\n  }\n  isSyncing = true;\n  console.log('Iniciando procesamiento de cola de sincronizaci√≥n...');\n  try {\n    const syncItems = await getSyncQueue();\n    if (syncItems.length === 0) {\n      console.log('No hay elementos en la cola de sincronizaci√≥n');\n      isSyncing = false;\n      return true;\n    }\n    console.log(`Procesando ${syncItems.length} elementos en la cola de sincronizaci√≥n`);\n\n    // Procesar cada elemento de la cola\n    for (const item of syncItems) {\n      let syncSuccess = false;\n      if (item.type === 'create' && item.entityType === 'plato') {\n        syncSuccess = await syncPlatoToServer(item.data);\n      }\n      // Aqu√≠ pueden agregarse m√°s tipos de sincronizaci√≥n seg√∫n sea necesario\n\n      if (syncSuccess) {\n        // Eliminar de la cola si la sincronizaci√≥n fue exitosa\n        await removeFromSyncQueue(item.id);\n        console.log(`Elemento ${item.id} eliminado de la cola de sincronizaci√≥n`);\n      } else {\n        // CORRIGIENDO ERROR DE SINTAXIS:\n        console.log(`No se pudo sincronizar el elemento ${item.id}, se reintentar√° m√°s tarde`);\n      }\n    }\n    console.log('Procesamiento de cola de sincronizaci√≥n completado');\n    return true;\n  } catch (error) {\n    console.error('Error al procesar cola de sincronizaci√≥n:', error);\n    return false;\n  } finally {\n    isSyncing = false;\n  }\n};\n\n// Funci√≥n para probar la conexi√≥n a MySQL\nconst testMySQLConnection = async () => {\n  console.log('üîÑ Probando conexi√≥n a MySQL...');\n  try {\n    const response = await fetch(`${API_URL}/test/db`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log('‚úÖ Conexi√≥n a MySQL establecida:', data);\n\n      // Mostrar informaci√≥n clara sobre la base de datos\n      if (data.data && data.data.database) {\n        console.log(`üìä Base de datos MySQL: ${data.data.database}`);\n        console.log(`üìä Tablas disponibles: ${data.data.tables.join(', ')}`);\n      }\n      return true;\n    } else {\n      console.error('‚ùå Error al conectar con MySQL:', await response.text());\n      return false;\n    }\n  } catch (error) {\n    console.error('‚ùå Error de red al probar la conexi√≥n MySQL:', error);\n    return false;\n  }\n};\n\n// A√±adir una funci√≥n para verificar el estado de sincronizaci√≥n\nconst checkSyncStatus = async () => {\n  try {\n    console.log('üîÑ Verificando estado de sincronizaci√≥n...');\n    const response = await fetch(`${API_URL}/platos/sync-status`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log('üìä Estado de sincronizaci√≥n:');\n      console.log(`- Total de platos en MySQL: ${data.data.total}`);\n      console.log('- Platos recientes:');\n      data.data.recentPlatos.forEach(p => console.log(`  * ${p.id}: ${p.name}`));\n      return true;\n    } else {\n      console.error('‚ùå Error al verificar estado de sincronizaci√≥n:', await response.text());\n      return false;\n    }\n  } catch (error) {\n    console.error('‚ùå Error al verificar estado de sincronizaci√≥n:', error);\n    return false;\n  }\n};\n\n// Funci√≥n principal para sincronizar datos\nconst syncData = async () => {\n  if (!(await isOnline())) {\n    console.log('Sin conexi√≥n a Internet, la sincronizaci√≥n no es posible');\n    return false;\n  }\n  try {\n    console.log('Iniciando sincronizaci√≥n de datos...');\n\n    // Procesar la cola de sincronizaci√≥n\n    await processSyncQueue();\n\n    // Sincronizar platos pendientes que no est√©n en la cola\n    const pendingPlatos = await getPendingPlatos();\n    console.log(`Encontrados ${pendingPlatos.length} platos pendientes de sincronizaci√≥n`);\n    for (const plato of pendingPlatos) {\n      await syncPlatoToServer(plato);\n    }\n    console.log('Sincronizaci√≥n completada con √©xito');\n    return true;\n  } catch (error) {\n    console.error('Error durante la sincronizaci√≥n:', error);\n    return false;\n  }\n};\n\n// Inicializar el servicio de sincronizaci√≥n\nconst initSyncService = () => {\n  console.log('üîÑ Inicializando servicio de sincronizaci√≥n...');\n\n  // Probar conexiones directas primero\n  Promise.all([testRawConnection(), testRawMySQLConnection()]).then(([isApiConnected, isMySQLConnected]) => {\n    console.log(`‚úÖ Estado de conexiones directas - API: ${isApiConnected}, MySQL: ${isMySQLConnected}`);\n    if (isApiConnected) {\n      // Configurar escuchas para eventos de conexi√≥n\n      setupConnectionListeners();\n\n      // Configurar sincronizaci√≥n peri√≥dica (cada minuto)\n      setInterval(async () => {\n        if ((await isOnline()) && !isSyncing) {\n          syncData();\n        }\n      }, 60000);\n\n      // Realizar sincronizaci√≥n inicial si hay conexi√≥n a MySQL\n      if (isMySQLConnected) {\n        syncData();\n      }\n    } else {\n      console.error('‚ùå No se pudo establecer conexi√≥n con el servidor.');\n    }\n  });\n  console.log('‚öôÔ∏è Servicio de sincronizaci√≥n inicializado');\n};\n\n// Exportar las funciones adicionales\nexport { initSyncService, syncData, isOnline, _isOnline, testServerConnection, testMySQLConnection, checkSyncStatus, testRawConnection, testRawMySQLConnection, syncPlatoDirectly };","map":{"version":3,"names":["getPendingPlatos","updatePlatoSyncStatus","getSyncQueue","removeFromSyncQueue","preparePlatoForSync","openDB","PLATOS_STORE","API_URL","SYNC_CONFIG","skipServerAvailabilityCheck","maxPlatoSize","retryIntervals","maxRetries","platoUrl","emergencyPlatoUrl","useEmergencyEndpoint","isSyncing","_isOnline","navigator","onLine","isOnline","response","fetch","method","mode","cache","credentials","error","console","setupConnectionListeners","window","addEventListener","log","syncData","then","online","createMinimalPlato","plato","id","name","substring","price","Number","description","includesDrink","Boolean","availableQuantity","is_available","createdAt","Date","toISOString","updatedAt","minimal_sync","checkServerAvailability","xhr","XMLHttpRequest","Promise","resolve","timeoutId","setTimeout","warn","abort","onreadystatechange","readyState","clearTimeout","status","onerror","open","send","markPlatoAsSyncProblematic","platoId","db","transaction","store","objectStore","getRequest","get","reject","onsuccess","event","target","result","Error","sync_problematic","syncStatus","lastSyncAttempt","updateRequest","put","testServerConnection","responsePromise","tryEmergencyEndpoint","RAW_URL","testRawConnection","withCredentials","testRawMySQLConnection","responseText","syncPlatoDirectly","platoName","platoPrice","url","encodeURIComponent","tryUltraMinimalSync","data","dbError","setRequestHeader","minimalData","JSON","stringify","syncPlatoUsingAlternativeMethod","preparedPlato","retryCount","timeout","retryError","Math","pow","ontimeout","syncPlatoToServer","serverAvailable","dataSize","length","createUltraMinimalPlato","prepError","syncMinimalDataOnly","markError","is_ultra_minimal","operationTimeoutId","success","handleRetry","delay","processSyncQueue","syncItems","item","syncSuccess","type","entityType","testMySQLConnection","headers","ok","json","database","tables","join","text","checkSyncStatus","total","recentPlatos","forEach","p","pendingPlatos","initSyncService","all","isApiConnected","isMySQLConnected","setInterval"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/syncService.js"],"sourcesContent":["// src/services/syncService.js\r\n\r\n// Servicio para gestionar la sincronizaci√≥n y el estado de la conexi√≥n\r\nimport { \r\n  getPendingPlatos, \r\n  updatePlatoSyncStatus, \r\n  getSyncQueue, \r\n  removeFromSyncQueue,\r\n  preparePlatoForSync,\r\n  openDB\r\n} from './indexedDBService';\r\n\r\n// Constantes desde el servicio IndexedDB\r\nconst PLATOS_STORE = 'platos';\r\nconst API_URL = 'http://localhost:3000/api';\r\n\r\n// Configuraci√≥n espec√≠fica para mejorar la sincronizaci√≥n\r\nconst SYNC_CONFIG = {\r\n  // Desactivar verificaci√≥n de disponibilidad del servidor si causa problemas\r\n  skipServerAvailabilityCheck: true,\r\n  // Limitar a√∫n m√°s el tama√±o m√°ximo de los platos para sincronizaci√≥n\r\n  maxPlatoSize: 30000, // 30KB m√°ximo\r\n  // Intervalos de reintento m√°s largos\r\n  retryIntervals: [5000, 15000, 30000],\r\n  // M√°ximo n√∫mero de reintentos\r\n  maxRetries: 2,\r\n  // URL del endpoint principal para platos\r\n  platoUrl: `${API_URL}/platos`,\r\n  // URL alternativa para sincronizaci√≥n de emergencia (m√°s b√°sica)\r\n  emergencyPlatoUrl: `${API_URL}/platos/minimal`,\r\n  // Usar endpoint de sincronizaci√≥n de emergencia\r\n  useEmergencyEndpoint: true\r\n};\r\n\r\n// Estado de la sincronizaci√≥n\r\nlet isSyncing = false;\r\nlet _isOnline = navigator.onLine;\r\n\r\n// Alternativa m√°s simple para verificar la conexi√≥n\r\nconst isOnline = async () => {\r\n  // Primero comprobamos el estado de navigator.onLine\r\n  if (!navigator.onLine) {\r\n    return false;\r\n  }\r\n  \r\n  // Intentamos hacer un fetch a un recurso peque√±o (como un favicon)\r\n  try {\r\n    const response = await fetch(`${API_URL}/favicon.ico`, {\r\n      method: 'HEAD', // Solo pedimos las cabeceras, no el contenido\r\n      mode: 'no-cors', // Modo no-cors para evitar problemas de CORS\r\n      cache: 'no-store',\r\n      credentials: 'omit'\r\n    });\r\n    \r\n    return true; // Si no hay excepci√≥n, asumimos que estamos en l√≠nea\r\n  } catch (error) {\r\n    console.error('Error al verificar estado de conexi√≥n:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Configurar escuchas para eventos de conexi√≥n\r\nconst setupConnectionListeners = () => {\r\n  window.addEventListener('online', async () => {\r\n    console.log('Evento online detectado');\r\n    _isOnline = await isOnline();\r\n    if (_isOnline) {\r\n      console.log('Conexi√≥n a Internet restablecida');\r\n      // Sincronizar cuando se recupera la conexi√≥n\r\n      syncData();\r\n    }\r\n  });\r\n  \r\n  window.addEventListener('offline', () => {\r\n    console.log('Evento offline detectado');\r\n    _isOnline = false;\r\n    console.log('Conexi√≥n a Internet perdida');\r\n  });\r\n  \r\n  // Verificar estado inicial\r\n  isOnline().then(online => {\r\n    console.log(`Estado inicial de conexi√≥n: ${online ? 'En l√≠nea' : 'Fuera de l√≠nea'}`);\r\n  });\r\n};\r\n\r\n// Crear versi√≥n minimalista de un plato para sincronizaci√≥n de emergencia\r\nconst createMinimalPlato = (plato) => {\r\n  return {\r\n    id: plato.id,\r\n    name: plato.name?.substring(0, 50) || 'Plato sin nombre',\r\n    price: Number(plato.price) || 0,\r\n    description: (plato.description?.substring(0, 100) || '') + '...',\r\n    includesDrink: Boolean(plato.includesDrink),\r\n    availableQuantity: Number(plato.availableQuantity) || 0,\r\n    is_available: true,\r\n    createdAt: plato.createdAt || new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    minimal_sync: true  // Marca para indicar que es una versi√≥n minimalista\r\n  };\r\n};\r\n\r\n// Verificar si el servidor est√° realmente disponible\r\nconst checkServerAvailability = async () => {\r\n  // Si la verificaci√≥n est√° desactivada, asumir que el servidor est√° disponible\r\n  if (SYNC_CONFIG.skipServerAvailabilityCheck) {\r\n    console.log('üîÑ Omitiendo verificaci√≥n de disponibilidad del servidor (desactivada en configuraci√≥n)');\r\n    return true;\r\n  }\r\n  \r\n  try {\r\n    // Usar una petici√≥n minimalista sin headers adicionales\r\n    const xhr = new XMLHttpRequest();\r\n    \r\n    // Configurar un timeout corto para la verificaci√≥n\r\n    return new Promise((resolve) => {\r\n      const timeoutId = setTimeout(() => {\r\n        console.warn('‚è±Ô∏è Timeout en verificaci√≥n de servidor');\r\n        xhr.abort();\r\n        resolve(false);\r\n      }, 3000);\r\n      \r\n      xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4) {\r\n          clearTimeout(timeoutId);\r\n          resolve(xhr.status >= 200 && xhr.status < 300);\r\n        }\r\n      };\r\n      \r\n      xhr.onerror = function() {\r\n        clearTimeout(timeoutId);\r\n        console.warn('‚ùå Error en verificaci√≥n de servidor');\r\n        resolve(false);\r\n      };\r\n      \r\n      // Usar m√©todo simple GET sin headers complejos\r\n      xhr.open('GET', `${API_URL}/ping`, true);\r\n      xhr.send();\r\n    });\r\n  } catch (error) {\r\n    console.warn('‚ö†Ô∏è Error al verificar disponibilidad del servidor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Marcar un plato como problem√°tico para evitar intentos continuos\r\nconst markPlatoAsSyncProblematic = async (platoId) => {\r\n  try {\r\n    // Actualizar el estado del plato en IndexedDB\r\n    const db = await openDB();\r\n    const transaction = db.transaction([PLATOS_STORE], 'readwrite');\r\n    const store = transaction.objectStore(PLATOS_STORE);\r\n    \r\n    // Obtener el plato\r\n    const getRequest = store.get(platoId);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      getRequest.onsuccess = (event) => {\r\n        const plato = event.target.result;\r\n        \r\n        if (!plato) {\r\n          reject(new Error(`Plato ID ${platoId} no encontrado`));\r\n          return;\r\n        }\r\n        \r\n        // Marcar como problem√°tico y cambiar estado de sincronizaci√≥n\r\n        plato.sync_problematic = true;\r\n        plato.syncStatus = 'sync_error';\r\n        plato.lastSyncAttempt = new Date().toISOString();\r\n        \r\n        // Guardar los cambios\r\n        const updateRequest = store.put(plato);\r\n        \r\n        updateRequest.onsuccess = () => {\r\n          console.log(`‚úÖ Plato ID ${platoId} marcado como problem√°tico para sincronizaci√≥n`);\r\n          resolve(true);\r\n        };\r\n        \r\n        updateRequest.onerror = (event) => {\r\n          reject(new Error(`Error al actualizar plato: ${event.target.error}`));\r\n        };\r\n      };\r\n      \r\n      getRequest.onerror = (event) => {\r\n        reject(new Error(`Error al obtener plato: ${event.target.error}`));\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('‚ùå Error al marcar plato como problem√°tico:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Funci√≥n para probar la conexi√≥n con el servidor (modo ultra-ligero)\r\nconst testServerConnection = async () => {\r\n  console.log('üîÑ Probando conexi√≥n con el servidor (modo emergencia)...');\r\n  \r\n  try {\r\n    // Crear un objeto XMLHttpRequest directamente - sin headers\r\n    const xhr = new XMLHttpRequest();\r\n    \r\n    // Configurar una promesa para manejar la respuesta\r\n    const responsePromise = new Promise((resolve) => {\r\n      // Configurar timeout\r\n      const timeoutId = setTimeout(() => {\r\n        console.warn('‚è±Ô∏è Timeout en la prueba de conexi√≥n');\r\n        xhr.abort();\r\n        resolve(false);\r\n      }, 5000);\r\n      \r\n      xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4) {\r\n          clearTimeout(timeoutId);\r\n          if (xhr.status >= 200 && xhr.status < 300) {\r\n            console.log('‚úÖ Conexi√≥n b√°sica establecida');\r\n            resolve(true);\r\n          } else if (xhr.status === 431) {\r\n            console.error('‚ùå Error 431: Request Header Fields Too Large');\r\n            // Intentar con endpoint de emergencia sin headers\r\n            tryEmergencyEndpoint().then(resolve);\r\n          } else {\r\n            console.error(`‚ùå Error en prueba de conexi√≥n: ${xhr.status}`);\r\n            resolve(false);\r\n          }\r\n        }\r\n      };\r\n      \r\n      xhr.onerror = function() {\r\n        clearTimeout(timeoutId);\r\n        console.error('‚ùå Error de red en prueba de conexi√≥n');\r\n        // Intentar con endpoint de emergencia sin headers\r\n        tryEmergencyEndpoint().then(resolve);\r\n      };\r\n    });\r\n    \r\n    // Realizar una solicitud GET simple sin headers\r\n    xhr.open('GET', `${API_URL}/test/ultra-minimal`, true);\r\n    // No a√±adir ning√∫n header\r\n    xhr.send();\r\n    \r\n    return await responsePromise;\r\n  } catch (error) {\r\n    console.error('‚ùå Error en prueba de conexi√≥n:', error);\r\n    return tryEmergencyEndpoint();\r\n  }\r\n};\r\n\r\n// Probar endpoint de emergencia absoluto\r\nconst tryEmergencyEndpoint = async () => {\r\n  console.log('üö® Intentando conexi√≥n de emergencia sin headers...');\r\n  \r\n  try {\r\n    const xhr = new XMLHttpRequest();\r\n    \r\n    const responsePromise = new Promise((resolve) => {\r\n      xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4) {\r\n          if (xhr.status >= 200 && xhr.status < 300) {\r\n            console.log('‚úÖ Conexi√≥n de emergencia establecida');\r\n            resolve(true);\r\n          } else {\r\n            console.error(`‚ùå Error en conexi√≥n de emergencia: ${xhr.status}`);\r\n            resolve(false);\r\n          }\r\n        }\r\n      };\r\n      \r\n      xhr.onerror = function() {\r\n        console.error('‚ùå Error de red en conexi√≥n de emergencia');\r\n        resolve(false);\r\n      };\r\n    });\r\n    \r\n    // Usar endpoint de emergencia sin query params ni headers\r\n    xhr.open('GET', `${API_URL}/test/emergency`, true);\r\n    xhr.send();\r\n    \r\n    return await responsePromise;\r\n  } catch (error) {\r\n    console.error('‚ùå Error en prueba de emergencia:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// URL para conexiones directas sin headers\r\nconst RAW_URL = 'http://localhost:3000/raw'; \r\n\r\n// Funci√≥n ultra-minimalista para probar conexi√≥n\r\nconst testRawConnection = async () => {\r\n  console.log('üîÑ Probando conexi√≥n directa sin headers...');\r\n  \r\n  try {\r\n    // Usar XMLHttpRequest sin cookies ni headers personalizados\r\n    const xhr = new XMLHttpRequest();\r\n    \r\n    return new Promise((resolve) => {\r\n      const timeoutId = setTimeout(() => {\r\n        console.warn('‚è±Ô∏è Timeout en conexi√≥n directa');\r\n        xhr.abort();\r\n        resolve(false);\r\n      }, 3000);\r\n      \r\n      xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4) {\r\n          clearTimeout(timeoutId);\r\n          if (xhr.status >= 200 && xhr.status < 300) {\r\n            console.log('‚úÖ Conexi√≥n directa exitosa');\r\n            resolve(true);\r\n          } else {\r\n            console.error(`‚ùå Error en conexi√≥n directa: ${xhr.status}`);\r\n            resolve(false);\r\n          }\r\n        }\r\n      };\r\n      \r\n      xhr.onerror = function() {\r\n        clearTimeout(timeoutId);\r\n        console.error('‚ùå Error de red en conexi√≥n directa');\r\n        resolve(false);\r\n      };\r\n      \r\n      // Usar URL sin query params\r\n      xhr.open('GET', `${RAW_URL}/ping`, true);\r\n      // No establecer ning√∫n header\r\n      xhr.withCredentials = false; // Importante: evitar enviar cookies\r\n      xhr.send();\r\n    });\r\n  } catch (error) {\r\n    console.error('‚ùå Error en prueba directa:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Probar MySQL sin headers\r\nconst testRawMySQLConnection = async () => {\r\n  console.log('üîÑ Probando conexi√≥n directa a MySQL...');\r\n  \r\n  try {\r\n    const xhr = new XMLHttpRequest();\r\n    \r\n    return new Promise((resolve) => {\r\n      const timeoutId = setTimeout(() => {\r\n        console.warn('‚è±Ô∏è Timeout en conexi√≥n directa a MySQL');\r\n        xhr.abort();\r\n        resolve(false);\r\n      }, 3000);\r\n      \r\n      xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4) {\r\n          clearTimeout(timeoutId);\r\n          if (xhr.status >= 200 && xhr.status < 300) {\r\n            console.log(`‚úÖ Conexi√≥n directa a MySQL exitosa: ${xhr.responseText}`);\r\n            resolve(true);\r\n          } else {\r\n            console.error(`‚ùå Error en conexi√≥n directa a MySQL: ${xhr.status}`);\r\n            resolve(false);\r\n          }\r\n        }\r\n      };\r\n      \r\n      xhr.onerror = function() {\r\n        clearTimeout(timeoutId);\r\n        console.error('‚ùå Error de red en conexi√≥n directa a MySQL');\r\n        resolve(false);\r\n      };\r\n      \r\n      // Usar URL sin query params\r\n      xhr.open('GET', `${RAW_URL}/mysql`, true);\r\n      // No establecer ning√∫n header\r\n      xhr.withCredentials = false; // Importante: evitar enviar cookies\r\n      xhr.send();\r\n    });\r\n  } catch (error) {\r\n    console.error('‚ùå Error en prueba directa de MySQL:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Sincronizar plato mediante conexi√≥n directa sin headers\r\nconst syncPlatoDirectly = async (platoId, platoName, platoPrice) => {\r\n  console.log(`üîÑ Sincronizando plato ${platoId} mediante conexi√≥n directa...`);\r\n  \r\n  try {\r\n    const xhr = new XMLHttpRequest();\r\n    \r\n    return new Promise((resolve) => {\r\n      const timeoutId = setTimeout(() => {\r\n        console.warn('‚è±Ô∏è Timeout en sincronizaci√≥n directa');\r\n        xhr.abort();\r\n        resolve(false);\r\n      }, 5000);\r\n      \r\n      xhr.onreadystatechange = async function() {\r\n        if (xhr.readyState === 4) {\r\n          clearTimeout(timeoutId);\r\n          if (xhr.status >= 200 && xhr.status < 300) {\r\n            console.log(`‚úÖ Sincronizaci√≥n directa exitosa para plato ${platoId}`);\r\n            try {\r\n              await updatePlatoSyncStatus(platoId, 'synced');\r\n            } catch (error) {\r\n              console.error('Error al actualizar estado:', error);\r\n            }\r\n            resolve(true);\r\n          } else {\r\n            console.error(`‚ùå Error en sincronizaci√≥n directa: ${xhr.status}`);\r\n            resolve(false);\r\n          }\r\n        }\r\n      };\r\n      \r\n      xhr.onerror = function() {\r\n        clearTimeout(timeoutId);\r\n        console.error('‚ùå Error de red en sincronizaci√≥n directa');\r\n        resolve(false);\r\n      };\r\n      \r\n      // Usar URL con query params para pasar datos m√≠nimos\r\n      const url = `${RAW_URL}/sync?id=${encodeURIComponent(platoId)}&name=${encodeURIComponent(platoName || '')}&price=${encodeURIComponent(platoPrice || 0)}`;\r\n      \r\n      xhr.open('POST', url, true);\r\n      xhr.withCredentials = false; // Importante: evitar enviar cookies\r\n      xhr.send();\r\n    });\r\n  } catch (error) {\r\n    console.error('‚ùå Error en sincronizaci√≥n directa:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// M√©todo ultra-minimal usando XMLHttpRequest sin headers\r\nconst tryUltraMinimalSync = async (data, platoId) => {\r\n  try {\r\n    console.log('üö® Intentando sincronizaci√≥n ultra-minimal para plato:', platoId);\r\n    \r\n    // Crear un objeto XMLHttpRequest directamente\r\n    const xhr = new XMLHttpRequest();\r\n    \r\n    // Configurar una promesa para manejar la respuesta\r\n    const responsePromise = new Promise((resolve) => {\r\n      // Configurar timeout\r\n      const timeoutId = setTimeout(() => {\r\n        console.warn('‚è±Ô∏è Timeout en sincronizaci√≥n ultra-minimal');\r\n        xhr.abort();\r\n        resolve(false);\r\n      }, 15000);\r\n      \r\n      xhr.onreadystatechange = async function() {\r\n        if (xhr.readyState === 4) {\r\n          clearTimeout(timeoutId);\r\n          if (xhr.status >= 200 && xhr.status < 300) {\r\n            console.log('‚úÖ Sincronizaci√≥n ultra-minimal exitosa');\r\n            try {\r\n              await updatePlatoSyncStatus(platoId, 'synced');\r\n            } catch (dbError) {\r\n              console.error('Error al actualizar estado en BD:', dbError);\r\n            }\r\n            resolve(true);\r\n          } else {\r\n            console.error(`‚ùå Error en sincronizaci√≥n ultra-minimal: ${xhr.status}`);\r\n            resolve(false);\r\n          }\r\n        }\r\n      };\r\n      \r\n      xhr.onerror = function() {\r\n        clearTimeout(timeoutId);\r\n        console.error('‚ùå Error de red en sincronizaci√≥n ultra-minimal');\r\n        resolve(false);\r\n      };\r\n    });\r\n    \r\n    // Usar m√©todo POST con datos minimalistas\r\n    xhr.open('POST', `${API_URL}/platos/emergency-sync`, true);\r\n    \r\n    // Solo agregar Content-Type, nada m√°s\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    \r\n    // Preparar datos ultra-minimalistas\r\n    const minimalData = {\r\n      id: data.id,\r\n      name: (data.name || \"\").substring(0, 30),\r\n      price: Number(data.price) || 0\r\n    };\r\n    \r\n    // Enviar los datos\r\n    xhr.send(JSON.stringify(minimalData));\r\n    \r\n    return await responsePromise;\r\n  } catch (error) {\r\n    console.error('‚ùå Error en sincronizaci√≥n ultra-minimal:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// M√©todo alternativo de sincronizaci√≥n con opciones m√°s resilientes\r\nconst syncPlatoUsingAlternativeMethod = async (preparedPlato, platoId, retryCount = 0) => {\r\n  const maxRetries = 3;\r\n  \r\n  try {\r\n    console.log('üì° Usando m√©todo alternativo de sincronizaci√≥n...');\r\n    \r\n    // Usar XMLHttpRequest para mayor control sobre la conexi√≥n\r\n    return new Promise((resolve, reject) => {\r\n      const xhr = new XMLHttpRequest();\r\n      \r\n      // Configurar timeout largo\r\n      xhr.timeout = 60000; // 60 segundos\r\n      \r\n      xhr.onreadystatechange = async function() {\r\n        if (xhr.readyState === 4) {\r\n          if (xhr.status >= 200 && xhr.status < 300) {\r\n            console.log('‚úÖ Sincronizaci√≥n exitosa usando m√©todo alternativo');\r\n            \r\n            try {\r\n              // Actualizar estado en la base de datos\r\n              await updatePlatoSyncStatus(platoId, 'synced');\r\n            } catch (dbError) {\r\n              console.error('‚ö†Ô∏è Error al actualizar estado en BD:', dbError);\r\n            }\r\n            \r\n            resolve(true);\r\n          } else {\r\n            console.error(`‚ùå Error en sincronizaci√≥n alternativa: ${xhr.status}`);\r\n            \r\n            // Si hay error 500 y a√∫n tenemos reintentos\r\n            if (xhr.status === 500 && retryCount < maxRetries) {\r\n              console.warn(`‚ö†Ô∏è Reintentando (${retryCount+1}/${maxRetries})...`);\r\n              \r\n              // Espera exponencial entre reintentos\r\n              setTimeout(async () => {\r\n                try {\r\n                  const result = await syncPlatoUsingAlternativeMethod(\r\n                    preparedPlato, platoId, retryCount + 1\r\n                  );\r\n                  resolve(result);\r\n                } catch (retryError) {\r\n                  reject(retryError);\r\n                }\r\n              }, 5000 * Math.pow(2, retryCount));\r\n            } else {\r\n              reject(new Error(`Error HTTP: ${xhr.status}`));\r\n            }\r\n          }\r\n        }\r\n      };\r\n      \r\n      xhr.ontimeout = function() {\r\n        console.error('‚ùå Timeout en la solicitud alternativa');\r\n        reject(new Error('Timeout en la solicitud'));\r\n      };\r\n      \r\n      xhr.onerror = function() {\r\n        console.error('‚ùå Error de red en solicitud alternativa');\r\n        \r\n        // Reintento con backoff si todav√≠a hay intentos disponibles\r\n        if (retryCount < maxRetries) {\r\n          console.warn(`‚ö†Ô∏è Error de red, reintentando (${retryCount+1}/${maxRetries})...`);\r\n          \r\n          setTimeout(async () => {\r\n            try {\r\n              const result = await syncPlatoUsingAlternativeMethod(\r\n                preparedPlato, platoId, retryCount + 1\r\n              );\r\n              resolve(result);\r\n            } catch (retryError) {\r\n              reject(retryError);\r\n            }\r\n          }, 5000 * Math.pow(2, retryCount));\r\n        } else {\r\n          reject(new Error('Error de red persistente'));\r\n        }\r\n      };\r\n      \r\n      // Abrir conexi√≥n con m√©todo POST\r\n      xhr.open('POST', `${API_URL}/platos`, true);\r\n      \r\n      // Establecer headers\r\n      xhr.setRequestHeader('Content-Type', 'application/json');\r\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n      \r\n      // Enviar los datos\r\n      xhr.send(JSON.stringify(preparedPlato));\r\n    });\r\n  } catch (error) {\r\n    console.error('‚ùå Error en m√©todo alternativo de sincronizaci√≥n:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Sincronizar un plato con el servidor\r\nconst syncPlatoToServer = async (plato, retryCount = 0) => {\r\n  const maxRetries = SYNC_CONFIG.maxRetries;\r\n  \r\n  // Si el plato est√° marcado como problem√°tico, omitirlo\r\n  if (plato.sync_problematic) {\r\n    console.warn(`‚ö†Ô∏è Omitiendo plato ${plato.id} marcado como problem√°tico para sincronizaci√≥n`);\r\n    return false;\r\n  }\r\n  \r\n  console.log(`Sincronizando plato ${plato.id} con el servidor (intento ${retryCount + 1}/${maxRetries + 1})...`);\r\n  \r\n  try {\r\n    // Omitir verificaci√≥n si est√° desactivada\r\n    if (!SYNC_CONFIG.skipServerAvailabilityCheck) {\r\n      // Verificar si el servidor est√° disponible\r\n      const serverAvailable = await checkServerAvailability();\r\n      if (!serverAvailable) {\r\n        console.error('‚ùå El servidor no est√° disponible. Posponiendo sincronizaci√≥n.');\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    // Preparar datos ultra-minimalistas para sincronizaci√≥n\r\n    let syncData;\r\n    \r\n    try {\r\n      // Intentar usar la funci√≥n de preparaci√≥n normal\r\n      const preparedPlato = preparePlatoForSync(plato);\r\n      \r\n      // Verificar tama√±o y aplicar l√≠mites estrictos\r\n      const dataSize = JSON.stringify(preparedPlato).length;\r\n      if (dataSize > SYNC_CONFIG.maxPlatoSize) {\r\n        console.warn(`‚ö†Ô∏è Plato demasiado grande (${dataSize} bytes). Usando versi√≥n ultra-minimalista.`);\r\n        syncData = createUltraMinimalPlato(plato);\r\n      } else {\r\n        syncData = preparedPlato;\r\n      }\r\n    } catch (prepError) {\r\n      console.error('‚ùå Error al preparar datos:', prepError);\r\n      syncData = createUltraMinimalPlato(plato);\r\n    }\r\n    \r\n    // Usar el m√©todo m√°s confiable para sincronizaci√≥n\r\n    return await syncMinimalDataOnly(syncData, plato.id, retryCount);\r\n  } catch (error) {\r\n    console.error('‚ùå Error en sincronizaci√≥n:', error);\r\n    \r\n    if (retryCount >= maxRetries) {\r\n      try {\r\n        await markPlatoAsSyncProblematic(plato.id);\r\n      } catch (markError) {\r\n        console.error('Error al marcar plato como problem√°tico:', markError);\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n};\r\n\r\n// Versi√≥n ultra-minimalista para casos extremos\r\nconst createUltraMinimalPlato = (plato) => {\r\n  return {\r\n    id: plato.id,\r\n    name: plato.name?.substring(0, 30) || 'Plato sin nombre',\r\n    price: Number(plato.price) || 0,\r\n    // Omitir todo lo que no sea absolutamente esencial\r\n    is_ultra_minimal: true\r\n  };\r\n};\r\n\r\n// M√©todo de sincronizaci√≥n extremadamente simplificado para problemas persistentes\r\n// Actualizando para usar el m√©todo ultra-minimal cuando hay error 431\r\nconst syncMinimalDataOnly = async (data, platoId, retryCount = 0) => {\r\n  const maxRetries = SYNC_CONFIG.maxRetries;\r\n  \r\n  // Usar datos ultra-minimalistas para evitar problemas de tama√±o\r\n  const minimalData = {\r\n    id: data.id,\r\n    name: data.name?.substring(0, 50) || 'Plato sin nombre',\r\n    price: Number(data.price) || 0,\r\n    description: data.description?.substring(0, 100) || '',\r\n    availableQuantity: Number(data.availableQuantity) || 0,\r\n    is_available: Boolean(data.is_available),\r\n    // Eliminar la imagen para esta sincronizaci√≥n\r\n    minimal_sync: true\r\n  };\r\n  \r\n  return new Promise((resolve) => {\r\n    // Establecer timeout para toda la operaci√≥n\r\n    const operationTimeoutId = setTimeout(() => {\r\n      console.warn('‚è±Ô∏è Timeout global de la operaci√≥n de sincronizaci√≥n');\r\n      resolve(false);\r\n    }, 30000);\r\n    \r\n    const xhr = new XMLHttpRequest();\r\n    \r\n    // Configurar timeouts m√°s estrictos\r\n    xhr.timeout = 15000;\r\n    \r\n    xhr.onreadystatechange = async function() {\r\n      if (xhr.readyState === 4) {\r\n        if (xhr.status >= 200 && xhr.status < 300) {\r\n          clearTimeout(operationTimeoutId);\r\n          try {\r\n            await updatePlatoSyncStatus(platoId, 'synced');\r\n            console.log(`‚úÖ Sincronizaci√≥n exitosa para plato ${platoId}`);\r\n          } catch (error) {\r\n            console.error('Error al actualizar estado:', error);\r\n          }\r\n          resolve(true);\r\n        } else if (xhr.status === 0 || xhr.status === 431) {\r\n          console.error(`‚ùå Error ${xhr.status} - Intentando m√©todo ultra-directo`);\r\n          // Usar m√©todo directo sin headers como √∫ltima opci√≥n\r\n          const success = await syncPlatoDirectly(\r\n            data.id, \r\n            data.name?.substring(0, 30) || 'Sin nombre', \r\n            Number(data.price) || 0\r\n          );\r\n          clearTimeout(operationTimeoutId);\r\n          resolve(success);\r\n        } else {\r\n          console.error(`‚ùå Error HTTP ${xhr.status} en sincronizaci√≥n`);\r\n          handleRetry();\r\n        }\r\n      }\r\n    };\r\n    \r\n    xhr.ontimeout = function() {\r\n      console.warn('‚è±Ô∏è Timeout de la petici√≥n HTTP');\r\n      handleRetry();\r\n    };\r\n    \r\n    xhr.onerror = function() {\r\n      console.error('‚ùå Error de red en sincronizaci√≥n');\r\n      handleRetry();\r\n    };\r\n    \r\n    // Funci√≥n para manejar reintentos\r\n    const handleRetry = () => {\r\n      if (retryCount < maxRetries) {\r\n        const delay = SYNC_CONFIG.retryIntervals[retryCount] || 5000;\r\n        console.log(`üîÑ Reintentando en ${delay}ms... (${retryCount + 1}/${maxRetries})`);\r\n        \r\n        setTimeout(() => {\r\n          clearTimeout(operationTimeoutId);\r\n          syncMinimalDataOnly(data, platoId, retryCount + 1)\r\n            .then(success => resolve(success));\r\n        }, delay);\r\n      } else {\r\n        clearTimeout(operationTimeoutId);\r\n        console.warn('‚ùå Agotados todos los reintentos de sincronizaci√≥n');\r\n        resolve(false);\r\n      }\r\n    };\r\n    \r\n    try {\r\n      // Usar m√©todo POST con headers m√≠nimos\r\n      xhr.open('POST', `${API_URL}/platos/minimal`, true);\r\n      xhr.setRequestHeader('Content-Type', 'application/json');\r\n      \r\n      // Enviar los datos minimalistas\r\n      xhr.send(JSON.stringify(minimalData));\r\n    } catch (error) {\r\n      console.error('‚ùå Error al iniciar la petici√≥n:', error);\r\n      handleRetry();\r\n    }\r\n  });\r\n};\r\n\r\n// Procesar la cola de sincronizaci√≥n\r\nconst processSyncQueue = async () => {\r\n  if (!await isOnline() || isSyncing) {\r\n    console.log(`No se puede procesar la cola. En l√≠nea: ${_isOnline}, Sincronizando: ${isSyncing}`);\r\n    return false;\r\n  }\r\n  \r\n  isSyncing = true;\r\n  console.log('Iniciando procesamiento de cola de sincronizaci√≥n...');\r\n  \r\n  try {\r\n    const syncItems = await getSyncQueue();\r\n    \r\n    if (syncItems.length === 0) {\r\n      console.log('No hay elementos en la cola de sincronizaci√≥n');\r\n      isSyncing = false;\r\n      return true;\r\n    }\r\n    \r\n    console.log(`Procesando ${syncItems.length} elementos en la cola de sincronizaci√≥n`);\r\n    \r\n    // Procesar cada elemento de la cola\r\n    for (const item of syncItems) {\r\n      let syncSuccess = false;\r\n      \r\n      if (item.type === 'create' && item.entityType === 'plato') {\r\n        syncSuccess = await syncPlatoToServer(item.data);\r\n      }\r\n      // Aqu√≠ pueden agregarse m√°s tipos de sincronizaci√≥n seg√∫n sea necesario\r\n      \r\n      if (syncSuccess) {\r\n        // Eliminar de la cola si la sincronizaci√≥n fue exitosa\r\n        await removeFromSyncQueue(item.id);\r\n        console.log(`Elemento ${item.id} eliminado de la cola de sincronizaci√≥n`);\r\n      } else {\r\n        // CORRIGIENDO ERROR DE SINTAXIS:\r\n        console.log(`No se pudo sincronizar el elemento ${item.id}, se reintentar√° m√°s tarde`);\r\n      }\r\n    }\r\n    \r\n    console.log('Procesamiento de cola de sincronizaci√≥n completado');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al procesar cola de sincronizaci√≥n:', error);\r\n    return false;\r\n  } finally {\r\n    isSyncing = false;\r\n  }\r\n};\r\n\r\n// Funci√≥n para probar la conexi√≥n a MySQL\r\nconst testMySQLConnection = async () => {\r\n  console.log('üîÑ Probando conexi√≥n a MySQL...');\r\n  \r\n  try {\r\n    const response = await fetch(`${API_URL}/test/db`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      console.log('‚úÖ Conexi√≥n a MySQL establecida:', data);\r\n      \r\n      // Mostrar informaci√≥n clara sobre la base de datos\r\n      if (data.data && data.data.database) {\r\n        console.log(`üìä Base de datos MySQL: ${data.data.database}`);\r\n        console.log(`üìä Tablas disponibles: ${data.data.tables.join(', ')}`);\r\n      }\r\n      \r\n      return true;\r\n    } else {\r\n      console.error('‚ùå Error al conectar con MySQL:', await response.text());\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('‚ùå Error de red al probar la conexi√≥n MySQL:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// A√±adir una funci√≥n para verificar el estado de sincronizaci√≥n\r\nconst checkSyncStatus = async () => {\r\n  try {\r\n    console.log('üîÑ Verificando estado de sincronizaci√≥n...');\r\n    \r\n    const response = await fetch(`${API_URL}/platos/sync-status`, {\r\n      method: 'GET',\r\n      headers: { 'Accept': 'application/json' }\r\n    });\r\n    \r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      console.log('üìä Estado de sincronizaci√≥n:');\r\n      console.log(`- Total de platos en MySQL: ${data.data.total}`);\r\n      console.log('- Platos recientes:');\r\n      data.data.recentPlatos.forEach(p => console.log(`  * ${p.id}: ${p.name}`));\r\n      return true;\r\n    } else {\r\n      console.error('‚ùå Error al verificar estado de sincronizaci√≥n:', await response.text());\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('‚ùå Error al verificar estado de sincronizaci√≥n:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Funci√≥n principal para sincronizar datos\r\nconst syncData = async () => {\r\n  if (!await isOnline()) {\r\n    console.log('Sin conexi√≥n a Internet, la sincronizaci√≥n no es posible');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    console.log('Iniciando sincronizaci√≥n de datos...');\r\n    \r\n    // Procesar la cola de sincronizaci√≥n\r\n    await processSyncQueue();\r\n    \r\n    // Sincronizar platos pendientes que no est√©n en la cola\r\n    const pendingPlatos = await getPendingPlatos();\r\n    console.log(`Encontrados ${pendingPlatos.length} platos pendientes de sincronizaci√≥n`);\r\n    \r\n    for (const plato of pendingPlatos) {\r\n      await syncPlatoToServer(plato);\r\n    }\r\n    \r\n    console.log('Sincronizaci√≥n completada con √©xito');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error durante la sincronizaci√≥n:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Inicializar el servicio de sincronizaci√≥n\r\nconst initSyncService = () => {\r\n  console.log('üîÑ Inicializando servicio de sincronizaci√≥n...');\r\n  \r\n  // Probar conexiones directas primero\r\n  Promise.all([\r\n    testRawConnection(),\r\n    testRawMySQLConnection()\r\n  ]).then(([isApiConnected, isMySQLConnected]) => {\r\n    console.log(`‚úÖ Estado de conexiones directas - API: ${isApiConnected}, MySQL: ${isMySQLConnected}`);\r\n    \r\n    if (isApiConnected) {\r\n      // Configurar escuchas para eventos de conexi√≥n\r\n      setupConnectionListeners();\r\n      \r\n      // Configurar sincronizaci√≥n peri√≥dica (cada minuto)\r\n      setInterval(async () => {\r\n        if (await isOnline() && !isSyncing) {\r\n          syncData();\r\n        }\r\n      }, 60000);\r\n      \r\n      // Realizar sincronizaci√≥n inicial si hay conexi√≥n a MySQL\r\n      if (isMySQLConnected) {\r\n        syncData();\r\n      }\r\n    } else {\r\n      console.error('‚ùå No se pudo establecer conexi√≥n con el servidor.');\r\n    }\r\n  });\r\n  \r\n  console.log('‚öôÔ∏è Servicio de sincronizaci√≥n inicializado');\r\n};\r\n\r\n// Exportar las funciones adicionales\r\nexport {\r\n  initSyncService,\r\n  syncData,\r\n  isOnline,\r\n  _isOnline,\r\n  testServerConnection,\r\n  testMySQLConnection,\r\n  checkSyncStatus,\r\n  testRawConnection,\r\n  testRawMySQLConnection,\r\n  syncPlatoDirectly\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}