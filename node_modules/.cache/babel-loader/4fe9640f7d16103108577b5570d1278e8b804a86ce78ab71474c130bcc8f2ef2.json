{"ast":null,"code":"// Servicio para manejar operaciones con IndexedDB\nconst DB_NAME = 'restauranteAppDB';\nconst DB_VERSION = 1;\nconst PLATOS_STORE = 'platos';\nconst SYNC_QUEUE_STORE = 'syncQueue';\n\n// Inicializar la base de datos\nconst initDB = () => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onerror = event => {\n      console.error('Error al abrir la base de datos IndexedDB:', event);\n      reject('Error al abrir la base de datos');\n    };\n    request.onsuccess = event => {\n      const db = event.target.result;\n      console.log('IndexedDB inicializada correctamente');\n      resolve(db);\n    };\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n\n      // Crear almacén para platos\n      if (!db.objectStoreNames.contains(PLATOS_STORE)) {\n        const platosStore = db.createObjectStore(PLATOS_STORE, {\n          keyPath: 'id',\n          autoIncrement: true\n        });\n        platosStore.createIndex('name', 'name', {\n          unique: false\n        });\n        platosStore.createIndex('syncStatus', 'syncStatus', {\n          unique: false\n        });\n        console.log('Almacén de platos creado');\n      }\n\n      // Crear almacén para la cola de sincronización\n      if (!db.objectStoreNames.contains(SYNC_QUEUE_STORE)) {\n        const syncQueueStore = db.createObjectStore(SYNC_QUEUE_STORE, {\n          keyPath: 'id',\n          autoIncrement: true\n        });\n        syncQueueStore.createIndex('timestamp', 'timestamp', {\n          unique: false\n        });\n        syncQueueStore.createIndex('type', 'type', {\n          unique: false\n        });\n        console.log('Almacén de cola de sincronización creado');\n      }\n    };\n  });\n};\n\n// Abrir conexión a la base de datos\nconst openDB = async () => {\n  try {\n    return await initDB();\n  } catch (error) {\n    console.error('Error al abrir conexión a IndexedDB:', error);\n    throw error;\n  }\n};\n\n// Guardar un plato en IndexedDB\nconst savePlato = async plato => {\n  try {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([PLATOS_STORE], 'readwrite');\n      const store = transaction.objectStore(PLATOS_STORE);\n\n      // Agregar estado de sincronización al plato\n      const platoToSave = {\n        ...plato,\n        syncStatus: 'pending',\n        localTimestamp: new Date().getTime()\n      };\n      const request = store.add(platoToSave);\n      request.onsuccess = event => {\n        const savedId = event.target.result;\n        console.log(`Plato guardado localmente con ID: ${savedId}`);\n\n        // También lo agregamos a la cola de sincronización\n        addToSyncQueue({\n          type: 'create',\n          entityType: 'plato',\n          entityId: savedId,\n          data: platoToSave,\n          timestamp: new Date().getTime()\n        });\n        resolve({\n          ...platoToSave,\n          id: savedId\n        });\n      };\n      request.onerror = event => {\n        console.error('Error al guardar plato en IndexedDB:', event);\n        reject('Error al guardar plato localmente');\n      };\n    });\n  } catch (error) {\n    console.error('Error en savePlato:', error);\n    throw error;\n  }\n};\n\n// Obtener todos los platos de IndexedDB\nconst getAllPlatos = async () => {\n  try {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([PLATOS_STORE], 'readonly');\n      const store = transaction.objectStore(PLATOS_STORE);\n      const request = store.getAll();\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n      request.onerror = event => {\n        console.error('Error al obtener platos de IndexedDB:', event);\n        reject('Error al obtener platos localmente');\n      };\n    });\n  } catch (error) {\n    console.error('Error en getAllPlatos:', error);\n    throw error;\n  }\n};\n\n// Obtener platos pendientes de sincronización\nconst getPendingPlatos = async () => {\n  try {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([PLATOS_STORE], 'readonly');\n      const store = transaction.objectStore(PLATOS_STORE);\n      const index = store.index('syncStatus');\n      const request = index.getAll('pending');\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n      request.onerror = event => {\n        console.error('Error al obtener platos pendientes:', event);\n        reject('Error al obtener platos pendientes');\n      };\n    });\n  } catch (error) {\n    console.error('Error en getPendingPlatos:', error);\n    throw error;\n  }\n};\n\n// Actualizar estado de sincronización de un plato\nconst updatePlatoSyncStatus = async (id, status) => {\n  try {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([PLATOS_STORE], 'readwrite');\n      const store = transaction.objectStore(PLATOS_STORE);\n      const getRequest = store.get(id);\n      getRequest.onsuccess = event => {\n        const plato = event.target.result;\n        if (plato) {\n          plato.syncStatus = status;\n          const updateRequest = store.put(plato);\n          updateRequest.onsuccess = () => {\n            console.log(`Estado de sincronización del plato ${id} actualizado a: ${status}`);\n            resolve(true);\n          };\n          updateRequest.onerror = event => {\n            console.error('Error al actualizar estado de sincronización:', event);\n            reject('Error al actualizar estado de sincronización');\n          };\n        } else {\n          reject(`Plato con ID ${id} no encontrado`);\n        }\n      };\n      getRequest.onerror = event => {\n        console.error('Error al obtener plato para actualizar:', event);\n        reject('Error al obtener plato para actualizar');\n      };\n    });\n  } catch (error) {\n    console.error('Error en updatePlatoSyncStatus:', error);\n    throw error;\n  }\n};\n\n// Agregar elemento a la cola de sincronización\nconst addToSyncQueue = async item => {\n  try {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([SYNC_QUEUE_STORE], 'readwrite');\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\n      const request = store.add(item);\n      request.onsuccess = event => {\n        console.log('Elemento agregado a la cola de sincronización');\n        resolve(event.target.result);\n      };\n      request.onerror = event => {\n        console.error('Error al agregar a la cola de sincronización:', event);\n        reject('Error al agregar a la cola de sincronización');\n      };\n    });\n  } catch (error) {\n    console.error('Error en addToSyncQueue:', error);\n    throw error;\n  }\n};\n\n// Obtener elementos de la cola de sincronización\nconst getSyncQueue = async () => {\n  try {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([SYNC_QUEUE_STORE], 'readonly');\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\n      const request = store.getAll();\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n      request.onerror = event => {\n        console.error('Error al obtener cola de sincronización:', event);\n        reject('Error al obtener cola de sincronización');\n      };\n    });\n  } catch (error) {\n    console.error('Error en getSyncQueue:', error);\n    throw error;\n  }\n};\n\n// Eliminar elemento de la cola de sincronización\nconst removeFromSyncQueue = async id => {\n  try {\n    const db = await openDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([SYNC_QUEUE_STORE], 'readwrite');\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\n      const request = store.delete(id);\n      request.onsuccess = () => {\n        console.log(`Elemento ${id} eliminado de la cola de sincronización`);\n        resolve(true);\n      };\n      request.onerror = event => {\n        console.error('Error al eliminar de la cola de sincronización:', event);\n        reject('Error al eliminar de la cola de sincronización');\n      };\n    });\n  } catch (error) {\n    console.error('Error en removeFromSyncQueue:', error);\n    throw error;\n  }\n};\nexport { openDB, savePlato, getAllPlatos, getPendingPlatos, updatePlatoSyncStatus, addToSyncQueue, getSyncQueue, removeFromSyncQueue };","map":{"version":3,"names":["DB_NAME","DB_VERSION","PLATOS_STORE","SYNC_QUEUE_STORE","initDB","Promise","resolve","reject","request","indexedDB","open","onerror","event","console","error","onsuccess","db","target","result","log","onupgradeneeded","objectStoreNames","contains","platosStore","createObjectStore","keyPath","autoIncrement","createIndex","unique","syncQueueStore","openDB","savePlato","plato","transaction","store","objectStore","platoToSave","syncStatus","localTimestamp","Date","getTime","add","savedId","addToSyncQueue","type","entityType","entityId","data","timestamp","id","getAllPlatos","getAll","getPendingPlatos","index","updatePlatoSyncStatus","status","getRequest","get","updateRequest","put","item","getSyncQueue","removeFromSyncQueue","delete"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/indexedDBService.js"],"sourcesContent":["// Servicio para manejar operaciones con IndexedDB\r\nconst DB_NAME = 'restauranteAppDB';\r\nconst DB_VERSION = 1;\r\nconst PLATOS_STORE = 'platos';\r\nconst SYNC_QUEUE_STORE = 'syncQueue';\r\n\r\n// Inicializar la base de datos\r\nconst initDB = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n    \r\n    request.onerror = (event) => {\r\n      console.error('Error al abrir la base de datos IndexedDB:', event);\r\n      reject('Error al abrir la base de datos');\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      console.log('IndexedDB inicializada correctamente');\r\n      resolve(db);\r\n    };\r\n    \r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      \r\n      // Crear almacén para platos\r\n      if (!db.objectStoreNames.contains(PLATOS_STORE)) {\r\n        const platosStore = db.createObjectStore(PLATOS_STORE, { keyPath: 'id', autoIncrement: true });\r\n        platosStore.createIndex('name', 'name', { unique: false });\r\n        platosStore.createIndex('syncStatus', 'syncStatus', { unique: false });\r\n        console.log('Almacén de platos creado');\r\n      }\r\n      \r\n      // Crear almacén para la cola de sincronización\r\n      if (!db.objectStoreNames.contains(SYNC_QUEUE_STORE)) {\r\n        const syncQueueStore = db.createObjectStore(SYNC_QUEUE_STORE, { keyPath: 'id', autoIncrement: true });\r\n        syncQueueStore.createIndex('timestamp', 'timestamp', { unique: false });\r\n        syncQueueStore.createIndex('type', 'type', { unique: false });\r\n        console.log('Almacén de cola de sincronización creado');\r\n      }\r\n    };\r\n  });\r\n};\r\n\r\n// Abrir conexión a la base de datos\r\nconst openDB = async () => {\r\n  try {\r\n    return await initDB();\r\n  } catch (error) {\r\n    console.error('Error al abrir conexión a IndexedDB:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Guardar un plato en IndexedDB\r\nconst savePlato = async (plato) => {\r\n  try {\r\n    const db = await openDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([PLATOS_STORE], 'readwrite');\r\n      const store = transaction.objectStore(PLATOS_STORE);\r\n      \r\n      // Agregar estado de sincronización al plato\r\n      const platoToSave = {\r\n        ...plato,\r\n        syncStatus: 'pending',\r\n        localTimestamp: new Date().getTime()\r\n      };\r\n      \r\n      const request = store.add(platoToSave);\r\n      \r\n      request.onsuccess = (event) => {\r\n        const savedId = event.target.result;\r\n        console.log(`Plato guardado localmente con ID: ${savedId}`);\r\n        \r\n        // También lo agregamos a la cola de sincronización\r\n        addToSyncQueue({\r\n          type: 'create',\r\n          entityType: 'plato',\r\n          entityId: savedId,\r\n          data: platoToSave,\r\n          timestamp: new Date().getTime()\r\n        });\r\n        \r\n        resolve({ ...platoToSave, id: savedId });\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al guardar plato en IndexedDB:', event);\r\n        reject('Error al guardar plato localmente');\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en savePlato:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener todos los platos de IndexedDB\r\nconst getAllPlatos = async () => {\r\n  try {\r\n    const db = await openDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([PLATOS_STORE], 'readonly');\r\n      const store = transaction.objectStore(PLATOS_STORE);\r\n      const request = store.getAll();\r\n      \r\n      request.onsuccess = (event) => {\r\n        resolve(event.target.result);\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al obtener platos de IndexedDB:', event);\r\n        reject('Error al obtener platos localmente');\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en getAllPlatos:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener platos pendientes de sincronización\r\nconst getPendingPlatos = async () => {\r\n  try {\r\n    const db = await openDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([PLATOS_STORE], 'readonly');\r\n      const store = transaction.objectStore(PLATOS_STORE);\r\n      const index = store.index('syncStatus');\r\n      const request = index.getAll('pending');\r\n      \r\n      request.onsuccess = (event) => {\r\n        resolve(event.target.result);\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al obtener platos pendientes:', event);\r\n        reject('Error al obtener platos pendientes');\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en getPendingPlatos:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Actualizar estado de sincronización de un plato\r\nconst updatePlatoSyncStatus = async (id, status) => {\r\n  try {\r\n    const db = await openDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([PLATOS_STORE], 'readwrite');\r\n      const store = transaction.objectStore(PLATOS_STORE);\r\n      const getRequest = store.get(id);\r\n      \r\n      getRequest.onsuccess = (event) => {\r\n        const plato = event.target.result;\r\n        if (plato) {\r\n          plato.syncStatus = status;\r\n          const updateRequest = store.put(plato);\r\n          \r\n          updateRequest.onsuccess = () => {\r\n            console.log(`Estado de sincronización del plato ${id} actualizado a: ${status}`);\r\n            resolve(true);\r\n          };\r\n          \r\n          updateRequest.onerror = (event) => {\r\n            console.error('Error al actualizar estado de sincronización:', event);\r\n            reject('Error al actualizar estado de sincronización');\r\n          };\r\n        } else {\r\n          reject(`Plato con ID ${id} no encontrado`);\r\n        }\r\n      };\r\n      \r\n      getRequest.onerror = (event) => {\r\n        console.error('Error al obtener plato para actualizar:', event);\r\n        reject('Error al obtener plato para actualizar');\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en updatePlatoSyncStatus:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Agregar elemento a la cola de sincronización\r\nconst addToSyncQueue = async (item) => {\r\n  try {\r\n    const db = await openDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([SYNC_QUEUE_STORE], 'readwrite');\r\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\r\n      \r\n      const request = store.add(item);\r\n      \r\n      request.onsuccess = (event) => {\r\n        console.log('Elemento agregado a la cola de sincronización');\r\n        resolve(event.target.result);\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al agregar a la cola de sincronización:', event);\r\n        reject('Error al agregar a la cola de sincronización');\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en addToSyncQueue:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener elementos de la cola de sincronización\r\nconst getSyncQueue = async () => {\r\n  try {\r\n    const db = await openDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([SYNC_QUEUE_STORE], 'readonly');\r\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\r\n      const request = store.getAll();\r\n      \r\n      request.onsuccess = (event) => {\r\n        resolve(event.target.result);\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al obtener cola de sincronización:', event);\r\n        reject('Error al obtener cola de sincronización');\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en getSyncQueue:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Eliminar elemento de la cola de sincronización\r\nconst removeFromSyncQueue = async (id) => {\r\n  try {\r\n    const db = await openDB();\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([SYNC_QUEUE_STORE], 'readwrite');\r\n      const store = transaction.objectStore(SYNC_QUEUE_STORE);\r\n      \r\n      const request = store.delete(id);\r\n      \r\n      request.onsuccess = () => {\r\n        console.log(`Elemento ${id} eliminado de la cola de sincronización`);\r\n        resolve(true);\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al eliminar de la cola de sincronización:', event);\r\n        reject('Error al eliminar de la cola de sincronización');\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error en removeFromSyncQueue:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport {\r\n  openDB,\r\n  savePlato,\r\n  getAllPlatos,\r\n  getPendingPlatos,\r\n  updatePlatoSyncStatus,\r\n  addToSyncQueue,\r\n  getSyncQueue,\r\n  removeFromSyncQueue\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}