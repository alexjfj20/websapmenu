{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { getMenuItems, updateItemStock } from '../../services/adminService';\nimport { alert, confirm } from '../../services/dialogService';\nimport { getCurrentUser } from '../../services/authService';\nexport default {\n  name: 'AdminInventory',\n  setup() {\n    // Estados\n    const products = ref([]);\n    const loading = ref(true);\n    const error = ref(null);\n    const searchTerm = ref('');\n    const stockFilter = ref('all');\n    const categoryFilter = ref('');\n\n    // Estados para modales\n    const showUpdateModal = ref(false);\n    const showHistoryModal = ref(false);\n    const selectedProduct = ref(null);\n    const productHistory = ref([]);\n\n    // Formulario para actualizar stock\n    const updateStockForm = ref({\n      newQuantity: 0,\n      reason: '',\n      isUpdating: false\n    });\n\n    // Cargar productos al montar el componente\n    onMounted(() => {\n      loadInventory();\n    });\n\n    // Cargar inventario de productos\n    const loadInventory = async () => {\n      try {\n        loading.value = true;\n        error.value = null;\n        const response = await getMenuItems();\n        if (response.success) {\n          // Asegurar que cada producto tiene propiedades relacionadas con el inventario\n          products.value = response.data.map(item => ({\n            ...item,\n            availableQuantity: item.availableQuantity || 0,\n            lastUpdated: item.lastUpdated || new Date().toISOString(),\n            stockHistory: item.stockHistory || []\n          }));\n          console.log('Inventario cargado:', products.value);\n        } else {\n          throw new Error(response.message || 'Error al cargar el inventario');\n        }\n      } catch (err) {\n        console.error('Error al cargar inventario:', err);\n        error.value = `Error al cargar inventario: ${err.message || 'Error desconocido'}`;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Refrescar inventario\n    const refreshInventory = () => {\n      loadInventory();\n    };\n\n    // Función para manejar la búsqueda\n    const handleSearchInput = () => {\n      // La búsqueda se aplica automáticamente a través del computed filteredProducts\n    };\n\n    // Aplicar filtros\n    const applyFilters = () => {\n      // Los filtros se aplican automáticamente a través del computed filteredProducts\n    };\n\n    // Productos filtrados\n    const filteredProducts = computed(() => {\n      let result = [...products.value];\n\n      // Aplicar búsqueda por término\n      if (searchTerm.value) {\n        const term = searchTerm.value.toLowerCase();\n        result = result.filter(product => product.name?.toLowerCase().includes(term));\n      }\n\n      // Aplicar filtro por estado de stock\n      if (stockFilter.value !== 'all') {\n        if (stockFilter.value === 'low') {\n          result = result.filter(product => product.availableQuantity > 0 && product.availableQuantity <= 5);\n        } else if (stockFilter.value === 'out') {\n          result = result.filter(product => product.availableQuantity === 0);\n        }\n      }\n\n      // Aplicar filtro por categoría\n      if (categoryFilter.value) {\n        if (categoryFilter.value === 'con_refresco') {\n          result = result.filter(product => product.includesDrink);\n        } else if (categoryFilter.value === 'sin_refresco') {\n          result = result.filter(product => !product.includesDrink);\n        }\n      }\n      return result;\n    });\n\n    // Obtener clase para la fila según el estado del stock\n    const getRowClass = product => {\n      if (product.availableQuantity === 0) {\n        return 'out-of-stock-row';\n      } else if (product.availableQuantity <= 5) {\n        return 'low-stock-row';\n      }\n      return '';\n    };\n\n    // Obtener clase para el estado\n    const getStatusClass = product => {\n      if (product.availableQuantity === 0) {\n        return 'status-badge out-of-stock';\n      } else if (product.availableQuantity <= 5) {\n        return 'status-badge low-stock';\n      }\n      return 'status-badge in-stock';\n    };\n\n    // Obtener texto de estado\n    const getStatusText = product => {\n      if (product.availableQuantity === 0) {\n        return 'Sin stock';\n      } else if (product.availableQuantity <= 5) {\n        return 'Stock bajo';\n      }\n      return 'Disponible';\n    };\n\n    // Formatear fecha\n    const formatDate = dateString => {\n      if (!dateString) return 'N/A';\n      try {\n        const date = new Date(dateString);\n        return new Intl.DateTimeFormat('es-ES', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        }).format(date);\n      } catch (err) {\n        console.error('Error al formatear fecha:', err);\n        return 'Fecha inválida';\n      }\n    };\n\n    // Abrir modal para actualizar stock\n    const openUpdateStockModal = product => {\n      selectedProduct.value = {\n        ...product\n      };\n      updateStockForm.value = {\n        newQuantity: product.availableQuantity,\n        reason: '',\n        isUpdating: false\n      };\n      showUpdateModal.value = true;\n    };\n\n    // Cerrar modal de actualización\n    const closeUpdateModal = () => {\n      showUpdateModal.value = false;\n      selectedProduct.value = null;\n    };\n\n    // Actualizar stock\n    const updateStock = async () => {\n      if (!selectedProduct.value) return;\n\n      // Validar datos\n      if (isNaN(updateStockForm.value.newQuantity) || updateStockForm.value.newQuantity < 0) {\n        await alert('Por favor ingrese una cantidad válida (mayor o igual a 0)');\n        return;\n      }\n      if (!updateStockForm.value.reason.trim()) {\n        await alert('Por favor ingrese un motivo para el ajuste de inventario');\n        return;\n      }\n      try {\n        updateStockForm.value.isUpdating = true;\n\n        // Determinar el tipo de movimiento\n        const currentQuantity = selectedProduct.value.availableQuantity;\n        const newQuantity = parseInt(updateStockForm.value.newQuantity);\n        const difference = newQuantity - currentQuantity;\n        const type = difference > 0 ? 'increase' : difference < 0 ? 'decrease' : 'adjustment';\n\n        // Crear registro de historial\n        const currentUser = getCurrentUser();\n        const historyRecord = {\n          date: new Date().toISOString(),\n          type,\n          change: Math.abs(difference),\n          previousQuantity: currentQuantity,\n          newQuantity,\n          reason: updateStockForm.value.reason,\n          userId: currentUser?.id,\n          userName: currentUser?.nombre || 'Usuario'\n        };\n\n        // Actualizar en base de datos\n        await updateItemStock(selectedProduct.value.id, newQuantity, historyRecord);\n\n        // Actualizar en estado local\n        const productIndex = products.value.findIndex(p => p.id === selectedProduct.value.id);\n        if (productIndex !== -1) {\n          products.value[productIndex].availableQuantity = newQuantity;\n          products.value[productIndex].lastUpdated = new Date().toISOString();\n\n          // Añadir al historial\n          if (!products.value[productIndex].stockHistory) {\n            products.value[productIndex].stockHistory = [];\n          }\n          products.value[productIndex].stockHistory.push(historyRecord);\n        }\n\n        // Mostrar confirmación\n        await alert('Stock actualizado correctamente', {\n          title: 'Actualización Exitosa'\n        });\n\n        // Cerrar modal\n        closeUpdateModal();\n      } catch (err) {\n        console.error('Error al actualizar stock:', err);\n        await alert(`Error al actualizar stock: ${err.message || 'Error desconocido'}`);\n      } finally {\n        updateStockForm.value.isUpdating = false;\n      }\n    };\n\n    // Abrir modal de historial\n    const openHistoryModal = product => {\n      selectedProduct.value = {\n        ...product\n      };\n\n      // Obtener historial del producto\n      productHistory.value = product.stockHistory || [];\n      showHistoryModal.value = true;\n    };\n\n    // Cerrar modal de historial\n    const closeHistoryModal = () => {\n      showHistoryModal.value = false;\n      selectedProduct.value = null;\n      productHistory.value = [];\n    };\n    return {\n      products,\n      loading,\n      error,\n      searchTerm,\n      stockFilter,\n      categoryFilter,\n      filteredProducts,\n      showUpdateModal,\n      showHistoryModal,\n      selectedProduct,\n      productHistory,\n      updateStockForm,\n      loadInventory,\n      refreshInventory,\n      handleSearchInput,\n      applyFilters,\n      getRowClass,\n      getStatusClass,\n      getStatusText,\n      formatDate,\n      openUpdateStockModal,\n      closeUpdateModal,\n      updateStock,\n      openHistoryModal,\n      closeHistoryModal\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","getMenuItems","updateItemStock","alert","confirm","getCurrentUser","name","setup","products","loading","error","searchTerm","stockFilter","categoryFilter","showUpdateModal","showHistoryModal","selectedProduct","productHistory","updateStockForm","newQuantity","reason","isUpdating","loadInventory","value","response","success","data","map","item","availableQuantity","lastUpdated","Date","toISOString","stockHistory","console","log","Error","message","err","refreshInventory","handleSearchInput","applyFilters","filteredProducts","result","term","toLowerCase","filter","product","includes","includesDrink","getRowClass","getStatusClass","getStatusText","formatDate","dateString","date","Intl","DateTimeFormat","day","month","year","hour","minute","format","openUpdateStockModal","closeUpdateModal","updateStock","isNaN","trim","currentQuantity","parseInt","difference","type","currentUser","historyRecord","change","Math","abs","previousQuantity","userId","id","userName","nombre","productIndex","findIndex","p","push","title","openHistoryModal","closeHistoryModal"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\components\\admin\\AdminInventory.vue"],"sourcesContent":["<template>\r\n  <div class=\"inventory-container\">\r\n    <h2 class=\"section-title\">Gestión de Inventario</h2>\r\n    \r\n    <!-- Controles de filtrado y búsqueda -->\r\n    <div class=\"inventory-controls\">\r\n      <div class=\"search-container\">\r\n        <input \r\n          v-model=\"searchTerm\" \r\n          placeholder=\"Buscar producto...\" \r\n          class=\"search-input\"\r\n          @input=\"handleSearchInput\"\r\n        />\r\n      </div>\r\n      \r\n      <div class=\"filters\">\r\n        <select v-model=\"stockFilter\" @change=\"applyFilters\" class=\"filter-select\">\r\n          <option value=\"all\">Todos los productos</option>\r\n          <option value=\"low\">Stock bajo</option>\r\n          <option value=\"out\">Sin stock</option>\r\n        </select>\r\n        \r\n        <select v-model=\"categoryFilter\" @change=\"applyFilters\" class=\"filter-select\">\r\n          <option value=\"\">Todas las categorías</option>\r\n          <option value=\"con_refresco\">Con refresco</option>\r\n          <option value=\"sin_refresco\">Sin refresco</option>\r\n        </select>\r\n      </div>\r\n      \r\n      <div class=\"actions\">\r\n        <button @click=\"refreshInventory\" class=\"refresh-btn\">\r\n          <span class=\"btn-icon\">🔄</span> Actualizar\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Estados de carga y error -->\r\n    <div v-if=\"loading\" class=\"loading-container\">\r\n      <div class=\"spinner\"></div>\r\n      <p>Cargando inventario...</p>\r\n    </div>\r\n    \r\n    <div v-else-if=\"error\" class=\"error-container\">\r\n      <p class=\"error-message\">{{ error }}</p>\r\n      <button @click=\"loadInventory\" class=\"retry-btn\">Reintentar</button>\r\n    </div>\r\n    \r\n    <div v-else-if=\"filteredProducts.length === 0\" class=\"empty-state\">\r\n      <div class=\"empty-icon\">📦</div>\r\n      <p>No se encontraron productos</p>\r\n      <p class=\"empty-desc\">Intenta cambiar los filtros de búsqueda o agrega nuevos productos al inventario</p>\r\n    </div>\r\n    \r\n    <!-- Tabla de inventario -->\r\n    <div v-else class=\"inventory-table-container\">\r\n      <table class=\"inventory-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Nombre</th>\r\n            <th>Categoría</th>\r\n            <th>Stock Actual</th>\r\n            <th>Estado</th>\r\n            <th>Última Actualización</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"product in filteredProducts\" :key=\"product.id\" :class=\"getRowClass(product)\">\r\n            <td>{{ product.name }}</td>\r\n            <td>{{ product.includesDrink ? 'Con refresco' : 'Sin refresco' }}</td>\r\n            <td>{{ product.availableQuantity }}</td>\r\n            <td>\r\n              <span :class=\"getStatusClass(product)\">\r\n                {{ getStatusText(product) }}\r\n              </span>\r\n            </td>\r\n            <td>{{ formatDate(product.lastUpdated) }}</td>\r\n            <td class=\"actions-cell\">\r\n              <button @click=\"openUpdateStockModal(product)\" class=\"update-btn\" title=\"Actualizar stock\">\r\n                📝\r\n              </button>\r\n              <button @click=\"openHistoryModal(product)\" class=\"history-btn\" title=\"Ver historial\">\r\n                📋\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    \r\n    <!-- Modal para actualizar stock -->\r\n    <div v-if=\"showUpdateModal\" class=\"modal-overlay\">\r\n      <div class=\"modal-container\">\r\n        <div class=\"modal-header\">\r\n          <h3>Actualizar Stock</h3>\r\n          <button @click=\"closeUpdateModal\" class=\"close-btn\">&times;</button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <p><strong>Producto:</strong> {{ selectedProduct?.name }}</p>\r\n          <p><strong>Stock actual:</strong> {{ selectedProduct?.availableQuantity || 0 }}</p>\r\n          \r\n          <div class=\"form-group\">\r\n            <label for=\"newStock\">Nuevo stock:</label>\r\n            <input \r\n              type=\"number\" \r\n              id=\"newStock\" \r\n              v-model=\"updateStockForm.newQuantity\" \r\n              min=\"0\" \r\n              class=\"form-input\"\r\n            />\r\n          </div>\r\n          \r\n          <div class=\"form-group\">\r\n            <label for=\"reason\">Motivo del ajuste:</label>\r\n            <textarea \r\n              id=\"reason\" \r\n              v-model=\"updateStockForm.reason\" \r\n              class=\"form-textarea\" \r\n              placeholder=\"Explique el motivo del ajuste de inventario\"\r\n            ></textarea>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button @click=\"closeUpdateModal\" class=\"cancel-btn\">Cancelar</button>\r\n          <button @click=\"updateStock\" class=\"save-btn\" :disabled=\"updateStockForm.isUpdating\">\r\n            <span v-if=\"updateStockForm.isUpdating\">Actualizando...</span>\r\n            <span v-else>Guardar Cambios</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Modal para ver historial -->\r\n    <div v-if=\"showHistoryModal\" class=\"modal-overlay\">\r\n      <div class=\"modal-container history-modal\">\r\n        <div class=\"modal-header\">\r\n          <h3>Historial de {{ selectedProduct?.name }}</h3>\r\n          <button @click=\"closeHistoryModal\" class=\"close-btn\">&times;</button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div v-if=\"productHistory.length === 0\" class=\"empty-history\">\r\n            <p>No hay registros de movimientos para este producto.</p>\r\n          </div>\r\n          <div v-else class=\"history-list\">\r\n            <div v-for=\"(record, index) in productHistory\" :key=\"index\" class=\"history-item\">\r\n              <div class=\"history-date\">{{ formatDate(record.date) }}</div>\r\n              <div class=\"history-details\">\r\n                <span class=\"history-type\" :class=\"record.type\">\r\n                  {{ record.type === 'increase' ? 'Incremento' : record.type === 'decrease' ? 'Reducción' : 'Ajuste' }}\r\n                </span>\r\n                <span class=\"history-quantity\">\r\n                  {{ record.type === 'increase' ? '+' : '' }}{{ record.change }}\r\n                </span>\r\n                <span class=\"history-stock\">\r\n                  Stock resultante: {{ record.newQuantity }}\r\n                </span>\r\n              </div>\r\n              <div class=\"history-reason\">\r\n                {{ record.reason || 'Sin motivo especificado' }}\r\n              </div>\r\n              <div class=\"history-user\">\r\n                Por: {{ record.userName || 'Sistema' }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button @click=\"closeHistoryModal\" class=\"cancel-btn\">Cerrar</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted } from 'vue';\r\nimport { getMenuItems, updateItemStock } from '../../services/adminService';\r\nimport { alert, confirm } from '../../services/dialogService';\r\nimport { getCurrentUser } from '../../services/authService';\r\n\r\nexport default {\r\n  name: 'AdminInventory',\r\n  setup() {\r\n    // Estados\r\n    const products = ref([]);\r\n    const loading = ref(true);\r\n    const error = ref(null);\r\n    const searchTerm = ref('');\r\n    const stockFilter = ref('all');\r\n    const categoryFilter = ref('');\r\n    \r\n    // Estados para modales\r\n    const showUpdateModal = ref(false);\r\n    const showHistoryModal = ref(false);\r\n    const selectedProduct = ref(null);\r\n    const productHistory = ref([]);\r\n    \r\n    // Formulario para actualizar stock\r\n    const updateStockForm = ref({\r\n      newQuantity: 0,\r\n      reason: '',\r\n      isUpdating: false\r\n    });\r\n    \r\n    // Cargar productos al montar el componente\r\n    onMounted(() => {\r\n      loadInventory();\r\n    });\r\n    \r\n    // Cargar inventario de productos\r\n    const loadInventory = async () => {\r\n      try {\r\n        loading.value = true;\r\n        error.value = null;\r\n        \r\n        const response = await getMenuItems();\r\n        \r\n        if (response.success) {\r\n          // Asegurar que cada producto tiene propiedades relacionadas con el inventario\r\n          products.value = response.data.map(item => ({\r\n            ...item,\r\n            availableQuantity: item.availableQuantity || 0,\r\n            lastUpdated: item.lastUpdated || new Date().toISOString(),\r\n            stockHistory: item.stockHistory || []\r\n          }));\r\n          \r\n          console.log('Inventario cargado:', products.value);\r\n        } else {\r\n          throw new Error(response.message || 'Error al cargar el inventario');\r\n        }\r\n      } catch (err) {\r\n        console.error('Error al cargar inventario:', err);\r\n        error.value = `Error al cargar inventario: ${err.message || 'Error desconocido'}`;\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n    \r\n    // Refrescar inventario\r\n    const refreshInventory = () => {\r\n      loadInventory();\r\n    };\r\n    \r\n    // Función para manejar la búsqueda\r\n    const handleSearchInput = () => {\r\n      // La búsqueda se aplica automáticamente a través del computed filteredProducts\r\n    };\r\n    \r\n    // Aplicar filtros\r\n    const applyFilters = () => {\r\n      // Los filtros se aplican automáticamente a través del computed filteredProducts\r\n    };\r\n    \r\n    // Productos filtrados\r\n    const filteredProducts = computed(() => {\r\n      let result = [...products.value];\r\n      \r\n      // Aplicar búsqueda por término\r\n      if (searchTerm.value) {\r\n        const term = searchTerm.value.toLowerCase();\r\n        result = result.filter(product => \r\n          product.name?.toLowerCase().includes(term)\r\n        );\r\n      }\r\n      \r\n      // Aplicar filtro por estado de stock\r\n      if (stockFilter.value !== 'all') {\r\n        if (stockFilter.value === 'low') {\r\n          result = result.filter(product => \r\n            product.availableQuantity > 0 && product.availableQuantity <= 5\r\n          );\r\n        } else if (stockFilter.value === 'out') {\r\n          result = result.filter(product => \r\n            product.availableQuantity === 0\r\n          );\r\n        }\r\n      }\r\n      \r\n      // Aplicar filtro por categoría\r\n      if (categoryFilter.value) {\r\n        if (categoryFilter.value === 'con_refresco') {\r\n          result = result.filter(product => product.includesDrink);\r\n        } else if (categoryFilter.value === 'sin_refresco') {\r\n          result = result.filter(product => !product.includesDrink);\r\n        }\r\n      }\r\n      \r\n      return result;\r\n    });\r\n    \r\n    // Obtener clase para la fila según el estado del stock\r\n    const getRowClass = (product) => {\r\n      if (product.availableQuantity === 0) {\r\n        return 'out-of-stock-row';\r\n      } else if (product.availableQuantity <= 5) {\r\n        return 'low-stock-row';\r\n      }\r\n      return '';\r\n    };\r\n    \r\n    // Obtener clase para el estado\r\n    const getStatusClass = (product) => {\r\n      if (product.availableQuantity === 0) {\r\n        return 'status-badge out-of-stock';\r\n      } else if (product.availableQuantity <= 5) {\r\n        return 'status-badge low-stock';\r\n      }\r\n      return 'status-badge in-stock';\r\n    };\r\n    \r\n    // Obtener texto de estado\r\n    const getStatusText = (product) => {\r\n      if (product.availableQuantity === 0) {\r\n        return 'Sin stock';\r\n      } else if (product.availableQuantity <= 5) {\r\n        return 'Stock bajo';\r\n      }\r\n      return 'Disponible';\r\n    };\r\n    \r\n    // Formatear fecha\r\n    const formatDate = (dateString) => {\r\n      if (!dateString) return 'N/A';\r\n      \r\n      try {\r\n        const date = new Date(dateString);\r\n        return new Intl.DateTimeFormat('es-ES', {\r\n          day: '2-digit',\r\n          month: '2-digit',\r\n          year: 'numeric',\r\n          hour: '2-digit',\r\n          minute: '2-digit'\r\n        }).format(date);\r\n      } catch (err) {\r\n        console.error('Error al formatear fecha:', err);\r\n        return 'Fecha inválida';\r\n      }\r\n    };\r\n    \r\n    // Abrir modal para actualizar stock\r\n    const openUpdateStockModal = (product) => {\r\n      selectedProduct.value = { ...product };\r\n      updateStockForm.value = {\r\n        newQuantity: product.availableQuantity,\r\n        reason: '',\r\n        isUpdating: false\r\n      };\r\n      showUpdateModal.value = true;\r\n    };\r\n    \r\n    // Cerrar modal de actualización\r\n    const closeUpdateModal = () => {\r\n      showUpdateModal.value = false;\r\n      selectedProduct.value = null;\r\n    };\r\n    \r\n    // Actualizar stock\r\n    const updateStock = async () => {\r\n      if (!selectedProduct.value) return;\r\n      \r\n      // Validar datos\r\n      if (isNaN(updateStockForm.value.newQuantity) || updateStockForm.value.newQuantity < 0) {\r\n        await alert('Por favor ingrese una cantidad válida (mayor o igual a 0)');\r\n        return;\r\n      }\r\n      \r\n      if (!updateStockForm.value.reason.trim()) {\r\n        await alert('Por favor ingrese un motivo para el ajuste de inventario');\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        updateStockForm.value.isUpdating = true;\r\n        \r\n        // Determinar el tipo de movimiento\r\n        const currentQuantity = selectedProduct.value.availableQuantity;\r\n        const newQuantity = parseInt(updateStockForm.value.newQuantity);\r\n        const difference = newQuantity - currentQuantity;\r\n        const type = difference > 0 ? 'increase' : difference < 0 ? 'decrease' : 'adjustment';\r\n        \r\n        // Crear registro de historial\r\n        const currentUser = getCurrentUser();\r\n        const historyRecord = {\r\n          date: new Date().toISOString(),\r\n          type,\r\n          change: Math.abs(difference),\r\n          previousQuantity: currentQuantity,\r\n          newQuantity,\r\n          reason: updateStockForm.value.reason,\r\n          userId: currentUser?.id,\r\n          userName: currentUser?.nombre || 'Usuario'\r\n        };\r\n        \r\n        // Actualizar en base de datos\r\n        await updateItemStock(\r\n          selectedProduct.value.id, \r\n          newQuantity, \r\n          historyRecord\r\n        );\r\n        \r\n        // Actualizar en estado local\r\n        const productIndex = products.value.findIndex(p => p.id === selectedProduct.value.id);\r\n        if (productIndex !== -1) {\r\n          products.value[productIndex].availableQuantity = newQuantity;\r\n          products.value[productIndex].lastUpdated = new Date().toISOString();\r\n          \r\n          // Añadir al historial\r\n          if (!products.value[productIndex].stockHistory) {\r\n            products.value[productIndex].stockHistory = [];\r\n          }\r\n          products.value[productIndex].stockHistory.push(historyRecord);\r\n        }\r\n        \r\n        // Mostrar confirmación\r\n        await alert('Stock actualizado correctamente', { title: 'Actualización Exitosa' });\r\n        \r\n        // Cerrar modal\r\n        closeUpdateModal();\r\n      } catch (err) {\r\n        console.error('Error al actualizar stock:', err);\r\n        await alert(`Error al actualizar stock: ${err.message || 'Error desconocido'}`);\r\n      } finally {\r\n        updateStockForm.value.isUpdating = false;\r\n      }\r\n    };\r\n    \r\n    // Abrir modal de historial\r\n    const openHistoryModal = (product) => {\r\n      selectedProduct.value = { ...product };\r\n      \r\n      // Obtener historial del producto\r\n      productHistory.value = product.stockHistory || [];\r\n      \r\n      showHistoryModal.value = true;\r\n    };\r\n    \r\n    // Cerrar modal de historial\r\n    const closeHistoryModal = () => {\r\n      showHistoryModal.value = false;\r\n      selectedProduct.value = null;\r\n      productHistory.value = [];\r\n    };\r\n    \r\n    return {\r\n      products,\r\n      loading,\r\n      error,\r\n      searchTerm,\r\n      stockFilter,\r\n      categoryFilter,\r\n      filteredProducts,\r\n      showUpdateModal,\r\n      showHistoryModal,\r\n      selectedProduct,\r\n      productHistory,\r\n      updateStockForm,\r\n      loadInventory,\r\n      refreshInventory,\r\n      handleSearchInput,\r\n      applyFilters,\r\n      getRowClass,\r\n      getStatusClass,\r\n      getStatusText,\r\n      formatDate,\r\n      openUpdateStockModal,\r\n      closeUpdateModal,\r\n      updateStock,\r\n      openHistoryModal,\r\n      closeHistoryModal\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.inventory-container {\r\n  padding: 0;\r\n}\r\n\r\n.section-title {\r\n  font-size: 24px;\r\n  margin-bottom: 30px;\r\n  color: #333;\r\n  border-bottom: 2px solid #4CAF50;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n/* Controles y filtros */\r\n.inventory-controls {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 15px;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.search-container {\r\n  flex-grow: 1;\r\n  min-width: 250px;\r\n}\r\n\r\n.search-input {\r\n  width: 100%;\r\n  padding: 10px 15px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n}\r\n\r\n.filters {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.filter-select {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  background-color: white;\r\n}\r\n\r\n.actions {\r\n  margin-left: auto;\r\n}\r\n\r\n.refresh-btn {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 10px 15px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.refresh-btn:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.btn-icon {\r\n  font-size: 16px;\r\n}\r\n\r\n/* Estados de carga y error */\r\n.loading-container, .error-container, .empty-state {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 50px 20px;\r\n  text-align: center;\r\n  background-color: #f9f9f9;\r\n  border-radius: 8px;\r\n  margin: 20px 0;\r\n}\r\n\r\n.spinner {\r\n  border: 4px solid rgba(0, 0, 0, 0.1);\r\n  border-radius: 50%;\r\n  border-top: 4px solid #4CAF50;\r\n  width: 30px;\r\n  height: 30px;\r\n  animation: spin 1s linear infinite;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n.error-message {\r\n  color: #f44336;\r\n  font-weight: bold;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.retry-btn {\r\n  background-color: #2196F3;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 8px 15px;\r\n  cursor: pointer;\r\n}\r\n\r\n.empty-icon {\r\n  font-size: 48px;\r\n  margin-bottom: 15px;\r\n  color: #bbb;\r\n}\r\n\r\n.empty-desc {\r\n  color: #777;\r\n  font-size: 14px;\r\n  margin-top: 10px;\r\n}\r\n\r\n/* Tabla de inventario */\r\n.inventory-table-container {\r\n  overflow-x: auto;\r\n  margin-top: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\r\n}\r\n\r\n.inventory-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.inventory-table th,\r\n.inventory-table td {\r\n  padding: 12px 15px;\r\n  text-align: left;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.inventory-table thead {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n}\r\n\r\n.inventory-table tbody tr:hover {\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n.inventory-table .actions-cell {\r\n  white-space: nowrap;\r\n  text-align: center;\r\n}\r\n\r\n/* Clases para estados de stock */\r\n.out-of-stock-row {\r\n  background-color: #ffebee;\r\n}\r\n\r\n.low-stock-row {\r\n  background-color: #fff8e1;\r\n}\r\n\r\n.status-badge {\r\n  display: inline-block;\r\n  padding: 4px 8px;\r\n  border-radius: 12px;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n}\r\n\r\n.in-stock {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n}\r\n\r\n.low-stock {\r\n  background-color: #FFC107;\r\n  color: #333;\r\n}\r\n\r\n.out-of-stock {\r\n  background-color: #F44336;\r\n  color: white;\r\n}\r\n\r\n/* Botones de acción */\r\n.update-btn, .history-btn {\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 4px;\r\n  border: none;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  margin: 0 2px;\r\n}\r\n\r\n.update-btn {\r\n  background-color: #2196F3;\r\n  color: white;\r\n}\r\n\r\n.update-btn:hover {\r\n  background-color: #0b7dda;\r\n}\r\n\r\n.history-btn {\r\n  background-color: #9E9E9E;\r\n  color: white;\r\n}\r\n\r\n.history-btn:hover {\r\n  background-color: #757575;\r\n}\r\n\r\n/* Modales */\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.modal-container {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\r\n  width: 90%;\r\n  max-width: 500px;\r\n  max-height: 90vh;\r\n  overflow-y: auto;\r\n  animation: modalFadeIn 0.3s;\r\n}\r\n\r\n.history-modal {\r\n  max-width: 700px;\r\n}\r\n\r\n@keyframes modalFadeIn {\r\n  from { opacity: 0; transform: translateY(-20px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n\r\n.modal-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 15px 20px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.modal-header h3 {\r\n  margin: 0;\r\n  color: #333;\r\n}\r\n\r\n.close-btn {\r\n  background: none;\r\n  border: none;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  color: #777;\r\n}\r\n\r\n.modal-body {\r\n  padding: 20px;\r\n}\r\n\r\n.modal-footer {\r\n  padding: 15px 20px;\r\n  border-top: 1px solid #eee;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 10px;\r\n}\r\n\r\n/* Formulario */\r\n.form-group {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n  color: #555;\r\n}\r\n\r\n.form-input {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n}\r\n\r\n.form-textarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  min-height: 100px;\r\n  resize: vertical;\r\n}\r\n\r\n/* Botones modal */\r\n.cancel-btn, .save-btn {\r\n  padding: 8px 16px;\r\n  border-radius: 4px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  border: none;\r\n}\r\n\r\n.cancel-btn {\r\n  background-color: #f5f5f5;\r\n  color: #333;\r\n  border: 1px solid #ddd;\r\n}\r\n\r\n.save-btn {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n}\r\n\r\n.save-btn:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.save-btn:disabled {\r\n  background-color: #9E9E9E;\r\n  cursor: not-allowed;\r\n}\r\n\r\n/* Historial */\r\n.history-list {\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.history-item {\r\n  padding: 12px;\r\n  border-bottom: 1px solid #eee;\r\n  position: relative;\r\n}\r\n\r\n.history-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.history-date {\r\n  font-weight: bold;\r\n  color: #333;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.history-details {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-bottom: 5px;\r\n  align-items: center;\r\n}\r\n\r\n.history-type {\r\n  display: inline-block;\r\n  padding: 3px 8px;\r\n  border-radius: 12px;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n}\r\n\r\n.history-type.increase {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n}\r\n\r\n.history-type.decrease {\r\n  background-color: #F44336;\r\n  color: white;\r\n}\r\n\r\n.history-type.adjustment {\r\n  background-color: #2196F3;\r\n  color: white;\r\n}\r\n\r\n.history-quantity {\r\n  font-weight: bold;\r\n}\r\n\r\n.history-reason {\r\n  margin-top: 5px;\r\n  font-style: italic;\r\n  color: #555;\r\n}\r\n\r\n.history-user {\r\n  margin-top: 5px;\r\n  font-size: 12px;\r\n  color: #777;\r\n  text-align: right;\r\n}\r\n\r\n.empty-history {\r\n  padding: 30px;\r\n  text-align: center;\r\n  color: #777;\r\n  font-style: italic;\r\n}\r\n\r\n/* Responsive */\r\n@media (max-width: 768px) {\r\n  .inventory-controls {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .search-container, .filters, .actions {\r\n    width: 100%;\r\n  }\r\n  \r\n  .actions {\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n  \r\n  .inventory-table th,\r\n  .inventory-table td {\r\n    padding: 8px;\r\n    font-size: 14px;\r\n  }\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}