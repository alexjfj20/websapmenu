{"ast":null,"code":"// src/services/syncService.js\n\n// Servicio para gestionar la sincronización y el estado de la conexión\nimport { getPendingPlatos, updatePlatoSyncStatus, getSyncQueue, removeFromSyncQueue, getPlato } from './indexedDBService';\nimport { adaptPlatoData } from '../utils/dataAdapters';\nimport { optimizeImageForSync } from './imageService';\n\n// Constantes desde el servicio IndexedDB\nconst API_URL = 'http://localhost:3000/api';\nconst RAW_URL = 'http://localhost:3000/raw';\n\n// Configuración específica para mejorar la sincronización\nconst SYNC_CONFIG = {\n  skipServerAvailabilityCheck: true,\n  maxPlatoSize: 30000,\n  // 30KB máximo\n  retryIntervals: [5000, 15000, 30000],\n  maxRetries: 2,\n  platoUrl: `${API_URL}/sync/platos`,\n  emergencyPlatoUrl: `${API_URL}/platos/minimal`,\n  useEmergencyEndpoint: true\n};\n\n// Estado de la sincronización\nlet isSyncing = false;\nlet _isOnline = navigator.onLine;\n\n// Alternativa más simple para verificar la conexión\nconst isOnline = async () => {\n  // Primero comprobamos el estado de navigator.onLine\n  if (!navigator.onLine) {\n    return false;\n  }\n\n  // Intentamos hacer un fetch a un recurso pequeño (como un favicon)\n  try {\n    const response = await fetch(`${API_URL}/favicon.ico`, {\n      method: 'HEAD',\n      mode: 'no-cors',\n      cache: 'no-store',\n      credentials: 'omit'\n    });\n    return true; // Si no hay excepción, asumimos que estamos en línea\n  } catch (error) {\n    console.error('Error al verificar estado de conexión:', error);\n    return false;\n  }\n};\n\n// Configurar escuchas para eventos de conexión\nconst setupConnectionListeners = () => {\n  window.addEventListener('online', async () => {\n    console.log('Evento online detectado');\n    _isOnline = await isOnline();\n    if (_isOnline) {\n      console.log('Conexión a Internet restablecida');\n      // Sincronizar cuando se recupera la conexión\n      syncData();\n    }\n  });\n  window.addEventListener('offline', () => {\n    console.log('Evento offline detectado');\n    _isOnline = false;\n    console.log('Conexión a Internet perdida');\n  });\n\n  // Verificar estado inicial\n  isOnline().then(online => {\n    console.log(`Estado inicial de conexión: ${online ? 'En línea' : 'Fuera de línea'}`);\n  });\n};\n\n// Función para probar la conexión con el servidor (modo ultra-ligero)\nconst testServerConnection = async () => {\n  console.log('🔄 Probando conexión con el servidor (modo emergencia)...');\n  try {\n    // Usar XMLHttpRequest sin cookies ni headers personalizados\n    const xhr = new XMLHttpRequest();\n    const responsePromise = new Promise(resolve => {\n      const timeoutId = setTimeout(() => {\n        console.warn('⏱️ Timeout en la prueba de conexión');\n        xhr.abort();\n        resolve(false);\n      }, 5000);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log('✅ Conexión básica establecida');\n            resolve(true);\n          } else if (xhr.status === 431) {\n            console.error('❌ Error 431: Request Header Fields Too Large');\n            console.log('👉 Necesitas reducir el tamaño de las cookies o headers');\n            resolve(false);\n          } else {\n            console.error(`❌ Error en prueba de conexión: ${xhr.status}`);\n            resolve(false);\n          }\n        }\n      };\n      xhr.onerror = function () {\n        clearTimeout(timeoutId);\n        console.error('❌ Error de red en prueba de conexión');\n        // Intentar con endpoint de emergencia sin headers\n        checkAlternativePort().then(resolve);\n      };\n\n      // Realizar una solicitud GET simple sin headers\n      xhr.open('GET', `${API_URL}/test/ping`, true);\n      // No añadir ningún header\n      xhr.withCredentials = false; // Importante: evitar enviar cookies\n      xhr.send();\n    });\n    return await responsePromise;\n  } catch (error) {\n    console.error('❌ Error en prueba de conexión:', error);\n    return false;\n  }\n};\n\n// Comprobar puerto alternativo\nconst checkAlternativePort = async () => {\n  console.log('🔄 Probando puertos alternativos...');\n\n  // Lista de puertos comunes para probar\n  const ports = [8080, 3000, 5000, 8000];\n  for (const port of ports) {\n    try {\n      console.log(`Probando en puerto: ${port}`);\n      const response = await fetch(`http://localhost:${port}/raw/ping`, {\n        method: 'GET',\n        mode: 'no-cors',\n        cache: 'no-store',\n        credentials: 'omit'\n      });\n      if (response.ok || response.status === 0) {\n        console.log(`✅ Servidor encontrado en puerto ${port}`);\n        // Actualizar URL global para usar este puerto\n        window.SERVER_PORT = port;\n        return true;\n      }\n    } catch (error) {\n      console.log(`Puerto ${port} no disponible`);\n    }\n  }\n  console.error('❌ No se encontró el servidor en ningún puerto común');\n  return false;\n};\n\n// Función para probar la conexión a MySQL\nconst testMySQLConnection = async () => {\n  console.log('🔄 Probando conexión a MySQL...');\n  try {\n    const response = await fetch(`${API_URL}/test/db`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log('✅ Conexión a MySQL establecida:', data);\n\n      // Mostrar información clara sobre la base de datos\n      if (data.data && data.data.database) {\n        console.log(`📊 Base de datos MySQL: ${data.data.database}`);\n        console.log(`📊 Tablas disponibles: ${data.data.tables.join(', ')}`);\n      }\n      return true;\n    } else {\n      console.error('❌ Error al conectar con MySQL:', await response.text());\n      return false;\n    }\n  } catch (error) {\n    console.error('❌ Error de red al probar la conexión MySQL:', error);\n    return false;\n  }\n};\n\n// Función para sincronizar datos entre IndexedDB y el servidor\nconst syncData = async () => {\n  if (!(await isOnline())) {\n    console.log('Sin conexión a Internet, la sincronización no es posible');\n    return false;\n  }\n  if (isSyncing) {\n    console.log('Ya hay una sincronización en progreso');\n    return false;\n  }\n  isSyncing = true;\n  console.log('🔄 Iniciando sincronización de datos...');\n  try {\n    // Procesar la cola de sincronización\n    const syncQueue = await getSyncQueue();\n    console.log(`📋 Cola de sincronización: ${syncQueue.length} elementos`);\n    for (const item of syncQueue) {\n      if (item.entityType === 'plato') {\n        // Obtener el plato completo de IndexedDB\n        const plato = await getPlato(item.entityId);\n        if (plato) {\n          console.log(`🍽️ Sincronizando plato: ${plato.name} (${plato.id})`);\n          try {\n            // Intentar sincronización minimalista\n            const success = await syncPlato(plato);\n            if (success.success) {\n              console.log(`✅ Plato ${plato.id} sincronizado correctamente`);\n              await removeFromSyncQueue(item.id);\n            } else {\n              console.error(`❌ Error al sincronizar plato ${plato.id}`);\n            }\n          } catch (syncError) {\n            console.error(`❌ Excepción al sincronizar plato ${plato.id}:`, syncError);\n          }\n        } else {\n          console.warn(`⚠️ Plato ${item.entityId} no encontrado en IndexedDB`);\n          await removeFromSyncQueue(item.id);\n        }\n      }\n    }\n\n    // Buscar platos pendientes que no estén en la cola\n    console.log('🔍 Buscando platos pendientes de sincronización...');\n    const pendingPlatos = await getPendingPlatos();\n    console.log(`📋 Platos pendientes: ${pendingPlatos.length}`);\n    for (const plato of pendingPlatos) {\n      try {\n        console.log(`🍽️ Sincronizando plato pendiente: ${plato.name} (${plato.id})`);\n        const success = await syncPlato(plato);\n        if (success.success) {\n          console.log(`✅ Plato pendiente ${plato.id} sincronizado correctamente`);\n        } else {\n          console.error(`❌ Error al sincronizar plato pendiente ${plato.id}: ${success.error}`);\n        }\n      } catch (syncError) {\n        console.error(`❌ Excepción al sincronizar plato pendiente ${plato.id}: ${syncError}`);\n      }\n    }\n    console.log('✅ Sincronización completada');\n    return true;\n  } catch (error) {\n    console.error('❌ Error durante la sincronización:', error);\n    return false;\n  } finally {\n    isSyncing = false;\n  }\n};\n\n// Método ultra-minimal usando XMLHttpRequest sin headers\nconst tryUltraMinimalSync = async (data, platoId) => {\n  try {\n    console.log('🚨 Intentando sincronización ultra-minimal para plato:', platoId);\n\n    // Crear un objeto XMLHttpRequest directamente\n    const xhr = new XMLHttpRequest();\n\n    // Configurar una promesa para manejar la respuesta\n    const responsePromise = new Promise(resolve => {\n      // Configurar timeout\n      const timeoutId = setTimeout(() => {\n        console.warn('⏱️ Timeout en sincronización ultra-minimal');\n        xhr.abort();\n        resolve(false);\n      }, 15000);\n      xhr.onreadystatechange = async function () {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log('✅ Sincronización ultra-minimal exitosa');\n            try {\n              await updatePlatoSyncStatus(platoId, 'synced');\n            } catch (dbError) {\n              console.error('Error al actualizar estado en BD:', dbError);\n            }\n            resolve(true);\n          } else {\n            console.error(`❌ Error en sincronización ultra-minimal: ${xhr.status}`);\n            resolve(false);\n          }\n        }\n      };\n      xhr.onerror = function () {\n        clearTimeout(timeoutId);\n        console.error('❌ Error de red en sincronización ultra-minimal');\n        resolve(false);\n      };\n    });\n\n    // Usar método POST con datos minimalistas\n    xhr.open('POST', `${API_URL}/platos/emergency-sync`, true);\n\n    // Solo agregar Content-Type, nada más\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    // Preparar datos ultra-minimalistas\n    const adaptedData = await adaptPlatoDataWithImageOptimization(data);\n    const minimalData = {\n      id: adaptedData.id,\n      name: (adaptedData.name || \"\").substring(0, 30),\n      price: Number(adaptedData.price) || 0\n    };\n\n    // Enviar los datos\n    xhr.send(JSON.stringify(minimalData));\n    return await responsePromise;\n  } catch (error) {\n    console.error('❌ Error en sincronización ultra-minimal:', error);\n    return false;\n  }\n};\n\n// Procesar la cola de sincronización\nconst processSyncQueue = async () => {\n  if (!(await isOnline()) || isSyncing) {\n    console.log(`No se puede procesar la cola. En línea: ${_isOnline}, Sincronizando: ${isSyncing}`);\n    return false;\n  }\n  isSyncing = true;\n  console.log('Iniciando procesamiento de cola de sincronización...');\n  try {\n    const syncItems = await getSyncQueue();\n    if (syncItems.length === 0) {\n      console.log('No hay elementos en la cola de sincronización');\n      isSyncing = false;\n      return true;\n    }\n    console.log(`Procesando ${syncItems.length} elementos en la cola de sincronización`);\n\n    // Procesar cada elemento de la cola\n    for (const item of syncItems) {\n      let syncSuccess = false;\n      if (item.type === 'create' && item.entityType === 'plato') {\n        syncSuccess = await syncPlatoToServer(item.data);\n      }\n      // Aquí pueden agregarse más tipos de sincronización según sea necesario\n\n      if (syncSuccess) {\n        // Eliminar de la cola si la sincronización fue exitosa\n        await removeFromSyncQueue(item.id);\n        console.log(`Elemento ${item.id} eliminado de la cola de sincronización`);\n      } else {\n        console.log(`No se pudo sincronizar el elemento ${item.id}, se reintentará más tarde`);\n      }\n    }\n    console.log('Procesamiento de cola de sincronización completado');\n    return true;\n  } catch (error) {\n    console.error('Error al procesar cola de sincronización:', error);\n    return false;\n  } finally {\n    isSyncing = false;\n  }\n};\n\n// Método de sincronización extremadamente simplificado para problemas persistentes\nexport const syncMinimalDataOnly = async (data, platoId, retryCount = 0) => {\n  const maxRetries = SYNC_CONFIG.maxRetries;\n\n  // Usar datos minimalistas pero incluir la imagen optimizada\n  const adaptedData = await adaptPlatoDataWithImageOptimization(data);\n  const minimalData = {\n    id: adaptedData.id,\n    name: adaptedData.name?.substring(0, 50) || 'Plato sin nombre',\n    price: Number(adaptedData.price) || 0,\n    description: adaptedData.description?.substring(0, 100) || '',\n    category: adaptedData.category || 'principal',\n    image: adaptedData.image,\n    // Incluir la imagen optimizada\n    is_available: Boolean(adaptedData.is_available),\n    minimal_sync: true\n  };\n  return new Promise(resolve => {\n    // Establecer timeout para toda la operación\n    const operationTimeoutId = setTimeout(() => {\n      console.warn('⏱️ Timeout global de la operación de sincronización');\n      resolve(false);\n    }, 30000);\n    const xhr = new XMLHttpRequest();\n\n    // Configurar timeouts más estrictos\n    xhr.timeout = 15000;\n    xhr.onreadystatechange = async function () {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          clearTimeout(operationTimeoutId);\n          try {\n            await updatePlatoSyncStatus(platoId, 'synced');\n            console.log(`✅ Sincronización exitosa para plato ${platoId}`);\n          } catch (error) {\n            console.error('Error al actualizar estado:', error);\n          }\n          resolve(true);\n        } else if (xhr.status === 0) {\n          // Conexión abortada o no establecida\n          console.warn('⚠️ Conexión interrumpida');\n          handleRetry();\n        } else if (xhr.status === 431) {\n          console.error(`❌ Error 431 (Headers demasiado grandes) - Intentando método ultraminimal`);\n          tryUltraMinimalSync(adaptedData, platoId).then(success => {\n            clearTimeout(operationTimeoutId);\n            resolve(success);\n          });\n        } else {\n          console.error(`❌ Error HTTP ${xhr.status} en sincronización`);\n          handleRetry();\n        }\n      }\n    };\n    xhr.ontimeout = function () {\n      console.warn('⏱️ Timeout de la petición HTTP');\n      handleRetry();\n    };\n    xhr.onerror = function () {\n      console.error('❌ Error de red en sincronización');\n      handleRetry();\n    };\n\n    // Función para manejar reintentos\n    const handleRetry = () => {\n      if (retryCount < maxRetries) {\n        const delay = SYNC_CONFIG.retryIntervals[retryCount] || 5000;\n        console.log(`🔄 Reintentando en ${delay}ms... (${retryCount + 1}/${maxRetries})`);\n        setTimeout(() => {\n          clearTimeout(operationTimeoutId);\n          syncMinimalDataOnly(data, platoId, retryCount + 1).then(success => resolve(success));\n        }, delay);\n      } else {\n        clearTimeout(operationTimeoutId);\n        console.warn('❌ Agotados todos los reintentos de sincronización');\n        resolve(false);\n      }\n    };\n    try {\n      // Usar método POST con headers mínimos\n      xhr.open('POST', `${API_URL}/platos`, true);\n      xhr.setRequestHeader('Content-Type', 'application/json');\n\n      // Enviar los datos minimalistas\n      xhr.send(JSON.stringify(minimalData));\n    } catch (error) {\n      console.error('❌ Error al iniciar la petición:', error);\n      handleRetry();\n    }\n  });\n};\n\n// Sincronizar un plato con el servidor\nconst syncPlatoToServer = async (plato, retryCount = 0) => {\n  const maxRetries = SYNC_CONFIG.maxRetries;\n\n  // Si el plato está marcado como problemático, omitirlo\n  if (plato.sync_problematic) {\n    console.warn(`⚠️ Omitiendo plato ${plato.id} marcado como problemático para sincronización`);\n    return false;\n  }\n  console.log(`Sincronizando plato ${plato.id} con el servidor (intento ${retryCount + 1}/${maxRetries + 1})...`);\n  try {\n    // Omitir verificación si está desactivada\n    if (!SYNC_CONFIG.skipServerAvailabilityCheck) {\n      // Verificar si el servidor está disponible\n      const serverAvailable = await checkServerAvailability();\n      if (!serverAvailable) {\n        console.error('❌ El servidor no está disponible. Posponiendo sincronización.');\n        return false;\n      }\n    }\n\n    // Preparar datos para sincronización incluyendo la imagen\n    let adaptedData = await adaptPlatoDataWithImageOptimization(plato);\n    let syncData = {\n      id: adaptedData.id,\n      name: adaptedData.name?.substring(0, 50) || 'Plato sin nombre',\n      price: Number(adaptedData.price) || 0,\n      description: adaptedData.description?.substring(0, 100) || '',\n      availableQuantity: Number(adaptedData.availableQuantity) || 0,\n      is_available: Boolean(adaptedData.is_available),\n      image: adaptedData.image || null,\n      // Incluir la imagen\n      minimal_sync: true\n    };\n\n    // Usar el método más confiable para sincronización\n    return await syncPlato(adaptedData);\n  } catch (error) {\n    console.error('❌ Error en sincronización:', error);\n    if (retryCount >= maxRetries) {\n      try {\n        await markPlatoAsSyncProblematic(plato.id);\n      } catch (markError) {\n        console.error('Error al marcar plato como problemático:', markError);\n      }\n    }\n    return false;\n  }\n};\n\n// Verificar estado de sincronización con el backend\nconst checkSyncStatus = async () => {\n  try {\n    console.log('🔄 Verificando estado de sincronización...');\n    const response = await fetch(`${API_URL}/sync/status`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      },\n      credentials: 'omit' // Importante: no enviar cookies\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log('📊 Estado de sincronización:', data);\n\n      // Si no existe la tabla, intentar crearla\n      if (!data.data.mysql.tablaPlatos) {\n        console.log('⚠️ La tabla platos no existe, intentando configurar...');\n        await setupSync();\n      }\n      return data.data;\n    } else {\n      console.error('❌ Error al verificar estado de sincronización:', await response.text());\n      return null;\n    }\n  } catch (error) {\n    console.error('❌ Error al verificar estado de sincronización:', error);\n    return null;\n  }\n};\n\n// Configurar la sincronización - crear tablas necesarias\nconst setupSync = async () => {\n  try {\n    console.log('🔄 Configurando sincronización...');\n    const response = await fetch(`${API_URL}/sync/setup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'omit',\n      body: JSON.stringify({\n        force: false\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log('✅ Configuración de sincronización completada:', data);\n      return true;\n    } else {\n      console.error('❌ Error al configurar sincronización:', await response.text());\n      return false;\n    }\n  } catch (error) {\n    console.error('❌ Error al configurar sincronización:', error);\n    return false;\n  }\n};\n\n// Inicializar el servicio de sincronización\nconst initSyncService = () => {\n  console.log('🔄 Inicializando servicio de sincronización...');\n\n  // Probar conexiones y configurar sincronización\n  Promise.all([testServerConnection(), checkSyncStatus()]).then(([isApiConnected, syncStatus]) => {\n    console.log(`✅ Estado de conexión directa - API: ${isApiConnected}`);\n    if (isApiConnected) {\n      // Configurar escuchas para eventos de conexión\n      setupConnectionListeners();\n\n      // Si hay estado de sincronización, proceder con la sincronización\n      if (syncStatus && syncStatus.mysql && syncStatus.mysql.connected) {\n        console.log('📊 MySQL conectado, procediendo con sincronización');\n        syncData();\n\n        // Reactivar la sincronización periódica (cada 1 minuto)\n        const syncInterval = setInterval(syncData, 60000);\n      } else {\n        console.log('⚠️ MySQL no está configurado correctamente, intentando configurar...');\n        setupSync().then(success => {\n          if (success) {\n            console.log('✅ Configuración exitosa, iniciando sincronización');\n            syncData();\n\n            // Reactivar la sincronización periódica (cada 1 minuto)\n            const syncInterval = setInterval(syncData, 60000);\n          }\n        });\n      }\n    } else {\n      console.error('❌ No se pudo establecer conexión con el servidor.');\n    }\n  });\n  console.log('⚙️ Servicio de sincronización inicializado');\n};\n\n// Exportar las funciones necesarias\nexport { initSyncService, syncData, isOnline, _isOnline, testServerConnection, testMySQLConnection, checkSyncStatus, setupSync };\n\n// Asegúrate de que la función que maneja la sincronización tenga un mejor manejo de errores\n\n/**\n * Función para sincronizar un plato con el servidor, asegurando que la imagen se incluya\n * @param {Object} plato - El plato a sincronizar\n * @returns {Promise<Object>} - Resultado de la sincronización\n */\nconst syncPlato = async plato => {\n  console.log(`🔄 Sincronizando plato: ${plato.name} (ID: ${plato.id})`);\n  try {\n    // Preparar los datos para enviar (incluir la imagen optimizada)\n    const platoToSync = await adaptPlatoDataWithImageOptimization(plato);\n\n    // Omitir la imagen en los logs para evitar mensajes demasiado largos\n    console.log('📤 Datos a enviar:', {\n      ...platoToSync,\n      image: platoToSync.image ? 'Imagen en base64 (omitida en log)' : null\n    });\n\n    // Imprimir la URL exacta para depuración\n    const url = SYNC_CONFIG.platoUrl; // Usar la configuración existente\n    console.log(`🔗 URL de sincronización: ${url}`);\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(platoToSync),\n      // Evitar que se incluyan cookies u otros datos de autenticación si no son necesarios\n      credentials: 'omit'\n    });\n\n    // Verificar si la respuesta es exitosa\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`❌ Error de sincronización (${response.status}): ${errorText}`);\n\n      // Intentar con el método de sincronización minimalista si hay un error\n      if (response.status >= 400) {\n        console.log('⚠️ Intentando sincronización minimalista como fallback...');\n        return await syncMinimalDataOnly(plato);\n      }\n      return {\n        success: false,\n        message: `Error de servidor: ${response.status} ${response.statusText}`,\n        error: errorText\n      };\n    }\n\n    // Procesar la respuesta exitosa\n    const responseData = await response.json();\n    console.log('✅ Sincronización exitosa:', responseData);\n\n    // Actualizar el estado de sincronización en IndexedDB\n    try {\n      await updatePlatoSyncStatus(plato.id, true);\n      console.log(`✅ Estado de sincronización actualizado para plato ID: ${plato.id}`);\n    } catch (syncStatusError) {\n      console.warn(`⚠️ No se pudo actualizar el estado de sincronización: ${syncStatusError.message}`);\n    }\n    return {\n      success: true,\n      message: 'Plato sincronizado correctamente',\n      data: responseData\n    };\n  } catch (error) {\n    console.error('❌ Error en sincronización:', error);\n\n    // Intentar con el método de sincronización minimalista si hay un error\n    console.log('⚠️ Intentando sincronización minimalista como fallback...');\n    return await syncMinimalDataOnly(plato);\n  }\n};\n\n// Función para adaptar los datos del plato antes de sincronizar, con optimización de imágenes\nexport const adaptPlatoDataWithImageOptimization = async plato => {\n  // Crear una copia para no modificar el original\n  const adaptedData = {\n    ...plato\n  };\n\n  // Asegurarse de que todos los campos necesarios estén presentes\n  adaptedData.id = plato.id;\n  adaptedData.name = plato.name || 'Plato sin nombre';\n  adaptedData.price = parseFloat(plato.price) || 0;\n  adaptedData.description = plato.description || '';\n  adaptedData.category = plato.category || 'principal';\n\n  // Optimizar la imagen si existe\n  if (plato.image && typeof plato.image === 'string' && plato.image.length > 0) {\n    try {\n      adaptedData.image = await optimizeImageForSync(plato.image);\n      console.log(`Imagen optimizada para ${plato.name}`);\n    } catch (error) {\n      console.warn(`Error al optimizar imagen para ${plato.name}:`, error);\n      adaptedData.image = plato.image; // Usar la original en caso de error\n    }\n  } else {\n    adaptedData.image = plato.image || null;\n  }\n  adaptedData.image_url = plato.image_url || '';\n  adaptedData.is_available = plato.is_available !== false;\n  adaptedData.includesDrink = plato.includesDrink || false;\n  adaptedData.availableQuantity = plato.availableQuantity || 0;\n  return adaptedData;\n};","map":{"version":3,"names":["getPendingPlatos","updatePlatoSyncStatus","getSyncQueue","removeFromSyncQueue","getPlato","adaptPlatoData","optimizeImageForSync","API_URL","RAW_URL","SYNC_CONFIG","skipServerAvailabilityCheck","maxPlatoSize","retryIntervals","maxRetries","platoUrl","emergencyPlatoUrl","useEmergencyEndpoint","isSyncing","_isOnline","navigator","onLine","isOnline","response","fetch","method","mode","cache","credentials","error","console","setupConnectionListeners","window","addEventListener","log","syncData","then","online","testServerConnection","xhr","XMLHttpRequest","responsePromise","Promise","resolve","timeoutId","setTimeout","warn","abort","onreadystatechange","readyState","clearTimeout","status","onerror","checkAlternativePort","open","withCredentials","send","ports","port","ok","SERVER_PORT","testMySQLConnection","headers","data","json","database","tables","join","text","syncQueue","length","item","entityType","plato","entityId","name","id","success","syncPlato","syncError","pendingPlatos","tryUltraMinimalSync","platoId","dbError","setRequestHeader","adaptedData","adaptPlatoDataWithImageOptimization","minimalData","substring","price","Number","JSON","stringify","processSyncQueue","syncItems","syncSuccess","type","syncPlatoToServer","syncMinimalDataOnly","retryCount","description","category","image","is_available","Boolean","minimal_sync","operationTimeoutId","timeout","handleRetry","ontimeout","delay","sync_problematic","serverAvailable","checkServerAvailability","availableQuantity","markPlatoAsSyncProblematic","markError","checkSyncStatus","mysql","tablaPlatos","setupSync","body","force","initSyncService","all","isApiConnected","syncStatus","connected","syncInterval","setInterval","platoToSync","url","errorText","message","statusText","responseData","syncStatusError","parseFloat","image_url","includesDrink"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/syncService.js"],"sourcesContent":["// src/services/syncService.js\n\n// Servicio para gestionar la sincronización y el estado de la conexión\nimport { \n  getPendingPlatos, \n  updatePlatoSyncStatus, \n  getSyncQueue, \n  removeFromSyncQueue,\n  getPlato\n} from './indexedDBService';\nimport { adaptPlatoData } from '../utils/dataAdapters';\nimport { optimizeImageForSync } from './imageService';\n\n// Constantes desde el servicio IndexedDB\nconst API_URL = 'http://localhost:3000/api';\nconst RAW_URL = 'http://localhost:3000/raw';\n\n// Configuración específica para mejorar la sincronización\nconst SYNC_CONFIG = {\n  skipServerAvailabilityCheck: true,\n  maxPlatoSize: 30000, // 30KB máximo\n  retryIntervals: [5000, 15000, 30000],\n  maxRetries: 2,\n  platoUrl: `${API_URL}/sync/platos`,\n  emergencyPlatoUrl: `${API_URL}/platos/minimal`,\n  useEmergencyEndpoint: true\n};\n\n// Estado de la sincronización\nlet isSyncing = false;\nlet _isOnline = navigator.onLine;\n\n// Alternativa más simple para verificar la conexión\nconst isOnline = async () => {\n  // Primero comprobamos el estado de navigator.onLine\n  if (!navigator.onLine) {\n    return false;\n  }\n  \n  // Intentamos hacer un fetch a un recurso pequeño (como un favicon)\n  try {\n    const response = await fetch(`${API_URL}/favicon.ico`, {\n      method: 'HEAD',\n      mode: 'no-cors',\n      cache: 'no-store',\n      credentials: 'omit'\n    });\n    \n    return true; // Si no hay excepción, asumimos que estamos en línea\n  } catch (error) {\n    console.error('Error al verificar estado de conexión:', error);\n    return false;\n  }\n};\n\n// Configurar escuchas para eventos de conexión\nconst setupConnectionListeners = () => {\n  window.addEventListener('online', async () => {\n    console.log('Evento online detectado');\n    _isOnline = await isOnline();\n    if (_isOnline) {\n      console.log('Conexión a Internet restablecida');\n      // Sincronizar cuando se recupera la conexión\n      syncData();\n    }\n  });\n  \n  window.addEventListener('offline', () => {\n    console.log('Evento offline detectado');\n    _isOnline = false;\n    console.log('Conexión a Internet perdida');\n  });\n  \n  // Verificar estado inicial\n  isOnline().then(online => {\n    console.log(`Estado inicial de conexión: ${online ? 'En línea' : 'Fuera de línea'}`);\n  });\n};\n\n// Función para probar la conexión con el servidor (modo ultra-ligero)\nconst testServerConnection = async () => {\n  console.log('🔄 Probando conexión con el servidor (modo emergencia)...');\n  \n  try {\n    // Usar XMLHttpRequest sin cookies ni headers personalizados\n    const xhr = new XMLHttpRequest();\n    \n    const responsePromise = new Promise((resolve) => {\n      const timeoutId = setTimeout(() => {\n        console.warn('⏱️ Timeout en la prueba de conexión');\n        xhr.abort();\n        resolve(false);\n      }, 5000);\n      \n      xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log('✅ Conexión básica establecida');\n            resolve(true);\n          } else if (xhr.status === 431) {\n            console.error('❌ Error 431: Request Header Fields Too Large');\n            console.log('👉 Necesitas reducir el tamaño de las cookies o headers');\n            resolve(false);\n          } else {\n            console.error(`❌ Error en prueba de conexión: ${xhr.status}`);\n            resolve(false);\n          }\n        }\n      };\n      \n      xhr.onerror = function() {\n        clearTimeout(timeoutId);\n        console.error('❌ Error de red en prueba de conexión');\n        // Intentar con endpoint de emergencia sin headers\n        checkAlternativePort().then(resolve);\n      };\n      \n      // Realizar una solicitud GET simple sin headers\n      xhr.open('GET', `${API_URL}/test/ping`, true);\n      // No añadir ningún header\n      xhr.withCredentials = false; // Importante: evitar enviar cookies\n      xhr.send();\n    });\n    \n    return await responsePromise;\n  } catch (error) {\n    console.error('❌ Error en prueba de conexión:', error);\n    return false;\n  }\n};\n\n// Comprobar puerto alternativo\nconst checkAlternativePort = async () => {\n  console.log('🔄 Probando puertos alternativos...');\n  \n  // Lista de puertos comunes para probar\n  const ports = [8080, 3000, 5000, 8000];\n  \n  for (const port of ports) {\n    try {\n      console.log(`Probando en puerto: ${port}`);\n      const response = await fetch(`http://localhost:${port}/raw/ping`, {\n        method: 'GET',\n        mode: 'no-cors',\n        cache: 'no-store',\n        credentials: 'omit'\n      });\n      \n      if (response.ok || response.status === 0) {\n        console.log(`✅ Servidor encontrado en puerto ${port}`);\n        // Actualizar URL global para usar este puerto\n        window.SERVER_PORT = port;\n        return true;\n      }\n    } catch (error) {\n      console.log(`Puerto ${port} no disponible`);\n    }\n  }\n  \n  console.error('❌ No se encontró el servidor en ningún puerto común');\n  return false;\n};\n\n// Función para probar la conexión a MySQL\nconst testMySQLConnection = async () => {\n  console.log('🔄 Probando conexión a MySQL...');\n  \n  try {\n    const response = await fetch(`${API_URL}/test/db`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    \n    if (response.ok) {\n      const data = await response.json();\n      console.log('✅ Conexión a MySQL establecida:', data);\n      \n      // Mostrar información clara sobre la base de datos\n      if (data.data && data.data.database) {\n        console.log(`📊 Base de datos MySQL: ${data.data.database}`);\n        console.log(`📊 Tablas disponibles: ${data.data.tables.join(', ')}`);\n      }\n      \n      return true;\n    } else {\n      console.error('❌ Error al conectar con MySQL:', await response.text());\n      return false;\n    }\n  } catch (error) {\n    console.error('❌ Error de red al probar la conexión MySQL:', error);\n    return false;\n  }\n};\n\n// Función para sincronizar datos entre IndexedDB y el servidor\nconst syncData = async () => {\n  if (!await isOnline()) {\n    console.log('Sin conexión a Internet, la sincronización no es posible');\n    return false;\n  }\n  \n  if (isSyncing) {\n    console.log('Ya hay una sincronización en progreso');\n    return false;\n  }\n  \n  isSyncing = true;\n  \n  console.log('🔄 Iniciando sincronización de datos...');\n  \n  try {\n    // Procesar la cola de sincronización\n    const syncQueue = await getSyncQueue();\n    console.log(`📋 Cola de sincronización: ${syncQueue.length} elementos`);\n    \n    for (const item of syncQueue) {\n      if (item.entityType === 'plato') {\n        // Obtener el plato completo de IndexedDB\n        const plato = await getPlato(item.entityId);\n        \n        if (plato) {\n          console.log(`🍽️ Sincronizando plato: ${plato.name} (${plato.id})`);\n          \n          try {\n            // Intentar sincronización minimalista\n            const success = await syncPlato(plato);\n            \n            if (success.success) {\n              console.log(`✅ Plato ${plato.id} sincronizado correctamente`);\n              await removeFromSyncQueue(item.id);\n            } else {\n              console.error(`❌ Error al sincronizar plato ${plato.id}`);\n            }\n          } catch (syncError) {\n            console.error(`❌ Excepción al sincronizar plato ${plato.id}:`, syncError);\n          }\n        } else {\n          console.warn(`⚠️ Plato ${item.entityId} no encontrado en IndexedDB`);\n          await removeFromSyncQueue(item.id);\n        }\n      }\n    }\n    \n    // Buscar platos pendientes que no estén en la cola\n    console.log('🔍 Buscando platos pendientes de sincronización...');\n    const pendingPlatos = await getPendingPlatos();\n    console.log(`📋 Platos pendientes: ${pendingPlatos.length}`);\n    \n    for (const plato of pendingPlatos) {\n      try {\n        console.log(`🍽️ Sincronizando plato pendiente: ${plato.name} (${plato.id})`);\n        const success = await syncPlato(plato);\n        \n        if (success.success) {\n          console.log(`✅ Plato pendiente ${plato.id} sincronizado correctamente`);\n        } else {\n          console.error(`❌ Error al sincronizar plato pendiente ${plato.id}: ${success.error}`);\n        }\n      } catch (syncError) {\n        console.error(`❌ Excepción al sincronizar plato pendiente ${plato.id}: ${syncError}`);\n      }\n    }\n    \n    console.log('✅ Sincronización completada');\n    return true;\n  } catch (error) {\n    console.error('❌ Error durante la sincronización:', error);\n    return false;\n  } finally {\n    isSyncing = false;\n  }\n};\n\n// Método ultra-minimal usando XMLHttpRequest sin headers\nconst tryUltraMinimalSync = async (data, platoId) => {\n  try {\n    console.log('🚨 Intentando sincronización ultra-minimal para plato:', platoId);\n    \n    // Crear un objeto XMLHttpRequest directamente\n    const xhr = new XMLHttpRequest();\n    \n    // Configurar una promesa para manejar la respuesta\n    const responsePromise = new Promise((resolve) => {\n      // Configurar timeout\n      const timeoutId = setTimeout(() => {\n        console.warn('⏱️ Timeout en sincronización ultra-minimal');\n        xhr.abort();\n        resolve(false);\n      }, 15000);\n      \n      xhr.onreadystatechange = async function() {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log('✅ Sincronización ultra-minimal exitosa');\n            try {\n              await updatePlatoSyncStatus(platoId, 'synced');\n            } catch (dbError) {\n              console.error('Error al actualizar estado en BD:', dbError);\n            }\n            resolve(true);\n          } else {\n            console.error(`❌ Error en sincronización ultra-minimal: ${xhr.status}`);\n            resolve(false);\n          }\n        }\n      };\n      \n      xhr.onerror = function() {\n        clearTimeout(timeoutId);\n        console.error('❌ Error de red en sincronización ultra-minimal');\n        resolve(false);\n      };\n    });\n    \n    // Usar método POST con datos minimalistas\n    xhr.open('POST', `${API_URL}/platos/emergency-sync`, true);\n    \n    // Solo agregar Content-Type, nada más\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    \n    // Preparar datos ultra-minimalistas\n    const adaptedData = await adaptPlatoDataWithImageOptimization(data);\n    const minimalData = {\n      id: adaptedData.id,\n      name: (adaptedData.name || \"\").substring(0, 30),\n      price: Number(adaptedData.price) || 0\n    };\n    \n    // Enviar los datos\n    xhr.send(JSON.stringify(minimalData));\n    \n    return await responsePromise;\n  } catch (error) {\n    console.error('❌ Error en sincronización ultra-minimal:', error);\n    return false;\n  }\n};\n\n// Procesar la cola de sincronización\nconst processSyncQueue = async () => {\n  if (!await isOnline() || isSyncing) {\n    console.log(`No se puede procesar la cola. En línea: ${_isOnline}, Sincronizando: ${isSyncing}`);\n    return false;\n  }\n  \n  isSyncing = true;\n  console.log('Iniciando procesamiento de cola de sincronización...');\n  \n  try {\n    const syncItems = await getSyncQueue();\n    \n    if (syncItems.length === 0) {\n      console.log('No hay elementos en la cola de sincronización');\n      isSyncing = false;\n      return true;\n    }\n    \n    console.log(`Procesando ${syncItems.length} elementos en la cola de sincronización`);\n    \n    // Procesar cada elemento de la cola\n    for (const item of syncItems) {\n      let syncSuccess = false;\n      \n      if (item.type === 'create' && item.entityType === 'plato') {\n        syncSuccess = await syncPlatoToServer(item.data);\n      }\n      // Aquí pueden agregarse más tipos de sincronización según sea necesario\n      \n      if (syncSuccess) {\n        // Eliminar de la cola si la sincronización fue exitosa\n        await removeFromSyncQueue(item.id);\n        console.log(`Elemento ${item.id} eliminado de la cola de sincronización`);\n      } else {\n        console.log(`No se pudo sincronizar el elemento ${item.id}, se reintentará más tarde`);\n      }\n    }\n    \n    console.log('Procesamiento de cola de sincronización completado');\n    return true;\n  } catch (error) {\n    console.error('Error al procesar cola de sincronización:', error);\n    return false;\n  } finally {\n    isSyncing = false;\n  }\n};\n\n// Método de sincronización extremadamente simplificado para problemas persistentes\nexport const syncMinimalDataOnly = async (data, platoId, retryCount = 0) => {\n  const maxRetries = SYNC_CONFIG.maxRetries;\n  \n  // Usar datos minimalistas pero incluir la imagen optimizada\n  const adaptedData = await adaptPlatoDataWithImageOptimization(data);\n  const minimalData = {\n    id: adaptedData.id,\n    name: adaptedData.name?.substring(0, 50) || 'Plato sin nombre',\n    price: Number(adaptedData.price) || 0,\n    description: adaptedData.description?.substring(0, 100) || '',\n    category: adaptedData.category || 'principal',\n    image: adaptedData.image, // Incluir la imagen optimizada\n    is_available: Boolean(adaptedData.is_available),\n    minimal_sync: true\n  };\n  \n  return new Promise((resolve) => {\n    // Establecer timeout para toda la operación\n    const operationTimeoutId = setTimeout(() => {\n      console.warn('⏱️ Timeout global de la operación de sincronización');\n      resolve(false);\n    }, 30000);\n    \n    const xhr = new XMLHttpRequest();\n    \n    // Configurar timeouts más estrictos\n    xhr.timeout = 15000;\n    \n    xhr.onreadystatechange = async function() {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          clearTimeout(operationTimeoutId);\n          try {\n            await updatePlatoSyncStatus(platoId, 'synced');\n            console.log(`✅ Sincronización exitosa para plato ${platoId}`);\n          } catch (error) {\n            console.error('Error al actualizar estado:', error);\n          }\n          resolve(true);\n        } else if (xhr.status === 0) {\n          // Conexión abortada o no establecida\n          console.warn('⚠️ Conexión interrumpida');\n          handleRetry();\n        } else if (xhr.status === 431) {\n          console.error(`❌ Error 431 (Headers demasiado grandes) - Intentando método ultraminimal`);\n          tryUltraMinimalSync(adaptedData, platoId).then(success => {\n            clearTimeout(operationTimeoutId);\n            resolve(success);\n          });\n        } else {\n          console.error(`❌ Error HTTP ${xhr.status} en sincronización`);\n          handleRetry();\n        }\n      }\n    };\n    \n    xhr.ontimeout = function() {\n      console.warn('⏱️ Timeout de la petición HTTP');\n      handleRetry();\n    };\n    \n    xhr.onerror = function() {\n      console.error('❌ Error de red en sincronización');\n      handleRetry();\n    };\n    \n    // Función para manejar reintentos\n    const handleRetry = () => {\n      if (retryCount < maxRetries) {\n        const delay = SYNC_CONFIG.retryIntervals[retryCount] || 5000;\n        console.log(`🔄 Reintentando en ${delay}ms... (${retryCount + 1}/${maxRetries})`);\n        \n        setTimeout(() => {\n          clearTimeout(operationTimeoutId);\n          syncMinimalDataOnly(data, platoId, retryCount + 1)\n            .then(success => resolve(success));\n        }, delay);\n      } else {\n        clearTimeout(operationTimeoutId);\n        console.warn('❌ Agotados todos los reintentos de sincronización');\n        resolve(false);\n      }\n    };\n    \n    try {\n      // Usar método POST con headers mínimos\n      xhr.open('POST', `${API_URL}/platos`, true);\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      \n      // Enviar los datos minimalistas\n      xhr.send(JSON.stringify(minimalData));\n    } catch (error) {\n      console.error('❌ Error al iniciar la petición:', error);\n      handleRetry();\n    }\n  });\n};\n\n// Sincronizar un plato con el servidor\nconst syncPlatoToServer = async (plato, retryCount = 0) => {\n  const maxRetries = SYNC_CONFIG.maxRetries;\n  \n  // Si el plato está marcado como problemático, omitirlo\n  if (plato.sync_problematic) {\n    console.warn(`⚠️ Omitiendo plato ${plato.id} marcado como problemático para sincronización`);\n    return false;\n  }\n  \n  console.log(`Sincronizando plato ${plato.id} con el servidor (intento ${retryCount + 1}/${maxRetries + 1})...`);\n  \n  try {\n    // Omitir verificación si está desactivada\n    if (!SYNC_CONFIG.skipServerAvailabilityCheck) {\n      // Verificar si el servidor está disponible\n      const serverAvailable = await checkServerAvailability();\n      if (!serverAvailable) {\n        console.error('❌ El servidor no está disponible. Posponiendo sincronización.');\n        return false;\n      }\n    }\n    \n    // Preparar datos para sincronización incluyendo la imagen\n    let adaptedData = await adaptPlatoDataWithImageOptimization(plato);\n    let syncData = {\n      id: adaptedData.id,\n      name: adaptedData.name?.substring(0, 50) || 'Plato sin nombre',\n      price: Number(adaptedData.price) || 0,\n      description: adaptedData.description?.substring(0, 100) || '',\n      availableQuantity: Number(adaptedData.availableQuantity) || 0,\n      is_available: Boolean(adaptedData.is_available),\n      image: adaptedData.image || null, // Incluir la imagen\n      minimal_sync: true\n    };\n    \n    // Usar el método más confiable para sincronización\n    return await syncPlato(adaptedData);\n  } catch (error) {\n    console.error('❌ Error en sincronización:', error);\n    \n    if (retryCount >= maxRetries) {\n      try {\n        await markPlatoAsSyncProblematic(plato.id);\n      } catch (markError) {\n        console.error('Error al marcar plato como problemático:', markError);\n      }\n    }\n    \n    return false;\n  }\n};\n\n// Verificar estado de sincronización con el backend\nconst checkSyncStatus = async () => {\n  try {\n    console.log('🔄 Verificando estado de sincronización...');\n    \n    const response = await fetch(`${API_URL}/sync/status`, {\n      method: 'GET',\n      headers: { 'Accept': 'application/json' },\n      credentials: 'omit' // Importante: no enviar cookies\n    });\n    \n    if (response.ok) {\n      const data = await response.json();\n      console.log('📊 Estado de sincronización:', data);\n      \n      // Si no existe la tabla, intentar crearla\n      if (!data.data.mysql.tablaPlatos) {\n        console.log('⚠️ La tabla platos no existe, intentando configurar...');\n        await setupSync();\n      }\n      \n      return data.data;\n    } else {\n      console.error('❌ Error al verificar estado de sincronización:', await response.text());\n      return null;\n    }\n  } catch (error) {\n    console.error('❌ Error al verificar estado de sincronización:', error);\n    return null;\n  }\n};\n\n// Configurar la sincronización - crear tablas necesarias\nconst setupSync = async () => {\n  try {\n    console.log('🔄 Configurando sincronización...');\n    \n    const response = await fetch(`${API_URL}/sync/setup`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      credentials: 'omit',\n      body: JSON.stringify({ force: false })\n    });\n    \n    if (response.ok) {\n      const data = await response.json();\n      console.log('✅ Configuración de sincronización completada:', data);\n      return true;\n    } else {\n      console.error('❌ Error al configurar sincronización:', await response.text());\n      return false;\n    }\n  } catch (error) {\n    console.error('❌ Error al configurar sincronización:', error);\n    return false;\n  }\n};\n\n// Inicializar el servicio de sincronización\nconst initSyncService = () => {\n  console.log('🔄 Inicializando servicio de sincronización...');\n  \n  // Probar conexiones y configurar sincronización\n  Promise.all([\n    testServerConnection(),\n    checkSyncStatus()\n  ]).then(([isApiConnected, syncStatus]) => {\n    console.log(`✅ Estado de conexión directa - API: ${isApiConnected}`);\n    \n    if (isApiConnected) {\n      // Configurar escuchas para eventos de conexión\n      setupConnectionListeners();\n      \n      // Si hay estado de sincronización, proceder con la sincronización\n      if (syncStatus && syncStatus.mysql && syncStatus.mysql.connected) {\n        console.log('📊 MySQL conectado, procediendo con sincronización');\n        syncData();\n        \n        // Reactivar la sincronización periódica (cada 1 minuto)\n        const syncInterval = setInterval(syncData, 60000);\n      } else {\n        console.log('⚠️ MySQL no está configurado correctamente, intentando configurar...');\n        setupSync().then(success => {\n          if (success) {\n            console.log('✅ Configuración exitosa, iniciando sincronización');\n            syncData();\n            \n            // Reactivar la sincronización periódica (cada 1 minuto)\n            const syncInterval = setInterval(syncData, 60000);\n          }\n        });\n      }\n    } else {\n      console.error('❌ No se pudo establecer conexión con el servidor.');\n    }\n  });\n  \n  console.log('⚙️ Servicio de sincronización inicializado');\n};\n\n// Exportar las funciones necesarias\nexport {\n  initSyncService,\n  syncData,\n  isOnline,\n  _isOnline,\n  testServerConnection,\n  testMySQLConnection,\n  checkSyncStatus,\n  setupSync\n};\n\n// Asegúrate de que la función que maneja la sincronización tenga un mejor manejo de errores\n\n/**\n * Función para sincronizar un plato con el servidor, asegurando que la imagen se incluya\n * @param {Object} plato - El plato a sincronizar\n * @returns {Promise<Object>} - Resultado de la sincronización\n */\nconst syncPlato = async (plato) => {\n  console.log(`🔄 Sincronizando plato: ${plato.name} (ID: ${plato.id})`);\n  \n  try {\n    // Preparar los datos para enviar (incluir la imagen optimizada)\n    const platoToSync = await adaptPlatoDataWithImageOptimization(plato);\n    \n    // Omitir la imagen en los logs para evitar mensajes demasiado largos\n    console.log('📤 Datos a enviar:', { \n      ...platoToSync, \n      image: platoToSync.image ? 'Imagen en base64 (omitida en log)' : null \n    });\n    \n    // Imprimir la URL exacta para depuración\n    const url = SYNC_CONFIG.platoUrl; // Usar la configuración existente\n    console.log(`🔗 URL de sincronización: ${url}`);\n    \n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(platoToSync),\n      // Evitar que se incluyan cookies u otros datos de autenticación si no son necesarios\n      credentials: 'omit'\n    });\n    \n    // Verificar si la respuesta es exitosa\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`❌ Error de sincronización (${response.status}): ${errorText}`);\n      \n      // Intentar con el método de sincronización minimalista si hay un error\n      if (response.status >= 400) {\n        console.log('⚠️ Intentando sincronización minimalista como fallback...');\n        return await syncMinimalDataOnly(plato);\n      }\n      \n      return {\n        success: false,\n        message: `Error de servidor: ${response.status} ${response.statusText}`,\n        error: errorText\n      };\n    }\n    \n    // Procesar la respuesta exitosa\n    const responseData = await response.json();\n    console.log('✅ Sincronización exitosa:', responseData);\n    \n    // Actualizar el estado de sincronización en IndexedDB\n    try {\n      await updatePlatoSyncStatus(plato.id, true);\n      console.log(`✅ Estado de sincronización actualizado para plato ID: ${plato.id}`);\n    } catch (syncStatusError) {\n      console.warn(`⚠️ No se pudo actualizar el estado de sincronización: ${syncStatusError.message}`);\n    }\n    \n    return {\n      success: true,\n      message: 'Plato sincronizado correctamente',\n      data: responseData\n    };\n  } catch (error) {\n    console.error('❌ Error en sincronización:', error);\n    \n    // Intentar con el método de sincronización minimalista si hay un error\n    console.log('⚠️ Intentando sincronización minimalista como fallback...');\n    return await syncMinimalDataOnly(plato);\n  }\n};\n\n// Función para adaptar los datos del plato antes de sincronizar, con optimización de imágenes\nexport const adaptPlatoDataWithImageOptimization = async (plato) => {\n  // Crear una copia para no modificar el original\n  const adaptedData = { ...plato };\n  \n  // Asegurarse de que todos los campos necesarios estén presentes\n  adaptedData.id = plato.id;\n  adaptedData.name = plato.name || 'Plato sin nombre';\n  adaptedData.price = parseFloat(plato.price) || 0;\n  adaptedData.description = plato.description || '';\n  adaptedData.category = plato.category || 'principal';\n  \n  // Optimizar la imagen si existe\n  if (plato.image && typeof plato.image === 'string' && plato.image.length > 0) {\n    try {\n      adaptedData.image = await optimizeImageForSync(plato.image);\n      console.log(`Imagen optimizada para ${plato.name}`);\n    } catch (error) {\n      console.warn(`Error al optimizar imagen para ${plato.name}:`, error);\n      adaptedData.image = plato.image; // Usar la original en caso de error\n    }\n  } else {\n    adaptedData.image = plato.image || null;\n  }\n  \n  adaptedData.image_url = plato.image_url || '';\n  adaptedData.is_available = plato.is_available !== false;\n  adaptedData.includesDrink = plato.includesDrink || false;\n  adaptedData.availableQuantity = plato.availableQuantity || 0;\n  \n  return adaptedData;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}