{"ast":null,"code":"// src/services/syncService.js\n\n// Servicio para gestionar la sincronización y el estado de la conexión\nimport { getPendingPlatos, updatePlatoSyncStatus, getSyncQueue, removeFromSyncQueue, preparePlatoForSync } from './indexedDBService';\nconst API_URL = 'http://localhost:3000/api';\n\n// Estado de la sincronización\nlet isSyncing = false;\nlet _isOnline = navigator.onLine;\n\n// Alternativa más simple para verificar la conexión\nconst isOnline = async () => {\n  // Primero comprobamos el estado de navigator.onLine\n  if (!navigator.onLine) {\n    return false;\n  }\n\n  // Intentamos hacer un fetch a un recurso pequeño (como un favicon)\n  try {\n    const response = await fetch(`${API_URL}/favicon.ico`, {\n      method: 'HEAD',\n      // Solo pedimos las cabeceras, no el contenido\n      mode: 'no-cors',\n      // Modo no-cors para evitar problemas de CORS\n      cache: 'no-store',\n      credentials: 'omit'\n    });\n    return true; // Si no hay excepción, asumimos que estamos en línea\n  } catch (error) {\n    console.error('Error al verificar estado de conexión:', error);\n    return false;\n  }\n};\n\n// Configurar escuchas para eventos de conexión\nconst setupConnectionListeners = () => {\n  window.addEventListener('online', async () => {\n    console.log('Evento online detectado');\n    _isOnline = await isOnline();\n    if (_isOnline) {\n      console.log('Conexión a Internet restablecida');\n      // Sincronizar cuando se recupera la conexión\n      syncData();\n    }\n  });\n  window.addEventListener('offline', () => {\n    console.log('Evento offline detectado');\n    _isOnline = false;\n    console.log('Conexión a Internet perdida');\n  });\n\n  // Verificar estado inicial\n  isOnline().then(online => {\n    console.log(`Estado inicial de conexión: ${online ? 'En línea' : 'Fuera de línea'}`);\n  });\n};\n\n// Sincronizar un plato con el servidor\nconst syncPlatoToServer = async plato => {\n  console.log(`Sincronizando plato ${plato.id} con el servidor...`);\n  try {\n    // Preparar el plato para sincronización (reducir tamaño de imágenes, etc.)\n    const preparedPlato = preparePlatoForSync(plato);\n\n    // Agregar límites de tamaño y validaciones adicionales\n    if (JSON.stringify(preparedPlato).length > 1000000) {\n      // Si supera 1MB\n      console.error('❌ ERROR: El plato es demasiado grande para sincronizar', {\n        id: plato.id,\n        tamaño: JSON.stringify(preparedPlato).length + ' bytes'\n      });\n\n      // Intentar reducir aún más los datos\n      if (preparedPlato.image && preparedPlato.image.length > 50000) {\n        console.log('Reduciendo tamaño de imagen para la sincronización');\n        preparedPlato.image = preparedPlato.image.substring(0, 50000) + '...'; // Límite estricto\n      }\n\n      // Limitar longitud de campos de texto\n      if (preparedPlato.description && preparedPlato.description.length > 1000) {\n        preparedPlato.description = preparedPlato.description.substring(0, 1000) + '...';\n      }\n\n      // Si aún es demasiado grande, mostrar advertencia\n      if (JSON.stringify(preparedPlato).length > 1000000) {\n        console.warn('⚠️ Incluso después de reducir datos, el plato sigue siendo muy grande');\n      }\n    }\n    console.log('📤 Enviando plato al servidor con tamaño:', JSON.stringify(preparedPlato).length, 'bytes');\n\n    // Realizar la solicitud HTTP con los datos optimizados\n    const response = await fetch(`${API_URL}/platos`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n        // Otros encabezados necesarios...\n      },\n      body: JSON.stringify(preparedPlato)\n    });\n    if (!response.ok) {\n      // Intentar obtener más información sobre el error\n      let errorDetails = '';\n      try {\n        const errorResponse = await response.text();\n        errorDetails = errorResponse;\n        console.error('Detalles del error del servidor:', errorResponse);\n      } catch (textError) {\n        console.error('No se pudieron obtener detalles del error');\n      }\n      console.error(`Error del servidor: ${response.status} - ${errorDetails}`);\n      throw new Error(`Error del servidor: ${response.status}`);\n    }\n    const serverData = await response.json();\n    console.log('✅ Plato sincronizado con el servidor:', serverData);\n\n    // Actualizar estado de sincronización en IndexedDB\n    await updatePlatoSyncStatus(plato.id, 'synced');\n    return true;\n  } catch (error) {\n    console.error('❌ Error al sincronizar plato con el servidor:', error);\n\n    // Agregar lógica para manejar errores específicos\n    if (error.message.includes('500')) {\n      console.warn('⚠️ Error del servidor (500). Posiblemente datos incorrectos o problema interno del servidor.');\n\n      // Marcar para reintento con datos simplificados en el futuro\n      // Esta bandera podría usarse para indicar que se debe usar una versión más simple\n      try {\n        const updatedPlato = {\n          ...plato,\n          needsSimplification: true\n        };\n        await updatePlatoSyncStatus(plato.id, 'pending');\n      } catch (updateError) {\n        console.error('Error al marcar plato para simplificación:', updateError);\n      }\n    }\n    return false;\n  }\n};\n\n// Procesar la cola de sincronización\nconst processSyncQueue = async () => {\n  if (!(await isOnline()) || isSyncing) {\n    console.log(`No se puede procesar la cola. En línea: ${_isOnline}, Sincronizando: ${isSyncing}`);\n    return false;\n  }\n  isSyncing = true;\n  console.log('Iniciando procesamiento de cola de sincronización...');\n  try {\n    const syncItems = await getSyncQueue();\n    if (syncItems.length === 0) {\n      console.log('No hay elementos en la cola de sincronización');\n      isSyncing = false;\n      return true;\n    }\n    console.log(`Procesando ${syncItems.length} elementos en la cola de sincronización`);\n\n    // Procesar cada elemento de la cola\n    for (const item of syncItems) {\n      let syncSuccess = false;\n      if (item.type === 'create' && item.entityType === 'plato') {\n        syncSuccess = await syncPlatoToServer(item.data);\n      }\n      // Aquí pueden agregarse más tipos de sincronización según sea necesario\n\n      if (syncSuccess) {\n        // Eliminar de la cola si la sincronización fue exitosa\n        await removeFromSyncQueue(item.id);\n        console.log(`Elemento ${item.id} eliminado de la cola de sincronización`);\n      } else {\n        // Corregir el error de sintaxis aquí:\n        console.log(`No se pudo sincronizar el elemento ${item.id}, se reintentará más tarde`);\n      }\n    }\n    console.log('Procesamiento de cola de sincronización completado');\n    return true;\n  } catch (error) {\n    console.error('Error al procesar cola de sincronización:', error);\n    return false;\n  } finally {\n    isSyncing = false;\n  }\n};\n\n// Función principal para sincronizar datos\nconst syncData = async () => {\n  if (!(await isOnline())) {\n    console.log('Sin conexión a Internet, la sincronización no es posible');\n    return false;\n  }\n  try {\n    console.log('Iniciando sincronización de datos...');\n\n    // Procesar la cola de sincronización\n    await processSyncQueue();\n\n    // Sincronizar platos pendientes que no estén en la cola\n    const pendingPlatos = await getPendingPlatos();\n    console.log(`Encontrados ${pendingPlatos.length} platos pendientes de sincronización`);\n    for (const plato of pendingPlatos) {\n      await syncPlatoToServer(plato);\n    }\n    console.log('Sincronización completada con éxito');\n    return true;\n  } catch (error) {\n    console.error('Error durante la sincronización:', error);\n    return false;\n  }\n};\n\n// Inicializar el servicio de sincronización\nconst initSyncService = () => {\n  // Configurar escuchas para eventos de conexión\n  setupConnectionListeners();\n\n  // Realizar sincronización inicial si hay conexión\n  isOnline().then(online => {\n    if (online) {\n      syncData();\n    }\n  });\n\n  // Configurar sincronización periódica (cada minuto)\n  setInterval(async () => {\n    if ((await isOnline()) && !isSyncing) {\n      syncData();\n    }\n  }, 60000);\n  console.log('Servicio de sincronización inicializado');\n};\nexport { initSyncService, syncData, isOnline, _isOnline };","map":{"version":3,"names":["getPendingPlatos","updatePlatoSyncStatus","getSyncQueue","removeFromSyncQueue","preparePlatoForSync","API_URL","isSyncing","_isOnline","navigator","onLine","isOnline","response","fetch","method","mode","cache","credentials","error","console","setupConnectionListeners","window","addEventListener","log","syncData","then","online","syncPlatoToServer","plato","id","preparedPlato","JSON","stringify","length","tamaño","image","substring","description","warn","headers","body","ok","errorDetails","errorResponse","text","textError","status","Error","serverData","json","message","includes","updatedPlato","needsSimplification","updateError","processSyncQueue","syncItems","item","syncSuccess","type","entityType","data","pendingPlatos","initSyncService","setInterval"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/syncService.js"],"sourcesContent":["// src/services/syncService.js\r\n\r\n// Servicio para gestionar la sincronización y el estado de la conexión\r\nimport { \r\n  getPendingPlatos, \r\n  updatePlatoSyncStatus, \r\n  getSyncQueue, \r\n  removeFromSyncQueue,\r\n  preparePlatoForSync \r\n} from './indexedDBService';\r\n\r\nconst API_URL = 'http://localhost:3000/api';\r\n\r\n// Estado de la sincronización\r\nlet isSyncing = false;\r\nlet _isOnline = navigator.onLine;\r\n\r\n// Alternativa más simple para verificar la conexión\r\nconst isOnline = async () => {\r\n  // Primero comprobamos el estado de navigator.onLine\r\n  if (!navigator.onLine) {\r\n    return false;\r\n  }\r\n  \r\n  // Intentamos hacer un fetch a un recurso pequeño (como un favicon)\r\n  try {\r\n    const response = await fetch(`${API_URL}/favicon.ico`, {\r\n      method: 'HEAD', // Solo pedimos las cabeceras, no el contenido\r\n      mode: 'no-cors', // Modo no-cors para evitar problemas de CORS\r\n      cache: 'no-store',\r\n      credentials: 'omit'\r\n    });\r\n    \r\n    return true; // Si no hay excepción, asumimos que estamos en línea\r\n  } catch (error) {\r\n    console.error('Error al verificar estado de conexión:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Configurar escuchas para eventos de conexión\r\nconst setupConnectionListeners = () => {\r\n  window.addEventListener('online', async () => {\r\n    console.log('Evento online detectado');\r\n    _isOnline = await isOnline();\r\n    if (_isOnline) {\r\n      console.log('Conexión a Internet restablecida');\r\n      // Sincronizar cuando se recupera la conexión\r\n      syncData();\r\n    }\r\n  });\r\n  \r\n  window.addEventListener('offline', () => {\r\n    console.log('Evento offline detectado');\r\n    _isOnline = false;\r\n    console.log('Conexión a Internet perdida');\r\n  });\r\n  \r\n  // Verificar estado inicial\r\n  isOnline().then(online => {\r\n    console.log(`Estado inicial de conexión: ${online ? 'En línea' : 'Fuera de línea'}`);\r\n  });\r\n};\r\n\r\n// Sincronizar un plato con el servidor\r\nconst syncPlatoToServer = async (plato) => {\r\n  console.log(`Sincronizando plato ${plato.id} con el servidor...`);\r\n  \r\n  try {\r\n    // Preparar el plato para sincronización (reducir tamaño de imágenes, etc.)\r\n    const preparedPlato = preparePlatoForSync(plato);\r\n    \r\n    // Agregar límites de tamaño y validaciones adicionales\r\n    if (JSON.stringify(preparedPlato).length > 1000000) { // Si supera 1MB\r\n      console.error('❌ ERROR: El plato es demasiado grande para sincronizar', {\r\n        id: plato.id,\r\n        tamaño: JSON.stringify(preparedPlato).length + ' bytes'\r\n      });\r\n      \r\n      // Intentar reducir aún más los datos\r\n      if (preparedPlato.image && preparedPlato.image.length > 50000) {\r\n        console.log('Reduciendo tamaño de imagen para la sincronización');\r\n        preparedPlato.image = preparedPlato.image.substring(0, 50000) + '...'; // Límite estricto\r\n      }\r\n      \r\n      // Limitar longitud de campos de texto\r\n      if (preparedPlato.description && preparedPlato.description.length > 1000) {\r\n        preparedPlato.description = preparedPlato.description.substring(0, 1000) + '...';\r\n      }\r\n      \r\n      // Si aún es demasiado grande, mostrar advertencia\r\n      if (JSON.stringify(preparedPlato).length > 1000000) {\r\n        console.warn('⚠️ Incluso después de reducir datos, el plato sigue siendo muy grande');\r\n      }\r\n    }\r\n    \r\n    console.log('📤 Enviando plato al servidor con tamaño:', \r\n                JSON.stringify(preparedPlato).length, 'bytes');\r\n    \r\n    // Realizar la solicitud HTTP con los datos optimizados\r\n    const response = await fetch(`${API_URL}/platos`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        // Otros encabezados necesarios...\r\n      },\r\n      body: JSON.stringify(preparedPlato)\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      // Intentar obtener más información sobre el error\r\n      let errorDetails = '';\r\n      try {\r\n        const errorResponse = await response.text();\r\n        errorDetails = errorResponse;\r\n        console.error('Detalles del error del servidor:', errorResponse);\r\n      } catch (textError) {\r\n        console.error('No se pudieron obtener detalles del error');\r\n      }\r\n      \r\n      console.error(`Error del servidor: ${response.status} - ${errorDetails}`);\r\n      throw new Error(`Error del servidor: ${response.status}`);\r\n    }\r\n    \r\n    const serverData = await response.json();\r\n    console.log('✅ Plato sincronizado con el servidor:', serverData);\r\n    \r\n    // Actualizar estado de sincronización en IndexedDB\r\n    await updatePlatoSyncStatus(plato.id, 'synced');\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('❌ Error al sincronizar plato con el servidor:', error);\r\n    \r\n    // Agregar lógica para manejar errores específicos\r\n    if (error.message.includes('500')) {\r\n      console.warn('⚠️ Error del servidor (500). Posiblemente datos incorrectos o problema interno del servidor.');\r\n      \r\n      // Marcar para reintento con datos simplificados en el futuro\r\n      // Esta bandera podría usarse para indicar que se debe usar una versión más simple\r\n      try {\r\n        const updatedPlato = { ...plato, needsSimplification: true };\r\n        await updatePlatoSyncStatus(plato.id, 'pending');\r\n      } catch (updateError) {\r\n        console.error('Error al marcar plato para simplificación:', updateError);\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n};\r\n\r\n// Procesar la cola de sincronización\r\nconst processSyncQueue = async () => {\r\n  if (!await isOnline() || isSyncing) {\r\n    console.log(`No se puede procesar la cola. En línea: ${_isOnline}, Sincronizando: ${isSyncing}`);\r\n    return false;\r\n  }\r\n  \r\n  isSyncing = true;\r\n  console.log('Iniciando procesamiento de cola de sincronización...');\r\n  \r\n  try {\r\n    const syncItems = await getSyncQueue();\r\n    \r\n    if (syncItems.length === 0) {\r\n      console.log('No hay elementos en la cola de sincronización');\r\n      isSyncing = false;\r\n      return true;\r\n    }\r\n    \r\n    console.log(`Procesando ${syncItems.length} elementos en la cola de sincronización`);\r\n    \r\n    // Procesar cada elemento de la cola\r\n    for (const item of syncItems) {\r\n      let syncSuccess = false;\r\n      \r\n      if (item.type === 'create' && item.entityType === 'plato') {\r\n        syncSuccess = await syncPlatoToServer(item.data);\r\n      }\r\n      // Aquí pueden agregarse más tipos de sincronización según sea necesario\r\n      \r\n      if (syncSuccess) {\r\n        // Eliminar de la cola si la sincronización fue exitosa\r\n        await removeFromSyncQueue(item.id);\r\n        console.log(`Elemento ${item.id} eliminado de la cola de sincronización`);\r\n      } else {\r\n        // Corregir el error de sintaxis aquí:\r\n        console.log(`No se pudo sincronizar el elemento ${item.id}, se reintentará más tarde`);\r\n      }\r\n    }\r\n    \r\n    console.log('Procesamiento de cola de sincronización completado');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al procesar cola de sincronización:', error);\r\n    return false;\r\n  } finally {\r\n    isSyncing = false;\r\n  }\r\n};\r\n\r\n// Función principal para sincronizar datos\r\nconst syncData = async () => {\r\n  if (!await isOnline()) {\r\n    console.log('Sin conexión a Internet, la sincronización no es posible');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    console.log('Iniciando sincronización de datos...');\r\n    \r\n    // Procesar la cola de sincronización\r\n    await processSyncQueue();\r\n    \r\n    // Sincronizar platos pendientes que no estén en la cola\r\n    const pendingPlatos = await getPendingPlatos();\r\n    console.log(`Encontrados ${pendingPlatos.length} platos pendientes de sincronización`);\r\n    \r\n    for (const plato of pendingPlatos) {\r\n      await syncPlatoToServer(plato);\r\n    }\r\n    \r\n    console.log('Sincronización completada con éxito');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error durante la sincronización:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Inicializar el servicio de sincronización\r\nconst initSyncService = () => {\r\n  // Configurar escuchas para eventos de conexión\r\n  setupConnectionListeners();\r\n  \r\n  // Realizar sincronización inicial si hay conexión\r\n  isOnline().then(online => {\r\n    if (online) {\r\n      syncData();\r\n    }\r\n  });\r\n  \r\n  // Configurar sincronización periódica (cada minuto)\r\n  setInterval(async () => {\r\n    if (await isOnline() && !isSyncing) {\r\n      syncData();\r\n    }\r\n  }, 60000);\r\n  \r\n  console.log('Servicio de sincronización inicializado');\r\n};\r\n\r\nexport {\r\n  initSyncService,\r\n  syncData,\r\n  isOnline,\r\n  _isOnline\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}