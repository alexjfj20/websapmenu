{"ast":null,"code":"// src/services/restauranteService.js\n\nimport apiService from './apiService';\n\n/**\n * Obtiene todos los restaurantes del usuario actual\n * @returns {Promise<Object>} - Respuesta con los restaurantes\n */\nexport async function getRestaurantes() {\n  try {\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    const response = await apiService.get('/restaurantes');\n    if (response && response.success) {\n      return {\n        success: true,\n        restaurantes: response.restaurantes || []\n      };\n    } else {\n      throw new Error(response.message || 'Error al obtener restaurantes');\n    }\n  } catch (error) {\n    console.error('Error al obtener restaurantes:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener restaurantes',\n      restaurantes: []\n    };\n  }\n}\n\n/**\n * Obtiene un restaurante específico\n * @param {number} restauranteId - ID del restaurante\n * @returns {Promise<Object>} - Respuesta con el restaurante\n */\nexport async function getRestaurante(restauranteId) {\n  try {\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    const response = await apiService.get(`/restaurantes/${restauranteId}`);\n    if (response && response.success) {\n      return {\n        success: true,\n        restaurante: response.restaurante\n      };\n    } else {\n      throw new Error(response.message || 'Error al obtener restaurante');\n    }\n  } catch (error) {\n    console.error(`Error al obtener restaurante ${restauranteId}:`, error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener restaurante'\n    };\n  }\n}\n\n/**\n * Crea un nuevo restaurante\n * @param {Object} restauranteData - Datos del restaurante\n * @returns {Promise<Object>} - Respuesta con el restaurante creado\n */\nexport async function createRestaurante(restauranteData) {\n  try {\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    const response = await apiService.post('/restaurantes', restauranteData);\n    if (response && response.success) {\n      return {\n        success: true,\n        restaurante: response.restaurante,\n        message: response.message || 'Restaurante creado correctamente'\n      };\n    } else {\n      throw new Error(response.message || 'Error al crear restaurante');\n    }\n  } catch (error) {\n    console.error('Error al crear restaurante:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al crear restaurante'\n    };\n  }\n}\n\n/**\n * Actualiza un restaurante existente\n * @param {number} restauranteId - ID del restaurante\n * @param {Object} restauranteData - Datos del restaurante\n * @returns {Promise<Object>} - Respuesta con el restaurante actualizado\n */\nexport async function updateRestaurante(restauranteId, restauranteData) {\n  try {\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    const response = await apiService.put(`/restaurantes/${restauranteId}`, restauranteData);\n    if (response && response.success) {\n      return {\n        success: true,\n        restaurante: response.restaurante,\n        message: response.message || 'Restaurante actualizado correctamente'\n      };\n    } else {\n      throw new Error(response.message || 'Error al actualizar restaurante');\n    }\n  } catch (error) {\n    console.error(`Error al actualizar restaurante ${restauranteId}:`, error);\n    return {\n      success: false,\n      error: error.message || 'Error al actualizar restaurante'\n    };\n  }\n}\n\n/**\n * Regenera el enlace compartido de un restaurante\n * @param {number} restauranteId - ID del restaurante\n * @returns {Promise<Object>} - Respuesta con el nuevo enlace\n */\nexport async function regenerateLink(restauranteId) {\n  try {\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    const response = await apiService.post(`/restaurantes/${restauranteId}/regenerate-link`);\n    if (response && response.success) {\n      return {\n        success: true,\n        enlace_compartido: response.enlace_compartido,\n        message: response.message || 'Enlace regenerado correctamente'\n      };\n    } else {\n      throw new Error(response.message || 'Error al regenerar enlace');\n    }\n  } catch (error) {\n    console.error(`Error al regenerar enlace para restaurante ${restauranteId}:`, error);\n    return {\n      success: false,\n      error: error.message || 'Error al regenerar enlace'\n    };\n  }\n}\n\n/**\n * Asigna un usuario a un restaurante\n * @param {number} restauranteId - ID del restaurante\n * @param {number} usuarioId - ID del usuario\n * @returns {Promise<Object>} - Respuesta de la asignación\n */\nexport async function assignUserToRestaurant(restauranteId, usuarioId) {\n  try {\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    const response = await apiService.post(`/restaurantes/${restauranteId}/asignar-usuario/${usuarioId}`);\n    if (response && response.success) {\n      return {\n        success: true,\n        message: response.message || 'Usuario asignado correctamente'\n      };\n    } else {\n      throw new Error(response.message || 'Error al asignar usuario');\n    }\n  } catch (error) {\n    console.error(`Error al asignar usuario ${usuarioId} a restaurante ${restauranteId}:`, error);\n    return {\n      success: false,\n      error: error.message || 'Error al asignar usuario'\n    };\n  }\n}\n\n/**\n * Obtiene el restaurante del usuario actual\n * @returns {Promise<Object>} - Respuesta con el restaurante\n */\nexport async function getCurrentUserRestaurant() {\n  try {\n    const response = await getRestaurantes();\n    if (response.success && response.restaurantes.length > 0) {\n      // Devolver el primer restaurante (un usuario regular solo tiene uno)\n      return {\n        success: true,\n        restaurante: response.restaurantes[0]\n      };\n    } else {\n      return {\n        success: false,\n        error: 'No se encontró ningún restaurante asociado al usuario',\n        restaurante: null\n      };\n    }\n  } catch (error) {\n    console.error('Error al obtener restaurante del usuario:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener restaurante del usuario',\n      restaurante: null\n    };\n  }\n}","map":{"version":3,"names":["apiService","getRestaurantes","token","localStorage","getItem","setToken","response","get","success","restaurantes","Error","message","error","console","getRestaurante","restauranteId","restaurante","createRestaurante","restauranteData","post","updateRestaurante","put","regenerateLink","enlace_compartido","assignUserToRestaurant","usuarioId","getCurrentUserRestaurant","length"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/restauranteService.js"],"sourcesContent":["// src/services/restauranteService.js\n\nimport apiService from './apiService';\n\n/**\n * Obtiene todos los restaurantes del usuario actual\n * @returns {Promise<Object>} - Respuesta con los restaurantes\n */\nexport async function getRestaurantes() {\n  try {\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    \n    const response = await apiService.get('/restaurantes');\n    \n    if (response && response.success) {\n      return {\n        success: true,\n        restaurantes: response.restaurantes || []\n      };\n    } else {\n      throw new Error(response.message || 'Error al obtener restaurantes');\n    }\n  } catch (error) {\n    console.error('Error al obtener restaurantes:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener restaurantes',\n      restaurantes: []\n    };\n  }\n}\n\n/**\n * Obtiene un restaurante específico\n * @param {number} restauranteId - ID del restaurante\n * @returns {Promise<Object>} - Respuesta con el restaurante\n */\nexport async function getRestaurante(restauranteId) {\n  try {\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    \n    const response = await apiService.get(`/restaurantes/${restauranteId}`);\n    \n    if (response && response.success) {\n      return {\n        success: true,\n        restaurante: response.restaurante\n      };\n    } else {\n      throw new Error(response.message || 'Error al obtener restaurante');\n    }\n  } catch (error) {\n    console.error(`Error al obtener restaurante ${restauranteId}:`, error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener restaurante'\n    };\n  }\n}\n\n/**\n * Crea un nuevo restaurante\n * @param {Object} restauranteData - Datos del restaurante\n * @returns {Promise<Object>} - Respuesta con el restaurante creado\n */\nexport async function createRestaurante(restauranteData) {\n  try {\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    \n    const response = await apiService.post('/restaurantes', restauranteData);\n    \n    if (response && response.success) {\n      return {\n        success: true,\n        restaurante: response.restaurante,\n        message: response.message || 'Restaurante creado correctamente'\n      };\n    } else {\n      throw new Error(response.message || 'Error al crear restaurante');\n    }\n  } catch (error) {\n    console.error('Error al crear restaurante:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al crear restaurante'\n    };\n  }\n}\n\n/**\n * Actualiza un restaurante existente\n * @param {number} restauranteId - ID del restaurante\n * @param {Object} restauranteData - Datos del restaurante\n * @returns {Promise<Object>} - Respuesta con el restaurante actualizado\n */\nexport async function updateRestaurante(restauranteId, restauranteData) {\n  try {\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    \n    const response = await apiService.put(`/restaurantes/${restauranteId}`, restauranteData);\n    \n    if (response && response.success) {\n      return {\n        success: true,\n        restaurante: response.restaurante,\n        message: response.message || 'Restaurante actualizado correctamente'\n      };\n    } else {\n      throw new Error(response.message || 'Error al actualizar restaurante');\n    }\n  } catch (error) {\n    console.error(`Error al actualizar restaurante ${restauranteId}:`, error);\n    return {\n      success: false,\n      error: error.message || 'Error al actualizar restaurante'\n    };\n  }\n}\n\n/**\n * Regenera el enlace compartido de un restaurante\n * @param {number} restauranteId - ID del restaurante\n * @returns {Promise<Object>} - Respuesta con el nuevo enlace\n */\nexport async function regenerateLink(restauranteId) {\n  try {\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    \n    const response = await apiService.post(`/restaurantes/${restauranteId}/regenerate-link`);\n    \n    if (response && response.success) {\n      return {\n        success: true,\n        enlace_compartido: response.enlace_compartido,\n        message: response.message || 'Enlace regenerado correctamente'\n      };\n    } else {\n      throw new Error(response.message || 'Error al regenerar enlace');\n    }\n  } catch (error) {\n    console.error(`Error al regenerar enlace para restaurante ${restauranteId}:`, error);\n    return {\n      success: false,\n      error: error.message || 'Error al regenerar enlace'\n    };\n  }\n}\n\n/**\n * Asigna un usuario a un restaurante\n * @param {number} restauranteId - ID del restaurante\n * @param {number} usuarioId - ID del usuario\n * @returns {Promise<Object>} - Respuesta de la asignación\n */\nexport async function assignUserToRestaurant(restauranteId, usuarioId) {\n  try {\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    \n    const response = await apiService.post(`/restaurantes/${restauranteId}/asignar-usuario/${usuarioId}`);\n    \n    if (response && response.success) {\n      return {\n        success: true,\n        message: response.message || 'Usuario asignado correctamente'\n      };\n    } else {\n      throw new Error(response.message || 'Error al asignar usuario');\n    }\n  } catch (error) {\n    console.error(`Error al asignar usuario ${usuarioId} a restaurante ${restauranteId}:`, error);\n    return {\n      success: false,\n      error: error.message || 'Error al asignar usuario'\n    };\n  }\n}\n\n/**\n * Obtiene el restaurante del usuario actual\n * @returns {Promise<Object>} - Respuesta con el restaurante\n */\nexport async function getCurrentUserRestaurant() {\n  try {\n    const response = await getRestaurantes();\n    \n    if (response.success && response.restaurantes.length > 0) {\n      // Devolver el primer restaurante (un usuario regular solo tiene uno)\n      return {\n        success: true,\n        restaurante: response.restaurantes[0]\n      };\n    } else {\n      return {\n        success: false,\n        error: 'No se encontró ningún restaurante asociado al usuario',\n        restaurante: null\n      };\n    }\n  } catch (error) {\n    console.error('Error al obtener restaurante del usuario:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener restaurante del usuario',\n      restaurante: null\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}