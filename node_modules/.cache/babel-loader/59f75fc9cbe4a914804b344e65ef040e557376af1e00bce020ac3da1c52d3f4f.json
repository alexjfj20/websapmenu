{"ast":null,"code":"/**\r\n * Servicio para gestión de respaldos del sistema\r\n */\n\n/**\r\n * Obtiene la lista de respaldos disponibles\r\n * @returns {Promise<Object>} Respuesta con los respaldos\r\n */\nexport async function getBackups() {\n  // En una implementación real, esto llamaría a una API\n  // Por ahora, simulamos datos para desarrollo\n\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        data: [{\n          id: 1,\n          fecha: new Date().toISOString(),\n          archivo: 'backup_' + formatDateForFilename(new Date()) + '.zip',\n          tamano: '2.5 MB'\n        }, {\n          id: 2,\n          fecha: new Date(Date.now() - 86400000).toISOString(),\n          // 1 día atrás\n          archivo: 'backup_' + formatDateForFilename(new Date(Date.now() - 86400000)) + '.zip',\n          tamano: '2.3 MB'\n        }, {\n          id: 3,\n          fecha: new Date(Date.now() - 86400000 * 7).toISOString(),\n          // 7 días atrás\n          archivo: 'backup_' + formatDateForFilename(new Date(Date.now() - 86400000 * 7)) + '.zip',\n          tamano: '2.1 MB'\n        }]\n      });\n    }, 1000);\n  });\n}\n\n/**\r\n * Crea un nuevo respaldo del sistema\r\n * @returns {Promise<Object>} Respuesta con información del respaldo creado\r\n */\nexport async function createBackup() {\n  // Simulación de creación de respaldo\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const now = new Date();\n      resolve({\n        success: true,\n        data: {\n          id: Date.now(),\n          fecha: now.toISOString(),\n          archivo: 'backup_' + formatDateForFilename(now) + '.zip',\n          tamano: '2.4 MB'\n        },\n        message: 'Respaldo creado exitosamente'\n      });\n    }, 2000);\n  });\n}\n\n/**\r\n * Restaura un respaldo específico\r\n * @param {number} backupId ID del respaldo a restaurar\r\n * @returns {Promise<Object>} Resultado de la operación\r\n */\nexport async function restoreBackup(backupId) {\n  // Simulación de restauración\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        message: 'Respaldo restaurado exitosamente'\n      });\n    }, 3000);\n  });\n}\n\n/**\r\n * Elimina un respaldo específico\r\n * @param {number} backupId ID del respaldo a eliminar\r\n * @returns {Promise<Object>} Resultado de la operación\r\n */\nexport async function deleteBackup(backupId) {\n  // Simulación de eliminación\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        message: 'Respaldo eliminado exitosamente'\n      });\n    }, 1000);\n  });\n}\n\n/**\r\n * Formatea una fecha para su uso en nombres de archivo\r\n * @param {Date} date Fecha a formatear\r\n * @returns {string} Fecha formateada como YYYYMMDD_HHMMSS\r\n */\nfunction formatDateForFilename(date) {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n  const seconds = String(date.getSeconds()).padStart(2, '0');\n  return `${year}${month}${day}_${hours}${minutes}${seconds}`;\n}\nexport default {\n  getBackups,\n  createBackup,\n  restoreBackup,\n  deleteBackup\n};","map":{"version":3,"names":["getBackups","Promise","resolve","setTimeout","success","data","id","fecha","Date","toISOString","archivo","formatDateForFilename","tamano","now","createBackup","message","restoreBackup","backupId","deleteBackup","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/backupService.js"],"sourcesContent":["/**\r\n * Servicio para gestión de respaldos del sistema\r\n */\r\n\r\n/**\r\n * Obtiene la lista de respaldos disponibles\r\n * @returns {Promise<Object>} Respuesta con los respaldos\r\n */\r\nexport async function getBackups() {\r\n  // En una implementación real, esto llamaría a una API\r\n  // Por ahora, simulamos datos para desarrollo\r\n  \r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        success: true,\r\n        data: [\r\n          {\r\n            id: 1,\r\n            fecha: new Date().toISOString(),\r\n            archivo: 'backup_' + formatDateForFilename(new Date()) + '.zip',\r\n            tamano: '2.5 MB'\r\n          },\r\n          {\r\n            id: 2,\r\n            fecha: new Date(Date.now() - 86400000).toISOString(), // 1 día atrás\r\n            archivo: 'backup_' + formatDateForFilename(new Date(Date.now() - 86400000)) + '.zip',\r\n            tamano: '2.3 MB'\r\n          },\r\n          {\r\n            id: 3,\r\n            fecha: new Date(Date.now() - 86400000 * 7).toISOString(), // 7 días atrás\r\n            archivo: 'backup_' + formatDateForFilename(new Date(Date.now() - 86400000 * 7)) + '.zip',\r\n            tamano: '2.1 MB'\r\n          }\r\n        ]\r\n      });\r\n    }, 1000);\r\n  });\r\n}\r\n\r\n/**\r\n * Crea un nuevo respaldo del sistema\r\n * @returns {Promise<Object>} Respuesta con información del respaldo creado\r\n */\r\nexport async function createBackup() {\r\n  // Simulación de creación de respaldo\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      const now = new Date();\r\n      resolve({\r\n        success: true,\r\n        data: {\r\n          id: Date.now(),\r\n          fecha: now.toISOString(),\r\n          archivo: 'backup_' + formatDateForFilename(now) + '.zip',\r\n          tamano: '2.4 MB'\r\n        },\r\n        message: 'Respaldo creado exitosamente'\r\n      });\r\n    }, 2000);\r\n  });\r\n}\r\n\r\n/**\r\n * Restaura un respaldo específico\r\n * @param {number} backupId ID del respaldo a restaurar\r\n * @returns {Promise<Object>} Resultado de la operación\r\n */\r\nexport async function restoreBackup(backupId) {\r\n  // Simulación de restauración\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        success: true,\r\n        message: 'Respaldo restaurado exitosamente'\r\n      });\r\n    }, 3000);\r\n  });\r\n}\r\n\r\n/**\r\n * Elimina un respaldo específico\r\n * @param {number} backupId ID del respaldo a eliminar\r\n * @returns {Promise<Object>} Resultado de la operación\r\n */\r\nexport async function deleteBackup(backupId) {\r\n  // Simulación de eliminación\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        success: true,\r\n        message: 'Respaldo eliminado exitosamente'\r\n      });\r\n    }, 1000);\r\n  });\r\n}\r\n\r\n/**\r\n * Formatea una fecha para su uso en nombres de archivo\r\n * @param {Date} date Fecha a formatear\r\n * @returns {string} Fecha formateada como YYYYMMDD_HHMMSS\r\n */\r\nfunction formatDateForFilename(date) {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, '0');\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n  const hours = String(date.getHours()).padStart(2, '0');\r\n  const minutes = String(date.getMinutes()).padStart(2, '0');\r\n  const seconds = String(date.getSeconds()).padStart(2, '0');\r\n  \r\n  return `${year}${month}${day}_${hours}${minutes}${seconds}`;\r\n}\r\n\r\nexport default {\r\n  getBackups,\r\n  createBackup,\r\n  restoreBackup,\r\n  deleteBackup\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}