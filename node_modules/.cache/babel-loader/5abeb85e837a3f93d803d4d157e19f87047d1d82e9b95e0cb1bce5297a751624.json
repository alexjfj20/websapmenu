{"ast":null,"code":"const DB_NAME = 'websapDatabase';\nconst DB_VERSION = 1;\nconst USERS_STORE = 'users';\n\n// Abrir la conexión a la base de datos\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onerror = event => {\n      reject('Error al abrir la base de datos: ' + event.target.errorCode);\n    };\n    request.onsuccess = event => {\n      const db = event.target.result;\n      resolve(db);\n    };\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n\n      // Crear almacén para usuarios si no existe\n      if (!db.objectStoreNames.contains(USERS_STORE)) {\n        db.createObjectStore(USERS_STORE, {\n          keyPath: 'id'\n        });\n      }\n    };\n  });\n}\n\n/**\r\n * Obtiene la lista de usuarios desde IndexedDB\r\n * @returns {Promise<Array>} - Lista de usuarios\r\n */\nexport async function getUsersFromDB() {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([USERS_STORE], 'readonly');\n    const store = transaction.objectStore(USERS_STORE);\n    return new Promise((resolve, reject) => {\n      const request = store.getAll();\n      request.onsuccess = () => {\n        resolve(request.result || []);\n      };\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error al obtener usuarios de IndexedDB:', error);\n\n    // Intento de obtener desde localStorage como fallback\n    try {\n      const storedUsers = localStorage.getItem('users');\n      if (storedUsers) {\n        const users = JSON.parse(storedUsers);\n        // Migrar usuarios de localStorage a IndexedDB\n        await saveUsersToDB(users);\n        // Eliminar de localStorage después de migrar\n        localStorage.removeItem('users');\n        return users;\n      }\n    } catch (e) {\n      console.error('Error al obtener usuarios de localStorage:', e);\n    }\n    return [];\n  }\n}\n\n/**\r\n * Guarda la lista de usuarios en IndexedDB\r\n * @param {Array} users - Lista de usuarios a guardar\r\n * @returns {Promise<boolean>} - Éxito de la operación\r\n */\nexport async function saveUsersToDB(users) {\n  if (!Array.isArray(users)) {\n    throw new Error('La lista de usuarios debe ser un array');\n  }\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([USERS_STORE], 'readwrite');\n    const store = transaction.objectStore(USERS_STORE);\n\n    // Eliminar usuarios existentes\n    await new Promise((resolve, reject) => {\n      const clearRequest = store.clear();\n      clearRequest.onsuccess = () => resolve();\n      clearRequest.onerror = e => reject(e.target.error);\n    });\n\n    // Agregar cada usuario\n    for (const user of users) {\n      // Asegurarse de que cada usuario tiene un ID\n      if (!user.id) {\n        user.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\n      }\n      await new Promise((resolve, reject) => {\n        const request = store.add(user);\n        request.onsuccess = () => resolve();\n        request.onerror = e => reject(e.target.error);\n      });\n    }\n    return true;\n  } catch (error) {\n    console.error('Error al guardar usuarios en IndexedDB:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["DB_NAME","DB_VERSION","USERS_STORE","openDatabase","Promise","resolve","reject","request","indexedDB","open","onerror","event","target","errorCode","onsuccess","db","result","onupgradeneeded","objectStoreNames","contains","createObjectStore","keyPath","getUsersFromDB","transaction","store","objectStore","getAll","error","console","storedUsers","localStorage","getItem","users","JSON","parse","saveUsersToDB","removeItem","e","Array","isArray","Error","clearRequest","clear","user","id","Date","now","Math","random","toString","substring","add"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/userService.js"],"sourcesContent":["const DB_NAME = 'websapDatabase';\r\nconst DB_VERSION = 1;\r\nconst USERS_STORE = 'users';\r\n\r\n// Abrir la conexión a la base de datos\r\nfunction openDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n    \r\n    request.onerror = (event) => {\r\n      reject('Error al abrir la base de datos: ' + event.target.errorCode);\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      resolve(db);\r\n    };\r\n    \r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      \r\n      // Crear almacén para usuarios si no existe\r\n      if (!db.objectStoreNames.contains(USERS_STORE)) {\r\n        db.createObjectStore(USERS_STORE, { keyPath: 'id' });\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene la lista de usuarios desde IndexedDB\r\n * @returns {Promise<Array>} - Lista de usuarios\r\n */\r\nexport async function getUsersFromDB() {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([USERS_STORE], 'readonly');\r\n    const store = transaction.objectStore(USERS_STORE);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const request = store.getAll();\r\n      \r\n      request.onsuccess = () => {\r\n        resolve(request.result || []);\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        reject(event.target.error);\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener usuarios de IndexedDB:', error);\r\n    \r\n    // Intento de obtener desde localStorage como fallback\r\n    try {\r\n      const storedUsers = localStorage.getItem('users');\r\n      if (storedUsers) {\r\n        const users = JSON.parse(storedUsers);\r\n        // Migrar usuarios de localStorage a IndexedDB\r\n        await saveUsersToDB(users);\r\n        // Eliminar de localStorage después de migrar\r\n        localStorage.removeItem('users');\r\n        return users;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error al obtener usuarios de localStorage:', e);\r\n    }\r\n    \r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Guarda la lista de usuarios en IndexedDB\r\n * @param {Array} users - Lista de usuarios a guardar\r\n * @returns {Promise<boolean>} - Éxito de la operación\r\n */\r\nexport async function saveUsersToDB(users) {\r\n  if (!Array.isArray(users)) {\r\n    throw new Error('La lista de usuarios debe ser un array');\r\n  }\r\n  \r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([USERS_STORE], 'readwrite');\r\n    const store = transaction.objectStore(USERS_STORE);\r\n    \r\n    // Eliminar usuarios existentes\r\n    await new Promise((resolve, reject) => {\r\n      const clearRequest = store.clear();\r\n      clearRequest.onsuccess = () => resolve();\r\n      clearRequest.onerror = (e) => reject(e.target.error);\r\n    });\r\n    \r\n    // Agregar cada usuario\r\n    for (const user of users) {\r\n      // Asegurarse de que cada usuario tiene un ID\r\n      if (!user.id) {\r\n        user.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\r\n      }\r\n      \r\n      await new Promise((resolve, reject) => {\r\n        const request = store.add(user);\r\n        request.onsuccess = () => resolve();\r\n        request.onerror = (e) => reject(e.target.error);\r\n      });\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al guardar usuarios en IndexedDB:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}