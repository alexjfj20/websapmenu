{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n// Servicio para la gesti√≥n de reservas\nimport apiService from './apiService';\nimport eventBus from '../utils/eventBus';\n\n// Almacenamiento local para las reservas (simulando una base de datos)\nlet reservationsStore = [];\n\n// Intentar cargar reservas guardadas en localStorage al iniciar\ntry {\n  const savedReservations = localStorage.getItem('websap_reservations');\n  if (savedReservations) {\n    reservationsStore = JSON.parse(savedReservations);\n    console.log('Reservas cargadas desde localStorage:', reservationsStore.length);\n  }\n} catch (error) {\n  console.error('Error al cargar reservas desde localStorage:', error);\n}\n\n// Funci√≥n para guardar las reservas en localStorage\nfunction saveReservationsToStorage() {\n  try {\n    localStorage.setItem('websap_reservations', JSON.stringify(reservationsStore));\n  } catch (error) {\n    console.error('Error al guardar reservas en localStorage:', error);\n  }\n}\n\n// Funci√≥n para guardar una nueva reserva\nexport async function saveReservation(reservationData) {\n  try {\n    // Generar un ID √∫nico para la reserva\n    const reservationId = 'res_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n\n    // Crear el objeto de reserva con los datos recibidos\n    const reservation = {\n      id: reservationId,\n      fullName: reservationData.fullName,\n      mobilePhone: reservationData.mobilePhone,\n      landlinePhone: reservationData.landlinePhone || '',\n      email: reservationData.email || '',\n      address: reservationData.address || '',\n      date: reservationData.reservationDate,\n      time: reservationData.reservationTime,\n      peopleCount: reservationData.peopleCount,\n      notes: reservationData.additionalNotes || '',\n      status: 'pending',\n      // Estado inicial: pendiente\n      createdAt: new Date().toISOString(),\n      source: reservationData.source || 'web' // Fuente de la reserva: web o whatsapp\n    };\n    try {\n      // Intentar guardar en el backend\n      const response = await apiService.post('/whatsapp/reservas', {\n        nombre: reservation.fullName,\n        telefono: reservation.mobilePhone,\n        email: reservation.email,\n        fecha: reservation.date,\n        hora: reservation.time,\n        personas: reservation.peopleCount,\n        notas: reservation.notes\n      });\n      if (response.data && response.data.success) {\n        console.log('Reserva guardada en el backend:', response.data);\n        reservation.id = response.data.reservationId || reservation.id;\n      }\n    } catch (apiError) {\n      console.warn('No se pudo guardar la reserva en el backend, usando almacenamiento local:', apiError);\n    }\n\n    // Guardar la reserva en nuestro almacenamiento local\n    reservationsStore.unshift(reservation);\n    saveReservationsToStorage();\n\n    // Emitimos un evento para notificar a otros componentes sobre la nueva reserva\n    eventBus.emit('nueva-reserva', reservation);\n    console.log('Reserva guardada correctamente:', reservation);\n    return {\n      success: true,\n      reservation\n    };\n  } catch (error) {\n    console.error('Error al guardar la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar la reserva'\n    };\n  }\n}\n\n// Funci√≥n para obtener todas las reservas\nexport async function getReservations() {\n  try {\n    // Intentar obtener reservas desde el backend\n    try {\n      const response = await apiService.get('/whatsapp/reservas');\n      if (response && response.success && Array.isArray(response.reservas)) {\n        console.log('‚úÖ Reservas obtenidas desde el backend:', response.reservas.length);\n\n        // Convertir las reservas del backend al formato que espera el frontend\n        const backendReservations = response.reservas.map(res => ({\n          id: res.id,\n          fullName: res.nombre,\n          mobilePhone: res.telefono,\n          email: res.email || '',\n          date: formatDateToDDMMYYYY(res.fecha),\n          time: res.hora,\n          peopleCount: res.personas,\n          notes: res.notas || '',\n          status: res.estado === 'confirmada' ? 'confirmed' : res.estado === 'cancelada' ? 'cancelled' : 'pending',\n          createdAt: res.creado_en,\n          source: res.origen || 'web'\n        }));\n\n        // Actualizar el almacenamiento local con las reservas del backend\n        reservationsStore = backendReservations;\n        saveReservationsToStorage();\n        return {\n          success: true,\n          reservations: reservationsStore\n        };\n      }\n    } catch (error) {\n      console.warn('Error al obtener reservas desde el backend, usando datos locales:', error);\n    }\n\n    // Si no se pudieron obtener del backend o hubo un error, usar los datos locales\n    console.log('üìã Usando datos de reservas locales:', reservationsStore.length);\n\n    // Formatear las fechas de las reservas locales\n    const formattedReservations = reservationsStore.map(res => ({\n      ...res,\n      date: formatDateToDDMMYYYY(res.date)\n    }));\n\n    // Si no hay reservas en el almacenamiento, devolvemos algunos datos de ejemplo\n    if (formattedReservations.length === 0) {\n      // Datos de ejemplo (los mismos que est√°n en AdminReservas.vue)\n      formattedReservations.push({\n        id: '1',\n        fullName: 'Juan P√©rez',\n        mobilePhone: '612345678',\n        email: 'juan@example.com',\n        date: '15/07/2023',\n        time: '20:30',\n        peopleCount: 4,\n        status: 'confirmed',\n        notes: 'Mesa cerca de la ventana si es posible',\n        createdAt: '2023-07-10T10:30:00.000Z',\n        source: 'web'\n      }, {\n        id: '2',\n        fullName: 'Mar√≠a L√≥pez',\n        mobilePhone: '698765432',\n        landlinePhone: '912345678',\n        date: '16/07/2023',\n        time: '21:00',\n        peopleCount: 2,\n        status: 'pending',\n        createdAt: '2023-07-11T15:45:00.000Z',\n        source: 'web'\n      }, {\n        id: 'whatsapp_1743007436180',\n        fullName: 'Cliente de Prueba WhatsApp',\n        mobilePhone: '612345678',\n        email: 'whatsapp@example.com',\n        date: '30/03/2025',\n        time: '20:00',\n        peopleCount: 3,\n        status: 'pending',\n        notes: 'Reserva de prueba desde WhatsApp',\n        createdAt: new Date().toISOString(),\n        source: 'whatsapp'\n      });\n\n      // Guardar los datos de ejemplo en localStorage\n      reservationsStore = formattedReservations;\n      saveReservationsToStorage();\n    }\n    return {\n      success: true,\n      reservations: formattedReservations\n    };\n  } catch (error) {\n    console.error('‚ùå Error al obtener las reservas:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener las reservas'\n    };\n  }\n}\n\n// Funci√≥n para actualizar el estado de una reserva\nexport async function updateReservationStatus(reservationId, status) {\n  try {\n    // Intentar actualizar en el backend\n    try {\n      const response = await apiService.put(`/whatsapp/reservas/${reservationId}`, {\n        estado: status === 'confirmed' ? 'confirmada' : status === 'cancelled' ? 'cancelada' : 'pendiente'\n      });\n      if (response.data && response.data.success) {\n        console.log('Estado de reserva actualizado en el backend:', response.data);\n      }\n    } catch (apiError) {\n      console.warn('No se pudo actualizar el estado de la reserva en el backend:', apiError);\n    }\n\n    // Buscar la reserva en nuestro almacenamiento local\n    const reservationIndex = reservationsStore.findIndex(res => res.id === reservationId);\n    if (reservationIndex === -1) {\n      throw new Error('Reserva no encontrada');\n    }\n\n    // Actualizar el estado\n    reservationsStore[reservationIndex].status = status;\n\n    // Guardar los cambios en localStorage\n    saveReservationsToStorage();\n\n    // Emitir evento de actualizaci√≥n\n    eventBus.emit('reserva-actualizada', {\n      id: reservationId,\n      status\n    });\n    return {\n      success: true,\n      message: 'Estado de reserva actualizado correctamente'\n    };\n  } catch (error) {\n    console.error('Error al actualizar el estado de la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al actualizar el estado de la reserva'\n    };\n  }\n}\n\n// Funci√≥n para guardar una reserva desde WhatsApp\nexport async function saveWhatsAppReservation(whatsappData) {\n  try {\n    console.log('Procesando reserva desde WhatsApp:', whatsappData);\n\n    // Generar un ID √∫nico para la reserva si no tiene uno\n    const reservationId = 'whatsapp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n\n    // Formatear la fecha antes de verificar duplicados\n    const formattedDate = formatDateToDDMMYYYY(whatsappData.fecha || new Date().toISOString().split('T')[0]);\n\n    // Verificar si ya existe una reserva con datos similares para evitar duplicados\n    const existingReservation = reservationsStore.find(res => res.source === 'whatsapp' && res.fullName === (whatsappData.nombre || 'Cliente sin nombre') && res.mobilePhone === (whatsappData.telefono || '') && res.date === formattedDate && res.time === (whatsappData.hora || '19:00'));\n    if (existingReservation) {\n      console.log('‚ö†Ô∏è Ya existe una reserva similar, evitando duplicado:', existingReservation);\n      return {\n        success: true,\n        reservation: existingReservation,\n        message: 'Reserva existente recuperada'\n      };\n    }\n\n    // Crear objeto de reserva para el frontend\n    const reservation = {\n      id: reservationId,\n      fullName: whatsappData.nombre || 'Cliente sin nombre',\n      mobilePhone: whatsappData.telefono || '',\n      email: whatsappData.email || '',\n      date: formattedDate,\n      time: whatsappData.hora || '19:00',\n      peopleCount: whatsappData.personas || 2,\n      notes: whatsappData.notas || 'Reserva realizada por WhatsApp',\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n      source: 'whatsapp'\n    };\n\n    // Guardar la reserva en el almacenamiento local\n    reservationsStore.unshift(reservation);\n    saveReservationsToStorage();\n\n    // Emitir evento para notificar a otros componentes\n    eventBus.emit('nueva-reserva', reservation);\n\n    // Intentar guardar en el backend\n    try {\n      // Convertir al formato que espera el backend\n      const backendReservation = {\n        nombre: reservation.fullName,\n        telefono: reservation.mobilePhone,\n        email: reservation.email,\n        fecha: reservation.date,\n        hora: reservation.time,\n        personas: reservation.peopleCount,\n        notas: reservation.notes,\n        estado: 'pendiente',\n        origen: 'whatsapp'\n      };\n\n      // Enviar al backend\n      await apiService.post('/whatsapp/reservas', backendReservation);\n      console.log('‚úÖ Reserva guardada en el backend');\n    } catch (backendError) {\n      console.warn('‚ö†Ô∏è No se pudo guardar la reserva en el backend, pero se guard√≥ localmente:', backendError);\n    }\n    return {\n      success: true,\n      reservation,\n      message: 'Reserva guardada correctamente'\n    };\n  } catch (error) {\n    console.error('‚ùå Error al guardar reserva desde WhatsApp:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al procesar la reserva desde WhatsApp'\n    };\n  }\n}\n\n/**\n * Elimina una reserva espec√≠fica\n * @param {string} reservationId - ID de la reserva a eliminar\n * @returns {Promise<Object>} - Resultado de la operaci√≥n\n */\nexport async function deleteReservation(reservationId) {\n  try {\n    // Intentar eliminar en el backend primero\n    try {\n      const response = await apiService.delete(`/reservas/${reservationId}`);\n      console.log('Reserva eliminada en el backend:', response);\n    } catch (apiError) {\n      console.warn('No se pudo eliminar la reserva en el backend:', apiError);\n      // Continuamos con la eliminaci√≥n local aunque falle el backend\n    }\n\n    // Eliminar de nuestro almacenamiento local\n    const index = reservationsStore.findIndex(r => r.id === reservationId);\n    if (index !== -1) {\n      reservationsStore.splice(index, 1);\n      saveReservationsToStorage();\n\n      // Emitir evento de actualizaci√≥n\n      eventBus.emit('reserva-eliminada', {\n        id: reservationId\n      });\n      return {\n        success: true,\n        message: 'Reserva eliminada correctamente'\n      };\n    } else {\n      return {\n        success: false,\n        error: 'No se encontr√≥ la reserva especificada'\n      };\n    }\n  } catch (error) {\n    console.error('Error al eliminar reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al eliminar la reserva'\n    };\n  }\n}\n\n/**\n * Verifica si una reserva tiene m√°s de X d√≠as de antig√ºedad\n * @param {Object} reservation - Reserva a verificar\n * @param {number} days - N√∫mero de d√≠as para considerar antigua\n * @returns {boolean} - true si la reserva es m√°s antigua que los d√≠as especificados\n */\nexport function isReservationOlderThan(reservation, days = 30) {\n  if (!reservation || !reservation.date) return false;\n  const reservationDate = new Date(reservation.date);\n  const today = new Date();\n\n  // Calcular la diferencia en milisegundos\n  const diffTime = today - reservationDate;\n  // Convertir a d√≠as\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  return diffDays > days;\n}\n\n// Funci√≥n para formatear una fecha al formato DD/MM/YYYY\nfunction formatDateToDDMMYYYY(dateString) {\n  if (!dateString) return '';\n  try {\n    // Caso espec√≠fico para el formato problem√°tico: \"29T05:00:00.000Z/05/2025\"\n    if (dateString.includes('T') && dateString.includes('/')) {\n      const parts = dateString.split('/');\n      if (parts.length === 3) {\n        const day = parts[0].split('T')[0];\n        return `${day}/${parts[1]}/${parts[2]}`;\n      }\n    }\n\n    // Formato ISO: \"2025-05-29\"\n    if (dateString.includes('-')) {\n      const parts = dateString.split('-');\n      if (parts.length === 3) {\n        return `${parts[2]}/${parts[1]}/${parts[0]}`;\n      }\n    }\n\n    // Si ya est√° en formato DD/MM/YYYY, devolverlo tal cual\n    if (dateString.includes('/') && !dateString.includes('T')) {\n      return dateString;\n    }\n\n    // Intentar parsear como objeto Date\n    const date = new Date(dateString);\n    if (!isNaN(date.getTime())) {\n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    }\n    return dateString;\n  } catch (error) {\n    console.error('Error al formatear fecha:', error);\n    return dateString;\n  }\n}","map":{"version":3,"names":["apiService","eventBus","reservationsStore","savedReservations","localStorage","getItem","JSON","parse","console","log","length","error","saveReservationsToStorage","setItem","stringify","saveReservation","reservationData","reservationId","Date","now","Math","random","toString","substr","reservation","id","fullName","mobilePhone","landlinePhone","email","address","date","reservationDate","time","reservationTime","peopleCount","notes","additionalNotes","status","createdAt","toISOString","source","response","post","nombre","telefono","fecha","hora","personas","notas","data","success","apiError","warn","unshift","emit","message","getReservations","get","Array","isArray","reservas","backendReservations","map","res","formatDateToDDMMYYYY","estado","creado_en","origen","reservations","formattedReservations","push","updateReservationStatus","put","reservationIndex","findIndex","Error","saveWhatsAppReservation","whatsappData","formattedDate","split","existingReservation","find","backendReservation","backendError","deleteReservation","delete","index","r","splice","isReservationOlderThan","days","today","diffTime","diffDays","ceil","dateString","includes","parts","day","isNaN","getTime","getDate","padStart","month","getMonth","year","getFullYear"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/reservaService.js"],"sourcesContent":["// Servicio para la gesti√≥n de reservas\nimport apiService from './apiService';\nimport eventBus from '../utils/eventBus';\n\n// Almacenamiento local para las reservas (simulando una base de datos)\nlet reservationsStore = [];\n\n// Intentar cargar reservas guardadas en localStorage al iniciar\ntry {\n  const savedReservations = localStorage.getItem('websap_reservations');\n  if (savedReservations) {\n    reservationsStore = JSON.parse(savedReservations);\n    console.log('Reservas cargadas desde localStorage:', reservationsStore.length);\n  }\n} catch (error) {\n  console.error('Error al cargar reservas desde localStorage:', error);\n}\n\n// Funci√≥n para guardar las reservas en localStorage\nfunction saveReservationsToStorage() {\n  try {\n    localStorage.setItem('websap_reservations', JSON.stringify(reservationsStore));\n  } catch (error) {\n    console.error('Error al guardar reservas en localStorage:', error);\n  }\n}\n\n// Funci√≥n para guardar una nueva reserva\nexport async function saveReservation(reservationData) {\n  try {\n    // Generar un ID √∫nico para la reserva\n    const reservationId = 'res_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    \n    // Crear el objeto de reserva con los datos recibidos\n    const reservation = {\n      id: reservationId,\n      fullName: reservationData.fullName,\n      mobilePhone: reservationData.mobilePhone,\n      landlinePhone: reservationData.landlinePhone || '',\n      email: reservationData.email || '',\n      address: reservationData.address || '',\n      date: reservationData.reservationDate,\n      time: reservationData.reservationTime,\n      peopleCount: reservationData.peopleCount,\n      notes: reservationData.additionalNotes || '',\n      status: 'pending', // Estado inicial: pendiente\n      createdAt: new Date().toISOString(),\n      source: reservationData.source || 'web' // Fuente de la reserva: web o whatsapp\n    };\n    \n    try {\n      // Intentar guardar en el backend\n      const response = await apiService.post('/whatsapp/reservas', {\n        nombre: reservation.fullName,\n        telefono: reservation.mobilePhone,\n        email: reservation.email,\n        fecha: reservation.date,\n        hora: reservation.time,\n        personas: reservation.peopleCount,\n        notas: reservation.notes\n      });\n      \n      if (response.data && response.data.success) {\n        console.log('Reserva guardada en el backend:', response.data);\n        reservation.id = response.data.reservationId || reservation.id;\n      }\n    } catch (apiError) {\n      console.warn('No se pudo guardar la reserva en el backend, usando almacenamiento local:', apiError);\n    }\n    \n    // Guardar la reserva en nuestro almacenamiento local\n    reservationsStore.unshift(reservation);\n    saveReservationsToStorage();\n    \n    // Emitimos un evento para notificar a otros componentes sobre la nueva reserva\n    eventBus.emit('nueva-reserva', reservation);\n    \n    console.log('Reserva guardada correctamente:', reservation);\n    \n    return {\n      success: true,\n      reservation\n    };\n  } catch (error) {\n    console.error('Error al guardar la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar la reserva'\n    };\n  }\n}\n\n// Funci√≥n para obtener todas las reservas\nexport async function getReservations() {\n  try {\n    // Intentar obtener reservas desde el backend\n    try {\n      const response = await apiService.get('/whatsapp/reservas');\n      \n      if (response && response.success && Array.isArray(response.reservas)) {\n        console.log('‚úÖ Reservas obtenidas desde el backend:', response.reservas.length);\n        \n        // Convertir las reservas del backend al formato que espera el frontend\n        const backendReservations = response.reservas.map(res => ({\n          id: res.id,\n          fullName: res.nombre,\n          mobilePhone: res.telefono,\n          email: res.email || '',\n          date: formatDateToDDMMYYYY(res.fecha),\n          time: res.hora,\n          peopleCount: res.personas,\n          notes: res.notas || '',\n          status: res.estado === 'confirmada' ? 'confirmed' : \n                 res.estado === 'cancelada' ? 'cancelled' : 'pending',\n          createdAt: res.creado_en,\n          source: res.origen || 'web'\n        }));\n        \n        // Actualizar el almacenamiento local con las reservas del backend\n        reservationsStore = backendReservations;\n        saveReservationsToStorage();\n        \n        return {\n          success: true,\n          reservations: reservationsStore\n        };\n      }\n    } catch (error) {\n      console.warn('Error al obtener reservas desde el backend, usando datos locales:', error);\n    }\n    \n    // Si no se pudieron obtener del backend o hubo un error, usar los datos locales\n    console.log('üìã Usando datos de reservas locales:', reservationsStore.length);\n    \n    // Formatear las fechas de las reservas locales\n    const formattedReservations = reservationsStore.map(res => ({\n      ...res,\n      date: formatDateToDDMMYYYY(res.date)\n    }));\n    \n    // Si no hay reservas en el almacenamiento, devolvemos algunos datos de ejemplo\n    if (formattedReservations.length === 0) {\n      // Datos de ejemplo (los mismos que est√°n en AdminReservas.vue)\n      formattedReservations.push(\n        {\n          id: '1',\n          fullName: 'Juan P√©rez',\n          mobilePhone: '612345678',\n          email: 'juan@example.com',\n          date: '15/07/2023',\n          time: '20:30',\n          peopleCount: 4,\n          status: 'confirmed',\n          notes: 'Mesa cerca de la ventana si es posible',\n          createdAt: '2023-07-10T10:30:00.000Z',\n          source: 'web'\n        },\n        {\n          id: '2',\n          fullName: 'Mar√≠a L√≥pez',\n          mobilePhone: '698765432',\n          landlinePhone: '912345678',\n          date: '16/07/2023',\n          time: '21:00',\n          peopleCount: 2,\n          status: 'pending',\n          createdAt: '2023-07-11T15:45:00.000Z',\n          source: 'web'\n        },\n        {\n          id: 'whatsapp_1743007436180',\n          fullName: 'Cliente de Prueba WhatsApp',\n          mobilePhone: '612345678',\n          email: 'whatsapp@example.com',\n          date: '30/03/2025',\n          time: '20:00',\n          peopleCount: 3,\n          status: 'pending',\n          notes: 'Reserva de prueba desde WhatsApp',\n          createdAt: new Date().toISOString(),\n          source: 'whatsapp'\n        }\n      );\n      \n      // Guardar los datos de ejemplo en localStorage\n      reservationsStore = formattedReservations;\n      saveReservationsToStorage();\n    }\n    \n    return {\n      success: true,\n      reservations: formattedReservations\n    };\n  } catch (error) {\n    console.error('‚ùå Error al obtener las reservas:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener las reservas'\n    };\n  }\n}\n\n// Funci√≥n para actualizar el estado de una reserva\nexport async function updateReservationStatus(reservationId, status) {\n  try {\n    // Intentar actualizar en el backend\n    try {\n      const response = await apiService.put(`/whatsapp/reservas/${reservationId}`, {\n        estado: status === 'confirmed' ? 'confirmada' : \n                status === 'cancelled' ? 'cancelada' : 'pendiente'\n      });\n      \n      if (response.data && response.data.success) {\n        console.log('Estado de reserva actualizado en el backend:', response.data);\n      }\n    } catch (apiError) {\n      console.warn('No se pudo actualizar el estado de la reserva en el backend:', apiError);\n    }\n    \n    // Buscar la reserva en nuestro almacenamiento local\n    const reservationIndex = reservationsStore.findIndex(res => res.id === reservationId);\n    \n    if (reservationIndex === -1) {\n      throw new Error('Reserva no encontrada');\n    }\n    \n    // Actualizar el estado\n    reservationsStore[reservationIndex].status = status;\n    \n    // Guardar los cambios en localStorage\n    saveReservationsToStorage();\n    \n    // Emitir evento de actualizaci√≥n\n    eventBus.emit('reserva-actualizada', {\n      id: reservationId,\n      status\n    });\n    \n    return {\n      success: true,\n      message: 'Estado de reserva actualizado correctamente'\n    };\n  } catch (error) {\n    console.error('Error al actualizar el estado de la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al actualizar el estado de la reserva'\n    };\n  }\n}\n\n// Funci√≥n para guardar una reserva desde WhatsApp\nexport async function saveWhatsAppReservation(whatsappData) {\n  try {\n    console.log('Procesando reserva desde WhatsApp:', whatsappData);\n    \n    // Generar un ID √∫nico para la reserva si no tiene uno\n    const reservationId = 'whatsapp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    \n    // Formatear la fecha antes de verificar duplicados\n    const formattedDate = formatDateToDDMMYYYY(whatsappData.fecha || new Date().toISOString().split('T')[0]);\n    \n    // Verificar si ya existe una reserva con datos similares para evitar duplicados\n    const existingReservation = reservationsStore.find(res => \n      res.source === 'whatsapp' && \n      res.fullName === (whatsappData.nombre || 'Cliente sin nombre') &&\n      res.mobilePhone === (whatsappData.telefono || '') &&\n      res.date === formattedDate &&\n      res.time === (whatsappData.hora || '19:00')\n    );\n    \n    if (existingReservation) {\n      console.log('‚ö†Ô∏è Ya existe una reserva similar, evitando duplicado:', existingReservation);\n      return {\n        success: true,\n        reservation: existingReservation,\n        message: 'Reserva existente recuperada'\n      };\n    }\n    \n    // Crear objeto de reserva para el frontend\n    const reservation = {\n      id: reservationId,\n      fullName: whatsappData.nombre || 'Cliente sin nombre',\n      mobilePhone: whatsappData.telefono || '',\n      email: whatsappData.email || '',\n      date: formattedDate,\n      time: whatsappData.hora || '19:00',\n      peopleCount: whatsappData.personas || 2,\n      notes: whatsappData.notas || 'Reserva realizada por WhatsApp',\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n      source: 'whatsapp'\n    };\n    \n    // Guardar la reserva en el almacenamiento local\n    reservationsStore.unshift(reservation);\n    saveReservationsToStorage();\n    \n    // Emitir evento para notificar a otros componentes\n    eventBus.emit('nueva-reserva', reservation);\n    \n    // Intentar guardar en el backend\n    try {\n      // Convertir al formato que espera el backend\n      const backendReservation = {\n        nombre: reservation.fullName,\n        telefono: reservation.mobilePhone,\n        email: reservation.email,\n        fecha: reservation.date,\n        hora: reservation.time,\n        personas: reservation.peopleCount,\n        notas: reservation.notes,\n        estado: 'pendiente',\n        origen: 'whatsapp'\n      };\n      \n      // Enviar al backend\n      await apiService.post('/whatsapp/reservas', backendReservation);\n      console.log('‚úÖ Reserva guardada en el backend');\n    } catch (backendError) {\n      console.warn('‚ö†Ô∏è No se pudo guardar la reserva en el backend, pero se guard√≥ localmente:', backendError);\n    }\n    \n    return {\n      success: true,\n      reservation,\n      message: 'Reserva guardada correctamente'\n    };\n  } catch (error) {\n    console.error('‚ùå Error al guardar reserva desde WhatsApp:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al procesar la reserva desde WhatsApp'\n    };\n  }\n}\n\n/**\n * Elimina una reserva espec√≠fica\n * @param {string} reservationId - ID de la reserva a eliminar\n * @returns {Promise<Object>} - Resultado de la operaci√≥n\n */\nexport async function deleteReservation(reservationId) {\n  try {\n    // Intentar eliminar en el backend primero\n    try {\n      const response = await apiService.delete(`/reservas/${reservationId}`);\n      console.log('Reserva eliminada en el backend:', response);\n    } catch (apiError) {\n      console.warn('No se pudo eliminar la reserva en el backend:', apiError);\n      // Continuamos con la eliminaci√≥n local aunque falle el backend\n    }\n    \n    // Eliminar de nuestro almacenamiento local\n    const index = reservationsStore.findIndex(r => r.id === reservationId);\n    if (index !== -1) {\n      reservationsStore.splice(index, 1);\n      saveReservationsToStorage();\n      \n      // Emitir evento de actualizaci√≥n\n      eventBus.emit('reserva-eliminada', { id: reservationId });\n      \n      return {\n        success: true,\n        message: 'Reserva eliminada correctamente'\n      };\n    } else {\n      return {\n        success: false,\n        error: 'No se encontr√≥ la reserva especificada'\n      };\n    }\n  } catch (error) {\n    console.error('Error al eliminar reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al eliminar la reserva'\n    };\n  }\n}\n\n/**\n * Verifica si una reserva tiene m√°s de X d√≠as de antig√ºedad\n * @param {Object} reservation - Reserva a verificar\n * @param {number} days - N√∫mero de d√≠as para considerar antigua\n * @returns {boolean} - true si la reserva es m√°s antigua que los d√≠as especificados\n */\nexport function isReservationOlderThan(reservation, days = 30) {\n  if (!reservation || !reservation.date) return false;\n  \n  const reservationDate = new Date(reservation.date);\n  const today = new Date();\n  \n  // Calcular la diferencia en milisegundos\n  const diffTime = today - reservationDate;\n  // Convertir a d√≠as\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  \n  return diffDays > days;\n}\n\n// Funci√≥n para formatear una fecha al formato DD/MM/YYYY\nfunction formatDateToDDMMYYYY(dateString) {\n  if (!dateString) return '';\n  \n  try {\n    // Caso espec√≠fico para el formato problem√°tico: \"29T05:00:00.000Z/05/2025\"\n    if (dateString.includes('T') && dateString.includes('/')) {\n      const parts = dateString.split('/');\n      if (parts.length === 3) {\n        const day = parts[0].split('T')[0];\n        return `${day}/${parts[1]}/${parts[2]}`;\n      }\n    }\n    \n    // Formato ISO: \"2025-05-29\"\n    if (dateString.includes('-')) {\n      const parts = dateString.split('-');\n      if (parts.length === 3) {\n        return `${parts[2]}/${parts[1]}/${parts[0]}`;\n      }\n    }\n    \n    // Si ya est√° en formato DD/MM/YYYY, devolverlo tal cual\n    if (dateString.includes('/') && !dateString.includes('T')) {\n      return dateString;\n    }\n    \n    // Intentar parsear como objeto Date\n    const date = new Date(dateString);\n    if (!isNaN(date.getTime())) {\n      const day = date.getDate().toString().padStart(2, '0');\n      const month = (date.getMonth() + 1).toString().padStart(2, '0');\n      const year = date.getFullYear();\n      return `${day}/${month}/${year}`;\n    }\n    \n    return dateString;\n  } catch (error) {\n    console.error('Error al formatear fecha:', error);\n    return dateString;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}