{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { defineComponent, ref, computed, watch, onMounted } from 'vue';\nimport { Bar, Line } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, PointElement, LineElement } from 'chart.js';\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, PointElement, LineElement);\nexport default defineComponent({\n  name: 'SalesChartComponent',\n  components: {\n    Bar,\n    Line\n  },\n  props: {\n    chartType: {\n      type: String,\n      default: 'bar'\n    },\n    items: {\n      type: Array,\n      required: true,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const chartDataRef = ref(null);\n    const loading = ref(true);\n\n    // Verificar si chartData es válido para renderizar\n    const isChartDataValid = computed(() => {\n      return chartDataRef.value && chartDataRef.value.datasets && Array.isArray(chartDataRef.value.datasets) && chartDataRef.value.datasets.length > 0;\n    });\n\n    // Actualizar chartData cuando cambian los items\n    const updateChartData = () => {\n      loading.value = true;\n\n      // Si no hay items, establecer chartData como un objeto vacío pero válido\n      if (!props.items || props.items.length === 0) {\n        chartDataRef.value = {\n          labels: [],\n          datasets: [{\n            label: 'Sin datos',\n            data: [],\n            backgroundColor: [],\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n          }]\n        };\n        loading.value = false;\n        return;\n      }\n\n      // Preparar los datos para el gráfico\n      const labels = props.items.map(item => item.name || 'Sin nombre');\n      const data = props.items.map(item => item.quantity || 0);\n      const backgroundColor = props.items.map(() => {\n        const r = Math.floor(Math.random() * 155) + 100;\n        const g = Math.floor(Math.random() * 155) + 100;\n        const b = Math.floor(Math.random() * 155) + 100;\n        return `rgba(${r}, ${g}, ${b}, 0.6)`;\n      });\n\n      // Establecer chartData\n      chartDataRef.value = {\n        labels,\n        datasets: [{\n          label: 'Cantidad vendida',\n          data,\n          backgroundColor,\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      };\n      loading.value = false;\n    };\n\n    // Observar cambios en los items para actualizar el chartData\n    watch(() => props.items, () => {\n      updateChartData();\n    }, {\n      deep: true,\n      immediate: true\n    });\n\n    // También observar cambios en el tipo de gráfico\n    watch(() => props.chartType, () => {\n      // No es necesario actualizar chartData, solo asegurarse de que no esté cargando\n      if (loading.value) loading.value = false;\n    });\n\n    // Al montar el componente, inicializar chartData\n    onMounted(() => {\n      updateChartData();\n    });\n    const chartOptions = computed(() => {\n      return {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Cantidad'\n            },\n            ticks: {\n              precision: 0\n            }\n          },\n          x: {\n            title: {\n              display: true,\n              text: 'Productos'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top'\n          },\n          title: {\n            display: true,\n            text: props.chartType === 'bar' ? 'Productos más vendidos' : 'Tendencia de ventas'\n          }\n        }\n      };\n    });\n    return {\n      chartData: chartDataRef,\n      chartOptions,\n      isChartDataValid,\n      loading\n    };\n  }\n});","map":{"version":3,"names":["defineComponent","ref","computed","watch","onMounted","Bar","Line","Chart","ChartJS","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","PointElement","LineElement","register","name","components","props","chartType","type","String","default","items","Array","required","setup","chartDataRef","loading","isChartDataValid","value","datasets","isArray","length","updateChartData","labels","label","data","backgroundColor","borderColor","borderWidth","map","item","quantity","r","Math","floor","random","g","b","deep","immediate","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","title","display","text","ticks","precision","x","plugins","legend","position","chartData"],"sources":["F:\\Driver google\\VUE.JS-2\\temp\\websap\\src\\components\\SalesChartComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\">\r\n    <div v-if=\"loading\" class=\"loading-message\">\r\n      Cargando gráfico...\r\n    </div>\r\n    <template v-else>\r\n      <Bar \r\n        v-if=\"chartType === 'bar' && isChartDataValid\" \r\n        :data=\"chartData\" \r\n        :options=\"chartOptions\" \r\n      />\r\n      <Line \r\n        v-else-if=\"chartType === 'line' && isChartDataValid\" \r\n        :data=\"chartData\" \r\n        :options=\"chartOptions\" \r\n      />\r\n      <div v-else class=\"no-data-message\">\r\n        No hay suficientes datos para mostrar el gráfico\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent, ref, computed, watch, onMounted } from 'vue';\r\nimport { Bar, Line } from 'vue-chartjs';\r\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, PointElement, LineElement } from 'chart.js';\r\n\r\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, PointElement, LineElement);\r\n\r\nexport default defineComponent({\r\n  name: 'SalesChartComponent',\r\n  components: { Bar, Line },\r\n  props: {\r\n    chartType: {\r\n      type: String,\r\n      default: 'bar'\r\n    },\r\n    items: {\r\n      type: Array,\r\n      required: true,\r\n      default: () => []\r\n    }\r\n  },\r\n  setup(props) {\r\n    const chartDataRef = ref(null);\r\n    const loading = ref(true);\r\n\r\n    // Verificar si chartData es válido para renderizar\r\n    const isChartDataValid = computed(() => {\r\n      return chartDataRef.value && \r\n             chartDataRef.value.datasets && \r\n             Array.isArray(chartDataRef.value.datasets) &&\r\n             chartDataRef.value.datasets.length > 0;\r\n    });\r\n\r\n    // Actualizar chartData cuando cambian los items\r\n    const updateChartData = () => {\r\n      loading.value = true;\r\n      \r\n      // Si no hay items, establecer chartData como un objeto vacío pero válido\r\n      if (!props.items || props.items.length === 0) {\r\n        chartDataRef.value = {\r\n          labels: [],\r\n          datasets: [{\r\n            label: 'Sin datos',\r\n            data: [],\r\n            backgroundColor: [],\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 1\r\n          }]\r\n        };\r\n        loading.value = false;\r\n        return;\r\n      }\r\n\r\n      // Preparar los datos para el gráfico\r\n      const labels = props.items.map(item => item.name || 'Sin nombre');\r\n      const data = props.items.map(item => item.quantity || 0);\r\n      const backgroundColor = props.items.map(() => {\r\n        const r = Math.floor(Math.random() * 155) + 100;\r\n        const g = Math.floor(Math.random() * 155) + 100;\r\n        const b = Math.floor(Math.random() * 155) + 100;\r\n        return `rgba(${r}, ${g}, ${b}, 0.6)`;\r\n      });\r\n\r\n      // Establecer chartData\r\n      chartDataRef.value = {\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: 'Cantidad vendida',\r\n            data,\r\n            backgroundColor,\r\n            borderColor: 'rgba(75, 192, 192, 1)',\r\n            borderWidth: 1\r\n          }\r\n        ]\r\n      };\r\n      \r\n      loading.value = false;\r\n    };\r\n\r\n    // Observar cambios en los items para actualizar el chartData\r\n    watch(() => props.items, () => {\r\n      updateChartData();\r\n    }, { deep: true, immediate: true });\r\n\r\n    // También observar cambios en el tipo de gráfico\r\n    watch(() => props.chartType, () => {\r\n      // No es necesario actualizar chartData, solo asegurarse de que no esté cargando\r\n      if (loading.value) loading.value = false;\r\n    });\r\n\r\n    // Al montar el componente, inicializar chartData\r\n    onMounted(() => {\r\n      updateChartData();\r\n    });\r\n\r\n    const chartOptions = computed(() => {\r\n      return {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n            title: {\r\n              display: true,\r\n              text: 'Cantidad'\r\n            },\r\n            ticks: {\r\n              precision: 0\r\n            }\r\n          },\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'Productos'\r\n            }\r\n          }\r\n        },\r\n        plugins: {\r\n          legend: {\r\n            display: true,\r\n            position: 'top'\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: props.chartType === 'bar' ? 'Productos más vendidos' : 'Tendencia de ventas'\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    return {\r\n      chartData: chartDataRef,\r\n      chartOptions,\r\n      isChartDataValid,\r\n      loading\r\n    };\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.chart-container {\r\n  position: relative;\r\n  height: 400px;\r\n  width: 100%;\r\n  margin: 20px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.loading-message, .no-data-message {\r\n  color: #666;\r\n  font-style: italic;\r\n  text-align: center;\r\n  padding: 20px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 8px;\r\n  width: 100%;\r\n}\r\n\r\n.loading-message {\r\n  background-color: #f0f8ff;\r\n  animation: pulse 1.5s infinite;\r\n}\r\n\r\n@keyframes pulse {\r\n  0% { opacity: 0.6; }\r\n  50% { opacity: 1; }\r\n  100% { opacity: 0.6; }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}