{"ast":null,"code":"export default {\n  name: 'PublicMenu',\n  props: {\n    id: {\n      type: String,\n      required: false\n    }\n  },\n  data() {\n    return {\n      menu: null,\n      loading: true,\n      error: null\n    };\n  },\n  computed: {\n    menuId() {\n      // Usar el ID del prop, del parámetro de ruta o de la variable global\n      return this.id || this.$route.params.id || window.MENU_PUBLIC_ID;\n    }\n  },\n  mounted() {\n    this.loadMenu();\n  },\n  methods: {\n    async loadMenu() {\n      if (!this.menuId) return;\n      try {\n        this.loading = true;\n        // Aquí deberías hacer una llamada a tu API para cargar los datos del menú\n        // Por ejemplo:\n        // const response = await fetch(`/api/menus/${this.menuId}`);\n        // this.menu = await response.json();\n\n        // Simulación temporal de carga\n        setTimeout(() => {\n          this.loading = false;\n          this.menu = {\n            id: this.menuId,\n            name: \"Menú de prueba\"\n          };\n        }, 500);\n      } catch (error) {\n        console.error(\"Error al cargar el menú:\", error);\n        this.error = \"No se pudo cargar el menú. Inténtalo de nuevo más tarde.\";\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","id","type","String","required","data","menu","loading","error","computed","menuId","$route","params","window","MENU_PUBLIC_ID","mounted","loadMenu","methods","setTimeout","console"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\views\\PublicMenu.vue"],"sourcesContent":["<template>\r\n  <div class=\"public-menu\">\r\n    <h1>Menú Público</h1>\r\n    <!-- Aquí iría el contenido del menú basado en el ID -->\r\n    <div v-if=\"menuId\">\r\n      <p>Cargando menú con ID: {{ menuId }}</p>\r\n      <!-- Aquí irían los componentes para mostrar el menú actual -->\r\n    </div>\r\n    <div v-else>\r\n      <p>Cargando menú...</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'PublicMenu',\r\n  props: {\r\n    id: {\r\n      type: String,\r\n      required: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      menu: null,\r\n      loading: true,\r\n      error: null\r\n    }\r\n  },  computed: {\r\n    menuId() {\r\n      // Usar el ID del prop, del parámetro de ruta o de la variable global\r\n      return this.id || this.$route.params.id || window.MENU_PUBLIC_ID;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadMenu();\r\n  },\r\n  methods: {\r\n    async loadMenu() {\r\n      if (!this.menuId) return;\r\n      \r\n      try {\r\n        this.loading = true;\r\n        // Aquí deberías hacer una llamada a tu API para cargar los datos del menú\r\n        // Por ejemplo:\r\n        // const response = await fetch(`/api/menus/${this.menuId}`);\r\n        // this.menu = await response.json();\r\n        \r\n        // Simulación temporal de carga\r\n        setTimeout(() => {\r\n          this.loading = false;\r\n          this.menu = { id: this.menuId, name: \"Menú de prueba\" };\r\n        }, 500);\r\n      } catch (error) {\r\n        console.error(\"Error al cargar el menú:\", error);\r\n        this.error = \"No se pudo cargar el menú. Inténtalo de nuevo más tarde.\";\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.public-menu {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n</style>"],"mappings":"AAeA,eAAe;EACbA,IAAI,EAAE,YAAY;EAClBC,KAAK,EAAE;IACLC,EAAE,EAAE;MACFC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,IAAI;MACVC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACT;EACF,CAAC;EAAGC,QAAQ,EAAE;IACZC,MAAMA,CAAA,EAAG;MACP;MACA,OAAO,IAAI,CAACT,EAAC,IAAK,IAAI,CAACU,MAAM,CAACC,MAAM,CAACX,EAAC,IAAKY,MAAM,CAACC,cAAc;IAClE;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,QAAQ,CAAC,CAAC;EACjB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,QAAQA,CAAA,EAAG;MACf,IAAI,CAAC,IAAI,CAACN,MAAM,EAAE;MAElB,IAAI;QACF,IAAI,CAACH,OAAM,GAAI,IAAI;QACnB;QACA;QACA;QACA;;QAEA;QACAW,UAAU,CAAC,MAAM;UACf,IAAI,CAACX,OAAM,GAAI,KAAK;UACpB,IAAI,CAACD,IAAG,GAAI;YAAEL,EAAE,EAAE,IAAI,CAACS,MAAM;YAAEX,IAAI,EAAE;UAAiB,CAAC;QACzD,CAAC,EAAE,GAAG,CAAC;MACT,EAAE,OAAOS,KAAK,EAAE;QACdW,OAAO,CAACX,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,IAAI,CAACA,KAAI,GAAI,0DAA0D;MACzE,UAAU;QACR,IAAI,CAACD,OAAM,GAAI,KAAK;MACtB;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}