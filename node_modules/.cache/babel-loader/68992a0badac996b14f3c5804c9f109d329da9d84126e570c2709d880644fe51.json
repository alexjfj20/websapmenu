{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { defineComponent, ref, computed, watch, onMounted } from 'vue';\nimport { Bar, Line } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, PointElement, LineElement } from 'chart.js';\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, PointElement, LineElement);\n\n// Objeto de datos por defecto para el gráfico (siempre válido)\nconst DEFAULT_CHART_DATA = {\n  labels: [],\n  datasets: [{\n    label: 'Sin datos',\n    data: [],\n    backgroundColor: ['rgba(200, 200, 200, 0.5)'],\n    borderColor: 'rgba(200, 200, 200, 1)',\n    borderWidth: 1\n  }]\n};\nexport default defineComponent({\n  name: 'SalesChartComponent',\n  components: {\n    Bar,\n    Line\n  },\n  props: {\n    chartType: {\n      type: String,\n      default: 'bar',\n      validator: value => ['bar', 'line'].includes(value)\n    },\n    items: {\n      type: Array,\n      required: true,\n      default: () => []\n    }\n  },\n  setup(props) {\n    const loading = ref(true);\n    // Usar un objeto ref separado para manejo interno\n    const internalChartData = ref({\n      ...DEFAULT_CHART_DATA\n    });\n\n    // Proporciona un computado que siempre retorna un objeto válido\n    const safeChartData = computed(() => {\n      try {\n        // Verificar si el chartData interno es válido\n        if (internalChartData.value && internalChartData.value.datasets && Array.isArray(internalChartData.value.datasets) && internalChartData.value.datasets.length > 0) {\n          return internalChartData.value;\n        }\n        // Si no es válido, devolver los datos por defecto\n        return {\n          ...DEFAULT_CHART_DATA\n        };\n      } catch (error) {\n        console.error(\"Error en safeChartData:\", error);\n        // En caso de error, devolver datos por defecto\n        return {\n          ...DEFAULT_CHART_DATA\n        };\n      }\n    });\n\n    // Flag para confirmar si los datos están listos para renderizar\n    const isDataReady = computed(() => {\n      try {\n        return safeChartData.value && safeChartData.value.datasets && Array.isArray(safeChartData.value.datasets) && safeChartData.value.datasets.length > 0 && !loading.value;\n      } catch (error) {\n        console.error(\"Error en isDataReady:\", error);\n        return false;\n      }\n    });\n\n    // Función para procesar y actualizar los datos del gráfico de forma segura\n    const updateChartData = () => {\n      loading.value = true;\n      try {\n        // Default fallback data (used in case of errors or empty data)\n        let processedData = {\n          ...DEFAULT_CHART_DATA\n        };\n\n        // Si hay items válidos, procesarlos\n        if (Array.isArray(props.items) && props.items.length > 0) {\n          // Extraer datos de forma segura\n          const labels = props.items.map(item => item && item.name ? item.name : 'Sin nombre');\n          const data = props.items.map(item => item && typeof item.quantity === 'number' ? item.quantity : 0);\n\n          // Generar colores de forma segura\n          const backgroundColor = props.items.map(() => {\n            const r = Math.floor(Math.random() * 155) + 100;\n            const g = Math.floor(Math.random() * 155) + 100;\n            const b = Math.floor(Math.random() * 155) + 100;\n            return `rgba(${r}, ${g}, ${b}, 0.6)`;\n          });\n\n          // Crear el objeto de datos procesado\n          processedData = {\n            labels,\n            datasets: [{\n              label: 'Cantidad vendida',\n              data,\n              backgroundColor,\n              borderColor: 'rgba(75, 192, 192, 1)',\n              borderWidth: 1\n            }]\n          };\n        }\n\n        // Actualizar los datos internos\n        internalChartData.value = processedData;\n      } catch (error) {\n        console.error('Error al actualizar datos del gráfico:', error);\n        // En caso de error, usar datos por defecto\n        internalChartData.value = {\n          ...DEFAULT_CHART_DATA\n        };\n      } finally {\n        // Siempre completar la carga\n        loading.value = false;\n      }\n    };\n\n    // Observar cambios en props.items con validación rigurosa\n    watch(() => props.items, newItems => {\n      if (!Array.isArray(newItems)) {\n        console.warn('SalesChartComponent: props.items no es un array válido:', newItems);\n        internalChartData.value = {\n          ...DEFAULT_CHART_DATA\n        };\n        loading.value = false;\n        return;\n      }\n\n      // Actualizar solo si hay items y son un array\n      updateChartData();\n    }, {\n      deep: true,\n      immediate: true\n    });\n\n    // Observar cambios en props.chartType\n    watch(() => props.chartType, () => {\n      // No recargar datos, solo asegurarse que loading es false\n      loading.value = false;\n    });\n\n    // Al montar el componente\n    onMounted(() => {\n      console.log(\"SalesChartComponent montado\");\n\n      // Es importante hacerlo con un pequeño retraso para garantizar que el DOM está listo\n      // Usar un retraso más largo para asegurar que todo esté cargado\n      setTimeout(() => {\n        try {\n          console.log(\"Actualizando datos del gráfico después del timeout\");\n          updateChartData();\n        } catch (error) {\n          console.error(\"Error en updateChartData desde onMounted:\", error);\n          // Asegurar que loading es false incluso si hay error\n          loading.value = false;\n        }\n      }, 100); // Aumentar el tiempo de espera\n    });\n\n    // Opciones para el gráfico\n    const chartOptions = computed(() => {\n      return {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'Cantidad'\n            },\n            ticks: {\n              precision: 0\n            }\n          },\n          x: {\n            title: {\n              display: true,\n              text: 'Productos'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top'\n          },\n          title: {\n            display: true,\n            text: props.chartType === 'bar' ? 'Productos más vendidos' : 'Tendencia de ventas'\n          }\n        }\n      };\n    });\n\n    // Exponer valores necesarios al template\n    return {\n      loading,\n      safeChartData,\n      chartOptions,\n      isDataReady\n    };\n  }\n});","map":{"version":3,"names":["defineComponent","ref","computed","watch","onMounted","Bar","Line","Chart","ChartJS","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","PointElement","LineElement","register","DEFAULT_CHART_DATA","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","name","components","props","chartType","type","String","default","validator","value","includes","items","Array","required","setup","loading","internalChartData","safeChartData","isArray","length","error","console","isDataReady","updateChartData","processedData","map","item","quantity","r","Math","floor","random","g","b","newItems","warn","deep","immediate","log","setTimeout","chartOptions","responsive","maintainAspectRatio","scales","y","beginAtZero","title","display","text","ticks","precision","x","plugins","legend","position"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\components\\SalesChartComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\">\r\n    <div v-if=\"loading\" class=\"loading-message\">\r\n      Cargando gráfico...\r\n    </div>\r\n    <template v-else>\r\n      <!-- Cambiar data por chartData -->\r\n      <Bar \r\n        v-if=\"chartType === 'bar' && isDataReady\" \r\n        :chartData=\"safeChartData\" \r\n        :options=\"chartOptions\" \r\n      />\r\n      <Line \r\n        v-else-if=\"chartType === 'line' && isDataReady\" \r\n        :chartData=\"safeChartData\" \r\n        :options=\"chartOptions\" \r\n      />\r\n      <div v-else class=\"no-data-message\">\r\n        No hay suficientes datos para mostrar el gráfico\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent, ref, computed, watch, onMounted } from 'vue';\r\nimport { Bar, Line } from 'vue-chartjs';\r\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, PointElement, LineElement } from 'chart.js';\r\n\r\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, PointElement, LineElement);\r\n\r\n// Objeto de datos por defecto para el gráfico (siempre válido)\r\nconst DEFAULT_CHART_DATA = {\r\n  labels: [],\r\n  datasets: [{\r\n    label: 'Sin datos',\r\n    data: [],\r\n    backgroundColor: ['rgba(200, 200, 200, 0.5)'],\r\n    borderColor: 'rgba(200, 200, 200, 1)',\r\n    borderWidth: 1\r\n  }]\r\n};\r\n\r\nexport default defineComponent({\r\n  name: 'SalesChartComponent',\r\n  components: { Bar, Line },\r\n  props: {\r\n    chartType: {\r\n      type: String,\r\n      default: 'bar',\r\n      validator: (value) => ['bar', 'line'].includes(value)\r\n    },\r\n    items: {\r\n      type: Array,\r\n      required: true,\r\n      default: () => []\r\n    }\r\n  },\r\n  setup(props) {\r\n    const loading = ref(true);\r\n    // Usar un objeto ref separado para manejo interno\r\n    const internalChartData = ref({...DEFAULT_CHART_DATA});\r\n\r\n    // Proporciona un computado que siempre retorna un objeto válido\r\n    const safeChartData = computed(() => {\r\n      try {\r\n        // Verificar si el chartData interno es válido\r\n        if (internalChartData.value && \r\n            internalChartData.value.datasets && \r\n            Array.isArray(internalChartData.value.datasets) &&\r\n            internalChartData.value.datasets.length > 0) {\r\n          return internalChartData.value;\r\n        }\r\n        // Si no es válido, devolver los datos por defecto\r\n        return {...DEFAULT_CHART_DATA};\r\n      } catch (error) {\r\n        console.error(\"Error en safeChartData:\", error);\r\n        // En caso de error, devolver datos por defecto\r\n        return {...DEFAULT_CHART_DATA};\r\n      }\r\n    });\r\n\r\n    // Flag para confirmar si los datos están listos para renderizar\r\n    const isDataReady = computed(() => {\r\n      try {\r\n        return safeChartData.value &&\r\n               safeChartData.value.datasets &&\r\n               Array.isArray(safeChartData.value.datasets) &&\r\n               safeChartData.value.datasets.length > 0 &&\r\n               !loading.value;\r\n      } catch (error) {\r\n        console.error(\"Error en isDataReady:\", error);\r\n        return false;\r\n      }\r\n    });\r\n\r\n    // Función para procesar y actualizar los datos del gráfico de forma segura\r\n    const updateChartData = () => {\r\n      loading.value = true;\r\n      \r\n      try {\r\n        // Default fallback data (used in case of errors or empty data)\r\n        let processedData = {...DEFAULT_CHART_DATA};\r\n        \r\n        // Si hay items válidos, procesarlos\r\n        if (Array.isArray(props.items) && props.items.length > 0) {\r\n          // Extraer datos de forma segura\r\n          const labels = props.items.map(item => (item && item.name) ? item.name : 'Sin nombre');\r\n          const data = props.items.map(item => (item && typeof item.quantity === 'number') ? item.quantity : 0);\r\n          \r\n          // Generar colores de forma segura\r\n          const backgroundColor = props.items.map(() => {\r\n            const r = Math.floor(Math.random() * 155) + 100;\r\n            const g = Math.floor(Math.random() * 155) + 100;\r\n            const b = Math.floor(Math.random() * 155) + 100;\r\n            return `rgba(${r}, ${g}, ${b}, 0.6)`;\r\n          });\r\n          \r\n          // Crear el objeto de datos procesado\r\n          processedData = {\r\n            labels,\r\n            datasets: [\r\n              {\r\n                label: 'Cantidad vendida',\r\n                data,\r\n                backgroundColor,\r\n                borderColor: 'rgba(75, 192, 192, 1)',\r\n                borderWidth: 1\r\n              }\r\n            ]\r\n          };\r\n        }\r\n        \r\n        // Actualizar los datos internos\r\n        internalChartData.value = processedData;\r\n      } catch (error) {\r\n        console.error('Error al actualizar datos del gráfico:', error);\r\n        // En caso de error, usar datos por defecto\r\n        internalChartData.value = {...DEFAULT_CHART_DATA};\r\n      } finally {\r\n        // Siempre completar la carga\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    // Observar cambios en props.items con validación rigurosa\r\n    watch(() => props.items, (newItems) => {\r\n      if (!Array.isArray(newItems)) {\r\n        console.warn('SalesChartComponent: props.items no es un array válido:', newItems);\r\n        internalChartData.value = {...DEFAULT_CHART_DATA};\r\n        loading.value = false;\r\n        return;\r\n      }\r\n      \r\n      // Actualizar solo si hay items y son un array\r\n      updateChartData();\r\n    }, { deep: true, immediate: true });\r\n\r\n    // Observar cambios en props.chartType\r\n    watch(() => props.chartType, () => {\r\n      // No recargar datos, solo asegurarse que loading es false\r\n      loading.value = false;\r\n    });\r\n\r\n    // Al montar el componente\r\n    onMounted(() => {\r\n      console.log(\"SalesChartComponent montado\");\r\n      \r\n      // Es importante hacerlo con un pequeño retraso para garantizar que el DOM está listo\r\n      // Usar un retraso más largo para asegurar que todo esté cargado\r\n      setTimeout(() => {\r\n        try {\r\n          console.log(\"Actualizando datos del gráfico después del timeout\");\r\n          updateChartData();\r\n        } catch (error) {\r\n          console.error(\"Error en updateChartData desde onMounted:\", error);\r\n          // Asegurar que loading es false incluso si hay error\r\n          loading.value = false;\r\n        }\r\n      }, 100); // Aumentar el tiempo de espera\r\n    });\r\n\r\n    // Opciones para el gráfico\r\n    const chartOptions = computed(() => {\r\n      return {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n            title: {\r\n              display: true,\r\n              text: 'Cantidad'\r\n            },\r\n            ticks: {\r\n              precision: 0\r\n            }\r\n          },\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'Productos'\r\n            }\r\n          }\r\n        },\r\n        plugins: {\r\n          legend: {\r\n            display: true,\r\n            position: 'top'\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: props.chartType === 'bar' ? 'Productos más vendidos' : 'Tendencia de ventas'\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    // Exponer valores necesarios al template\r\n    return {\r\n      loading,\r\n      safeChartData,\r\n      chartOptions,\r\n      isDataReady\r\n    };\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.chart-container {\r\n  position: relative;\r\n  height: 400px;\r\n  width: 100%;\r\n  margin: 20px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  overflow: hidden;\r\n}\r\n\r\n.loading-message, .no-data-message {\r\n  color: #666;\r\n  font-style: italic;\r\n  text-align: center;\r\n  padding: 40px 20px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 8px;\r\n  width: 100%;\r\n  max-width: 400px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.05);\r\n}\r\n\r\n.loading-message {\r\n  background-color: #f0f8ff;\r\n  animation: pulse 1.5s infinite;\r\n}\r\n\r\n@keyframes pulse {\r\n  0% { opacity: 0.6; }\r\n  50% { opacity: 1; }\r\n  100% { opacity: 0.6; }\r\n}\r\n\r\n\r\n@media (max-width: 768px) {\r\n  .payment-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 12px;\r\n  }\r\n\r\n  .payment-option, .payment-method {\r\n    width: 100%;\r\n    max-width: 400px; /* Evita que sean demasiado anchos en pantallas grandes */\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .payment-container {\r\n    gap: 8px; /* Menos espacio en pantallas más pequeñas */\r\n  }\r\n\r\n  .payment-option, .payment-method {\r\n    max-width: 100%; /* Se ajusta completamente al ancho del móvil */\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}