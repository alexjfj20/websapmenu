{"ast":null,"code":"const DB_NAME = 'websapDatabase';\nconst DB_VERSION = 3; // Debe coincidir con el de storageService.js\nconst USERS_STORE = 'users';\n\n// Abrir la conexión a la base de datos con manejo mejorado de errores\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        console.error('Error al abrir la base de datos:', event.target.error);\n        reject('Error al abrir la base de datos: ' + event.target.errorCode);\n      };\n      request.onsuccess = event => {\n        const db = event.target.result;\n        // Verificar que el almacén de usuarios existe\n        if (!db.objectStoreNames.contains(USERS_STORE)) {\n          console.error(`El almacén ${USERS_STORE} no existe en la base de datos`);\n          reject(new Error(`El almacén ${USERS_STORE} no existe en la base de datos`));\n          return;\n        }\n        resolve(db);\n      };\n      request.onupgradeneeded = event => {\n        const db = event.target.result;\n\n        // Crear almacén para usuarios si no existe\n        if (!db.objectStoreNames.contains(USERS_STORE)) {\n          console.log('Creando almacén de usuarios:', USERS_STORE);\n          db.createObjectStore(USERS_STORE, {\n            keyPath: 'id'\n          });\n        }\n      };\n    } catch (error) {\n      console.error('Error crítico al abrir la base de datos:', error);\n      reject(error);\n    }\n  });\n}\n\n/**\r\n * Obtiene la lista de usuarios desde IndexedDB\r\n * @returns {Promise<Array>} - Lista de usuarios\r\n */\nexport async function getUsersFromDB() {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([USERS_STORE], 'readonly');\n    const store = transaction.objectStore(USERS_STORE);\n    return new Promise((resolve, reject) => {\n      const request = store.getAll();\n      request.onsuccess = () => {\n        // Verificar que request.result es un array antes de devolverlo\n        const result = Array.isArray(request.result) ? request.result : [];\n        console.log(`Obtenidos ${result.length} usuarios de la base de datos`);\n        resolve(result);\n      };\n      request.onerror = event => {\n        console.error('Error al obtener usuarios:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error al obtener usuarios de IndexedDB:', error);\n    // No intentar recuperar de localStorage, simplemente devolver un array vacío\n    return [];\n  }\n}\n\n/**\r\n * Guardar un único usuario en IndexedDB\r\n * @param {Object} user - El usuario a guardar\r\n * @returns {Promise<boolean>} - Éxito de la operación\r\n */\nexport async function saveUserToDB(user) {\n  try {\n    if (!user || typeof user !== 'object') {\n      throw new Error('Se requiere un objeto de usuario válido');\n    }\n\n    // Crear un nuevo objeto con solo las propiedades necesarias\n    const cleanUser = {\n      id: String(user.id || Date.now()),\n      name: String(user.name || ''),\n      email: String(user.email || ''),\n      password: String(user.password || '')\n    };\n\n    // Verificar serializabilidad\n    JSON.stringify(cleanUser); // Lanzará error si no es serializable\n\n    const db = await openDatabase();\n    const transaction = db.transaction([USERS_STORE], 'readwrite');\n    const store = transaction.objectStore(USERS_STORE);\n    return new Promise((resolve, reject) => {\n      try {\n        const addRequest = store.put(cleanUser); // Usar put en lugar de add para permitir actualizaciones\n\n        addRequest.onsuccess = () => {\n          console.log(`Usuario guardado con éxito: ${cleanUser.email}`);\n          resolve(true);\n        };\n        addRequest.onerror = event => {\n          console.error('Error específico al guardar usuario:', event.target.error);\n          reject(event.target.error);\n        };\n      } catch (error) {\n        console.error('Error en la operación de almacenamiento:', error);\n        reject(error);\n      }\n    });\n  } catch (error) {\n    console.error('Error al guardar usuario en IndexedDB:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Guardar múltiples usuarios en IndexedDB\r\n * @param {Array} users - Lista de usuarios a guardar\r\n * @returns {Promise<boolean>} - Éxito de la operación\r\n */\nexport async function saveUsersToDB(users) {\n  if (!Array.isArray(users)) {\n    throw new Error('La lista de usuarios debe ser un array');\n  }\n  try {\n    // Guardar cada usuario individualmente para mayor control\n    for (const user of users) {\n      await saveUserToDB(user);\n    }\n    return true;\n  } catch (error) {\n    console.error('Error al guardar múltiples usuarios en IndexedDB:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["DB_NAME","DB_VERSION","USERS_STORE","openDatabase","Promise","resolve","reject","request","indexedDB","open","onerror","event","console","error","target","errorCode","onsuccess","db","result","objectStoreNames","contains","Error","onupgradeneeded","log","createObjectStore","keyPath","getUsersFromDB","transaction","store","objectStore","getAll","Array","isArray","length","saveUserToDB","user","cleanUser","id","String","Date","now","name","email","password","JSON","stringify","addRequest","put","saveUsersToDB","users"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/userService.js"],"sourcesContent":["const DB_NAME = 'websapDatabase';\r\nconst DB_VERSION = 3; // Debe coincidir con el de storageService.js\r\nconst USERS_STORE = 'users';\r\n\r\n// Abrir la conexión a la base de datos con manejo mejorado de errores\r\nfunction openDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al abrir la base de datos:', event.target.error);\r\n        reject('Error al abrir la base de datos: ' + event.target.errorCode);\r\n      };\r\n      \r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        // Verificar que el almacén de usuarios existe\r\n        if (!db.objectStoreNames.contains(USERS_STORE)) {\r\n          console.error(`El almacén ${USERS_STORE} no existe en la base de datos`);\r\n          reject(new Error(`El almacén ${USERS_STORE} no existe en la base de datos`));\r\n          return;\r\n        }\r\n        resolve(db);\r\n      };\r\n      \r\n      request.onupgradeneeded = (event) => {\r\n        const db = event.target.result;\r\n        \r\n        // Crear almacén para usuarios si no existe\r\n        if (!db.objectStoreNames.contains(USERS_STORE)) {\r\n          console.log('Creando almacén de usuarios:', USERS_STORE);\r\n          db.createObjectStore(USERS_STORE, { keyPath: 'id' });\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error crítico al abrir la base de datos:', error);\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene la lista de usuarios desde IndexedDB\r\n * @returns {Promise<Array>} - Lista de usuarios\r\n */\r\nexport async function getUsersFromDB() {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([USERS_STORE], 'readonly');\r\n    const store = transaction.objectStore(USERS_STORE);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const request = store.getAll();\r\n      \r\n      request.onsuccess = () => {\r\n        // Verificar que request.result es un array antes de devolverlo\r\n        const result = Array.isArray(request.result) ? request.result : [];\r\n        console.log(`Obtenidos ${result.length} usuarios de la base de datos`);\r\n        resolve(result);\r\n      };\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al obtener usuarios:', event.target.error);\r\n        reject(event.target.error);\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener usuarios de IndexedDB:', error);\r\n    // No intentar recuperar de localStorage, simplemente devolver un array vacío\r\n    return []; \r\n  }\r\n}\r\n\r\n/**\r\n * Guardar un único usuario en IndexedDB\r\n * @param {Object} user - El usuario a guardar\r\n * @returns {Promise<boolean>} - Éxito de la operación\r\n */\r\nexport async function saveUserToDB(user) {\r\n  try {\r\n    if (!user || typeof user !== 'object') {\r\n      throw new Error('Se requiere un objeto de usuario válido');\r\n    }\r\n    \r\n    // Crear un nuevo objeto con solo las propiedades necesarias\r\n    const cleanUser = {\r\n      id: String(user.id || Date.now()),\r\n      name: String(user.name || ''),\r\n      email: String(user.email || ''),\r\n      password: String(user.password || '')\r\n    };\r\n    \r\n    // Verificar serializabilidad\r\n    JSON.stringify(cleanUser); // Lanzará error si no es serializable\r\n    \r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([USERS_STORE], 'readwrite');\r\n    const store = transaction.objectStore(USERS_STORE);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const addRequest = store.put(cleanUser); // Usar put en lugar de add para permitir actualizaciones\r\n        \r\n        addRequest.onsuccess = () => {\r\n          console.log(`Usuario guardado con éxito: ${cleanUser.email}`);\r\n          resolve(true);\r\n        };\r\n        \r\n        addRequest.onerror = (event) => {\r\n          console.error('Error específico al guardar usuario:', event.target.error);\r\n          reject(event.target.error);\r\n        };\r\n      } catch (error) {\r\n        console.error('Error en la operación de almacenamiento:', error);\r\n        reject(error);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar usuario en IndexedDB:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Guardar múltiples usuarios en IndexedDB\r\n * @param {Array} users - Lista de usuarios a guardar\r\n * @returns {Promise<boolean>} - Éxito de la operación\r\n */\r\nexport async function saveUsersToDB(users) {\r\n  if (!Array.isArray(users)) {\r\n    throw new Error('La lista de usuarios debe ser un array');\r\n  }\r\n  \r\n  try {\r\n    // Guardar cada usuario individualmente para mayor control\r\n    for (const user of users) {\r\n      await saveUserToDB(user);\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al guardar múltiples usuarios en IndexedDB:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,gBAAgB;AAChC,MAAMC,UAAU,GAAG,CAAC,CAAC,CAAC;AACtB,MAAMC,WAAW,GAAG,OAAO;;AAE3B;AACA,SAASC,YAAYA,CAAA,EAAG;EACtB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI;MACF,MAAMC,OAAO,GAAGC,SAAS,CAACC,IAAI,CAACT,OAAO,EAAEC,UAAU,CAAC;MAEnDM,OAAO,CAACG,OAAO,GAAIC,KAAK,IAAK;QAC3BC,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEF,KAAK,CAACG,MAAM,CAACD,KAAK,CAAC;QACrEP,MAAM,CAAC,mCAAmC,GAAGK,KAAK,CAACG,MAAM,CAACC,SAAS,CAAC;MACtE,CAAC;MAEDR,OAAO,CAACS,SAAS,GAAIL,KAAK,IAAK;QAC7B,MAAMM,EAAE,GAAGN,KAAK,CAACG,MAAM,CAACI,MAAM;QAC9B;QACA,IAAI,CAACD,EAAE,CAACE,gBAAgB,CAACC,QAAQ,CAAClB,WAAW,CAAC,EAAE;UAC9CU,OAAO,CAACC,KAAK,CAAC,cAAcX,WAAW,gCAAgC,CAAC;UACxEI,MAAM,CAAC,IAAIe,KAAK,CAAC,cAAcnB,WAAW,gCAAgC,CAAC,CAAC;UAC5E;QACF;QACAG,OAAO,CAACY,EAAE,CAAC;MACb,CAAC;MAEDV,OAAO,CAACe,eAAe,GAAIX,KAAK,IAAK;QACnC,MAAMM,EAAE,GAAGN,KAAK,CAACG,MAAM,CAACI,MAAM;;QAE9B;QACA,IAAI,CAACD,EAAE,CAACE,gBAAgB,CAACC,QAAQ,CAAClB,WAAW,CAAC,EAAE;UAC9CU,OAAO,CAACW,GAAG,CAAC,8BAA8B,EAAErB,WAAW,CAAC;UACxDe,EAAE,CAACO,iBAAiB,CAACtB,WAAW,EAAE;YAAEuB,OAAO,EAAE;UAAK,CAAC,CAAC;QACtD;MACF,CAAC;IACH,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChEP,MAAM,CAACO,KAAK,CAAC;IACf;EACF,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAea,cAAcA,CAAA,EAAG;EACrC,IAAI;IACF,MAAMT,EAAE,GAAG,MAAMd,YAAY,CAAC,CAAC;IAC/B,MAAMwB,WAAW,GAAGV,EAAE,CAACU,WAAW,CAAC,CAACzB,WAAW,CAAC,EAAE,UAAU,CAAC;IAC7D,MAAM0B,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC3B,WAAW,CAAC;IAElD,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,OAAO,GAAGqB,KAAK,CAACE,MAAM,CAAC,CAAC;MAE9BvB,OAAO,CAACS,SAAS,GAAG,MAAM;QACxB;QACA,MAAME,MAAM,GAAGa,KAAK,CAACC,OAAO,CAACzB,OAAO,CAACW,MAAM,CAAC,GAAGX,OAAO,CAACW,MAAM,GAAG,EAAE;QAClEN,OAAO,CAACW,GAAG,CAAC,aAAaL,MAAM,CAACe,MAAM,+BAA+B,CAAC;QACtE5B,OAAO,CAACa,MAAM,CAAC;MACjB,CAAC;MAEDX,OAAO,CAACG,OAAO,GAAIC,KAAK,IAAK;QAC3BC,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEF,KAAK,CAACG,MAAM,CAACD,KAAK,CAAC;QAC/DP,MAAM,CAACK,KAAK,CAACG,MAAM,CAACD,KAAK,CAAC;MAC5B,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAC/D;IACA,OAAO,EAAE;EACX;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeqB,YAAYA,CAACC,IAAI,EAAE;EACvC,IAAI;IACF,IAAI,CAACA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MACrC,MAAM,IAAId,KAAK,CAAC,yCAAyC,CAAC;IAC5D;;IAEA;IACA,MAAMe,SAAS,GAAG;MAChBC,EAAE,EAAEC,MAAM,CAACH,IAAI,CAACE,EAAE,IAAIE,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;MACjCC,IAAI,EAAEH,MAAM,CAACH,IAAI,CAACM,IAAI,IAAI,EAAE,CAAC;MAC7BC,KAAK,EAAEJ,MAAM,CAACH,IAAI,CAACO,KAAK,IAAI,EAAE,CAAC;MAC/BC,QAAQ,EAAEL,MAAM,CAACH,IAAI,CAACQ,QAAQ,IAAI,EAAE;IACtC,CAAC;;IAED;IACAC,IAAI,CAACC,SAAS,CAACT,SAAS,CAAC,CAAC,CAAC;;IAE3B,MAAMnB,EAAE,GAAG,MAAMd,YAAY,CAAC,CAAC;IAC/B,MAAMwB,WAAW,GAAGV,EAAE,CAACU,WAAW,CAAC,CAACzB,WAAW,CAAC,EAAE,WAAW,CAAC;IAC9D,MAAM0B,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC3B,WAAW,CAAC;IAElD,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI;QACF,MAAMwC,UAAU,GAAGlB,KAAK,CAACmB,GAAG,CAACX,SAAS,CAAC,CAAC,CAAC;;QAEzCU,UAAU,CAAC9B,SAAS,GAAG,MAAM;UAC3BJ,OAAO,CAACW,GAAG,CAAC,+BAA+Ba,SAAS,CAACM,KAAK,EAAE,CAAC;UAC7DrC,OAAO,CAAC,IAAI,CAAC;QACf,CAAC;QAEDyC,UAAU,CAACpC,OAAO,GAAIC,KAAK,IAAK;UAC9BC,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEF,KAAK,CAACG,MAAM,CAACD,KAAK,CAAC;UACzEP,MAAM,CAACK,KAAK,CAACG,MAAM,CAACD,KAAK,CAAC;QAC5B,CAAC;MACH,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;QAChEP,MAAM,CAACO,KAAK,CAAC;MACf;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAemC,aAAaA,CAACC,KAAK,EAAE;EACzC,IAAI,CAAClB,KAAK,CAACC,OAAO,CAACiB,KAAK,CAAC,EAAE;IACzB,MAAM,IAAI5B,KAAK,CAAC,wCAAwC,CAAC;EAC3D;EAEA,IAAI;IACF;IACA,KAAK,MAAMc,IAAI,IAAIc,KAAK,EAAE;MACxB,MAAMf,YAAY,CAACC,IAAI,CAAC;IAC1B;IACA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOtB,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;IACzE,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}