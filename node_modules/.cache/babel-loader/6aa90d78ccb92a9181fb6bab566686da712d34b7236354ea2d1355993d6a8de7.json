{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\n// Lista de usuarios predefinidos\nconst USERS = [{\n  id: 1,\n  email: 'superadmin@gmail.com',\n  password: 'SuperAdmin2023',\n  nombre: 'Super Administrador',\n  roles: ['Superadministrador']\n}, {\n  id: 2,\n  email: 'admin@example.com',\n  password: 'Admin2023',\n  nombre: 'Administrador',\n  roles: ['Administrador']\n}, {\n  id: 3,\n  email: 'admin',\n  password: 'admin',\n  nombre: 'SuperAdmin',\n  roles: ['Superadministrador']\n}];\n\n// Usuario actualmente autenticado\nlet currentUser = null;\n\n/**\r\n * Obtiene los usuarios almacenados en IndexedDB (creados desde el panel de administración)\r\n * @returns {Promise<Array>} Lista de usuarios o array vacío si hay error\r\n */\nasync function getStoredUsers() {\n  // Simplificar y devolver directamente los usuarios predefinidos\n  console.log(\"Usando lista de usuarios predefinida\");\n  return USERS;\n}\n\n/**\r\n * Genera un token simple para autenticación\r\n * @param {Object} user - Datos del usuario\r\n * @returns {string} Token generado\r\n */\nfunction generateToken(user) {\n  // En una aplicación real, usaríamos JWT u otra implementación segura\n  // Para este ejemplo, simplemente codificamos algunos datos del usuario\n  const payload = {\n    id: user.id,\n    email: user.email,\n    roles: user.roles,\n    timestamp: new Date().getTime()\n  };\n  return btoa(JSON.stringify(payload));\n}\n\n/**\r\n * Función para iniciar sesión\r\n * @param {string} email - Correo electrónico del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\nasync function login(email, password) {\n  console.log(\"Intentando iniciar sesión como:\", email);\n\n  // Buscar usuario por email\n  const usuario = USERS.find(u => u.email === email);\n  if (!usuario) {\n    console.log(\"Usuario no encontrado\");\n    throw new Error(\"Credenciales incorrectas\");\n  }\n  if (usuario.password !== password) {\n    console.log(\"Contraseña incorrecta\");\n    throw new Error(\"Credenciales incorrectas\");\n  }\n\n  // Usuario autenticado correctamente\n  currentUser = {\n    id: usuario.id,\n    email: usuario.email,\n    nombre: usuario.nombre,\n    roles: usuario.roles,\n    token: \"token-\" + Date.now()\n  };\n\n  // Guardar en localStorage\n  localStorage.setItem('isLoggedIn', 'true');\n  localStorage.setItem('currentUser', JSON.stringify(currentUser));\n  return currentUser;\n}\n\n/**\r\n * Cierra la sesión del usuario actual\r\n */\nfunction logout() {\n  currentUser = null;\n  localStorage.removeItem('isLoggedIn');\n  localStorage.removeItem('currentUser');\n}\n\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\nfunction isAuthenticated() {\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\n    try {\n      currentUser = JSON.parse(localStorage.getItem('currentUser'));\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n    }\n  }\n  return !!currentUser;\n}\n\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\nfunction getCurrentUser() {\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\n    try {\n      currentUser = JSON.parse(localStorage.getItem('currentUser'));\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n    }\n  }\n  return currentUser;\n}\n\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\nfunction hasRole(roleName) {\n  const user = getCurrentUser();\n  if (!user || !user.roles) {\n    return false;\n  }\n  return Array.isArray(user.roles) ? user.roles.includes(roleName) : user.roles === roleName;\n}\nexport { login, logout, isAuthenticated, hasRole, getCurrentUser };\nexport default {\n  login,\n  logout,\n  isAuthenticated,\n  hasRole,\n  getCurrentUser\n};","map":{"version":3,"names":["USERS","id","email","password","nombre","roles","currentUser","getStoredUsers","console","log","generateToken","user","payload","timestamp","Date","getTime","btoa","JSON","stringify","login","usuario","find","u","Error","token","now","localStorage","setItem","logout","removeItem","isAuthenticated","getItem","parse","e","error","getCurrentUser","hasRole","roleName","Array","isArray","includes"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/authService.js"],"sourcesContent":["// Lista de usuarios predefinidos\r\nconst USERS = [\r\n  {\r\n    id: 1,\r\n    email: 'superadmin@gmail.com',\r\n    password: 'SuperAdmin2023',\r\n    nombre: 'Super Administrador',\r\n    roles: ['Superadministrador']\r\n  },\r\n  {\r\n    id: 2,\r\n    email: 'admin@example.com',\r\n    password: 'Admin2023',\r\n    nombre: 'Administrador',\r\n    roles: ['Administrador']\r\n  },\r\n  {\r\n    id: 3,\r\n    email: 'admin',\r\n    password: 'admin',\r\n    nombre: 'SuperAdmin',\r\n    roles: ['Superadministrador']\r\n  }\r\n];\r\n\r\n// Usuario actualmente autenticado\r\nlet currentUser = null;\r\n\r\n/**\r\n * Obtiene los usuarios almacenados en IndexedDB (creados desde el panel de administración)\r\n * @returns {Promise<Array>} Lista de usuarios o array vacío si hay error\r\n */\r\nasync function getStoredUsers() {\r\n  // Simplificar y devolver directamente los usuarios predefinidos\r\n  console.log(\"Usando lista de usuarios predefinida\");\r\n  return USERS;\r\n}\r\n\r\n/**\r\n * Genera un token simple para autenticación\r\n * @param {Object} user - Datos del usuario\r\n * @returns {string} Token generado\r\n */\r\nfunction generateToken(user) {\r\n  // En una aplicación real, usaríamos JWT u otra implementación segura\r\n  // Para este ejemplo, simplemente codificamos algunos datos del usuario\r\n  const payload = {\r\n    id: user.id,\r\n    email: user.email,\r\n    roles: user.roles,\r\n    timestamp: new Date().getTime()\r\n  };\r\n  \r\n  return btoa(JSON.stringify(payload));\r\n}\r\n\r\n/**\r\n * Función para iniciar sesión\r\n * @param {string} email - Correo electrónico del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\r\nasync function login(email, password) {\r\n  console.log(\"Intentando iniciar sesión como:\", email);\r\n  \r\n  // Buscar usuario por email\r\n  const usuario = USERS.find(u => u.email === email);\r\n  \r\n  if (!usuario) {\r\n    console.log(\"Usuario no encontrado\");\r\n    throw new Error(\"Credenciales incorrectas\");\r\n  }\r\n  \r\n  if (usuario.password !== password) {\r\n    console.log(\"Contraseña incorrecta\");\r\n    throw new Error(\"Credenciales incorrectas\");\r\n  }\r\n  \r\n  // Usuario autenticado correctamente\r\n  currentUser = {\r\n    id: usuario.id,\r\n    email: usuario.email,\r\n    nombre: usuario.nombre,\r\n    roles: usuario.roles,\r\n    token: \"token-\" + Date.now()\r\n  };\r\n  \r\n  // Guardar en localStorage\r\n  localStorage.setItem('isLoggedIn', 'true');\r\n  localStorage.setItem('currentUser', JSON.stringify(currentUser));\r\n  \r\n  return currentUser;\r\n}\r\n\r\n/**\r\n * Cierra la sesión del usuario actual\r\n */\r\nfunction logout() {\r\n  currentUser = null;\r\n  localStorage.removeItem('isLoggedIn');\r\n  localStorage.removeItem('currentUser');\r\n}\r\n\r\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\r\nfunction isAuthenticated() {\r\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\r\n    try {\r\n      currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n    }\r\n  }\r\n  \r\n  return !!currentUser;\r\n}\r\n\r\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\r\nfunction getCurrentUser() {\r\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\r\n    try {\r\n      currentUser = JSON.parse(localStorage.getItem('currentUser'));\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n    }\r\n  }\r\n  \r\n  return currentUser;\r\n}\r\n\r\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\r\nfunction hasRole(roleName) {\r\n  const user = getCurrentUser();\r\n  \r\n  if (!user || !user.roles) {\r\n    return false;\r\n  }\r\n  \r\n  return Array.isArray(user.roles) \r\n    ? user.roles.includes(roleName) \r\n    : user.roles === roleName;\r\n}\r\n\r\nexport {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}