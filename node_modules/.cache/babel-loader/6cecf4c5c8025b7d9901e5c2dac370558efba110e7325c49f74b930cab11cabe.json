{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { getSharedMenu } from '../services/menuService';\nimport ReservaForm from '../components/reservas/ReservaForm.vue';\nexport default {\n  name: 'SharedMenuView',\n  components: {\n    ReservaForm\n  },\n  props: {\n    // Añade id como prop si lo necesitas\n    id: {\n      type: String,\n      default: ''\n    }\n  },\n  setup(props) {\n    const route = useRoute();\n    const menuId = computed(() => props.id || route.params.id);\n    const menuData = ref({\n      items: [],\n      businessInfo: {}\n    });\n    const isLoading = ref(true);\n    const error = ref(null);\n    const cartItems = ref([]);\n    const orderRef = ref(null);\n    const isProcessingOrder = ref(false);\n    console.log(\"SharedMenuView montado, ID del menú:\", route.params.id);\n\n    // Sistema de notificaciones toast\n    const toast = ref({\n      visible: false,\n      message: '',\n      type: 'success',\n      // 'success', 'warning', 'error'\n      timeoutId: null\n    });\n\n    // Cargar menú cuando el componente se monte\n    onMounted(() => {\n      loadMenu();\n    });\n\n    // Cargar el menú desde la API\n    async function loadMenu() {\n      try {\n        isLoading.value = true;\n        console.log(\"Cargando menú con ID:\", route.params.id);\n        if (!route.params.id) {\n          error.value = 'ID de menú no especificado';\n          isLoading.value = false;\n          return;\n        }\n\n        // Intenta cargar desde localStorage primero (por si hay un carrito guardado)\n        const savedCart = localStorage.getItem(`cart_${route.params.id}`);\n        if (savedCart) {\n          try {\n            cartItems.value = JSON.parse(savedCart);\n            console.log(\"Carrito recuperado de localStorage:\", cartItems.value);\n          } catch (e) {\n            console.error(\"Error al parsear carrito de localStorage:\", e);\n          }\n        }\n        const data = await getSharedMenu(route.params.id);\n        if (data) {\n          menuData.value = data;\n          console.log(\"Menú cargado con éxito:\", menuData.value);\n\n          // Inicializar disponibilidad para cada ítem\n          if (menuData.value.items) {\n            menuData.value.items.forEach(item => {\n              // Si la disponibilidad es explícitamente 0, mantenerla así\n              // Si es undefined o null, usar 0 en lugar de un valor predeterminado de 10\n              item.availableQuantity = item.availableQuantity !== undefined ? Number(item.availableQuantity) : 0;\n              item.realAvailability = item.availableQuantity;\n            });\n          }\n\n          // Actualizar disponibilidad real considerando el carrito\n          updateAvailabilityInMenu();\n\n          // Mostrar toast al cargar el menú correctamente\n          setTimeout(() => {\n            showToast('Menú cargado correctamente', 'success', 5000);\n          }, 1000);\n        } else {\n          error.value = \"No se encontró el menú solicitado\";\n        }\n      } catch (err) {\n        console.error(\"Error al cargar el menú:\", err);\n        error.value = `Error al cargar el menú: ${err.message || 'Error desconocido'}`;\n      } finally {\n        isLoading.value = false;\n      }\n    }\n\n    // Verificar si hay información de pago\n    const hasPaymentInfo = computed(() => {\n      return menuData.value?.businessInfo?.paymentInfo && (menuData.value.businessInfo.paymentInfo.qrImage || menuData.value.businessInfo.paymentInfo.nequiNumber || menuData.value.businessInfo.paymentInfo.nequiImage);\n    });\n\n    // Contador total de items\n    const totalItems = computed(() => {\n      return cartItems.value.reduce((total, item) => total + item.quantity, 0);\n    });\n\n    // Total del carrito\n    const cartTotal = computed(() => {\n      return cartItems.value.reduce((total, item) => {\n        return total + item.price * item.quantity;\n      }, 0);\n    });\n\n    // Formatear precio\n    function formatPrice(price) {\n      if (isNaN(Number(price))) return '0,00';\n\n      // Convertir a número y formatear con 2 decimales fijos\n      const numero = Number(price).toFixed(2);\n\n      // Separar parte entera y decimal\n      const [parteEntera, parteDecimal] = numero.split('.');\n\n      // Formatear parte entera con puntos como separadores de miles\n      const parteEnteraFormateada = parteEntera.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n\n      // Unir con coma como separador decimal\n      return `${parteEnteraFormateada},${parteDecimal}`;\n    }\n\n    // Agregar al carrito con verificación de disponibilidad\n    async function addToCart(item) {\n      // Verificación directa antes de hacer la comprobación completa\n      if (Number(item.availableQuantity) <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return;\n      }\n      const isAvailable = await checkAvailability(item);\n      if (!isAvailable) return;\n      const existingItem = cartItems.value.find(i => {\n        // Asegurar que ambos items tienen ID y compararlos, o comparar por nombre si no hay ID\n        if (item.id && i.id) {\n          return i.id === item.id;\n        }\n        return i.name === item.name;\n      });\n      if (existingItem) {\n        existingItem.quantity++;\n      } else {\n        cartItems.value.push({\n          id: item.id || Date.now().toString(),\n          name: item.name,\n          price: item.price,\n          quantity: 1,\n          availableQuantity: item.availableQuantity || 0 // Usar 0 como valor por defecto\n        });\n      }\n\n      // Guardar carrito en localStorage\n      saveCartToLocalStorage();\n\n      // Actualizar la disponibilidad en tiempo real\n      updateAvailabilityInMenu();\n\n      // Mostrar notificación de éxito\n      showToast(`${item.name} añadido al carrito`, 'success');\n    }\n\n    // Mostrar notificaciones toast\n    function showToast(message, type = 'success', duration = 5000) {\n      // Aumentar a 5 segundos\n      console.log(`[Toast] Mostrando notificación: ${message} (${type})`);\n\n      // Si ya hay un toast visible, limpiamos su timeout\n      if (toast.value.timeoutId) {\n        clearTimeout(toast.value.timeoutId);\n      }\n\n      // Configurar el nuevo toast\n      toast.value.message = message;\n      toast.value.type = type;\n      toast.value.visible = true;\n\n      // Debug: verificar que el estado del toast cambió\n      console.log(`[Toast] Estado: visible=${toast.value.visible}, message=${toast.value.message}`);\n\n      // Configurar timeout para ocultar después de la duración\n      toast.value.timeoutId = setTimeout(() => {\n        console.log(`[Toast] Ocultando notificación después de ${duration}ms`);\n        toast.value.visible = false;\n      }, duration);\n    }\n\n    // Guardar carrito en localStorage\n    function saveCartToLocalStorage() {\n      try {\n        localStorage.setItem(`cart_${route.params.id}`, JSON.stringify(cartItems.value));\n      } catch (e) {\n        console.error(\"Error al guardar carrito en localStorage:\", e);\n      }\n    }\n\n    // Incrementar cantidad\n    function increaseQuantity(index) {\n      const item = cartItems.value[index];\n\n      // Buscar el ítem en el menú\n      const menuItem = menuData.value.items?.find(i => i.id === item.id);\n      if (menuItem) {\n        // Verificar disponibilidad\n        const availableQuantity = menuItem.availableQuantity || 0;\n        if (item.quantity >= availableQuantity) {\n          showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n          return;\n        }\n      }\n\n      // Incrementar cantidad\n      item.quantity++;\n\n      // Guardar carrito y actualizar disponibilidad\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu();\n    }\n\n    // Reemplazar la función decreaseQuantity (líneas 409-416)\n    function decreaseQuantity(index) {\n      if (cartItems.value[index].quantity > 1) {\n        cartItems.value[index].quantity--;\n        saveCartToLocalStorage();\n        updateAvailabilityInMenu(); // Actualizar disponibilidad\n      } else {\n        removeFromCart(index);\n      }\n    }\n\n    // Reemplazar la función removeFromCart (líneas 419-422)\n    function removeFromCart(index) {\n      cartItems.value.splice(index, 1);\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu(); // Actualizar disponibilidad\n    }\n\n    // Completar pedido con actualización de inventario\n    async function completeOrder() {\n      try {\n        // Validaciones básicas\n        if (cartItems.value.length === 0) {\n          showToast('No hay ítems en el pedido', 'error');\n          return;\n        }\n        if (!customerInfo.value.name || !customerInfo.value.phone) {\n          showToast('Por favor complete su nombre y teléfono', 'error');\n          return;\n        }\n\n        // Indicar que está procesando\n        isProcessingOrder.value = true;\n\n        // Actualizar inventario\n        await updateInventory();\n\n        // Compartir en WhatsApp\n        openWhatsAppShare();\n        showToast('¡Pedido completado! Gracias por tu compra.', 'success');\n\n        // Limpiar carrito y datos del cliente después de completar\n        setTimeout(() => {\n          cartItems.value = [];\n          customerInfo.value = {\n            name: '',\n            phone: '',\n            email: '',\n            address: ''\n          };\n          additionalMessage.value = '';\n          isProcessingOrder.value = false;\n        }, 2000);\n      } catch (error) {\n        console.error('Error al completar el pedido:', error);\n        showToast('Error al procesar el pedido', 'error');\n        isProcessingOrder.value = false;\n      }\n    }\n\n    // Compartir pedido por WhatsApp sin actualizar inventario\n    function shareOrderByWhatsApp() {\n      // Validaciones básicas\n      if (cartItems.value.length === 0) {\n        showToast('No hay ítems en el pedido', 'error');\n        return;\n      }\n      if (!customerInfo.value.name || !customerInfo.value.phone) {\n        showToast('Por favor complete su nombre y teléfono', 'error');\n        return;\n      }\n\n      // Compartir directamente en WhatsApp sin actualizar inventario\n      openWhatsAppShare();\n      showToast('Pedido compartido por WhatsApp', 'success');\n    }\n    function openWhatsAppShare() {\n      // Construir mensaje de pedido para WhatsApp\n      let whatsappMessage = `*Pedido de ${customerInfo.value.name}*\\n\\n`;\n      whatsappMessage += '*Productos:*\\n';\n      cartItems.value.forEach(item => {\n        const subtotal = (item.price * item.quantity).toFixed(2);\n        whatsappMessage += `- ${item.quantity}x ${item.name}: $${formatPrice(item.price)} c/u = $${formatPrice(subtotal)}\\n`;\n      });\n      whatsappMessage += `\\n*Total: $${formatPrice(cartTotal.value)}*\\n\\n`;\n      if (customerInfo.value.phone) {\n        whatsappMessage += `*Teléfono:* ${customerInfo.value.phone}\\n`;\n      }\n      if (customerInfo.value.email) {\n        whatsappMessage += `*Email:* ${customerInfo.value.email}\\n`;\n      }\n      if (customerInfo.value.address) {\n        whatsappMessage += `*Dirección:* ${customerInfo.value.address}\\n`;\n      }\n      if (additionalMessage.value) {\n        whatsappMessage += `\\n*Notas adicionales:*\\n${additionalMessage.value}\\n`;\n      }\n\n      // Añadir método de pago seleccionado\n      whatsappMessage += `\\n*Forma de pago:* ${selectedPaymentMethod.value === 'qr' ? 'Código QR' : selectedPaymentMethod.value === 'nequi' ? 'Nequi' : 'Contra entrega'}\\n`;\n\n      // Formato para URL de WhatsApp\n      const encodedMessage = encodeURIComponent(whatsappMessage);\n      const whatsappUrl = `https://wa.me/?text=${encodedMessage}`;\n\n      // Abrir WhatsApp en una nueva ventana\n      window.open(whatsappUrl, '_blank');\n    }\n\n    // Desplazarse a la sección del pedido\n    function scrollToOrder() {\n      const orderSection = document.querySelector('.order-section');\n      if (orderSection) {\n        orderSection.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n\n    // Verificar disponibilidad de inventario\n    async function checkAvailability(item) {\n      // Obtener la disponibilidad base (valor original del inventario)\n      // Importante: asegurarse que sea un número\n      const baseAvailability = Number(item.availableQuantity) || 0;\n\n      // Verificación directa: si no hay stock, mostrar mensaje de error\n      if (baseAvailability <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return false;\n      }\n\n      // Obtener la cantidad actual en el carrito\n      const cartItem = cartItems.value.find(i => i.id === item.id);\n      const cartQuantity = cartItem ? cartItem.quantity : 0;\n\n      // Calcular disponibilidad real\n      const realAvailability = baseAvailability - cartQuantity;\n\n      // Verificar la disponibilidad considerando lo que ya está en el carrito\n      if (realAvailability <= 0) {\n        showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n        return false;\n      } else if (realAvailability <= 5) {\n        showToast(`¡Solo quedan ${realAvailability} unidades de \"${item.name}\"!`, 'warning');\n      }\n      return true;\n    }\n\n    // Actualizar inventario al completar pedido\n    async function updateInventory() {\n      try {\n        console.log('Actualizando inventario para los siguientes productos:');\n\n        // Usamos Promise.all para ejecutar todas las actualizaciones en paralelo\n        const updatePromises = cartItems.value.map(async item => {\n          if (!item.id) {\n            console.warn(`El producto ${item.name} no tiene ID, no se puede actualizar el inventario`);\n            return;\n          }\n          try {\n            // Obtener la disponibilidad actual\n            const storageService = await import('../services/storageService');\n            const availability = await storageService.checkItemAvailability(item.id);\n\n            // Validar que hay suficiente stock\n            if (availability.quantity < item.quantity) {\n              console.warn(`No hay suficiente stock para ${item.name}: disponible=${availability.quantity}, solicitado=${item.quantity}`);\n              return false;\n            }\n\n            // Calcular nueva cantidad\n            const newQuantity = Math.max(0, availability.quantity - item.quantity);\n\n            // Actualizar en la base de datos\n            await storageService.updateItemAvailability(item.id, newQuantity);\n            console.log(`- ${item.name}: ${item.quantity} unidades. Nuevo stock: ${newQuantity}`);\n\n            // Crear registro para el historial\n            const historyRecord = {\n              date: new Date().toISOString(),\n              type: 'decrease',\n              change: item.quantity,\n              previousQuantity: availability.quantity,\n              newQuantity: newQuantity,\n              reason: 'Pedido compartido por WhatsApp',\n              userId: null,\n              userName: 'Sistema'\n            };\n\n            // Añadir al historial (usando adminService para actualizaciones completas)\n            const adminService = await import('../services/adminService');\n            await adminService.updateItemStock(item.id, newQuantity, historyRecord);\n            return true;\n          } catch (error) {\n            console.error(`Error al actualizar el producto ${item.name}:`, error);\n            return false;\n          }\n        });\n\n        // Esperar a que todas las actualizaciones se completen\n        const results = await Promise.all(updatePromises);\n\n        // Verificar si todas las actualizaciones fueron exitosas\n        const allSuccessful = results.every(result => result !== false);\n\n        // Mostrar mensaje apropiado\n        if (allSuccessful) {\n          showToast('Inventario actualizado correctamente', 'success');\n        } else {\n          showToast('Algunos productos no pudieron ser actualizados', 'warning');\n        }\n        return allSuccessful;\n      } catch (error) {\n        console.error('Error al actualizar inventario:', error);\n        return false; // Error\n      }\n    }\n\n    // Añadir después de la función checkAvailability (línea 585)\n    // Función para actualizar la disponibilidad en tiempo real\n    function updateAvailabilityInMenu() {\n      if (!menuData.value?.items) return;\n\n      // Actualizar la disponibilidad de todos los ítems\n      menuData.value.items.forEach(menuItem => {\n        // Encontrar si este ítem está en el carrito\n        const cartItem = cartItems.value.find(i => i.id === menuItem.id);\n        const cartQuantity = cartItem ? cartItem.quantity : 0;\n\n        // Asegurarse de que availableQuantity sea un número exacto, no undefined o null\n        const baseAvailability = Number(menuItem.availableQuantity) || 0;\n\n        // Calcular disponibilidad real\n        menuItem.realAvailability = baseAvailability - cartQuantity;\n        console.log(`Disponibilidad actualizada para ${menuItem.name}: ${menuItem.realAvailability} unidades (base: ${baseAvailability}, carrito: ${cartQuantity})`);\n      });\n    }\n\n    // Datos del cliente\n    const customerInfo = ref({\n      name: '',\n      phone: '',\n      email: '',\n      address: ''\n    });\n\n    // Método de pago seleccionado\n    const selectedPaymentMethod = ref('cash'); // Por defecto contra entrega\n\n    // Mensaje adicional\n    const additionalMessage = ref('');\n\n    // Filtrar items regulares y especiales\n    const regularItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      const filtered = menuData.value.items.filter(item => !item.isSpecial);\n      console.log('Platos regulares:', filtered.length, filtered.map(i => i.name));\n      return filtered;\n    });\n    const specialItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      const filtered = menuData.value.items.filter(item => item.isSpecial === true);\n      console.log('Platos especiales:', filtered.length, filtered.map(i => i.name));\n      return filtered;\n    });\n    return {\n      menuId,\n      menuData,\n      isLoading,\n      error,\n      cartItems,\n      cartTotal,\n      totalItems,\n      hasPaymentInfo,\n      regularItems,\n      specialItems,\n      formatPrice,\n      addToCart,\n      increaseQuantity,\n      decreaseQuantity,\n      removeFromCart,\n      completeOrder,\n      scrollToOrder,\n      shareOrderByWhatsApp,\n      orderRef,\n      customerInfo,\n      selectedPaymentMethod,\n      additionalMessage,\n      toast\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useRoute","getSharedMenu","ReservaForm","name","components","props","id","type","String","default","setup","route","menuId","params","menuData","items","businessInfo","isLoading","error","cartItems","orderRef","isProcessingOrder","console","log","toast","visible","message","timeoutId","loadMenu","value","savedCart","localStorage","getItem","JSON","parse","e","data","forEach","item","availableQuantity","undefined","Number","realAvailability","updateAvailabilityInMenu","setTimeout","showToast","err","hasPaymentInfo","paymentInfo","qrImage","nequiNumber","nequiImage","totalItems","reduce","total","quantity","cartTotal","price","formatPrice","isNaN","numero","toFixed","parteEntera","parteDecimal","split","parteEnteraFormateada","replace","addToCart","isAvailable","checkAvailability","existingItem","find","i","push","Date","now","toString","saveCartToLocalStorage","duration","clearTimeout","setItem","stringify","increaseQuantity","index","menuItem","decreaseQuantity","removeFromCart","splice","completeOrder","length","customerInfo","phone","updateInventory","openWhatsAppShare","email","address","additionalMessage","shareOrderByWhatsApp","whatsappMessage","subtotal","selectedPaymentMethod","encodedMessage","encodeURIComponent","whatsappUrl","window","open","scrollToOrder","orderSection","document","querySelector","scrollIntoView","behavior","baseAvailability","cartItem","cartQuantity","updatePromises","map","warn","storageService","availability","checkItemAvailability","newQuantity","Math","max","updateItemAvailability","historyRecord","date","toISOString","change","previousQuantity","reason","userId","userName","adminService","updateItemStock","results","Promise","all","allSuccessful","every","result","regularItems","filtered","filter","isSpecial","specialItems"],"sources":["F:\\Driver google\\VUE.JS-2\\temp\\websap\\src\\views\\SharedMenuView.vue"],"sourcesContent":["<template>\n  <div class=\"shared-menu-container\" :id=\"menuId\">\n    <div v-if=\"isLoading\" class=\"loading\">\n      <div class=\"spinner\"></div>\n      <p>Cargando menú...</p>\n    </div>\n    \n    <div v-else-if=\"error\" class=\"error\">\n      <p>{{ error }}</p>\n    </div>\n    \n    <div v-else class=\"menu-content\">\n      <!-- Información del negocio -->\n      <div v-if=\"menuData.businessInfo\" class=\"business-info\">\n        <img v-if=\"menuData.businessInfo.logo\" :src=\"menuData.businessInfo.logo\" alt=\"Logo\" class=\"business-logo\">\n        <h1>{{ menuData.businessInfo.name }}</h1>\n        <p class=\"description\">{{ menuData.businessInfo.description }}</p>\n        <div class=\"contact-info\" v-if=\"menuData.businessInfo.contact || menuData.businessInfo.address\">\n          <p v-if=\"menuData.businessInfo.contact\"><strong>Contacto:</strong> {{ menuData.businessInfo.contact }}</p>\n          <p v-if=\"menuData.businessInfo.address\"><strong>Dirección:</strong> {{ menuData.businessInfo.address }}</p>\n        </div>\n      </div>\n      \n      <!-- Lista de productos -->\n      <div>\n        <!-- Platos regulares -->\n        <div class=\"menu-list\">\n          <h2>Nuestro Menú</h2>\n          <div class=\"menu-items\">\n            <div v-for=\"(item, index) in regularItems\" :key=\"index\" class=\"menu-item\">\n              <div class=\"item-image-container\">\n                <img v-if=\"item.image\" :src=\"item.image\" alt=\"Imagen del producto\" class=\"item-image\">\n                <div v-else class=\"no-image\">Sin imagen</div>\n              </div>\n              <div class=\"item-details\">\n                <h3>{{ item.name }}</h3>\n                <p class=\"item-description\">{{ item.description }}</p>\n                <p class=\"item-price\">${{ formatPrice(item.price) }}</p>\n                <p class=\"includes-drink\" v-if=\"item.includesDrink\">Incluye refresco</p>\n                <button \n                  @click=\"addToCart(item)\" \n                  class=\"add-to-cart-btn\"\n                  :disabled=\"!item.realAvailability || item.realAvailability <= 0\"\n                  :class=\"{ 'disabled-btn': !item.realAvailability || item.realAvailability <= 0 }\"\n                >\n                  <span v-if=\"!item.realAvailability || item.realAvailability <= 0\" class=\"btn-icon\">❌</span>\n                  <span v-else class=\"btn-icon\">🛒</span>\n                  {{ !item.realAvailability || item.realAvailability <= 0 ? 'No disponible' : 'Añadir al pedido' }}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Platos especiales (solo se muestra si hay platos especiales) -->\n        <div v-if=\"specialItems.length > 0\" class=\"menu-list special-menu-list\">\n          <h2>Platos Especiales</h2>\n          <div class=\"menu-items\">\n            <div v-for=\"(item, index) in specialItems\" :key=\"index\" class=\"menu-item special-item\">\n              <div class=\"item-image-container\">\n                <img v-if=\"item.image\" :src=\"item.image\" alt=\"Imagen del producto\" class=\"item-image\">\n                <div v-else class=\"no-image\">Sin imagen</div>\n              </div>\n              <div class=\"item-details\">\n                <h3>{{ item.name }}</h3>\n                <p class=\"item-description\">{{ item.description }}</p>\n                <p class=\"item-price\">${{ formatPrice(item.price) }}</p>\n                <p class=\"includes-drink\" v-if=\"item.includesDrink\">Incluye refresco</p>\n                <button \n                  @click=\"addToCart(item)\" \n                  class=\"add-to-cart-btn special-button\"\n                  :disabled=\"!item.realAvailability || item.realAvailability <= 0\"\n                  :class=\"{ 'disabled-btn': !item.realAvailability || item.realAvailability <= 0 }\"\n                >\n                  <span v-if=\"!item.realAvailability || item.realAvailability <= 0\" class=\"btn-icon\">❌</span>\n                  <span v-else class=\"btn-icon\">🛒</span>\n                  {{ !item.realAvailability || item.realAvailability <= 0 ? 'No disponible' : 'Añadir al pedido' }}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Sección de \"Tu Pedido\" - Siempre visible aunque vacía -->\n      <div class=\"order-section\" ref=\"orderSection\">\n        <h2>Tu Pedido</h2>\n        \n        <div v-if=\"cartItems.length === 0\" class=\"empty-cart\">\n          <p>Tu pedido está vacío</p>\n          <p class=\"empty-cart-message\">Añade productos del menú para comenzar tu pedido</p>\n        </div>\n        \n        <div v-else class=\"cart-items\">\n          <div v-for=\"(item, index) in cartItems\" :key=\"index\" class=\"cart-item\">\n            <div class=\"cart-item-details\">\n              <h3>{{ item.name }}</h3>\n              <p>${{ formatPrice(item.price) }} x {{ item.quantity }}</p>\n            </div>\n            <div class=\"cart-item-actions\">\n              <button @click=\"decreaseQuantity(index)\" class=\"quantity-btn\">-</button>\n              <span class=\"quantity-display\">{{ item.quantity }}</span>\n              <button @click=\"increaseQuantity(index)\" class=\"quantity-btn\">+</button>\n              <button @click=\"removeFromCart(index)\" class=\"remove-btn\">\n                <span class=\"btn-icon\">🗑️</span>\n              </button>\n            </div>\n          </div>\n          \n          <div class=\"cart-total\">\n            <h3>Total: ${{ formatPrice(cartTotal) }}</h3>\n            \n            <!-- Formulario de datos del cliente -->\n            <div class=\"customer-form\">\n              <h4>Datos del Cliente</h4>\n              <div class=\"form-row\">\n                <input type=\"text\" v-model=\"customerInfo.name\" placeholder=\"Nombres completos\" class=\"form-input\">\n              </div>\n              <div class=\"form-row\">\n                <input type=\"tel\" v-model=\"customerInfo.phone\" placeholder=\"Teléfono\" class=\"form-input\">\n              </div>\n              <div class=\"form-row\">\n                <input type=\"email\" v-model=\"customerInfo.email\" placeholder=\"Correo electrónico\" class=\"form-input\">\n              </div>\n              <div class=\"form-row\">\n                <input type=\"text\" v-model=\"customerInfo.address\" placeholder=\"Dirección de entrega\" class=\"form-input\">\n              </div>\n              \n              <!-- Lista horizontal de métodos de pago -->\n              <div class=\"payment-methods-selection\">\n                <h4>Forma de Pago</h4>\n                <div class=\"payment-options\">\n                  <label class=\"payment-option\">\n                    <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"qr\" name=\"paymentMethod\">\n                    <span class=\"payment-option-text\">QR</span>\n                  </label>\n                  <label class=\"payment-option\">\n                    <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"nequi\" name=\"paymentMethod\">\n                    <span class=\"payment-option-text\">Nequi</span>\n                  </label>\n                  <label class=\"payment-option\">\n                    <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"cash\" name=\"paymentMethod\">\n                    <span class=\"payment-option-text\">Contra entrega</span>\n                  </label>\n                </div>\n              </div>\n              \n              <!-- Campo de mensaje adicional -->\n              <div class=\"form-row\">\n                <textarea v-model=\"additionalMessage\" placeholder=\"Mensaje o instrucciones adicionales\" class=\"form-textarea\"></textarea>\n              </div>\n            </div>\n            \n            <div class=\"order-actions\">\n              <button @click=\"completeOrder\" class=\"complete-order-btn\">\n                <span class=\"btn-icon\">✓</span> Completar Pedido\n              </button>\n              <button @click=\"shareOrderByWhatsApp\" class=\"whatsapp-order-btn\">\n                <span class=\"btn-icon\">📱</span> Enviar por WhatsApp\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Botón flotante para ver pedido (visible cuando hay items y se hace scroll) -->\n      <div v-if=\"cartItems.length > 0\" class=\"floating-cart-button\" @click=\"scrollToOrder\">\n        <span class=\"cart-items-count\">{{ totalItems }}</span>\n        <span>Ver Pedido</span>\n      </div>\n      \n      <!-- Nueva sección: Forma de Pago -->\n      <div v-if=\"hasPaymentInfo\" class=\"payment-section\">\n        <h2>Forma de Pago</h2>\n        <div class=\"payment-methods\">\n          <div v-if=\"menuData.businessInfo?.paymentInfo?.qrImage\" class=\"payment-method\">\n            <h3>{{ menuData.businessInfo.paymentInfo.qrTitle || 'Código QR de Pago' }}</h3>\n            <img \n              :src=\"menuData.businessInfo.paymentInfo.qrImage\" \n              alt=\"QR de Pago\" \n              class=\"payment-image\"\n            >\n          </div>\n          \n          <div v-if=\"menuData.businessInfo?.paymentInfo?.nequiNumber || menuData.businessInfo?.paymentInfo?.nequiImage\" class=\"payment-method\">\n            <h3>Pago con Nequi</h3>\n            <img \n              v-if=\"menuData.businessInfo.paymentInfo.nequiImage\" \n              :src=\"menuData.businessInfo.paymentInfo.nequiImage\" \n              alt=\"Nequi\" \n              class=\"payment-image\"\n            >\n            <p v-if=\"menuData.businessInfo.paymentInfo.nequiNumber\" class=\"payment-detail\">\n              <strong>Número:</strong> {{ menuData.businessInfo.paymentInfo.nequiNumber }}\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Sistema de notificaciones toast -->\n      <div v-if=\"toast.visible\" \n           class=\"toast-notification\" \n           :class=\"toast.type\">\n        {{ toast.message }}\n      </div>\n      \n      <!-- Añadir el componente ReservaForm DENTRO de menu-content -->\n      <div class=\"reservas-container my-5\">\n        <ReservaForm />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { getSharedMenu } from '../services/menuService';\nimport ReservaForm from '../components/reservas/ReservaForm.vue';\n\nexport default {\n  name: 'SharedMenuView',\n  components: {\n    ReservaForm,\n  },\n  props: {\n    // Añade id como prop si lo necesitas\n    id: {\n      type: String,\n      default: ''\n    }\n  },\n  setup(props) {\n    const route = useRoute();\n    const menuId = computed(() => props.id || route.params.id);\n    const menuData = ref({ items: [], businessInfo: {} });\n    const isLoading = ref(true);\n    const error = ref(null);\n    const cartItems = ref([]);\n    const orderRef = ref(null);\n    const isProcessingOrder = ref(false);\n    \n    console.log(\"SharedMenuView montado, ID del menú:\", route.params.id);\n\n    // Sistema de notificaciones toast\n    const toast = ref({\n      visible: false,\n      message: '',\n      type: 'success', // 'success', 'warning', 'error'\n      timeoutId: null\n    });\n\n    // Cargar menú cuando el componente se monte\n    onMounted(() => {\n      loadMenu();\n    });\n\n    // Cargar el menú desde la API\n    async function loadMenu() {\n      try {\n        isLoading.value = true;\n        console.log(\"Cargando menú con ID:\", route.params.id);\n        \n        if (!route.params.id) {\n          error.value = 'ID de menú no especificado';\n          isLoading.value = false;\n          return;\n        }\n        \n        // Intenta cargar desde localStorage primero (por si hay un carrito guardado)\n        const savedCart = localStorage.getItem(`cart_${route.params.id}`);\n        if (savedCart) {\n          try {\n            cartItems.value = JSON.parse(savedCart);\n            console.log(\"Carrito recuperado de localStorage:\", cartItems.value);\n          } catch (e) {\n            console.error(\"Error al parsear carrito de localStorage:\", e);\n          }\n        }\n        \n        const data = await getSharedMenu(route.params.id);\n        \n        if (data) {\n          menuData.value = data;\n          console.log(\"Menú cargado con éxito:\", menuData.value);\n          \n          // Inicializar disponibilidad para cada ítem\n          if (menuData.value.items) {\n            menuData.value.items.forEach(item => {\n              // Si la disponibilidad es explícitamente 0, mantenerla así\n              // Si es undefined o null, usar 0 en lugar de un valor predeterminado de 10\n              item.availableQuantity = item.availableQuantity !== undefined ? \n                Number(item.availableQuantity) : 0;\n              item.realAvailability = item.availableQuantity;\n            });\n          }\n          \n          // Actualizar disponibilidad real considerando el carrito\n          updateAvailabilityInMenu();\n          \n          // Mostrar toast al cargar el menú correctamente\n          setTimeout(() => {\n            showToast('Menú cargado correctamente', 'success', 5000);\n          }, 1000);\n        } else {\n          error.value = \"No se encontró el menú solicitado\";\n        }\n      } catch (err) {\n        console.error(\"Error al cargar el menú:\", err);\n        error.value = `Error al cargar el menú: ${err.message || 'Error desconocido'}`;\n      } finally {\n        isLoading.value = false;\n      }\n    }\n\n    // Verificar si hay información de pago\n    const hasPaymentInfo = computed(() => {\n      return menuData.value?.businessInfo?.paymentInfo && (\n        menuData.value.businessInfo.paymentInfo.qrImage ||\n        menuData.value.businessInfo.paymentInfo.nequiNumber ||\n        menuData.value.businessInfo.paymentInfo.nequiImage\n      );\n    });\n    \n    // Contador total de items\n    const totalItems = computed(() => {\n      return cartItems.value.reduce((total, item) => total + item.quantity, 0);\n    });\n\n    // Total del carrito\n    const cartTotal = computed(() => {\n      return cartItems.value.reduce((total, item) => {\n        return total + (item.price * item.quantity);\n      }, 0);\n    });\n\n    // Formatear precio\n    function formatPrice(price) {\n      if (isNaN(Number(price))) return '0,00';\n      \n      // Convertir a número y formatear con 2 decimales fijos\n      const numero = Number(price).toFixed(2);\n      \n      // Separar parte entera y decimal\n      const [parteEntera, parteDecimal] = numero.split('.');\n      \n      // Formatear parte entera con puntos como separadores de miles\n      const parteEnteraFormateada = parteEntera.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n      \n      // Unir con coma como separador decimal\n      return `${parteEnteraFormateada},${parteDecimal}`;\n    }\n\n    // Agregar al carrito con verificación de disponibilidad\n    async function addToCart(item) {\n      // Verificación directa antes de hacer la comprobación completa\n      if (Number(item.availableQuantity) <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return;\n      }\n      \n      const isAvailable = await checkAvailability(item);\n      if (!isAvailable) return;\n      \n      const existingItem = cartItems.value.find(i => {\n        // Asegurar que ambos items tienen ID y compararlos, o comparar por nombre si no hay ID\n        if (item.id && i.id) {\n          return i.id === item.id;\n        }\n        return i.name === item.name;\n      });\n      \n      if (existingItem) {\n        existingItem.quantity++;\n      } else {\n        cartItems.value.push({\n          id: item.id || Date.now().toString(),\n          name: item.name,\n          price: item.price,\n          quantity: 1,\n          availableQuantity: item.availableQuantity || 0 // Usar 0 como valor por defecto\n        });\n      }\n      \n      // Guardar carrito en localStorage\n      saveCartToLocalStorage();\n      \n      // Actualizar la disponibilidad en tiempo real\n      updateAvailabilityInMenu();\n      \n      // Mostrar notificación de éxito\n      showToast(`${item.name} añadido al carrito`, 'success');\n    }\n    \n    // Mostrar notificaciones toast\n    function showToast(message, type = 'success', duration = 5000) { // Aumentar a 5 segundos\n      console.log(`[Toast] Mostrando notificación: ${message} (${type})`);\n      \n      // Si ya hay un toast visible, limpiamos su timeout\n      if (toast.value.timeoutId) {\n        clearTimeout(toast.value.timeoutId);\n      }\n      \n      // Configurar el nuevo toast\n      toast.value.message = message;\n      toast.value.type = type;\n      toast.value.visible = true;\n      \n      // Debug: verificar que el estado del toast cambió\n      console.log(`[Toast] Estado: visible=${toast.value.visible}, message=${toast.value.message}`);\n      \n      // Configurar timeout para ocultar después de la duración\n      toast.value.timeoutId = setTimeout(() => {\n        console.log(`[Toast] Ocultando notificación después de ${duration}ms`);\n        toast.value.visible = false;\n      }, duration);\n    }\n\n    // Guardar carrito en localStorage\n    function saveCartToLocalStorage() {\n      try {\n        localStorage.setItem(`cart_${route.params.id}`, JSON.stringify(cartItems.value));\n      } catch (e) {\n        console.error(\"Error al guardar carrito en localStorage:\", e);\n      }\n    }\n\n    // Incrementar cantidad\n    function increaseQuantity(index) {\n      const item = cartItems.value[index];\n      \n      // Buscar el ítem en el menú\n      const menuItem = menuData.value.items?.find(i => i.id === item.id);\n      if (menuItem) {\n        // Verificar disponibilidad\n        const availableQuantity = menuItem.availableQuantity || 0;\n        if (item.quantity >= availableQuantity) {\n          showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n          return;\n        }\n      }\n      \n      // Incrementar cantidad\n      item.quantity++;\n      \n      // Guardar carrito y actualizar disponibilidad\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu();\n    }\n\n    // Reemplazar la función decreaseQuantity (líneas 409-416)\n    function decreaseQuantity(index) {\n      if (cartItems.value[index].quantity > 1) {\n        cartItems.value[index].quantity--;\n        saveCartToLocalStorage();\n        updateAvailabilityInMenu(); // Actualizar disponibilidad\n      } else {\n        removeFromCart(index);\n      }\n    }\n\n    // Reemplazar la función removeFromCart (líneas 419-422)\n    function removeFromCart(index) {\n      cartItems.value.splice(index, 1);\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu(); // Actualizar disponibilidad\n    }\n    \n    // Completar pedido con actualización de inventario\n    async function completeOrder() {\n      try {\n        // Validaciones básicas\n        if (cartItems.value.length === 0) {\n          showToast('No hay ítems en el pedido', 'error');\n          return;\n        }\n        \n      if (!customerInfo.value.name || !customerInfo.value.phone) {\n          showToast('Por favor complete su nombre y teléfono', 'error');\n        return;\n      }\n      \n        // Indicar que está procesando\n      isProcessingOrder.value = true;\n      \n        // Actualizar inventario\n        await updateInventory();\n        \n        // Compartir en WhatsApp\n        openWhatsAppShare();\n        \n        showToast('¡Pedido completado! Gracias por tu compra.', 'success');\n        \n        // Limpiar carrito y datos del cliente después de completar\n        setTimeout(() => {\n        cartItems.value = [];\n        customerInfo.value = {\n          name: '',\n          phone: '',\n          email: '',\n          address: ''\n        };\n        additionalMessage.value = '';\n          isProcessingOrder.value = false;\n        }, 2000);\n      } catch (error) {\n        console.error('Error al completar el pedido:', error);\n        showToast('Error al procesar el pedido', 'error');\n        isProcessingOrder.value = false;\n      }\n    }\n    \n    // Compartir pedido por WhatsApp sin actualizar inventario\n    function shareOrderByWhatsApp() {\n      // Validaciones básicas\n      if (cartItems.value.length === 0) {\n        showToast('No hay ítems en el pedido', 'error');\n        return;\n      }\n      \n        if (!customerInfo.value.name || !customerInfo.value.phone) {\n        showToast('Por favor complete su nombre y teléfono', 'error');\n          return;\n        }\n        \n      // Compartir directamente en WhatsApp sin actualizar inventario\n      openWhatsAppShare();\n      \n      showToast('Pedido compartido por WhatsApp', 'success');\n    }\n\n    function openWhatsAppShare() {\n      // Construir mensaje de pedido para WhatsApp\n      let whatsappMessage = `*Pedido de ${customerInfo.value.name}*\\n\\n`;\n      whatsappMessage += '*Productos:*\\n';\n      \n      cartItems.value.forEach(item => {\n        const subtotal = (item.price * item.quantity).toFixed(2);\n        whatsappMessage += `- ${item.quantity}x ${item.name}: $${formatPrice(item.price)} c/u = $${formatPrice(subtotal)}\\n`;\n      });\n      \n      whatsappMessage += `\\n*Total: $${formatPrice(cartTotal.value)}*\\n\\n`;\n      \n      if (customerInfo.value.phone) {\n        whatsappMessage += `*Teléfono:* ${customerInfo.value.phone}\\n`;\n      }\n      \n      if (customerInfo.value.email) {\n        whatsappMessage += `*Email:* ${customerInfo.value.email}\\n`;\n      }\n      \n      if (customerInfo.value.address) {\n        whatsappMessage += `*Dirección:* ${customerInfo.value.address}\\n`;\n      }\n      \n      if (additionalMessage.value) {\n        whatsappMessage += `\\n*Notas adicionales:*\\n${additionalMessage.value}\\n`;\n      }\n      \n      // Añadir método de pago seleccionado\n      whatsappMessage += `\\n*Forma de pago:* ${selectedPaymentMethod.value === 'qr' ? 'Código QR' : \n                           (selectedPaymentMethod.value === 'nequi' ? 'Nequi' : 'Contra entrega')}\\n`;\n      \n      // Formato para URL de WhatsApp\n      const encodedMessage = encodeURIComponent(whatsappMessage);\n      const whatsappUrl = `https://wa.me/?text=${encodedMessage}`;\n      \n      // Abrir WhatsApp en una nueva ventana\n      window.open(whatsappUrl, '_blank');\n    }\n\n    // Desplazarse a la sección del pedido\n    function scrollToOrder() {\n      const orderSection = document.querySelector('.order-section');\n      if (orderSection) {\n        orderSection.scrollIntoView({ behavior: 'smooth' });\n      }\n    }\n\n    // Verificar disponibilidad de inventario\n    async function checkAvailability(item) {\n      // Obtener la disponibilidad base (valor original del inventario)\n      // Importante: asegurarse que sea un número\n      const baseAvailability = Number(item.availableQuantity) || 0;\n      \n      // Verificación directa: si no hay stock, mostrar mensaje de error\n      if (baseAvailability <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return false;\n      }\n      \n      // Obtener la cantidad actual en el carrito\n      const cartItem = cartItems.value.find(i => i.id === item.id);\n      const cartQuantity = cartItem ? cartItem.quantity : 0;\n      \n      // Calcular disponibilidad real\n      const realAvailability = baseAvailability - cartQuantity;\n      \n      // Verificar la disponibilidad considerando lo que ya está en el carrito\n      if (realAvailability <= 0) {\n        showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n        return false;\n      } else if (realAvailability <= 5) {\n        showToast(`¡Solo quedan ${realAvailability} unidades de \"${item.name}\"!`, 'warning');\n      }\n      \n      return true;\n    }\n\n    // Actualizar inventario al completar pedido\n    async function updateInventory() {\n      try {\n        console.log('Actualizando inventario para los siguientes productos:');\n        \n        // Usamos Promise.all para ejecutar todas las actualizaciones en paralelo\n        const updatePromises = cartItems.value.map(async (item) => {\n          if (!item.id) {\n            console.warn(`El producto ${item.name} no tiene ID, no se puede actualizar el inventario`);\n            return;\n          }\n          \n          try {\n            // Obtener la disponibilidad actual\n            const storageService = await import('../services/storageService');\n            const availability = await storageService.checkItemAvailability(item.id);\n            \n            // Validar que hay suficiente stock\n            if (availability.quantity < item.quantity) {\n              console.warn(`No hay suficiente stock para ${item.name}: disponible=${availability.quantity}, solicitado=${item.quantity}`);\n              return false;\n            }\n            \n            // Calcular nueva cantidad\n            const newQuantity = Math.max(0, availability.quantity - item.quantity);\n            \n            // Actualizar en la base de datos\n            await storageService.updateItemAvailability(item.id, newQuantity);\n            \n            console.log(`- ${item.name}: ${item.quantity} unidades. Nuevo stock: ${newQuantity}`);\n            \n            // Crear registro para el historial\n            const historyRecord = {\n              date: new Date().toISOString(),\n              type: 'decrease',\n              change: item.quantity,\n              previousQuantity: availability.quantity,\n              newQuantity: newQuantity,\n              reason: 'Pedido compartido por WhatsApp',\n              userId: null,\n              userName: 'Sistema'\n            };\n            \n            // Añadir al historial (usando adminService para actualizaciones completas)\n            const adminService = await import('../services/adminService');\n            await adminService.updateItemStock(item.id, newQuantity, historyRecord);\n            \n            return true;\n          } catch (error) {\n            console.error(`Error al actualizar el producto ${item.name}:`, error);\n            return false;\n          }\n        });\n        \n        // Esperar a que todas las actualizaciones se completen\n        const results = await Promise.all(updatePromises);\n        \n        // Verificar si todas las actualizaciones fueron exitosas\n        const allSuccessful = results.every(result => result !== false);\n        \n        // Mostrar mensaje apropiado\n        if (allSuccessful) {\n          showToast('Inventario actualizado correctamente', 'success');\n        } else {\n          showToast('Algunos productos no pudieron ser actualizados', 'warning');\n        }\n        \n        return allSuccessful;\n      } catch (error) {\n        console.error('Error al actualizar inventario:', error);\n        return false; // Error\n      }\n    }\n\n    // Añadir después de la función checkAvailability (línea 585)\n    // Función para actualizar la disponibilidad en tiempo real\n    function updateAvailabilityInMenu() {\n      if (!menuData.value?.items) return;\n      \n      // Actualizar la disponibilidad de todos los ítems\n      menuData.value.items.forEach(menuItem => {\n        // Encontrar si este ítem está en el carrito\n        const cartItem = cartItems.value.find(i => i.id === menuItem.id);\n        const cartQuantity = cartItem ? cartItem.quantity : 0;\n        \n        // Asegurarse de que availableQuantity sea un número exacto, no undefined o null\n        const baseAvailability = Number(menuItem.availableQuantity) || 0;\n        \n        // Calcular disponibilidad real\n        menuItem.realAvailability = baseAvailability - cartQuantity;\n        \n        console.log(`Disponibilidad actualizada para ${menuItem.name}: ${menuItem.realAvailability} unidades (base: ${baseAvailability}, carrito: ${cartQuantity})`);\n      });\n    }\n\n    // Datos del cliente\n    const customerInfo = ref({\n      name: '',\n      phone: '',\n      email: '',\n      address: ''\n    });\n\n    // Método de pago seleccionado\n    const selectedPaymentMethod = ref('cash'); // Por defecto contra entrega\n\n    // Mensaje adicional\n    const additionalMessage = ref('');\n\n    // Filtrar items regulares y especiales\n    const regularItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      const filtered = menuData.value.items.filter(item => !item.isSpecial);\n      console.log('Platos regulares:', filtered.length, filtered.map(i => i.name));\n      return filtered;\n    });\n\n    const specialItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      const filtered = menuData.value.items.filter(item => item.isSpecial === true);\n      console.log('Platos especiales:', filtered.length, filtered.map(i => i.name));\n      return filtered;\n    });\n\n    return {\n      menuId,\n      menuData,\n      isLoading,\n      error,\n      cartItems,\n      cartTotal,\n      totalItems,\n      hasPaymentInfo,\n      regularItems,\n      specialItems,\n      formatPrice,\n      addToCart,\n      increaseQuantity,\n      decreaseQuantity,\n      removeFromCart,\n      completeOrder,\n      scrollToOrder,\n      shareOrderByWhatsApp,\n      orderRef,\n      customerInfo,\n      selectedPaymentMethod,\n      additionalMessage,\n      toast\n    };\n  }\n};\n</script>\n\n<style scoped>\n.shared-menu-container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: 'Arial', sans-serif;\n}\n\n.loading, .error {\n  text-align: center;\n  padding: 50px;\n  font-size: 18px;\n}\n\n.error {\n  color: #d9534f;\n}\n\n.business-info {\n  text-align: center;\n  margin-bottom: 40px;\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n.business-logo {\n  max-width: 100%;\n  max-height: 150px;\n  object-fit: contain;\n  margin-bottom: 15px;\n}\n\n.business-info h1 {\n  color: #343a40;\n  margin-bottom: 10px;\n}\n\n.description {\n  font-style: italic;\n  color: #6c757d;\n  margin-bottom: 15px;\n}\n\n.contact-info {\n  font-size: 14px;\n  color: #495057;\n}\n\n.menu-list {\n  margin-bottom: 40px;\n}\n\n.menu-list h2 {\n  color: #28a745;\n  font-size: 24px;\n  text-align: center;\n  margin-bottom: 20px;\n  padding-bottom: 10px;\n  border-bottom: 2px solid #28a745;\n}\n\n.menu-items {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n}\n\n.menu-item {\n  background-color: white;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.menu-item:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n}\n\n.item-image-container {\n  width: 100%;\n  height: 200px;\n  overflow: hidden;\n}\n\n.item-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.no-image {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #f8f9fa;\n  color: #6c757d;\n  font-style: italic;\n}\n\n.item-details {\n  padding: 15px;\n}\n\n.item-details h3 {\n  margin-top: 0;\n  color: #343a40;\n  font-size: 18px;\n  margin-bottom: 10px;\n}\n\n.item-description {\n  color: #6c757d;\n  font-size: 14px;\n  margin-bottom: 10px;\n}\n\n.item-price {\n  font-size: 16px;\n  font-weight: bold;\n  color: #28a745;\n  margin-bottom: 10px;\n}\n\n.includes-drink {\n  font-size: 14px;\n  color: #6c757d;\n  font-style: italic;\n  margin-bottom: 10px;\n}\n\n.add-to-cart-btn {\n  width: 100%;\n  padding: 8px 15px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n  font-weight: bold;\n}\n\n.add-to-cart-btn:hover {\n  background-color: #218838;\n}\n\n/* Estilos mejorados para la sección de \"Tu Pedido\" */\n.order-section {\n  margin: 30px auto;\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  max-width: 800px;\n  border: 2px solid #28a745;\n  position: relative;\n}\n\n.order-section::before {\n  content: '';\n  position: absolute;\n  top: -10px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 0;\n  height: 0;\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-bottom: 10px solid #28a745;\n}\n\n.order-section h2 {\n  color: #343a40;\n  font-size: 24px;\n  text-align: center;\n  margin-bottom: 20px;\n  padding-bottom: 10px;\n  border-bottom: 2px solid #28a745;\n}\n\n.cart-items {\n  margin-bottom: 20px;\n}\n\n.cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n  border-bottom: 1px solid #dee2e6;\n  animation: fadeIn 0.3s ease;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(-10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.cart-item:last-child {\n  border-bottom: none;\n}\n\n.cart-item-details h3 {\n  margin: 0 0 5px 0;\n  font-size: 16px;\n}\n\n.cart-item-actions {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.quantity-btn {\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  background-color: #f8f9fa;\n  border: 1px solid #28a745;\n  color: #28a745;\n  font-weight: bold;\n  cursor: pointer;\n  transition: all 0.2s;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.quantity-btn:hover {\n  background-color: #28a745;\n  color: white;\n}\n\n.remove-btn {\n  padding: 5px 10px;\n  background-color: #dc3545;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.remove-btn:hover {\n  background-color: #c82333;\n}\n\n.cart-total {\n  text-align: right;\n  padding-top: 15px;\n  border-top: 2px solid #28a745;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  gap: 10px;\n}\n\n.cart-total h3 {\n  color: #343a40;\n  margin: 0;\n}\n\n/* Botón flotante para ver pedido */\n.floating-cart-button {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  background-color: #28a745;\n  color: white;\n  border-radius: 50px;\n  padding: 10px 20px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.2);\n  cursor: pointer;\n  transition: all 0.3s;\n  z-index: 98; /* Mantener por debajo del toast (9999) */\n  font-weight: bold;\n}\n\n.floating-cart-button:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 6px 15px rgba(0,0,0,0.25);\n}\n\n.cart-items-count {\n  background-color: white;\n  color: #28a745;\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n}\n\n/* Estilos para la sección de forma de pago */\n.payment-section {\n  margin: 30px auto;\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  max-width: 800px;\n}\n\n.payment-section h2 {\n  color: #333;\n  font-size: 1.5rem;\n  margin-bottom: 20px;\n  text-align: center;\n  border-bottom: 2px solid #4CAF50;\n  padding-bottom: 10px;\n}\n\n.payment-methods {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  justify-content: center;\n}\n\n.payment-method {\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n  padding: 15px;\n  width: 280px;\n  text-align: center;\n}\n\n.payment-method h3 {\n  margin-top: 0;\n  color: #333;\n  font-size: 1.2rem;\n  margin-bottom: 15px;\n}\n\n.payment-image {\n  width: 200px;\n  height: 200px;\n  object-fit: contain;\n  margin: 0 auto;\n  display: block;\n}\n\n.payment-detail {\n  margin-top: 15px;\n  font-size: 1rem;\n}\n\n@media (max-width: 640px) {\n  .payment-methods {\n    flex-direction: column;\n    align-items: center;\n  }\n  \n  .payment-method {\n    width: 100%;\n  }\n  \n  .floating-cart-button {\n    bottom: 10px;\n    right: 10px;\n    padding: 8px 16px;\n    font-size: 14px;\n  }\n}\n\n/* Spinner de carga mejorado */\n.loading {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 80px 20px;\n  text-align: center;\n}\n\n.spinner {\n  width: 50px;\n  height: 50px;\n  border: 5px solid #f3f3f3;\n  border-top: 5px solid #28a745;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin-bottom: 20px;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Mejoras en la sección de Tu Pedido */\n.empty-cart {\n  padding: 40px 0;\n  text-align: center;\n  color: #6c757d;\n}\n\n.empty-cart p {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 10px;\n}\n\n.empty-cart-message {\n  font-style: italic;\n  font-size: 14px;\n}\n\n/* Notificación de producto añadido */\n.add-to-cart-notification {\n  position: fixed;\n  bottom: -60px;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: #28a745;\n  color: white;\n  padding: 12px 25px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.2);\n  transition: bottom 0.5s ease;\n  z-index: 1000;\n}\n\n.add-to-cart-notification.show {\n  bottom: 30px;\n}\n\n/* Mejoras en botones */\n.btn-icon {\n  margin-right: 5px;\n}\n\n.add-to-cart-btn {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 10px 15px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s;\n  font-weight: bold;\n}\n\n.add-to-cart-btn:hover {\n  background-color: #218838;\n  transform: translateY(-2px);\n}\n\n.quantity-display {\n  min-width: 30px;\n  text-align: center;\n  font-weight: bold;\n}\n\n/* Estilos para acciones de pedido */\n.order-actions {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin-top: 15px;\n  gap: 10px;\n}\n\n.complete-order-btn,\n.whatsapp-order-btn {\n  border: none;\n  padding: 12px 20px;\n  border-radius: 4px;\n  font-weight: bold;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: all 0.3s ease;\n  gap: 8px;\n  height: 48px;\n  font-size: 16px;\n  width: 100%;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.complete-order-btn {\n  background-color: #28a745;\n  color: white;\n  margin: 0;\n}\n\ncomplete-order-btn:hover {\n  background-color: #218838;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n.whatsapp-order-btn {\n  background-color: #25D366;\n  color: white;\n  margin: 0;\n}\n\n.whatsapp-order-btn:hover {\n  background-color: #128C7E;\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n.btn-icon {\n  font-size: 18px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n@media (min-width: 768px) {\n  .order-actions {\n    flex-direction: row;\n    gap: 15px;\n  }\n  \n  .complete-order-btn,\n  .whatsapp-order-btn {\n    flex: 1;\n  }\n}\n\n/* Estilos para el formulario de cliente */\n.customer-form {\n  width: 100%;\n  margin: 20px 0;\n  padding: 15px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  border: 1px solid #e0e0e0;\n}\n\n.customer-form h4 {\n  margin: 0 0 15px 0;\n  color: #333;\n  font-size: 16px;\n  border-bottom: 1px solid #ddd;\n  padding-bottom: 8px;\n}\n\n.form-row {\n  margin-bottom: 10px;\n}\n\n.form-input, .form-textarea {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n  transition: border-color 0.3s;\n}\n\n.form-input:focus, .form-textarea:focus {\n  border-color: #28a745;\n  outline: none;\n}\n\n.form-textarea {\n  min-height: 80px;\n  resize: vertical;\n}\n\n/* Estilos para las opciones de pago */\n.payment-methods-selection {\n  margin: 15px 0;\n}\n\n.payment-methods-selection h4 {\n  margin: 0 0 15px 0;\n  color: #333;\n  font-size: 16px;\n  border-bottom: 1px solid #ddd;\n  padding-bottom: 8px;\n}\n\n.payment-options {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  margin-top: 10px;\n}\n\n.payment-option {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  border: 1px solid #ddd;\n  padding: 8px 15px;\n  border-radius: 20px;\n  transition: all 0.3s;\n}\n\n.payment-option:hover {\n  background-color: #f0f0f0;\n}\n\n.payment-option input[type=\"radio\"] {\n  margin: 0;\n}\n\n.payment-option input[type=\"radio\"]:checked + .payment-option-text {\n  font-weight: bold;\n  color: #28a745;\n}\n\n.payment-option:has(input[type=\"radio\"]:checked) {\n  border-color: #28a745;\n  background-color: rgba(40, 167, 69, 0.1);\n}\n\n@media (max-width: 480px) {\n  .payment-options {\n    flex-direction: column;\n    gap: 8px;\n  }\n  \n  .payment-option {\n    width: 100%;\n  }\n}\n\n/* Agregar al final del <style> */\n.special-menu-list h2 {\n  color: #d4af37; /* Color dorado para el título de platos especiales */\n  border-bottom-color: #d4af37;\n}\n\n.special-item {\n  border: 2px solid #d4af37;\n  position: relative;\n}\n\n.special-item::before {\n  content: '★ Especial';\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background-color: #d4af37;\n  color: white;\n  padding: 5px 10px;\n  border-radius: 20px;\n  z-index: 2;\n}\n\n.special-button {\n  background-color: #d4af37;\n}\n\n.special-button:hover {\n  background-color: #c6a22c;\n}\n\n/* Estilos para la notificación toast */\n.toast-notification {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  padding: 15px 25px;\n  border-radius: 5px;\n  z-index: 9999 !important; /* Asegurar que esté por encima de todo */\n  color: white;\n  font-weight: bold;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n  animation: slideIn 0.5s;\n  max-width: 300px;\n  font-size: 16px !important;\n  opacity: 0.95 !important;\n  transform: scale(1.05); /* Ligeramente más grande */\n  border: 2px solid rgba(255,255,255,0.2);\n}\n\n.toast-notification.success {\n  background-color: #28a745 !important;\n}\n\n.toast-notification.warning {\n  background-color: #ffc107 !important;\n  color: #333 !important;\n  border-color: #333 !important;\n}\n\n.toast-notification.error {\n  background-color: #dc3545 !important;\n}\n\n@keyframes slideIn {\n  from { \n    transform: translateY(-50px) scale(0.8); \n    opacity: 0; \n  }\n  to { \n    transform: translateY(0) scale(1.05); \n    opacity: 0.95 !important; \n  }\n}\n\n.menu-content {\n  position: relative;\n  z-index: 1;\n}\n\n/* Estilos de depuración - para remover después */\n.toast-notification::before {\n  content: '✓';\n  position: absolute;\n  left: 10px;\n  top: 50%;\n  transform: translateY(-50%);\n  font-size: 20px;\n}\n\n.toast-notification.success::before {\n  content: '✓';\n}\n\n.toast-notification.warning::before {\n  content: '⚠️';\n}\n\n.toast-notification.error::before {\n  content: '✗';\n}\n\n/* Añadir al final del CSS (línea 1391) */\n.add-to-cart-btn.disabled-btn {\n  background-color: #6c757d !important;\n  cursor: not-allowed !important;\n  opacity: 0.7 !important;\n  pointer-events: none;\n}\n\n.add-to-cart-btn.disabled-btn:hover {\n  background-color: #6c757d !important;\n  transform: none !important;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;\n}\n\n.special-button.disabled-btn {\n  background-color: #a08734 !important;\n}\n\n/* Estilos para el contenedor de reservas */\n.reservas-container {\n  margin: 40px 0;\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}