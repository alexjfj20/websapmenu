{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\n/**\r\n * Servicio para gestionar las operaciones administrativas\r\n */\nimport apiService from './apiService';\n\n/**\r\n * Obtiene las estadísticas generales del sistema\r\n * @returns {Promise<Object>} Estadísticas del sistema\r\n */\nexport async function getDashboardStats() {\n  try {\n    // En desarrollo, devolver datos simulados\n    if (process.env.NODE_ENV === 'development') {\n      return {\n        success: true,\n        data: {\n          totalUsers: 45,\n          activeUsers: 32,\n          inactiveUsers: 13,\n          activePayments: 28,\n          pendingPayments: 8,\n          overduePayments: 3,\n          totalIncome: 15750000,\n          status: 'Normal',\n          lastBackup: new Date().toISOString(),\n          recentActivity: [{\n            tipo: 'login',\n            usuario_nombre: 'Laura Méndez',\n            accion: 'inició sesión en el sistema',\n            fecha: new Date().toISOString()\n          }, {\n            tipo: 'payment',\n            usuario_nombre: 'Carlos Gómez',\n            accion: 'realizó un pago de $350.000',\n            fecha: new Date(Date.now() - 3600000).toISOString() // 1 hora atrás\n          }, {\n            tipo: 'user_created',\n            usuario_nombre: 'Admin',\n            accion: 'creó un nuevo usuario',\n            fecha: new Date(Date.now() - 86400000).toISOString() // 1 día atrás\n          }, {\n            tipo: 'backup',\n            usuario_nombre: 'Sistema',\n            accion: 'realizó un respaldo automático',\n            fecha: new Date(Date.now() - 172800000).toISOString() // 2 días atrás\n          }]\n        }\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    return await apiService.get('/admin/stats');\n  } catch (error) {\n    console.error('Error al obtener estadísticas del dashboard:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Obtiene los usuarios del sistema\r\n * @param {Object} options Opciones de filtrado y paginación\r\n * @returns {Promise<Array>} Lista de usuarios\r\n */\nexport async function getUsers(options = {}) {\n  try {\n    // En desarrollo, devolver datos simulados\n    if (process.env.NODE_ENV === 'development') {\n      const users = [{\n        id: 1,\n        nombre: 'Admin Principal',\n        email: 'admin@ejemplo.com',\n        telefono: '3001234567',\n        roles: ['Superadministrador'],\n        estado: 'activo',\n        fecha_creacion: '2023-05-15T08:30:00Z'\n      }, {\n        id: 2,\n        nombre: 'Juan Pérez',\n        email: 'juan@ejemplo.com',\n        telefono: '3009876543',\n        roles: ['Administrador'],\n        estado: 'activo',\n        fecha_creacion: '2023-06-20T14:45:00Z'\n      }, {\n        id: 3,\n        nombre: 'María López',\n        email: 'maria@ejemplo.com',\n        telefono: '3002223344',\n        roles: ['Empleado'],\n        estado: 'activo',\n        fecha_creacion: '2023-07-05T11:15:00Z'\n      }, {\n        id: 4,\n        nombre: 'Carlos Rodríguez',\n        email: 'carlos@ejemplo.com',\n        telefono: '3005556677',\n        roles: ['Empleado'],\n        estado: 'inactivo',\n        fecha_creacion: '2023-08-10T09:20:00Z'\n      }];\n\n      // Aplicar filtros\n      let filteredUsers = [...users];\n      if (options.searchTerm) {\n        const term = options.searchTerm.toLowerCase();\n        filteredUsers = filteredUsers.filter(user => user.nombre.toLowerCase().includes(term) || user.email.toLowerCase().includes(term) || user.telefono && user.telefono.toLowerCase().includes(term));\n      }\n      if (options.role) {\n        filteredUsers = filteredUsers.filter(user => user.roles && user.roles.includes(options.role));\n      }\n      if (options.status) {\n        filteredUsers = filteredUsers.filter(user => user.estado === options.status);\n      }\n      return {\n        success: true,\n        data: filteredUsers,\n        total: filteredUsers.length\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    let queryParams = '';\n    if (options.searchTerm) queryParams += `search=${encodeURIComponent(options.searchTerm)}&`;\n    if (options.role) queryParams += `role=${encodeURIComponent(options.role)}&`;\n    if (options.status) queryParams += `status=${encodeURIComponent(options.status)}&`;\n    if (options.page) queryParams += `page=${options.page}&`;\n    if (options.limit) queryParams += `limit=${options.limit}&`;\n    if (queryParams.endsWith('&')) {\n      queryParams = queryParams.slice(0, -1);\n    }\n    return await apiService.get(`/admin/users${queryParams ? '?' + queryParams : ''}`);\n  } catch (error) {\n    console.error('Error al obtener usuarios:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Obtiene los registros del sistema\r\n * @returns {Promise<Object>} Lista de logs\r\n */\nexport async function getLogs() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        data: [{\n          id: 1,\n          timestamp: new Date().toISOString(),\n          type: 'info',\n          user: 'Admin',\n          message: 'Inicio de sesión exitoso',\n          details: {\n            ip: '192.168.1.1',\n            userAgent: 'Chrome/96.0'\n          }\n        }, {\n          id: 2,\n          timestamp: new Date(Date.now() - 3600000).toISOString(),\n          // 1 hora atrás\n          type: 'warning',\n          user: 'Sistema',\n          message: 'Intento de acceso fallido',\n          details: {\n            ip: '203.0.113.1',\n            userAgent: 'Edge/96.0',\n            attempts: 3\n          }\n        }, {\n          id: 3,\n          timestamp: new Date(Date.now() - 7200000).toISOString(),\n          // 2 horas atrás\n          type: 'error',\n          user: 'Sistema',\n          message: 'Error en la creación de backup',\n          details: {\n            error: 'Espacio insuficiente',\n            code: 'E0023'\n          }\n        }, {\n          id: 4,\n          timestamp: new Date(Date.now() - 86400000).toISOString(),\n          // 1 día atrás\n          type: 'success',\n          user: 'Juan Pérez',\n          message: 'Nuevo usuario creado',\n          details: {\n            newUser: 'carlos@ejemplo.com'\n          }\n        }]\n      });\n    }, 1000);\n  });\n}\n\n/**\r\n * Descarga los logs en formato CSV\r\n * @returns {Promise<Object>} Datos CSV de los logs\r\n */\nexport async function downloadLogsCSV() {\n  // Simulamos la generación de un CSV\n  return new Promise(resolve => {\n    setTimeout(() => {\n      // Encabezados y datos de prueba en formato CSV\n      const csvData = 'Fecha,Tipo,Usuario,Mensaje\\n' + '2023-10-15 10:30:00,info,Admin,Inicio de sesión exitoso\\n' + '2023-10-15 09:30:00,warning,Sistema,Intento de acceso fallido\\n' + '2023-10-15 08:30:00,error,Sistema,Error en la creación de backup\\n' + '2023-10-14 15:45:00,success,Juan Pérez,Nuevo usuario creado';\n      resolve({\n        success: true,\n        data: csvData\n      });\n    }, 1000);\n  });\n}\n\n/**\r\n * Obtiene los roles disponibles en el sistema\r\n * @returns {Promise<Array>} Lista de roles\r\n */\nexport async function getRoles() {\n  try {\n    // En desarrollo, devolver datos simulados\n    if (process.env.NODE_ENV === 'development') {\n      return {\n        success: true,\n        data: [{\n          id: 1,\n          nombre: 'Superadministrador'\n        }, {\n          id: 2,\n          nombre: 'Administrador'\n        }, {\n          id: 3,\n          nombre: 'Empleado'\n        }]\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    return await apiService.get('/admin/roles');\n  } catch (error) {\n    console.error('Error al obtener roles:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Crea un nuevo usuario\r\n * @param {Object} userData Datos del usuario a crear\r\n * @returns {Promise<Object>} Usuario creado\r\n */\nexport async function createUser(userData) {\n  try {\n    // Imprimir los datos recibidos para debug\n    console.log(\"createUser recibió:\", userData);\n\n    // En desarrollo, simular la creación\n    if (process.env.NODE_ENV === 'development') {\n      // Simulando tiempo de respuesta del servidor\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Crear un nuevo usuario con formato completo\n      const newUser = {\n        id: Date.now().toString(),\n        nombre: userData.nombre || 'Usuario sin nombre',\n        email: userData.email || 'email@example.com',\n        telefono: userData.telefono || '',\n        roles: Array.isArray(userData.roles) ? [...userData.roles] : ['Empleado'],\n        estado: userData.estado || 'activo',\n        fecha_creacion: new Date().toISOString()\n      };\n      console.log(\"Usuario creado para retornar:\", newUser);\n\n      // Simular una pequeña demora para mejor UX\n      await new Promise(resolve => setTimeout(resolve, 300));\n      return {\n        success: true,\n        data: newUser,\n        message: 'Usuario creado con éxito'\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    console.log(\"Llamando a API real para crear usuario\");\n    return await apiService.post('/admin/users', userData);\n  } catch (error) {\n    console.error('Error en createUser:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Actualiza un usuario existente\r\n * @param {number} userId ID del usuario a actualizar\r\n * @param {Object} userData Datos actualizados del usuario\r\n * @returns {Promise<Object>} Usuario actualizado\r\n */\nexport async function updateUser(userId, userData) {\n  try {\n    // En desarrollo, simular la actualización\n    if (process.env.NODE_ENV === 'development') {\n      return {\n        success: true,\n        data: {\n          id: userId,\n          ...userData,\n          fecha_actualizacion: new Date().toISOString()\n        },\n        message: 'Usuario actualizado con éxito'\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    return await apiService.put(`/admin/users/${userId}`, userData);\n  } catch (error) {\n    console.error(`Error al actualizar usuario con ID ${userId}:`, error);\n    throw error;\n  }\n}\n\n/**\r\n * Cambia el estado de un usuario (activo/inactivo)\r\n * @param {number} userId ID del usuario\r\n * @param {string} estado Nuevo estado ('activo' o 'inactivo')\r\n * @returns {Promise<Object>} Resultado de la operación\r\n */\nexport async function cambiarEstadoUsuario(userId, estado) {\n  try {\n    // En desarrollo, simular el cambio de estado\n    if (process.env.NODE_ENV === 'development') {\n      return {\n        success: true,\n        data: {\n          id: userId,\n          estado,\n          fecha_actualizacion: new Date().toISOString()\n        },\n        message: `Usuario ${estado === 'activo' ? 'activado' : 'desactivado'} con éxito`\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    return await apiService.put(`/admin/users/${userId}/estado`, {\n      estado\n    });\n  } catch (error) {\n    console.error(`Error al cambiar estado del usuario ${userId}:`, error);\n    throw error;\n  }\n}\n\n/**\r\n * Elimina un usuario\r\n * @param {number} userId ID del usuario a eliminar\r\n * @returns {Promise<Object>} Resultado de la eliminación\r\n */\nexport async function deleteUser(userId) {\n  try {\n    // En desarrollo, simular la eliminación\n    if (process.env.NODE_ENV === 'development') {\n      return {\n        success: true,\n        message: 'Usuario eliminado con éxito'\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    return await apiService.delete(`/admin/users/${userId}`);\n  } catch (error) {\n    console.error(`Error al eliminar usuario ${userId}:`, error);\n    throw error;\n  }\n}\n\n// Asegurarnos de exportar todas las funciones en el default export también\nexport default {\n  getDashboardStats,\n  getUsers,\n  getRoles,\n  getLogs,\n  downloadLogsCSV,\n  createUser,\n  updateUser,\n  cambiarEstadoUsuario,\n  deleteUser\n};","map":{"version":3,"names":["apiService","getDashboardStats","process","env","NODE_ENV","success","data","totalUsers","activeUsers","inactiveUsers","activePayments","pendingPayments","overduePayments","totalIncome","status","lastBackup","Date","toISOString","recentActivity","tipo","usuario_nombre","accion","fecha","now","get","error","console","getUsers","options","users","id","nombre","email","telefono","roles","estado","fecha_creacion","filteredUsers","searchTerm","term","toLowerCase","filter","user","includes","role","total","length","queryParams","encodeURIComponent","page","limit","endsWith","slice","getLogs","Promise","resolve","setTimeout","timestamp","type","message","details","ip","userAgent","attempts","code","newUser","downloadLogsCSV","csvData","getRoles","createUser","userData","log","toString","Array","isArray","post","updateUser","userId","fecha_actualizacion","put","cambiarEstadoUsuario","deleteUser","delete"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/adminService.js"],"sourcesContent":["/**\r\n * Servicio para gestionar las operaciones administrativas\r\n */\r\nimport apiService from './apiService';\r\n\r\n/**\r\n * Obtiene las estadísticas generales del sistema\r\n * @returns {Promise<Object>} Estadísticas del sistema\r\n */\r\nexport async function getDashboardStats() {\r\n  try {\r\n    // En desarrollo, devolver datos simulados\r\n    if (process.env.NODE_ENV === 'development') {\r\n      return {\r\n        success: true,\r\n        data: {\r\n          totalUsers: 45,\r\n          activeUsers: 32,\r\n          inactiveUsers: 13,\r\n          activePayments: 28,\r\n          pendingPayments: 8,\r\n          overduePayments: 3,\r\n          totalIncome: 15750000,\r\n          status: 'Normal',\r\n          lastBackup: new Date().toISOString(),\r\n          recentActivity: [\r\n            {\r\n              tipo: 'login',\r\n              usuario_nombre: 'Laura Méndez',\r\n              accion: 'inició sesión en el sistema',\r\n              fecha: new Date().toISOString()\r\n            },\r\n            {\r\n              tipo: 'payment',\r\n              usuario_nombre: 'Carlos Gómez',\r\n              accion: 'realizó un pago de $350.000',\r\n              fecha: new Date(Date.now() - 3600000).toISOString() // 1 hora atrás\r\n            },\r\n            {\r\n              tipo: 'user_created',\r\n              usuario_nombre: 'Admin',\r\n              accion: 'creó un nuevo usuario',\r\n              fecha: new Date(Date.now() - 86400000).toISOString() // 1 día atrás\r\n            },\r\n            {\r\n              tipo: 'backup',\r\n              usuario_nombre: 'Sistema',\r\n              accion: 'realizó un respaldo automático',\r\n              fecha: new Date(Date.now() - 172800000).toISOString() // 2 días atrás\r\n            }\r\n          ]\r\n        }\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    return await apiService.get('/admin/stats');\r\n  } catch (error) {\r\n    console.error('Error al obtener estadísticas del dashboard:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene los usuarios del sistema\r\n * @param {Object} options Opciones de filtrado y paginación\r\n * @returns {Promise<Array>} Lista de usuarios\r\n */\r\nexport async function getUsers(options = {}) {\r\n  try {\r\n    // En desarrollo, devolver datos simulados\r\n    if (process.env.NODE_ENV === 'development') {\r\n      const users = [\r\n        {\r\n          id: 1,\r\n          nombre: 'Admin Principal',\r\n          email: 'admin@ejemplo.com',\r\n          telefono: '3001234567',\r\n          roles: ['Superadministrador'],\r\n          estado: 'activo',\r\n          fecha_creacion: '2023-05-15T08:30:00Z'\r\n        },\r\n        {\r\n          id: 2,\r\n          nombre: 'Juan Pérez',\r\n          email: 'juan@ejemplo.com',\r\n          telefono: '3009876543',\r\n          roles: ['Administrador'],\r\n          estado: 'activo',\r\n          fecha_creacion: '2023-06-20T14:45:00Z'\r\n        },\r\n        {\r\n          id: 3,\r\n          nombre: 'María López',\r\n          email: 'maria@ejemplo.com',\r\n          telefono: '3002223344',\r\n          roles: ['Empleado'],\r\n          estado: 'activo',\r\n          fecha_creacion: '2023-07-05T11:15:00Z'\r\n        },\r\n        {\r\n          id: 4,\r\n          nombre: 'Carlos Rodríguez',\r\n          email: 'carlos@ejemplo.com',\r\n          telefono: '3005556677',\r\n          roles: ['Empleado'],\r\n          estado: 'inactivo',\r\n          fecha_creacion: '2023-08-10T09:20:00Z'\r\n        }\r\n      ];\r\n      \r\n      // Aplicar filtros\r\n      let filteredUsers = [...users];\r\n      \r\n      if (options.searchTerm) {\r\n        const term = options.searchTerm.toLowerCase();\r\n        filteredUsers = filteredUsers.filter(user => \r\n          user.nombre.toLowerCase().includes(term) || \r\n          user.email.toLowerCase().includes(term) ||\r\n          (user.telefono && user.telefono.toLowerCase().includes(term))\r\n        );\r\n      }\r\n      \r\n      if (options.role) {\r\n        filteredUsers = filteredUsers.filter(user => \r\n          user.roles && user.roles.includes(options.role)\r\n        );\r\n      }\r\n      \r\n      if (options.status) {\r\n        filteredUsers = filteredUsers.filter(user => \r\n          user.estado === options.status\r\n        );\r\n      }\r\n      \r\n      return {\r\n        success: true,\r\n        data: filteredUsers,\r\n        total: filteredUsers.length\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    let queryParams = '';\r\n    if (options.searchTerm) queryParams += `search=${encodeURIComponent(options.searchTerm)}&`;\r\n    if (options.role) queryParams += `role=${encodeURIComponent(options.role)}&`;\r\n    if (options.status) queryParams += `status=${encodeURIComponent(options.status)}&`;\r\n    if (options.page) queryParams += `page=${options.page}&`;\r\n    if (options.limit) queryParams += `limit=${options.limit}&`;\r\n    \r\n    if (queryParams.endsWith('&')) {\r\n      queryParams = queryParams.slice(0, -1);\r\n    }\r\n    \r\n    return await apiService.get(`/admin/users${queryParams ? '?' + queryParams : ''}`);\r\n  } catch (error) {\r\n    console.error('Error al obtener usuarios:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene los registros del sistema\r\n * @returns {Promise<Object>} Lista de logs\r\n */\r\nexport async function getLogs() {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        success: true,\r\n        data: [\r\n          {\r\n            id: 1,\r\n            timestamp: new Date().toISOString(),\r\n            type: 'info',\r\n            user: 'Admin',\r\n            message: 'Inicio de sesión exitoso',\r\n            details: { ip: '192.168.1.1', userAgent: 'Chrome/96.0' }\r\n          },\r\n          {\r\n            id: 2,\r\n            timestamp: new Date(Date.now() - 3600000).toISOString(), // 1 hora atrás\r\n            type: 'warning',\r\n            user: 'Sistema',\r\n            message: 'Intento de acceso fallido',\r\n            details: { ip: '203.0.113.1', userAgent: 'Edge/96.0', attempts: 3 }\r\n          },\r\n          {\r\n            id: 3,\r\n            timestamp: new Date(Date.now() - 7200000).toISOString(), // 2 horas atrás\r\n            type: 'error',\r\n            user: 'Sistema',\r\n            message: 'Error en la creación de backup',\r\n            details: { error: 'Espacio insuficiente', code: 'E0023' }\r\n          },\r\n          {\r\n            id: 4,\r\n            timestamp: new Date(Date.now() - 86400000).toISOString(), // 1 día atrás\r\n            type: 'success',\r\n            user: 'Juan Pérez',\r\n            message: 'Nuevo usuario creado',\r\n            details: { newUser: 'carlos@ejemplo.com' }\r\n          }\r\n        ]\r\n      });\r\n    }, 1000);\r\n  });\r\n}\r\n\r\n/**\r\n * Descarga los logs en formato CSV\r\n * @returns {Promise<Object>} Datos CSV de los logs\r\n */\r\nexport async function downloadLogsCSV() {\r\n  // Simulamos la generación de un CSV\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      // Encabezados y datos de prueba en formato CSV\r\n      const csvData = 'Fecha,Tipo,Usuario,Mensaje\\n' +\r\n                     '2023-10-15 10:30:00,info,Admin,Inicio de sesión exitoso\\n' +\r\n                     '2023-10-15 09:30:00,warning,Sistema,Intento de acceso fallido\\n' +\r\n                     '2023-10-15 08:30:00,error,Sistema,Error en la creación de backup\\n' +\r\n                     '2023-10-14 15:45:00,success,Juan Pérez,Nuevo usuario creado';\r\n      \r\n      resolve({\r\n        success: true,\r\n        data: csvData\r\n      });\r\n    }, 1000);\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene los roles disponibles en el sistema\r\n * @returns {Promise<Array>} Lista de roles\r\n */\r\nexport async function getRoles() {\r\n  try {\r\n    // En desarrollo, devolver datos simulados\r\n    if (process.env.NODE_ENV === 'development') {\r\n      return {\r\n        success: true,\r\n        data: [\r\n          { id: 1, nombre: 'Superadministrador' },\r\n          { id: 2, nombre: 'Administrador' },\r\n          { id: 3, nombre: 'Empleado' }\r\n        ]\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    return await apiService.get('/admin/roles');\r\n  } catch (error) {\r\n    console.error('Error al obtener roles:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Crea un nuevo usuario\r\n * @param {Object} userData Datos del usuario a crear\r\n * @returns {Promise<Object>} Usuario creado\r\n */\r\nexport async function createUser(userData) {\r\n  try {\r\n    // Imprimir los datos recibidos para debug\r\n    console.log(\"createUser recibió:\", userData);\r\n    \r\n    // En desarrollo, simular la creación\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // Simulando tiempo de respuesta del servidor\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      // Crear un nuevo usuario con formato completo\r\n      const newUser = {\r\n        id: Date.now().toString(),\r\n        nombre: userData.nombre || 'Usuario sin nombre',\r\n        email: userData.email || 'email@example.com',\r\n        telefono: userData.telefono || '',\r\n        roles: Array.isArray(userData.roles) ? [...userData.roles] : ['Empleado'],\r\n        estado: userData.estado || 'activo',\r\n        fecha_creacion: new Date().toISOString()\r\n      };\r\n      \r\n      console.log(\"Usuario creado para retornar:\", newUser);\r\n      \r\n      // Simular una pequeña demora para mejor UX\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n      \r\n      return {\r\n        success: true,\r\n        data: newUser,\r\n        message: 'Usuario creado con éxito'\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    console.log(\"Llamando a API real para crear usuario\");\r\n    return await apiService.post('/admin/users', userData);\r\n  } catch (error) {\r\n    console.error('Error en createUser:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Actualiza un usuario existente\r\n * @param {number} userId ID del usuario a actualizar\r\n * @param {Object} userData Datos actualizados del usuario\r\n * @returns {Promise<Object>} Usuario actualizado\r\n */\r\nexport async function updateUser(userId, userData) {\r\n  try {\r\n    // En desarrollo, simular la actualización\r\n    if (process.env.NODE_ENV === 'development') {\r\n      return {\r\n        success: true,\r\n        data: {\r\n          id: userId,\r\n          ...userData,\r\n          fecha_actualizacion: new Date().toISOString()\r\n        },\r\n        message: 'Usuario actualizado con éxito'\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    return await apiService.put(`/admin/users/${userId}`, userData);\r\n  } catch (error) {\r\n    console.error(`Error al actualizar usuario con ID ${userId}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Cambia el estado de un usuario (activo/inactivo)\r\n * @param {number} userId ID del usuario\r\n * @param {string} estado Nuevo estado ('activo' o 'inactivo')\r\n * @returns {Promise<Object>} Resultado de la operación\r\n */\r\nexport async function cambiarEstadoUsuario(userId, estado) {\r\n  try {\r\n    // En desarrollo, simular el cambio de estado\r\n    if (process.env.NODE_ENV === 'development') {\r\n      return {\r\n        success: true,\r\n        data: {\r\n          id: userId,\r\n          estado,\r\n          fecha_actualizacion: new Date().toISOString()\r\n        },\r\n        message: `Usuario ${estado === 'activo' ? 'activado' : 'desactivado'} con éxito`\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    return await apiService.put(`/admin/users/${userId}/estado`, { estado });\r\n  } catch (error) {\r\n    console.error(`Error al cambiar estado del usuario ${userId}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Elimina un usuario\r\n * @param {number} userId ID del usuario a eliminar\r\n * @returns {Promise<Object>} Resultado de la eliminación\r\n */\r\nexport async function deleteUser(userId) {\r\n  try {\r\n    // En desarrollo, simular la eliminación\r\n    if (process.env.NODE_ENV === 'development') {\r\n      return {\r\n        success: true,\r\n        message: 'Usuario eliminado con éxito'\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    return await apiService.delete(`/admin/users/${userId}`);\r\n  } catch (error) {\r\n    console.error(`Error al eliminar usuario ${userId}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Asegurarnos de exportar todas las funciones en el default export también\r\nexport default {\r\n  getDashboardStats,\r\n  getUsers,\r\n  getRoles,\r\n  getLogs,\r\n  downloadLogsCSV,\r\n  createUser,\r\n  updateUser,\r\n  cambiarEstadoUsuario,\r\n  deleteUser\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}