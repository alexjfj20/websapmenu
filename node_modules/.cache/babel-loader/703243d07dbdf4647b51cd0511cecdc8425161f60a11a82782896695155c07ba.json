{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, createTextVNode as _createTextVNode, vModelText as _vModelText, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"sync-settings\"\n};\nconst _hoisted_2 = {\n  class: \"settings-form\"\n};\nconst _hoisted_3 = {\n  class: \"form-group\"\n};\nconst _hoisted_4 = {\n  for: \"autoSyncImages\"\n};\nconst _hoisted_5 = {\n  class: \"form-group\"\n};\nconst _hoisted_6 = {\n  for: \"compressImages\"\n};\nconst _hoisted_7 = {\n  class: \"form-group\"\n};\nconst _hoisted_8 = {\n  class: \"sync-actions\"\n};\nconst _hoisted_9 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[13] || (_cache[13] = _createElementVNode(\"h3\", null, \"Configuración de Sincronización\", -1)), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"label\", _hoisted_4, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    id: \"autoSyncImages\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.settings.autoSyncImages = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $setup.saveSettings && $setup.saveSettings(...args))\n  }, null, 544), [[_vModelCheckbox, $setup.settings.autoSyncImages]]), _cache[7] || (_cache[7] = _createTextVNode(\" Sincronizar imágenes automáticamente \"))]), _cache[8] || (_cache[8] = _createElementVNode(\"div\", {\n    class: \"help-text\"\n  }, \" Cuando está activado, las imágenes se sincronizarán automáticamente con el servidor \", -1))]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"label\", _hoisted_6, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    id: \"compressImages\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.settings.compressImages = $event),\n    onChange: _cache[3] || (_cache[3] = (...args) => $setup.saveSettings && $setup.saveSettings(...args))\n  }, null, 544), [[_vModelCheckbox, $setup.settings.compressImages]]), _cache[9] || (_cache[9] = _createTextVNode(\" Comprimir imágenes antes de sincronizar \"))]), _cache[10] || (_cache[10] = _createElementVNode(\"div\", {\n    class: \"help-text\"\n  }, \" Reduce el tamaño de las imágenes para mejorar la velocidad de sincronización \", -1))]), _createElementVNode(\"div\", _hoisted_7, [_cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    for: \"maxImageSize\"\n  }, \"Tamaño máximo de imagen (KB):\", -1)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    id: \"maxImageSize\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.settings.maxImageSize = $event),\n    min: \"100\",\n    max: \"2000\",\n    onChange: _cache[5] || (_cache[5] = (...args) => $setup.saveSettings && $setup.saveSettings(...args))\n  }, null, 544), [[_vModelText, $setup.settings.maxImageSize, void 0, {\n    number: true\n  }]]), _cache[12] || (_cache[12] = _createElementVNode(\"div\", {\n    class: \"help-text\"\n  }, \" Las imágenes más grandes que este valor serán comprimidas automáticamente \", -1))])]), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $setup.syncAllImages && $setup.syncAllImages(...args)),\n    class: \"sync-button\",\n    disabled: $setup.isSyncing\n  }, _toDisplayString($setup.isSyncing ? 'Sincronizando...' : 'Sincronizar todas las imágenes ahora'), 9, _hoisted_9), $setup.message ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: _normalizeClass(['sync-message', $setup.messageType])\n  }, _toDisplayString($setup.message), 3)) : _createCommentVNode(\"\", true)])]);\n}","map":{"version":3,"names":["class","for","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","type","id","_cache","$event","$setup","settings","autoSyncImages","onChange","args","saveSettings","_createTextVNode","_hoisted_5","_hoisted_6","compressImages","_hoisted_7","maxImageSize","min","max","number","_hoisted_8","onClick","syncAllImages","disabled","isSyncing","_hoisted_9","message","key","_normalizeClass","messageType","_createCommentVNode"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\components\\utils\\SyncSettings.vue"],"sourcesContent":["// src/components/utils/SyncSettings.vue\n\n<template>\n  <div class=\"sync-settings\">\n    <h3>Configuración de Sincronización</h3>\n    \n    <div class=\"settings-form\">\n      <div class=\"form-group\">\n        <label for=\"autoSyncImages\">\n          <input \n            type=\"checkbox\" \n            id=\"autoSyncImages\" \n            v-model=\"settings.autoSyncImages\"\n            @change=\"saveSettings\"\n          />\n          Sincronizar imágenes automáticamente\n        </label>\n        <div class=\"help-text\">\n          Cuando está activado, las imágenes se sincronizarán automáticamente con el servidor\n        </div>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"compressImages\">\n          <input \n            type=\"checkbox\" \n            id=\"compressImages\" \n            v-model=\"settings.compressImages\"\n            @change=\"saveSettings\"\n          />\n          Comprimir imágenes antes de sincronizar\n        </label>\n        <div class=\"help-text\">\n          Reduce el tamaño de las imágenes para mejorar la velocidad de sincronización\n        </div>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"maxImageSize\">Tamaño máximo de imagen (KB):</label>\n        <input \n          type=\"number\" \n          id=\"maxImageSize\" \n          v-model.number=\"settings.maxImageSize\"\n          min=\"100\" \n          max=\"2000\"\n          @change=\"saveSettings\"\n        />\n        <div class=\"help-text\">\n          Las imágenes más grandes que este valor serán comprimidas automáticamente\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"sync-actions\">\n      <button \n        @click=\"syncAllImages\" \n        class=\"sync-button\"\n        :disabled=\"isSyncing\"\n      >\n        {{ isSyncing ? 'Sincronizando...' : 'Sincronizar todas las imágenes ahora' }}\n      </button>\n      \n      <div v-if=\"message\" :class=\"['sync-message', messageType]\">\n        {{ message }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, onMounted } from 'vue';\nimport { extractIndexedDBImages } from '@/scripts/extractIndexedDBImages';\n\n// Clave para almacenar la configuración en localStorage\nconst STORAGE_KEY = 'websap_sync_settings';\n\nexport default {\n  name: 'SyncSettings',\n  setup() {\n    // Estado de sincronización\n    const isSyncing = ref(false);\n    const message = ref('');\n    const messageType = ref('info');\n    \n    // Configuración por defecto\n    const defaultSettings = {\n      autoSyncImages: true,\n      compressImages: true,\n      maxImageSize: 500 // KB\n    };\n    \n    // Cargar configuración desde localStorage o usar valores por defecto\n    const settings = reactive(loadSettings());\n    \n    // Función para cargar la configuración\n    function loadSettings() {\n      try {\n        const savedSettings = localStorage.getItem(STORAGE_KEY);\n        if (savedSettings) {\n          return JSON.parse(savedSettings);\n        }\n      } catch (error) {\n        console.error('Error al cargar configuración de sincronización:', error);\n      }\n      return { ...defaultSettings };\n    }\n    \n    // Función para guardar la configuración\n    function saveSettings() {\n      try {\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(settings));\n        showMessage('Configuración guardada', 'success');\n      } catch (error) {\n        console.error('Error al guardar configuración de sincronización:', error);\n        showMessage('Error al guardar configuración', 'error');\n      }\n    }\n    \n    // Función para sincronizar todas las imágenes\n    async function syncAllImages() {\n      try {\n        isSyncing.value = true;\n        showMessage('Sincronizando imágenes...', 'info');\n        \n        const result = await extractIndexedDBImages();\n        \n        if (result.success) {\n          showMessage(result.message, 'success');\n        } else {\n          showMessage(result.message, 'error');\n        }\n      } catch (error) {\n        console.error('Error al sincronizar imágenes:', error);\n        showMessage('Error al sincronizar imágenes: ' + error.message, 'error');\n      } finally {\n        isSyncing.value = false;\n      }\n    }\n    \n    // Función para mostrar mensajes\n    function showMessage(text, type = 'info') {\n      message.value = text;\n      messageType.value = type;\n      \n      // Limpiar el mensaje después de 5 segundos\n      setTimeout(() => {\n        message.value = '';\n      }, 5000);\n    }\n    \n    // Cargar configuración al montar el componente\n    onMounted(() => {\n      // Si no hay configuración guardada, guardar la configuración por defecto\n      if (!localStorage.getItem(STORAGE_KEY)) {\n        saveSettings();\n      }\n    });\n    \n    return {\n      settings,\n      isSyncing,\n      message,\n      messageType,\n      saveSettings,\n      syncAllImages\n    };\n  }\n};\n</script>\n\n<style scoped>\n.sync-settings {\n  margin: 20px 0;\n  padding: 15px;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n}\n\nh3 {\n  margin-top: 0;\n  margin-bottom: 15px;\n  color: #333;\n}\n\n.settings-form {\n  margin-bottom: 20px;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\nlabel {\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  margin-bottom: 5px;\n}\n\ninput[type=\"checkbox\"] {\n  margin-right: 8px;\n}\n\ninput[type=\"number\"] {\n  width: 100px;\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.help-text {\n  font-size: 12px;\n  color: #666;\n  margin-top: 3px;\n  margin-left: 24px;\n}\n\n.sync-actions {\n  margin-top: 20px;\n}\n\n.sync-button {\n  padding: 10px 15px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 14px;\n  transition: background-color 0.3s;\n}\n\n.sync-button:hover {\n  background-color: #45a049;\n}\n\n.sync-button:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.sync-message {\n  margin-top: 10px;\n  padding: 8px 12px;\n  border-radius: 4px;\n  font-size: 14px;\n}\n\n.sync-message.info {\n  background-color: #e7f3fe;\n  border: 1px solid #b6d4fe;\n  color: #084298;\n}\n\n.sync-message.success {\n  background-color: #d1e7dd;\n  border: 1px solid #badbcc;\n  color: #0f5132;\n}\n\n.sync-message.warning {\n  background-color: #fff3cd;\n  border: 1px solid #ffecb5;\n  color: #664d03;\n}\n\n.sync-message.error {\n  background-color: #f8d7da;\n  border: 1px solid #f5c2c7;\n  color: #842029;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}