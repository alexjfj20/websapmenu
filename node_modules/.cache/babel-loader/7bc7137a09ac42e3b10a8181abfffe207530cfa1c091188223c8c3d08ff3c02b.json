{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport { saveBusinessInfoToDB } from '../services/storageService';\nexport default {\n  name: 'MenuComponent',\n  setup() {\n    // Estado para información del negocio\n    const businessInfo = ref({\n      id: 'business_info_1',\n      name: '',\n      description: '',\n      logo: '',\n      paymentInfo: {\n        qrTitle: '',\n        qrImage: '',\n        nequiNumber: '',\n        nequiImage: ''\n      }\n    });\n    const showBusinessForm = ref(false);\n\n    // Estado para información de pago\n    const paymentInfo = ref({\n      qrTitle: '',\n      qrImage: '',\n      nequiNumber: '',\n      nequiImage: ''\n    });\n    const showPaymentForm = ref(false);\n\n    // Estado para gestión de inventario\n    const inventoryItems = ref([]);\n    const inventoryFilter = ref('all');\n    const showInventorySection = ref(false);\n\n    // Propiedad computada para filtrar items de inventario\n    const filteredInventoryItems = computed(() => {\n      if (inventoryFilter.value === 'all') {\n        return inventoryItems.value;\n      } else if (inventoryFilter.value === 'available') {\n        return inventoryItems.value.filter(item => item.availableQuantity > 0);\n      } else {\n        return inventoryItems.value.filter(item => item.availableQuantity <= 0);\n      }\n    });\n\n    // Estado para categorías\n    const categories = ref([]);\n    const showCategoriesSection = ref(false);\n    const newCategory = ref({\n      name: '',\n      description: ''\n    });\n    const showAddCategoryForm = ref(false);\n\n    // Estado para notificaciones\n    const notification = ref({\n      show: false,\n      message: '',\n      type: 'success',\n      timeout: null\n    });\n\n    // Cargar datos al montar el componente\n    onMounted(async () => {\n      try {\n        // Cargar información del negocio desde IndexedDB\n        const {\n          getBusinessInfo\n        } = await import('../services/storageService');\n        const storedBusinessInfo = await getBusinessInfo();\n        if (storedBusinessInfo) {\n          businessInfo.value = storedBusinessInfo;\n\n          // Si hay información de pago, cargarla en el estado correspondiente\n          if (storedBusinessInfo.paymentInfo) {\n            paymentInfo.value = {\n              qrTitle: storedBusinessInfo.paymentInfo.qrTitle || '',\n              qrImage: storedBusinessInfo.paymentInfo.qrImage || '',\n              nequiNumber: storedBusinessInfo.paymentInfo.nequiNumber || '',\n              nequiImage: storedBusinessInfo.paymentInfo.nequiImage || ''\n            };\n          }\n        }\n\n        // Cargar inventario y categorías\n        try {\n          const {\n            getMenuItems\n          } = await import('../services/storageService');\n          const items = await getMenuItems();\n          if (items && items.length > 0) {\n            // Filtrar solo los elementos que son platos (no categorías)\n            inventoryItems.value = items.filter(item => !item.isCategory);\n          }\n\n          // Extraer categorías de los items (en este caso, asumimos que las categorías están marcadas con isCategory=true)\n          // o podemos usar una lista predefinida si no hay categorías en la base de datos\n          const cats = items ? items.filter(item => item.isCategory) : [];\n          if (cats && cats.length > 0) {\n            categories.value = cats;\n          } else {\n            // Categorías predefinidas si no hay ninguna en la base de datos\n            categories.value = [{\n              id: 'category_1',\n              name: 'Principal',\n              description: 'Platos principales'\n            }, {\n              id: 'category_2',\n              name: 'Entradas',\n              description: 'Entradas y aperitivos'\n            }, {\n              id: 'category_3',\n              name: 'Postres',\n              description: 'Postres y dulces'\n            }, {\n              id: 'category_4',\n              name: 'Bebidas',\n              description: 'Bebidas y refrescos'\n            }];\n          }\n        } catch (loadError) {\n          console.error('Error al cargar inventario y categorías:', loadError);\n          // No mostrar error al usuario, solo registrar en consola\n        }\n        console.log('Datos cargados correctamente');\n      } catch (error) {\n        console.error('Error al cargar datos:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al cargar datos. Por favor, intente nuevamente.',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    });\n\n    // Métodos para información del negocio\n    const toggleBusinessForm = () => {\n      showBusinessForm.value = !showBusinessForm.value;\n    };\n    const onLogoChange = event => {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          businessInfo.value.logo = e.target.result;\n        };\n        reader.readAsDataURL(file);\n      }\n    };\n    const saveBusinessInfo = async () => {\n      try {\n        if (notification.value.timeout) {\n          clearTimeout(notification.value.timeout);\n        }\n        await saveBusinessInfoToDB(businessInfo.value);\n        notification.value = {\n          show: true,\n          message: 'Información del negocio guardada con éxito!',\n          type: 'success',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      } catch (error) {\n        console.error('Error al guardar información del negocio:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al guardar información del negocio',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    const clearBusinessForm = () => {\n      businessInfo.value = {\n        id: 'business_info_1',\n        name: '',\n        description: '',\n        logo: '',\n        paymentInfo: {\n          qrTitle: '',\n          qrImage: '',\n          nequiNumber: '',\n          nequiImage: ''\n        }\n      };\n    };\n\n    // Métodos para información de pago\n    const togglePaymentForm = () => {\n      showPaymentForm.value = !showPaymentForm.value;\n    };\n    const onQRImageChange = event => {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          paymentInfo.value.qrImage = e.target.result;\n        };\n        reader.readAsDataURL(file);\n      }\n    };\n    const onNequiImageChange = event => {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          paymentInfo.value.nequiImage = e.target.result;\n        };\n        reader.readAsDataURL(file);\n      }\n    };\n    const savePaymentInfo = async () => {\n      try {\n        if (notification.value.timeout) {\n          clearTimeout(notification.value.timeout);\n        }\n        if (!businessInfo.value.paymentInfo) {\n          businessInfo.value.paymentInfo = {};\n        }\n        businessInfo.value.paymentInfo.qrTitle = paymentInfo.value.qrTitle;\n        businessInfo.value.paymentInfo.qrImage = paymentInfo.value.qrImage;\n        businessInfo.value.paymentInfo.nequiNumber = paymentInfo.value.nequiNumber;\n        businessInfo.value.paymentInfo.nequiImage = paymentInfo.value.nequiImage;\n        await saveBusinessInfoToDB(businessInfo.value);\n\n        // Sincronizar con el backend\n        try {\n          // Importar dinámicamente para evitar dependencias circulares\n          const {\n            syncBusinessInfoWithBackend\n          } = await import('../services/menuService');\n          await syncBusinessInfoWithBackend(businessInfo.value);\n          console.log('Información de pago sincronizada con el backend');\n        } catch (syncError) {\n          console.error('Error al sincronizar con el backend:', syncError);\n          // No mostrar error al usuario, solo registrar en consola\n        }\n        notification.value = {\n          show: true,\n          message: 'Información de pago guardada con éxito!',\n          type: 'success',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      } catch (error) {\n        console.error('Error al guardar información de pago:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al guardar información de pago',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    const clearPaymentForm = () => {\n      paymentInfo.value = {\n        qrTitle: '',\n        qrImage: '',\n        nequiNumber: '',\n        nequiImage: ''\n      };\n    };\n\n    // Métodos para gestión de inventario\n    const toggleInventorySection = () => {\n      showInventorySection.value = !showInventorySection.value;\n    };\n    const editInventoryItem = async item => {\n      try {\n        // Aquí se implementaría un modal o formulario para editar el item\n        console.log('Editando item:', item);\n\n        // Simulación de edición (en una implementación real, esto sería un formulario)\n        const updatedItem = {\n          ...item,\n          updatedAt: new Date().toISOString()\n        };\n\n        // Actualizar el item en el array local\n        const index = inventoryItems.value.findIndex(i => i.id === item.id);\n        if (index !== -1) {\n          inventoryItems.value[index] = updatedItem;\n        }\n\n        // Guardar en IndexedDB\n        const {\n          saveMenuItem\n        } = await import('../services/storageService');\n        await saveMenuItem(updatedItem);\n\n        // Sincronizar con el backend\n        try {\n          // Usar la función existente para sincronizar con el backend\n          const {\n            syncBusinessInfoWithBackend\n          } = await import('../services/menuService');\n          // Adaptamos la estructura para usar la función existente\n          const syncData = {\n            id: 'inventory_update',\n            inventoryItem: updatedItem\n          };\n          await syncBusinessInfoWithBackend(syncData);\n          console.log('Item de inventario sincronizado con el backend');\n          notification.value = {\n            show: true,\n            message: 'Item actualizado con éxito!',\n            type: 'success',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        } catch (syncError) {\n          console.error('Error al sincronizar item con el backend:', syncError);\n          notification.value = {\n            show: true,\n            message: 'Item actualizado localmente, pero hubo un error al sincronizar con el servidor',\n            type: 'warning',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        }\n      } catch (error) {\n        console.error('Error al editar item:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al actualizar el item',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    const toggleItemAvailability = async item => {\n      try {\n        // Cambiar la disponibilidad del item\n        const updatedItem = {\n          ...item,\n          availableQuantity: item.availableQuantity > 0 ? 0 : 10,\n          updatedAt: new Date().toISOString()\n        };\n\n        // Actualizar el item en el array local\n        const index = inventoryItems.value.findIndex(i => i.id === item.id);\n        if (index !== -1) {\n          inventoryItems.value[index] = updatedItem;\n        }\n\n        // Guardar en IndexedDB\n        const {\n          saveMenuItem\n        } = await import('../services/storageService');\n        await saveMenuItem(updatedItem);\n\n        // Sincronizar con el backend\n        try {\n          // Usar la función existente para sincronizar con el backend\n          const {\n            syncBusinessInfoWithBackend\n          } = await import('../services/menuService');\n          // Adaptamos la estructura para usar la función existente\n          const syncData = {\n            id: 'inventory_update',\n            inventoryItem: updatedItem\n          };\n          await syncBusinessInfoWithBackend(syncData);\n          console.log('Disponibilidad del item sincronizada con el backend');\n          notification.value = {\n            show: true,\n            message: `Item ${updatedItem.availableQuantity > 0 ? 'disponible' : 'no disponible'} actualizado con éxito!`,\n            type: 'success',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        } catch (syncError) {\n          console.error('Error al sincronizar disponibilidad con el backend:', syncError);\n          notification.value = {\n            show: true,\n            message: 'Disponibilidad actualizada localmente, pero hubo un error al sincronizar con el servidor',\n            type: 'warning',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        }\n      } catch (error) {\n        console.error('Error al cambiar disponibilidad:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al actualizar la disponibilidad',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n\n    // Métodos para categorías\n    const toggleCategoriesSection = () => {\n      showCategoriesSection.value = !showCategoriesSection.value;\n    };\n    const editCategory = category => {\n      console.log('Editar categoría:', category);\n    };\n    const deleteCategory = async category => {\n      try {\n        // Confirmar la eliminación (en una implementación real, esto sería un modal de confirmación)\n        const confirmDelete = confirm(`¿Está seguro de eliminar la categoría \"${category.name}\"?`);\n        if (!confirmDelete) return;\n\n        // Eliminar la categoría del array local\n        categories.value = categories.value.filter(c => c.id !== category.id);\n\n        // Eliminar de IndexedDB\n        const {\n          deleteCategoryFromDB\n        } = await import('../services/storageService');\n        await deleteCategoryFromDB(category.id);\n\n        // Sincronizar con el backend\n        try {\n          const {\n            deleteCategoryFromBackend\n          } = await import('../services/menuService');\n          await deleteCategoryFromBackend(category.id);\n          console.log('Categoría eliminada del backend');\n          notification.value = {\n            show: true,\n            message: 'Categoría eliminada con éxito!',\n            type: 'success',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        } catch (syncError) {\n          console.error('Error al eliminar categoría del backend:', syncError);\n          notification.value = {\n            show: true,\n            message: 'Categoría eliminada localmente, pero hubo un error al sincronizar con el servidor',\n            type: 'warning',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        }\n      } catch (error) {\n        console.error('Error al eliminar categoría:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al eliminar la categoría',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    const saveNewCategory = async () => {\n      try {\n        if (notification.value.timeout) {\n          clearTimeout(notification.value.timeout);\n        }\n\n        // Validar que la categoría tenga un nombre\n        if (!newCategory.value.name.trim()) {\n          notification.value = {\n            show: true,\n            message: 'El nombre de la categoría es obligatorio',\n            type: 'error',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n          return;\n        }\n\n        // Crear un ID único para la nueva categoría\n        const newCategoryWithId = {\n          ...newCategory.value,\n          id: 'category_' + Date.now(),\n          createdAt: new Date().toISOString()\n        };\n\n        // Añadir la categoría al array local\n        categories.value.push(newCategoryWithId);\n\n        // Guardar en IndexedDB\n        const {\n          saveCategoryToDB\n        } = await import('../services/storageService');\n        await saveCategoryToDB(newCategoryWithId);\n\n        // Sincronizar con el backend\n        try {\n          const {\n            syncCategoryWithBackend\n          } = await import('../services/menuService');\n          await syncCategoryWithBackend(newCategoryWithId);\n          console.log('Categoría sincronizada con el backend');\n        } catch (syncError) {\n          console.error('Error al sincronizar categoría con el backend:', syncError);\n          // No mostrar error al usuario, solo registrar en consola\n        }\n\n        // Limpiar el formulario\n        clearCategoryForm();\n\n        // Mostrar notificación de éxito\n        notification.value = {\n          show: true,\n          message: 'Categoría guardada con éxito!',\n          type: 'success',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      } catch (error) {\n        console.error('Error al guardar categoría:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al guardar categoría',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    const clearCategoryForm = () => {\n      newCategory.value = {\n        name: '',\n        description: ''\n      };\n    };\n    return {\n      businessInfo,\n      showBusinessForm,\n      toggleBusinessForm,\n      onLogoChange,\n      saveBusinessInfo,\n      clearBusinessForm,\n      paymentInfo,\n      showPaymentForm,\n      togglePaymentForm,\n      onQRImageChange,\n      onNequiImageChange,\n      savePaymentInfo,\n      clearPaymentForm,\n      inventoryItems,\n      inventoryFilter,\n      showInventorySection,\n      toggleInventorySection,\n      editInventoryItem,\n      toggleItemAvailability,\n      filteredInventoryItems,\n      categories,\n      showCategoriesSection,\n      toggleCategoriesSection,\n      editCategory,\n      deleteCategory,\n      newCategory,\n      showAddCategoryForm,\n      saveNewCategory,\n      clearCategoryForm,\n      notification\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","saveBusinessInfoToDB","name","setup","businessInfo","id","description","logo","paymentInfo","qrTitle","qrImage","nequiNumber","nequiImage","showBusinessForm","showPaymentForm","inventoryItems","inventoryFilter","showInventorySection","filteredInventoryItems","value","filter","item","availableQuantity","categories","showCategoriesSection","newCategory","showAddCategoryForm","notification","show","message","type","timeout","getBusinessInfo","storedBusinessInfo","getMenuItems","items","length","isCategory","cats","loadError","console","error","log","setTimeout","toggleBusinessForm","onLogoChange","event","file","target","files","reader","FileReader","onload","e","result","readAsDataURL","saveBusinessInfo","clearTimeout","clearBusinessForm","togglePaymentForm","onQRImageChange","onNequiImageChange","savePaymentInfo","syncBusinessInfoWithBackend","syncError","clearPaymentForm","toggleInventorySection","editInventoryItem","updatedItem","updatedAt","Date","toISOString","index","findIndex","i","saveMenuItem","syncData","inventoryItem","toggleItemAvailability","toggleCategoriesSection","editCategory","category","deleteCategory","confirmDelete","confirm","c","deleteCategoryFromDB","deleteCategoryFromBackend","saveNewCategory","trim","newCategoryWithId","now","createdAt","push","saveCategoryToDB","syncCategoryWithBackend","clearCategoryForm"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\components\\MenuComponent.vue"],"sourcesContent":["<template>\n  <div class=\"menu-component\">\n    <!-- Sección de información del negocio -->\n    <div class=\"business-info-section\">\n      <h3>Información del Negocio</h3>\n      <button @click=\"toggleBusinessForm\" class=\"btn btn-primary\">\n        {{ showBusinessForm ? 'Cancelar' : 'Editar información' }}\n      </button>\n      \n      <div v-if=\"showBusinessForm\" class=\"business-form\">\n        <div class=\"form-group\">\n          <label>Nombre del negocio</label>\n          <input v-model=\"businessInfo.name\" type=\"text\" class=\"form-control\" />\n        </div>\n        <div class=\"form-group\">\n          <label>Descripción</label>\n          <textarea v-model=\"businessInfo.description\" class=\"form-control\"></textarea>\n        </div>\n        <div class=\"form-group\">\n          <label>Logo</label>\n          <input type=\"file\" @change=\"onLogoChange\" accept=\"image/*\" />\n        </div>\n        <div class=\"form-actions\">\n          <button @click=\"saveBusinessInfo\" class=\"btn btn-success\">Guardar</button>\n          <button @click=\"clearBusinessForm\" class=\"btn btn-secondary\">Limpiar</button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Sección de información de pago -->\n    <div class=\"payment-info-section\">\n      <h3>Forma de Pago</h3>\n      <button @click=\"togglePaymentForm\" class=\"btn btn-primary\">\n        {{ showPaymentForm ? 'Cancelar' : 'Editar información de pago' }}\n      </button>\n      \n      <div v-if=\"showPaymentForm\" class=\"payment-form\">\n        <div class=\"form-group\">\n          <label>Título QR</label>\n          <input v-model=\"paymentInfo.qrTitle\" type=\"text\" class=\"form-control\" />\n        </div>\n        <div class=\"form-group\">\n          <label>Imagen QR</label>\n          <input type=\"file\" @change=\"onQRImageChange\" accept=\"image/*\" />\n        </div>\n        <div class=\"form-group\">\n          <label>Número Nequi</label>\n          <input v-model=\"paymentInfo.nequiNumber\" type=\"text\" class=\"form-control\" />\n        </div>\n        <div class=\"form-group\">\n          <label>Imagen Nequi</label>\n          <input type=\"file\" @change=\"onNequiImageChange\" accept=\"image/*\" />\n        </div>\n        <div class=\"form-actions\">\n          <button @click=\"savePaymentInfo\" class=\"btn btn-success\">Guardar</button>\n          <button @click=\"clearPaymentForm\" class=\"btn btn-secondary\">Limpiar</button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Sección de gestión de inventario -->\n    <div class=\"inventory-section\">\n      <h3>Gestión de Inventario</h3>\n      <button @click=\"toggleInventorySection\" class=\"btn btn-primary\">\n        {{ showInventorySection ? 'Ocultar inventario' : 'Mostrar inventario' }}\n      </button>\n      \n      <div v-if=\"showInventorySection\" class=\"inventory-content\">\n        <div class=\"inventory-filters\">\n          <select v-model=\"inventoryFilter\" class=\"form-control\">\n            <option value=\"all\">Todos los productos</option>\n            <option value=\"available\">Disponibles</option>\n            <option value=\"unavailable\">No disponibles</option>\n          </select>\n        </div>\n        \n        <div class=\"inventory-list\">\n          <div v-for=\"item in filteredInventoryItems\" :key=\"item.id\" class=\"inventory-item\">\n            <div class=\"item-info\">\n              <h4>{{ item.name }}</h4>\n              <p>{{ item.description }}</p>\n              <p>Precio: ${{ item.price }}</p>\n              <p>Disponible: {{ item.availableQuantity > 0 ? 'Sí' : 'No' }}</p>\n              <p>Cantidad: {{ item.availableQuantity }}</p>\n            </div>\n            <div class=\"item-actions\">\n              <button @click=\"editInventoryItem(item)\" class=\"btn btn-info\">Editar</button>\n              <button @click=\"toggleItemAvailability(item)\" class=\"btn\" :class=\"item.availableQuantity > 0 ? 'btn-warning' : 'btn-success'\">\n                {{ item.availableQuantity > 0 ? 'Marcar no disponible' : 'Marcar disponible' }}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Sección de categorías -->\n    <div class=\"categories-section\">\n      <h3>Categorías</h3>\n      <button @click=\"toggleCategoriesSection\" class=\"btn btn-primary\">\n        {{ showCategoriesSection ? 'Ocultar categorías' : 'Mostrar categorías' }}\n      </button>\n      \n      <div v-if=\"showCategoriesSection\" class=\"categories-content\">\n        <div class=\"categories-list\">\n          <div v-for=\"category in categories\" :key=\"category.id\" class=\"category-item\">\n            <div class=\"category-info\">\n              <h4>{{ category.name }}</h4>\n              <p>{{ category.description }}</p>\n            </div>\n            <div class=\"category-actions\">\n              <button @click=\"editCategory(category)\" class=\"btn btn-info\">Editar</button>\n              <button @click=\"deleteCategory(category)\" class=\"btn btn-danger\">Eliminar</button>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"add-category\">\n          <button @click=\"showAddCategoryForm = !showAddCategoryForm\" class=\"btn btn-success\">\n            {{ showAddCategoryForm ? 'Cancelar' : 'Añadir categoría' }}\n          </button>\n          \n          <div v-if=\"showAddCategoryForm\" class=\"category-form\">\n            <div class=\"form-group\">\n              <label>Nombre de la categoría</label>\n              <input v-model=\"newCategory.name\" type=\"text\" class=\"form-control\" />\n            </div>\n            <div class=\"form-group\">\n              <label>Descripción</label>\n              <textarea v-model=\"newCategory.description\" class=\"form-control\"></textarea>\n            </div>\n            <div class=\"form-actions\">\n              <button @click=\"saveNewCategory\" class=\"btn btn-success\">Guardar</button>\n              <button @click=\"clearCategoryForm\" class=\"btn btn-secondary\">Limpiar</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Notificación -->\n    <div v-if=\"notification.show\" :class=\"['notification', notification.type]\">\n      {{ notification.message }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed } from 'vue';\nimport { saveBusinessInfoToDB } from '../services/storageService';\n\nexport default {\n  name: 'MenuComponent',\n  \n  setup() {\n    // Estado para información del negocio\n    const businessInfo = ref({\n      id: 'business_info_1',\n      name: '',\n      description: '',\n      logo: '',\n      paymentInfo: {\n        qrTitle: '',\n        qrImage: '',\n        nequiNumber: '',\n        nequiImage: ''\n      }\n    });\n    \n    const showBusinessForm = ref(false);\n    \n    // Estado para información de pago\n    const paymentInfo = ref({\n      qrTitle: '',\n      qrImage: '',\n      nequiNumber: '',\n      nequiImage: ''\n    });\n    \n    const showPaymentForm = ref(false);\n    \n    // Estado para gestión de inventario\n    const inventoryItems = ref([]);\n    const inventoryFilter = ref('all');\n    const showInventorySection = ref(false);\n    \n    // Propiedad computada para filtrar items de inventario\n    const filteredInventoryItems = computed(() => {\n      if (inventoryFilter.value === 'all') {\n        return inventoryItems.value;\n      } else if (inventoryFilter.value === 'available') {\n        return inventoryItems.value.filter(item => item.availableQuantity > 0);\n      } else {\n        return inventoryItems.value.filter(item => item.availableQuantity <= 0);\n      }\n    });\n    \n    // Estado para categorías\n    const categories = ref([]);\n    const showCategoriesSection = ref(false);\n    const newCategory = ref({\n      name: '',\n      description: ''\n    });\n    const showAddCategoryForm = ref(false);\n    \n    // Estado para notificaciones\n    const notification = ref({\n      show: false,\n      message: '',\n      type: 'success',\n      timeout: null\n    });\n    \n    // Cargar datos al montar el componente\n    onMounted(async () => {\n      try {\n        // Cargar información del negocio desde IndexedDB\n        const { getBusinessInfo } = await import('../services/storageService');\n        const storedBusinessInfo = await getBusinessInfo();\n        \n        if (storedBusinessInfo) {\n          businessInfo.value = storedBusinessInfo;\n          \n          // Si hay información de pago, cargarla en el estado correspondiente\n          if (storedBusinessInfo.paymentInfo) {\n            paymentInfo.value = {\n              qrTitle: storedBusinessInfo.paymentInfo.qrTitle || '',\n              qrImage: storedBusinessInfo.paymentInfo.qrImage || '',\n              nequiNumber: storedBusinessInfo.paymentInfo.nequiNumber || '',\n              nequiImage: storedBusinessInfo.paymentInfo.nequiImage || ''\n            };\n          }\n        }\n        \n        // Cargar inventario y categorías\n        try {\n          const { getMenuItems } = await import('../services/storageService');\n          const items = await getMenuItems();\n          if (items && items.length > 0) {\n            // Filtrar solo los elementos que son platos (no categorías)\n            inventoryItems.value = items.filter(item => !item.isCategory);\n          }\n          \n          // Extraer categorías de los items (en este caso, asumimos que las categorías están marcadas con isCategory=true)\n          // o podemos usar una lista predefinida si no hay categorías en la base de datos\n          const cats = items ? items.filter(item => item.isCategory) : [];\n          if (cats && cats.length > 0) {\n            categories.value = cats;\n          } else {\n            // Categorías predefinidas si no hay ninguna en la base de datos\n            categories.value = [\n              { id: 'category_1', name: 'Principal', description: 'Platos principales' },\n              { id: 'category_2', name: 'Entradas', description: 'Entradas y aperitivos' },\n              { id: 'category_3', name: 'Postres', description: 'Postres y dulces' },\n              { id: 'category_4', name: 'Bebidas', description: 'Bebidas y refrescos' }\n            ];\n          }\n        } catch (loadError) {\n          console.error('Error al cargar inventario y categorías:', loadError);\n          // No mostrar error al usuario, solo registrar en consola\n        }\n        \n        console.log('Datos cargados correctamente');\n      } catch (error) {\n        console.error('Error al cargar datos:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al cargar datos. Por favor, intente nuevamente.',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    });\n    \n    // Métodos para información del negocio\n    const toggleBusinessForm = () => {\n      showBusinessForm.value = !showBusinessForm.value;\n    };\n    \n    const onLogoChange = (event) => {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          businessInfo.value.logo = e.target.result;\n        };\n        reader.readAsDataURL(file);\n      }\n    };\n    \n    const saveBusinessInfo = async () => {\n      try {\n        if (notification.value.timeout) {\n          clearTimeout(notification.value.timeout);\n        }\n        \n        await saveBusinessInfoToDB(businessInfo.value);\n        \n        notification.value = {\n          show: true,\n          message: 'Información del negocio guardada con éxito!',\n          type: 'success',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      } catch (error) {\n        console.error('Error al guardar información del negocio:', error);\n        \n        notification.value = {\n          show: true,\n          message: 'Error al guardar información del negocio',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    \n    const clearBusinessForm = () => {\n      businessInfo.value = {\n        id: 'business_info_1',\n        name: '',\n        description: '',\n        logo: '',\n        paymentInfo: {\n          qrTitle: '',\n          qrImage: '',\n          nequiNumber: '',\n          nequiImage: ''\n        }\n      };\n    };\n    \n    // Métodos para información de pago\n    const togglePaymentForm = () => {\n      showPaymentForm.value = !showPaymentForm.value;\n    };\n    \n    const onQRImageChange = (event) => {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          paymentInfo.value.qrImage = e.target.result;\n        };\n        reader.readAsDataURL(file);\n      }\n    };\n    \n    const onNequiImageChange = (event) => {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          paymentInfo.value.nequiImage = e.target.result;\n        };\n        reader.readAsDataURL(file);\n      }\n    };\n    \n    const savePaymentInfo = async () => {\n      try {\n        if (notification.value.timeout) {\n          clearTimeout(notification.value.timeout);\n        }\n        \n        if (!businessInfo.value.paymentInfo) {\n          businessInfo.value.paymentInfo = {};\n        }\n        \n        businessInfo.value.paymentInfo.qrTitle = paymentInfo.value.qrTitle;\n        businessInfo.value.paymentInfo.qrImage = paymentInfo.value.qrImage;\n        businessInfo.value.paymentInfo.nequiNumber = paymentInfo.value.nequiNumber;\n        businessInfo.value.paymentInfo.nequiImage = paymentInfo.value.nequiImage;\n        \n        await saveBusinessInfoToDB(businessInfo.value);\n        \n        // Sincronizar con el backend\n        try {\n          // Importar dinámicamente para evitar dependencias circulares\n          const { syncBusinessInfoWithBackend } = await import('../services/menuService');\n          await syncBusinessInfoWithBackend(businessInfo.value);\n          console.log('Información de pago sincronizada con el backend');\n        } catch (syncError) {\n          console.error('Error al sincronizar con el backend:', syncError);\n          // No mostrar error al usuario, solo registrar en consola\n        }\n        \n        notification.value = {\n          show: true,\n          message: 'Información de pago guardada con éxito!',\n          type: 'success',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      } catch (error) {\n        console.error('Error al guardar información de pago:', error);\n        \n        notification.value = {\n          show: true,\n          message: 'Error al guardar información de pago',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    \n    const clearPaymentForm = () => {\n      paymentInfo.value = {\n        qrTitle: '',\n        qrImage: '',\n        nequiNumber: '',\n        nequiImage: ''\n      };\n    };\n    \n    // Métodos para gestión de inventario\n    const toggleInventorySection = () => {\n      showInventorySection.value = !showInventorySection.value;\n    };\n    \n    const editInventoryItem = async (item) => {\n      try {\n        // Aquí se implementaría un modal o formulario para editar el item\n        console.log('Editando item:', item);\n        \n        // Simulación de edición (en una implementación real, esto sería un formulario)\n        const updatedItem = { ...item, updatedAt: new Date().toISOString() };\n        \n        // Actualizar el item en el array local\n        const index = inventoryItems.value.findIndex(i => i.id === item.id);\n        if (index !== -1) {\n          inventoryItems.value[index] = updatedItem;\n        }\n        \n        // Guardar en IndexedDB\n        const { saveMenuItem } = await import('../services/storageService');\n        await saveMenuItem(updatedItem);\n        \n        // Sincronizar con el backend\n        try {\n          // Usar la función existente para sincronizar con el backend\n          const { syncBusinessInfoWithBackend } = await import('../services/menuService');\n          // Adaptamos la estructura para usar la función existente\n          const syncData = {\n            id: 'inventory_update',\n            inventoryItem: updatedItem\n          };\n          await syncBusinessInfoWithBackend(syncData);\n          console.log('Item de inventario sincronizado con el backend');\n          \n          notification.value = {\n            show: true,\n            message: 'Item actualizado con éxito!',\n            type: 'success',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        } catch (syncError) {\n          console.error('Error al sincronizar item con el backend:', syncError);\n          notification.value = {\n            show: true,\n            message: 'Item actualizado localmente, pero hubo un error al sincronizar con el servidor',\n            type: 'warning',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        }\n      } catch (error) {\n        console.error('Error al editar item:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al actualizar el item',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    \n    const toggleItemAvailability = async (item) => {\n      try {\n        // Cambiar la disponibilidad del item\n        const updatedItem = { \n          ...item, \n          availableQuantity: item.availableQuantity > 0 ? 0 : 10,\n          updatedAt: new Date().toISOString()\n        };\n        \n        // Actualizar el item en el array local\n        const index = inventoryItems.value.findIndex(i => i.id === item.id);\n        if (index !== -1) {\n          inventoryItems.value[index] = updatedItem;\n        }\n        \n        // Guardar en IndexedDB\n        const { saveMenuItem } = await import('../services/storageService');\n        await saveMenuItem(updatedItem);\n        \n        // Sincronizar con el backend\n        try {\n          // Usar la función existente para sincronizar con el backend\n          const { syncBusinessInfoWithBackend } = await import('../services/menuService');\n          // Adaptamos la estructura para usar la función existente\n          const syncData = {\n            id: 'inventory_update',\n            inventoryItem: updatedItem\n          };\n          await syncBusinessInfoWithBackend(syncData);\n          console.log('Disponibilidad del item sincronizada con el backend');\n          \n          notification.value = {\n            show: true,\n            message: `Item ${updatedItem.availableQuantity > 0 ? 'disponible' : 'no disponible'} actualizado con éxito!`,\n            type: 'success',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        } catch (syncError) {\n          console.error('Error al sincronizar disponibilidad con el backend:', syncError);\n          notification.value = {\n            show: true,\n            message: 'Disponibilidad actualizada localmente, pero hubo un error al sincronizar con el servidor',\n            type: 'warning',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        }\n      } catch (error) {\n        console.error('Error al cambiar disponibilidad:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al actualizar la disponibilidad',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    \n    // Métodos para categorías\n    const toggleCategoriesSection = () => {\n      showCategoriesSection.value = !showCategoriesSection.value;\n    };\n    \n    const editCategory = (category) => {\n      console.log('Editar categoría:', category);\n    };\n    \n    const deleteCategory = async (category) => {\n      try {\n        // Confirmar la eliminación (en una implementación real, esto sería un modal de confirmación)\n        const confirmDelete = confirm(`¿Está seguro de eliminar la categoría \"${category.name}\"?`);\n        if (!confirmDelete) return;\n        \n        // Eliminar la categoría del array local\n        categories.value = categories.value.filter(c => c.id !== category.id);\n        \n        // Eliminar de IndexedDB\n        const { deleteCategoryFromDB } = await import('../services/storageService');\n        await deleteCategoryFromDB(category.id);\n        \n        // Sincronizar con el backend\n        try {\n          const { deleteCategoryFromBackend } = await import('../services/menuService');\n          await deleteCategoryFromBackend(category.id);\n          console.log('Categoría eliminada del backend');\n          \n          notification.value = {\n            show: true,\n            message: 'Categoría eliminada con éxito!',\n            type: 'success',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        } catch (syncError) {\n          console.error('Error al eliminar categoría del backend:', syncError);\n          notification.value = {\n            show: true,\n            message: 'Categoría eliminada localmente, pero hubo un error al sincronizar con el servidor',\n            type: 'warning',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        }\n      } catch (error) {\n        console.error('Error al eliminar categoría:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al eliminar la categoría',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    \n    const saveNewCategory = async () => {\n      try {\n        if (notification.value.timeout) {\n          clearTimeout(notification.value.timeout);\n        }\n        \n        // Validar que la categoría tenga un nombre\n        if (!newCategory.value.name.trim()) {\n          notification.value = {\n            show: true,\n            message: 'El nombre de la categoría es obligatorio',\n            type: 'error',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n          return;\n        }\n        \n        // Crear un ID único para la nueva categoría\n        const newCategoryWithId = {\n          ...newCategory.value,\n          id: 'category_' + Date.now(),\n          createdAt: new Date().toISOString()\n        };\n        \n        // Añadir la categoría al array local\n        categories.value.push(newCategoryWithId);\n        \n        // Guardar en IndexedDB\n        const { saveCategoryToDB } = await import('../services/storageService');\n        await saveCategoryToDB(newCategoryWithId);\n        \n        // Sincronizar con el backend\n        try {\n          const { syncCategoryWithBackend } = await import('../services/menuService');\n          await syncCategoryWithBackend(newCategoryWithId);\n          console.log('Categoría sincronizada con el backend');\n        } catch (syncError) {\n          console.error('Error al sincronizar categoría con el backend:', syncError);\n          // No mostrar error al usuario, solo registrar en consola\n        }\n        \n        // Limpiar el formulario\n        clearCategoryForm();\n        \n        // Mostrar notificación de éxito\n        notification.value = {\n          show: true,\n          message: 'Categoría guardada con éxito!',\n          type: 'success',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      } catch (error) {\n        console.error('Error al guardar categoría:', error);\n        \n        notification.value = {\n          show: true,\n          message: 'Error al guardar categoría',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    \n    const clearCategoryForm = () => {\n      newCategory.value = {\n        name: '',\n        description: ''\n      };\n    };\n    \n    return {\n      businessInfo,\n      showBusinessForm,\n      toggleBusinessForm,\n      onLogoChange,\n      saveBusinessInfo,\n      clearBusinessForm,\n      paymentInfo,\n      showPaymentForm,\n      togglePaymentForm,\n      onQRImageChange,\n      onNequiImageChange,\n      savePaymentInfo,\n      clearPaymentForm,\n      inventoryItems,\n      inventoryFilter,\n      showInventorySection,\n      toggleInventorySection,\n      editInventoryItem,\n      toggleItemAvailability,\n      filteredInventoryItems,\n      categories,\n      showCategoriesSection,\n      toggleCategoriesSection,\n      editCategory,\n      deleteCategory,\n      newCategory,\n      showAddCategoryForm,\n      saveNewCategory,\n      clearCategoryForm,\n      notification\n    };\n  }\n};\n</script>\n\n<style scoped>\n.menu-component {\n  padding: 20px;\n}\n\n.business-info-section,\n.payment-info-section,\n.inventory-section,\n.categories-section {\n  margin-bottom: 30px;\n  padding: 20px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\n.form-control {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.form-actions {\n  margin-top: 20px;\n}\n\n.btn {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-right: 10px;\n}\n\n.btn-primary {\n  background-color: #007bff;\n  color: white;\n}\n\n.btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n\n.notification {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  padding: 15px;\n  border-radius: 4px;\n  color: white;\n  z-index: 1000;\n}\n\n.success {\n  background-color: #28a745;\n}\n\n.error {\n  background-color: #dc3545;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}