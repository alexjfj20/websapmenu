{"ast":null,"code":"import { ref, reactive } from 'vue';\n\n// Estado del diálogo\nconst state = reactive({\n  show: false,\n  title: 'Confirmar',\n  message: '',\n  confirmText: 'Sí',\n  cancelText: 'No',\n  resolvePromise: null,\n  rejectPromise: null\n});\n\n/**\r\n * Muestra un diálogo de confirmación y devuelve una promesa\r\n * que se resolverá cuando el usuario responda\r\n * @param {string} message - Mensaje a mostrar\r\n * @param {Object} options - Opciones adicionales del diálogo\r\n * @returns {Promise<boolean>} - Promesa que se resuelve con true (confirmar) o false (cancelar)\r\n */\nexport function confirm(message, options = {}) {\n  return new Promise((resolve, reject) => {\n    // Configurar el estado del diálogo\n    state.show = true;\n    state.message = message;\n    state.title = options.title || 'Confirmar';\n    state.confirmText = options.confirmText || 'Sí';\n    state.cancelText = options.cancelText || 'No';\n\n    // Guardar las funciones resolve/reject para usarlas más tarde\n    state.resolvePromise = resolve;\n    state.rejectPromise = reject;\n  });\n}\n\n/**\r\n * Confirma el diálogo (usuario seleccionó \"Sí\")\r\n */\nexport function handleConfirm() {\n  if (state.resolvePromise) {\n    state.resolvePromise(true);\n  }\n  resetDialog();\n}\n\n/**\r\n * Cancela el diálogo (usuario seleccionó \"No\")\r\n */\nexport function handleCancel() {\n  if (state.resolvePromise) {\n    state.resolvePromise(false);\n  }\n  resetDialog();\n}\n\n/**\r\n * Resetea el estado del diálogo\r\n */\nfunction resetDialog() {\n  state.show = false;\n  state.message = '';\n  state.title = 'Confirmar';\n  state.confirmText = 'Sí';\n  state.cancelText = 'No';\n  state.resolvePromise = null;\n  state.rejectPromise = null;\n}\nexport default {\n  state,\n  confirm,\n  handleConfirm,\n  handleCancel\n};","map":{"version":3,"names":["ref","reactive","state","show","title","message","confirmText","cancelText","resolvePromise","rejectPromise","confirm","options","Promise","resolve","reject","handleConfirm","resetDialog","handleCancel"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/dialogService.js"],"sourcesContent":["import { ref, reactive } from 'vue';\r\n\r\n// Estado del diálogo\r\nconst state = reactive({\r\n  show: false,\r\n  title: 'Confirmar',\r\n  message: '',\r\n  confirmText: 'Sí',\r\n  cancelText: 'No',\r\n  resolvePromise: null,\r\n  rejectPromise: null\r\n});\r\n\r\n/**\r\n * Muestra un diálogo de confirmación y devuelve una promesa\r\n * que se resolverá cuando el usuario responda\r\n * @param {string} message - Mensaje a mostrar\r\n * @param {Object} options - Opciones adicionales del diálogo\r\n * @returns {Promise<boolean>} - Promesa que se resuelve con true (confirmar) o false (cancelar)\r\n */\r\nexport function confirm(message, options = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    // Configurar el estado del diálogo\r\n    state.show = true;\r\n    state.message = message;\r\n    state.title = options.title || 'Confirmar';\r\n    state.confirmText = options.confirmText || 'Sí';\r\n    state.cancelText = options.cancelText || 'No';\r\n    \r\n    // Guardar las funciones resolve/reject para usarlas más tarde\r\n    state.resolvePromise = resolve;\r\n    state.rejectPromise = reject;\r\n  });\r\n}\r\n\r\n/**\r\n * Confirma el diálogo (usuario seleccionó \"Sí\")\r\n */\r\nexport function handleConfirm() {\r\n  if (state.resolvePromise) {\r\n    state.resolvePromise(true);\r\n  }\r\n  resetDialog();\r\n}\r\n\r\n/**\r\n * Cancela el diálogo (usuario seleccionó \"No\")\r\n */\r\nexport function handleCancel() {\r\n  if (state.resolvePromise) {\r\n    state.resolvePromise(false);\r\n  }\r\n  resetDialog();\r\n}\r\n\r\n/**\r\n * Resetea el estado del diálogo\r\n */\r\nfunction resetDialog() {\r\n  state.show = false;\r\n  state.message = '';\r\n  state.title = 'Confirmar';\r\n  state.confirmText = 'Sí';\r\n  state.cancelText = 'No';\r\n  state.resolvePromise = null;\r\n  state.rejectPromise = null;\r\n}\r\n\r\nexport default {\r\n  state,\r\n  confirm,\r\n  handleConfirm,\r\n  handleCancel\r\n};\r\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,QAAQ,QAAQ,KAAK;;AAEnC;AACA,MAAMC,KAAK,GAAGD,QAAQ,CAAC;EACrBE,IAAI,EAAE,KAAK;EACXC,KAAK,EAAE,WAAW;EAClBC,OAAO,EAAE,EAAE;EACXC,WAAW,EAAE,IAAI;EACjBC,UAAU,EAAE,IAAI;EAChBC,cAAc,EAAE,IAAI;EACpBC,aAAa,EAAE;AACjB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACL,OAAO,EAAEM,OAAO,GAAG,CAAC,CAAC,EAAE;EAC7C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC;IACAZ,KAAK,CAACC,IAAI,GAAG,IAAI;IACjBD,KAAK,CAACG,OAAO,GAAGA,OAAO;IACvBH,KAAK,CAACE,KAAK,GAAGO,OAAO,CAACP,KAAK,IAAI,WAAW;IAC1CF,KAAK,CAACI,WAAW,GAAGK,OAAO,CAACL,WAAW,IAAI,IAAI;IAC/CJ,KAAK,CAACK,UAAU,GAAGI,OAAO,CAACJ,UAAU,IAAI,IAAI;;IAE7C;IACAL,KAAK,CAACM,cAAc,GAAGK,OAAO;IAC9BX,KAAK,CAACO,aAAa,GAAGK,MAAM;EAC9B,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAAA,EAAG;EAC9B,IAAIb,KAAK,CAACM,cAAc,EAAE;IACxBN,KAAK,CAACM,cAAc,CAAC,IAAI,CAAC;EAC5B;EACAQ,WAAW,CAAC,CAAC;AACf;;AAEA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAAA,EAAG;EAC7B,IAAIf,KAAK,CAACM,cAAc,EAAE;IACxBN,KAAK,CAACM,cAAc,CAAC,KAAK,CAAC;EAC7B;EACAQ,WAAW,CAAC,CAAC;AACf;;AAEA;AACA;AACA;AACA,SAASA,WAAWA,CAAA,EAAG;EACrBd,KAAK,CAACC,IAAI,GAAG,KAAK;EAClBD,KAAK,CAACG,OAAO,GAAG,EAAE;EAClBH,KAAK,CAACE,KAAK,GAAG,WAAW;EACzBF,KAAK,CAACI,WAAW,GAAG,IAAI;EACxBJ,KAAK,CAACK,UAAU,GAAG,IAAI;EACvBL,KAAK,CAACM,cAAc,GAAG,IAAI;EAC3BN,KAAK,CAACO,aAAa,GAAG,IAAI;AAC5B;AAEA,eAAe;EACbP,KAAK;EACLQ,OAAO;EACPK,aAAa;EACbE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}