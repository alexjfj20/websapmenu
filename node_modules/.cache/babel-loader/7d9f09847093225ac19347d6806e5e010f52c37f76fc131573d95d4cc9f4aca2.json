{"ast":null,"code":"// Importar fetch (no necesitamos axios)\n// Configuración de la API base\nconst API_URL = process.env.VUE_APP_API_URL || 'http://localhost:3000/api';\n\n// Variables para el usuario actual y token\nlet currentUser = null;\nlet authToken = localStorage.getItem('auth_token') || null;\n\n/**\r\n * Configura el token de autorización para las solicitudes API\r\n * @param {string} token - Token JWT\r\n */\nfunction setAuthToken(token) {\n  if (token) {\n    localStorage.setItem('auth_token', token);\n    authToken = token;\n  } else {\n    localStorage.removeItem('auth_token');\n    authToken = null;\n  }\n}\n\n/**\r\n * Función para iniciar sesión con la API\r\n * @param {string} email - Correo electrónico del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\nasync function login(email, password) {\n  console.log(\"Intentando iniciar sesión como:\", email);\n  console.log(\"URL de la API:\", API_URL);\n  try {\n    // Usar fetch para conexión con el backend\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    console.log(\"Status de respuesta:\", response.status);\n\n    // Para depuración, obtener el texto completo de la respuesta\n    const responseText = await response.text();\n    console.log(\"Respuesta recibida:\", responseText);\n\n    // Intentar parsear como JSON\n    let data;\n    try {\n      data = JSON.parse(responseText);\n    } catch (parseError) {\n      console.error(\"Error al parsear respuesta JSON:\", parseError);\n      throw new Error(`El servidor devolvió una respuesta inválida. Status: ${response.status}`);\n    }\n    if (!response.ok) {\n      throw new Error(data.message || `Error en la solicitud: ${response.status}`);\n    }\n\n    // Extraer usuario y token de la respuesta\n    const {\n      usuario,\n      token\n    } = data;\n\n    // Almacenar token\n    setAuthToken(token);\n\n    // Guardar usuario en memoria y localStorage\n    currentUser = usuario;\n    localStorage.setItem('current_user', JSON.stringify(usuario));\n    return usuario;\n  } catch (error) {\n    console.error(\"Error en login:\", error);\n    throw error;\n  }\n}\n\n/**\r\n * Cierra la sesión del usuario\r\n */\nfunction logout() {\n  currentUser = null;\n  localStorage.removeItem('auth_token');\n  localStorage.removeItem('current_user');\n}\n\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} - Verdadero si hay un usuario autenticado\r\n */\nfunction isAuthenticated() {\n  if (!currentUser && localStorage.getItem('auth_token')) {\n    try {\n      currentUser = JSON.parse(localStorage.getItem('current_user'));\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n    }\n  }\n  return !!currentUser;\n}\n\n/**\r\n * Obtiene el usuario actual\r\n * @returns {Object|null} - Usuario actual o null\r\n */\nfunction getCurrentUser() {\n  if (!currentUser && localStorage.getItem('auth_token')) {\n    try {\n      currentUser = JSON.parse(localStorage.getItem('current_user'));\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n    }\n  }\n  return currentUser;\n}\n\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName - Nombre del rol a verificar\r\n * @returns {boolean} - Verdadero si el usuario tiene el rol\r\n */\nfunction hasRole(roleName) {\n  const user = getCurrentUser();\n  if (!user || !user.roles) {\n    return false;\n  }\n  return Array.isArray(user.roles) ? user.roles.includes(roleName) : user.roles === roleName;\n}\nexport { login, logout, isAuthenticated, hasRole, getCurrentUser };\nexport default {\n  login,\n  logout,\n  isAuthenticated,\n  hasRole,\n  getCurrentUser\n};","map":{"version":3,"names":["API_URL","process","env","VUE_APP_API_URL","currentUser","authToken","localStorage","getItem","setAuthToken","token","setItem","removeItem","login","email","password","console","log","response","fetch","method","headers","body","JSON","stringify","status","responseText","text","data","parse","parseError","error","Error","ok","message","usuario","logout","isAuthenticated","e","getCurrentUser","hasRole","roleName","user","roles","Array","isArray","includes"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/authService.js"],"sourcesContent":["// Importar fetch (no necesitamos axios)\r\n// Configuración de la API base\r\nconst API_URL = process.env.VUE_APP_API_URL || 'http://localhost:3000/api';\r\n\r\n// Variables para el usuario actual y token\r\nlet currentUser = null;\r\nlet authToken = localStorage.getItem('auth_token') || null;\r\n\r\n/**\r\n * Configura el token de autorización para las solicitudes API\r\n * @param {string} token - Token JWT\r\n */\r\nfunction setAuthToken(token) {\r\n  if (token) {\r\n    localStorage.setItem('auth_token', token);\r\n    authToken = token;\r\n  } else {\r\n    localStorage.removeItem('auth_token');\r\n    authToken = null;\r\n  }\r\n}\r\n\r\n/**\r\n * Función para iniciar sesión con la API\r\n * @param {string} email - Correo electrónico del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\r\nasync function login(email, password) {\r\n  console.log(\"Intentando iniciar sesión como:\", email);\r\n  console.log(\"URL de la API:\", API_URL);\r\n  \r\n  try {\r\n    // Usar fetch para conexión con el backend\r\n    const response = await fetch(`${API_URL}/auth/login`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ email, password })\r\n    });\r\n    \r\n    console.log(\"Status de respuesta:\", response.status);\r\n    \r\n    // Para depuración, obtener el texto completo de la respuesta\r\n    const responseText = await response.text();\r\n    console.log(\"Respuesta recibida:\", responseText);\r\n    \r\n    // Intentar parsear como JSON\r\n    let data;\r\n    try {\r\n      data = JSON.parse(responseText);\r\n    } catch (parseError) {\r\n      console.error(\"Error al parsear respuesta JSON:\", parseError);\r\n      throw new Error(`El servidor devolvió una respuesta inválida. Status: ${response.status}`);\r\n    }\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.message || `Error en la solicitud: ${response.status}`);\r\n    }\r\n    \r\n    // Extraer usuario y token de la respuesta\r\n    const { usuario, token } = data;\r\n    \r\n    // Almacenar token\r\n    setAuthToken(token);\r\n    \r\n    // Guardar usuario en memoria y localStorage\r\n    currentUser = usuario;\r\n    localStorage.setItem('current_user', JSON.stringify(usuario));\r\n    \r\n    return usuario;\r\n  } catch (error) {\r\n    console.error(\"Error en login:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Cierra la sesión del usuario\r\n */\r\nfunction logout() {\r\n  currentUser = null;\r\n  localStorage.removeItem('auth_token');\r\n  localStorage.removeItem('current_user');\r\n}\r\n\r\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} - Verdadero si hay un usuario autenticado\r\n */\r\nfunction isAuthenticated() {\r\n  if (!currentUser && localStorage.getItem('auth_token')) {\r\n    try {\r\n      currentUser = JSON.parse(localStorage.getItem('current_user'));\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n    }\r\n  }\r\n  \r\n  return !!currentUser;\r\n}\r\n\r\n/**\r\n * Obtiene el usuario actual\r\n * @returns {Object|null} - Usuario actual o null\r\n */\r\nfunction getCurrentUser() {\r\n  if (!currentUser && localStorage.getItem('auth_token')) {\r\n    try {\r\n      currentUser = JSON.parse(localStorage.getItem('current_user'));\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n    }\r\n  }\r\n  \r\n  return currentUser;\r\n}\r\n\r\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName - Nombre del rol a verificar\r\n * @returns {boolean} - Verdadero si el usuario tiene el rol\r\n */\r\nfunction hasRole(roleName) {\r\n  const user = getCurrentUser();\r\n  \r\n  if (!user || !user.roles) {\r\n    return false;\r\n  }\r\n  \r\n  return Array.isArray(user.roles) \r\n    ? user.roles.includes(roleName) \r\n    : user.roles === roleName;\r\n}\r\n\r\nexport {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}