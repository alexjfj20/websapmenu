{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nconst DB_NAME = 'websapDatabase';\n// Incrementar versión de la base de datos para forzar la actualización\nconst DB_VERSION = 2;\nconst MENU_STORE = 'menuItems';\nconst IMAGE_STORE = 'menuImages';\nconst SOLD_ITEMS_STORE = 'soldItems';\nconst BUSINESS_INFO_STORE = 'businessInfo';\nconst USERS_STORE = 'users';\n\n// Abrir la conexión a la base de datos con manejo mejorado de errores\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      // Intentar abrir la base de datos de manera normal, sin eliminar\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\n        reject('Error al abrir la base de datos: ' + event.target.errorCode);\n      };\n      request.onsuccess = event => {\n        const db = event.target.result;\n        console.log(\"Base de datos abierta con éxito, versión:\", db.version);\n\n        // Verificar que todos los almacenes necesarios existen\n        const existingStores = Array.from(db.objectStoreNames);\n        const requiredStores = [MENU_STORE, IMAGE_STORE, SOLD_ITEMS_STORE, BUSINESS_INFO_STORE, USERS_STORE];\n        const missingStores = requiredStores.filter(store => !existingStores.includes(store));\n        if (missingStores.length > 0) {\n          // Si faltan stores, cerramos esta conexión y actualizamos la versión\n          db.close();\n          console.log(\"Faltan almacenes necesarios:\", missingStores);\n          console.log(\"Se incrementará la versión de la BD para crear los almacenes faltantes\");\n\n          // Incrementar versión para forzar onupgradeneeded\n          const upgradedRequest = indexedDB.open(DB_NAME, DB_VERSION + 1);\n          upgradedRequest.onupgradeneeded = createStores;\n          upgradedRequest.onsuccess = e => resolve(e.target.result);\n          upgradedRequest.onerror = e => reject(e.target.error);\n        } else {\n          resolve(db);\n        }\n      };\n      request.onupgradeneeded = createStores;\n    } catch (error) {\n      console.error(\"Error crítico en IndexedDB:\", error);\n      reject(error);\n    }\n  });\n}\n\n// Función para crear almacenes durante onupgradeneeded\nfunction createStores(event) {\n  try {\n    console.log(\"Actualizando estructura de la base de datos a versión:\", event.newVersion);\n    const db = event.target.result;\n\n    // Crear todos los almacenes necesarios si no existen\n\n    // Crear almacén para usuarios\n    if (!db.objectStoreNames.contains(USERS_STORE)) {\n      console.log(\"Creando almacén:\", USERS_STORE);\n      db.createObjectStore(USERS_STORE, {\n        keyPath: 'id'\n      });\n    }\n\n    // Crear almacén para elementos del menú\n    if (!db.objectStoreNames.contains(MENU_STORE)) {\n      console.log(\"Creando almacén:\", MENU_STORE);\n      db.createObjectStore(MENU_STORE, {\n        keyPath: 'id'\n      });\n    }\n\n    // Crear almacén para imágenes\n    if (!db.objectStoreNames.contains(IMAGE_STORE)) {\n      console.log(\"Creando almacén:\", IMAGE_STORE);\n      db.createObjectStore(IMAGE_STORE, {\n        keyPath: 'id'\n      });\n    }\n\n    // Crear almacén para elementos vendidos\n    if (!db.objectStoreNames.contains(SOLD_ITEMS_STORE)) {\n      console.log(\"Creando almacén:\", SOLD_ITEMS_STORE);\n      db.createObjectStore(SOLD_ITEMS_STORE, {\n        keyPath: 'id'\n      });\n    }\n\n    // Crear almacén para información del negocio\n    if (!db.objectStoreNames.contains(BUSINESS_INFO_STORE)) {\n      console.log(\"Creando almacén:\", BUSINESS_INFO_STORE);\n      db.createObjectStore(BUSINESS_INFO_STORE, {\n        keyPath: 'id'\n      });\n    }\n    console.log(\"Almacenes creados correctamente\");\n  } catch (error) {\n    console.error(\"Error al crear almacenes:\", error);\n  }\n}\n\n// Guardar elementos del menú\nexport async function saveMenuItems(items) {\n  try {\n    // Primero procesamos todas las imágenes y creamos copias de los objetos\n    const processedItems = [];\n    for (const item of items) {\n      // Crear una copia del elemento\n      const itemToStore = {\n        ...item\n      };\n\n      // Asegurarse de que el elemento tiene un id\n      if (!itemToStore.id) {\n        itemToStore.id = Date.now() + Math.random().toString(36).substring(2, 10);\n      }\n\n      // Si tiene imagen, guardarla por separado antes de la transacción principal\n      if (itemToStore.image && typeof itemToStore.image === 'string' && itemToStore.image.length > 0) {\n        try {\n          await saveMenuImage(itemToStore.id, itemToStore.image);\n          itemToStore.image = null;\n          itemToStore.hasStoredImage = true;\n        } catch (imageError) {\n          console.warn('Error al guardar imagen, continuando sin imagen:', imageError);\n          // Si hay error al guardar la imagen, continuamos sin ella\n          itemToStore.image = null;\n          itemToStore.hasStoredImage = false;\n        }\n      }\n      processedItems.push(itemToStore);\n    }\n\n    // Ahora guardamos todos los items en una sola transacción\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(MENU_STORE);\n\n    // Usamos Promise.all para manejar todas las operaciones put juntas\n    const putPromises = processedItems.map(item => {\n      return new Promise((resolve, reject) => {\n        const request = store.put(item);\n        request.onsuccess = () => resolve();\n        request.onerror = e => reject(e.target.error);\n      });\n    });\n\n    // Esperamos a que se completen todas las operaciones put\n    await Promise.all(putPromises);\n\n    // Esperamos a que se complete la transacción\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar elementos del menú:', error);\n    throw error;\n  }\n}\n\n// Guardar imagen de un elemento del menú\nexport async function saveMenuImage(itemId, imageData) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([IMAGE_STORE], 'readwrite');\n    const store = transaction.objectStore(IMAGE_STORE);\n    store.put({\n      id: itemId,\n      data: imageData\n    });\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar imagen:', error);\n    throw error;\n  }\n}\n\n// Obtener todos los elementos del menú\nexport async function getMenuItems() {\n  try {\n    const db = await openDatabase();\n\n    // Verificar que el almacén existe\n    if (!Array.from(db.objectStoreNames).includes(MENU_STORE)) {\n      console.error(`El almacén ${MENU_STORE} no existe en la base de datos`);\n      return []; // Devolver array vacío en lugar de fallar\n    }\n    const transaction = db.transaction([MENU_STORE], 'readonly');\n    const store = transaction.objectStore(MENU_STORE);\n    const request = store.getAll();\n    return new Promise((resolve, reject) => {\n      request.onsuccess = async () => {\n        let items = request.result;\n\n        // Verificar que todos los elementos tengan IDs únicos\n        const uniqueItems = [];\n        const seenIds = new Set();\n        for (const item of items) {\n          // Si el elemento no tiene ID o es un ID duplicado, generamos uno nuevo\n          if (!item.id || seenIds.has(item.id)) {\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\n          }\n\n          // Marcar este ID como visto\n          seenIds.add(item.id);\n          uniqueItems.push(item);\n        }\n\n        // Recuperar imágenes para cada elemento\n        for (const item of uniqueItems) {\n          if (item.hasStoredImage) {\n            item.image = await getMenuImage(item.id);\n          }\n        }\n        resolve(uniqueItems);\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener elementos del menú:', error);\n    return []; // Devolver array vacío en caso de error\n  }\n}\n\n// Eliminar un elemento del menú\nexport async function deleteMenuItem(itemId) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE, IMAGE_STORE], 'readwrite');\n    const menuStore = transaction.objectStore(MENU_STORE);\n    const imageStore = transaction.objectStore(IMAGE_STORE);\n\n    // Eliminar el elemento\n    menuStore.delete(itemId);\n    // Eliminar la imagen asociada\n    imageStore.delete(itemId);\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al eliminar elemento del menú:', error);\n    throw error;\n  }\n}\n\n// Obtener imagen de un elemento del menú\nexport async function getMenuImage(itemId) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([IMAGE_STORE], 'readonly');\n    const store = transaction.objectStore(IMAGE_STORE);\n    const request = store.get(itemId);\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        if (request.result) {\n          resolve(request.result.data);\n        } else {\n          resolve(null);\n        }\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener imagen:', error);\n    throw error;\n  }\n}\n\n// Guardar información del negocio\nexport async function saveBusinessInfo(info) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readwrite');\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\n\n    // Usar un ID fijo para la información del negocio\n    const businessInfo = {\n      ...info,\n      id: 'business_info_1'\n    };\n    store.put(businessInfo);\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar información del negocio:', error);\n    throw error;\n  }\n}\n\n// Obtener información del negocio\nexport async function getBusinessInfo() {\n  try {\n    const db = await openDatabase();\n\n    // Verificar que el almacén existe\n    if (!Array.from(db.objectStoreNames).includes(BUSINESS_INFO_STORE)) {\n      console.error(`El almacén ${BUSINESS_INFO_STORE} no existe en la base de datos`);\n      return {}; // Devolver objeto vacío en lugar de fallar\n    }\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readonly');\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\n    const request = store.get('business_info_1');\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        resolve(request.result || {});\n      };\n      request.onerror = event => {\n        console.error('Error en request:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error al obtener información del negocio:', error);\n    // Devolvemos un objeto vacío en lugar de fallar\n    return {};\n  }\n}\n\n// Guardar elementos vendidos\nexport async function saveSoldItems(items) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readwrite');\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\n\n    // Usar un ID fijo para los elementos vendidos\n    store.put({\n      id: 'sold_items_1',\n      items\n    });\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar elementos vendidos:', error);\n    throw error;\n  }\n}\n\n// Obtener elementos vendidos\nexport async function getSoldItems() {\n  try {\n    const db = await openDatabase();\n\n    // Verificar que el almacén existe\n    if (!Array.from(db.objectStoreNames).includes(SOLD_ITEMS_STORE)) {\n      console.error(`El almacén ${SOLD_ITEMS_STORE} no existe en la base de datos`);\n      return []; // Devolver array vacío en lugar de fallar\n    }\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readonly');\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\n    const request = store.get('sold_items_1');\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        if (request.result) {\n          resolve(request.result.items);\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener elementos vendidos:', error);\n    return [];\n  }\n}\n\n// Migrar datos de localStorage a IndexedDB\nexport async function migrateFromLocalStorage() {\n  try {\n    console.log(\"Iniciando migración desde localStorage...\");\n    let success = true;\n\n    // Migrar información del negocio\n    const businessInfo = localStorage.getItem('businessInfo');\n    if (businessInfo) {\n      console.log(\"Migrando información del negocio...\");\n      try {\n        await saveBusinessInfo(JSON.parse(businessInfo));\n      } catch (error) {\n        console.error('Error al migrar información de negocio:', error);\n        success = false;\n      }\n    }\n\n    // Migrar elementos del menú\n    const menuItems = localStorage.getItem('menuItems');\n    if (menuItems) {\n      console.log(\"Migrando elementos del menú...\");\n      try {\n        const parsedMenuItems = JSON.parse(menuItems);\n\n        // Asegurarse de que cada elemento tiene un ID\n        const processedMenuItems = parsedMenuItems.map(item => {\n          if (!item.id) {\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\n          }\n          return item;\n        });\n        await saveMenuItems(processedMenuItems);\n        console.log(`Migrados ${processedMenuItems.length} elementos de menú.`);\n      } catch (error) {\n        console.error('Error al migrar elementos del menú:', error);\n        success = false;\n      }\n    }\n\n    // Migrar elementos vendidos\n    const soldItems = localStorage.getItem('soldItems');\n    if (soldItems) {\n      console.log(\"Migrando elementos vendidos...\");\n      try {\n        await saveSoldItems(JSON.parse(soldItems));\n      } catch (error) {\n        console.error('Error al migrar elementos vendidos:', error);\n        success = false;\n      }\n    }\n    console.log(success ? \"Migración completada exitosamente.\" : \"Migración completada con errores.\");\n    return success;\n  } catch (error) {\n    console.error('Error al migrar datos desde localStorage:', error);\n    return false;\n  }\n}\n\n// Comprimir imagen\nexport function compressImage(base64Image, maxWidth = 800, maxHeight = 600, quality = 0.7) {\n  return new Promise(resolve => {\n    const img = new Image();\n    img.onload = () => {\n      // Crear un canvas para comprimir la imagen\n      const canvas = document.createElement('canvas');\n      let width = img.width;\n      let height = img.height;\n\n      // Calcular nuevas dimensiones manteniendo proporción\n      if (width > height) {\n        if (width > maxWidth) {\n          height = Math.round(height * maxWidth / width);\n          width = maxWidth;\n        }\n      } else {\n        if (height > maxHeight) {\n          width = Math.round(width * maxHeight / height);\n          height = maxHeight;\n        }\n      }\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, width, height);\n\n      // Obtener imagen comprimida como JPEG con calidad reducida\n      const compressedImage = canvas.toDataURL('image/jpeg', quality);\n      resolve(compressedImage);\n    };\n    img.src = base64Image;\n  });\n}\n\n// Mejorar la función resetDatabase para que sea más completa\nexport async function resetDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      console.log(\"Iniciando proceso de eliminación de la base de datos...\");\n\n      // Cerrar todas las conexiones abiertas primero\n      const connections = indexedDB.databases ? indexedDB.databases() : [];\n      if (connections.length > 0) {\n        console.log(\"Cerrando conexiones existentes...\");\n      }\n      const deleteRequest = indexedDB.deleteDatabase(DB_NAME);\n      deleteRequest.onsuccess = () => {\n        console.log(\"Base de datos eliminada con éxito\");\n\n        // Verificar si hay datos en localStorage para limpiarlos también\n        const localItems = ['businessInfo', 'menuItems', 'soldItems', 'users'];\n        localItems.forEach(item => {\n          if (localStorage.getItem(item)) {\n            localStorage.removeItem(item);\n            console.log(`Eliminado ${item} de localStorage`);\n          }\n        });\n        console.log(\"Limpieza completa. La aplicación está lista para comenzar de nuevo.\");\n        resolve(true);\n      };\n      deleteRequest.onerror = event => {\n        console.error(\"Error al eliminar la base de datos:\", event.target.error);\n        reject(event.target.error);\n      };\n    } catch (error) {\n      console.error(\"Error al intentar resetear la base de datos:\", error);\n      reject(error);\n    }\n  });\n}","map":{"version":3,"names":["DB_NAME","DB_VERSION","MENU_STORE","IMAGE_STORE","SOLD_ITEMS_STORE","BUSINESS_INFO_STORE","USERS_STORE","openDatabase","Promise","resolve","reject","request","indexedDB","open","onerror","event","console","error","target","errorCode","onsuccess","db","result","log","version","existingStores","Array","from","objectStoreNames","requiredStores","missingStores","filter","store","includes","length","close","upgradedRequest","onupgradeneeded","createStores","e","newVersion","contains","createObjectStore","keyPath","saveMenuItems","items","processedItems","item","itemToStore","id","Date","now","Math","random","toString","substring","image","saveMenuImage","hasStoredImage","imageError","warn","push","transaction","objectStore","putPromises","map","put","all","oncomplete","itemId","imageData","data","getMenuItems","getAll","uniqueItems","seenIds","Set","has","add","getMenuImage","deleteMenuItem","menuStore","imageStore","delete","get","saveBusinessInfo","info","businessInfo","getBusinessInfo","saveSoldItems","getSoldItems","migrateFromLocalStorage","success","localStorage","getItem","JSON","parse","menuItems","parsedMenuItems","processedMenuItems","soldItems","compressImage","base64Image","maxWidth","maxHeight","quality","img","Image","onload","canvas","document","createElement","width","height","round","ctx","getContext","drawImage","compressedImage","toDataURL","src","resetDatabase","connections","databases","deleteRequest","deleteDatabase","localItems","forEach","removeItem"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/storageService.js"],"sourcesContent":["const DB_NAME = 'websapDatabase';\r\n// Incrementar versión de la base de datos para forzar la actualización\r\nconst DB_VERSION = 2; \r\nconst MENU_STORE = 'menuItems';\r\nconst IMAGE_STORE = 'menuImages';\r\nconst SOLD_ITEMS_STORE = 'soldItems'; \r\nconst BUSINESS_INFO_STORE = 'businessInfo';\r\nconst USERS_STORE = 'users';\r\n\r\n// Abrir la conexión a la base de datos con manejo mejorado de errores\r\nfunction openDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      // Intentar abrir la base de datos de manera normal, sin eliminar\r\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n      \r\n      request.onerror = (event) => {\r\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\r\n        reject('Error al abrir la base de datos: ' + event.target.errorCode);\r\n      };\r\n      \r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        console.log(\"Base de datos abierta con éxito, versión:\", db.version);\r\n        \r\n        // Verificar que todos los almacenes necesarios existen\r\n        const existingStores = Array.from(db.objectStoreNames);\r\n        const requiredStores = [MENU_STORE, IMAGE_STORE, SOLD_ITEMS_STORE, \r\n                                BUSINESS_INFO_STORE, USERS_STORE];\r\n        \r\n        const missingStores = requiredStores.filter(\r\n          store => !existingStores.includes(store)\r\n        );\r\n        \r\n        if (missingStores.length > 0) {\r\n          // Si faltan stores, cerramos esta conexión y actualizamos la versión\r\n          db.close();\r\n          console.log(\"Faltan almacenes necesarios:\", missingStores);\r\n          console.log(\"Se incrementará la versión de la BD para crear los almacenes faltantes\");\r\n          \r\n          // Incrementar versión para forzar onupgradeneeded\r\n          const upgradedRequest = indexedDB.open(DB_NAME, DB_VERSION + 1);\r\n          \r\n          upgradedRequest.onupgradeneeded = createStores;\r\n          \r\n          upgradedRequest.onsuccess = (e) => resolve(e.target.result);\r\n          upgradedRequest.onerror = (e) => reject(e.target.error);\r\n        } else {\r\n          resolve(db);\r\n        }\r\n      };\r\n      \r\n      request.onupgradeneeded = createStores;\r\n    } catch (error) {\r\n      console.error(\"Error crítico en IndexedDB:\", error);\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\n// Función para crear almacenes durante onupgradeneeded\r\nfunction createStores(event) {\r\n  try {\r\n    console.log(\"Actualizando estructura de la base de datos a versión:\", event.newVersion);\r\n    const db = event.target.result;\r\n    \r\n    // Crear todos los almacenes necesarios si no existen\r\n    \r\n    // Crear almacén para usuarios\r\n    if (!db.objectStoreNames.contains(USERS_STORE)) {\r\n      console.log(\"Creando almacén:\", USERS_STORE);\r\n      db.createObjectStore(USERS_STORE, { keyPath: 'id' });\r\n    }\r\n    \r\n    // Crear almacén para elementos del menú\r\n    if (!db.objectStoreNames.contains(MENU_STORE)) {\r\n      console.log(\"Creando almacén:\", MENU_STORE);\r\n      db.createObjectStore(MENU_STORE, { keyPath: 'id' });\r\n    }\r\n    \r\n    // Crear almacén para imágenes\r\n    if (!db.objectStoreNames.contains(IMAGE_STORE)) {\r\n      console.log(\"Creando almacén:\", IMAGE_STORE);\r\n      db.createObjectStore(IMAGE_STORE, { keyPath: 'id' });\r\n    }\r\n    \r\n    // Crear almacén para elementos vendidos\r\n    if (!db.objectStoreNames.contains(SOLD_ITEMS_STORE)) {\r\n      console.log(\"Creando almacén:\", SOLD_ITEMS_STORE);\r\n      db.createObjectStore(SOLD_ITEMS_STORE, { keyPath: 'id' });\r\n    }\r\n    \r\n    // Crear almacén para información del negocio\r\n    if (!db.objectStoreNames.contains(BUSINESS_INFO_STORE)) {\r\n      console.log(\"Creando almacén:\", BUSINESS_INFO_STORE);\r\n      db.createObjectStore(BUSINESS_INFO_STORE, { keyPath: 'id' });\r\n    }\r\n    \r\n    console.log(\"Almacenes creados correctamente\");\r\n  } catch (error) {\r\n    console.error(\"Error al crear almacenes:\", error);\r\n  }\r\n}\r\n\r\n// Guardar elementos del menú\r\nexport async function saveMenuItems(items) {\r\n  try {\r\n    // Primero procesamos todas las imágenes y creamos copias de los objetos\r\n    const processedItems = [];\r\n    for (const item of items) {\r\n      // Crear una copia del elemento\r\n      const itemToStore = { ...item };\r\n      \r\n      // Asegurarse de que el elemento tiene un id\r\n      if (!itemToStore.id) {\r\n        itemToStore.id = Date.now() + Math.random().toString(36).substring(2, 10);\r\n      }\r\n      \r\n      // Si tiene imagen, guardarla por separado antes de la transacción principal\r\n      if (itemToStore.image && typeof itemToStore.image === 'string' && itemToStore.image.length > 0) {\r\n        try {\r\n          await saveMenuImage(itemToStore.id, itemToStore.image);\r\n          itemToStore.image = null;\r\n          itemToStore.hasStoredImage = true;\r\n        } catch (imageError) {\r\n          console.warn('Error al guardar imagen, continuando sin imagen:', imageError);\r\n          // Si hay error al guardar la imagen, continuamos sin ella\r\n          itemToStore.image = null;\r\n          itemToStore.hasStoredImage = false;\r\n        }\r\n      }\r\n      \r\n      processedItems.push(itemToStore);\r\n    }\r\n    \r\n    // Ahora guardamos todos los items en una sola transacción\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([MENU_STORE], 'readwrite');\r\n    const store = transaction.objectStore(MENU_STORE);\r\n    \r\n    // Usamos Promise.all para manejar todas las operaciones put juntas\r\n    const putPromises = processedItems.map(item => {\r\n      return new Promise((resolve, reject) => {\r\n        const request = store.put(item);\r\n        request.onsuccess = () => resolve();\r\n        request.onerror = (e) => reject(e.target.error);\r\n      });\r\n    });\r\n    \r\n    // Esperamos a que se completen todas las operaciones put\r\n    await Promise.all(putPromises);\r\n    \r\n    // Esperamos a que se complete la transacción\r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar elementos del menú:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Guardar imagen de un elemento del menú\r\nexport async function saveMenuImage(itemId, imageData) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([IMAGE_STORE], 'readwrite');\r\n    const store = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    store.put({ id: itemId, data: imageData });\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar imagen:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener todos los elementos del menú\r\nexport async function getMenuItems() {\r\n  try {\r\n    const db = await openDatabase();\r\n    \r\n    // Verificar que el almacén existe\r\n    if (!Array.from(db.objectStoreNames).includes(MENU_STORE)) {\r\n      console.error(`El almacén ${MENU_STORE} no existe en la base de datos`);\r\n      return []; // Devolver array vacío en lugar de fallar\r\n    }\r\n    \r\n    const transaction = db.transaction([MENU_STORE], 'readonly');\r\n    const store = transaction.objectStore(MENU_STORE);\r\n    \r\n    const request = store.getAll();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = async () => {\r\n        let items = request.result;\r\n        \r\n        // Verificar que todos los elementos tengan IDs únicos\r\n        const uniqueItems = [];\r\n        const seenIds = new Set();\r\n        \r\n        for (const item of items) {\r\n          // Si el elemento no tiene ID o es un ID duplicado, generamos uno nuevo\r\n          if (!item.id || seenIds.has(item.id)) {\r\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\r\n          }\r\n          \r\n          // Marcar este ID como visto\r\n          seenIds.add(item.id);\r\n          uniqueItems.push(item);\r\n        }\r\n        \r\n        // Recuperar imágenes para cada elemento\r\n        for (const item of uniqueItems) {\r\n          if (item.hasStoredImage) {\r\n            item.image = await getMenuImage(item.id);\r\n          }\r\n        }\r\n        \r\n        resolve(uniqueItems);\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener elementos del menú:', error);\r\n    return []; // Devolver array vacío en caso de error\r\n  }\r\n}\r\n\r\n// Eliminar un elemento del menú\r\nexport async function deleteMenuItem(itemId) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([MENU_STORE, IMAGE_STORE], 'readwrite');\r\n    const menuStore = transaction.objectStore(MENU_STORE);\r\n    const imageStore = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    // Eliminar el elemento\r\n    menuStore.delete(itemId);\r\n    // Eliminar la imagen asociada\r\n    imageStore.delete(itemId);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al eliminar elemento del menú:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener imagen de un elemento del menú\r\nexport async function getMenuImage(itemId) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([IMAGE_STORE], 'readonly');\r\n    const store = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    const request = store.get(itemId);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        if (request.result) {\r\n          resolve(request.result.data);\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener imagen:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Guardar información del negocio\r\nexport async function saveBusinessInfo(info) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readwrite');\r\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\r\n    \r\n    // Usar un ID fijo para la información del negocio\r\n    const businessInfo = { ...info, id: 'business_info_1' };\r\n    store.put(businessInfo);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar información del negocio:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener información del negocio\r\nexport async function getBusinessInfo() {\r\n  try {\r\n    const db = await openDatabase();\r\n    \r\n    // Verificar que el almacén existe\r\n    if (!Array.from(db.objectStoreNames).includes(BUSINESS_INFO_STORE)) {\r\n      console.error(`El almacén ${BUSINESS_INFO_STORE} no existe en la base de datos`);\r\n      return {}; // Devolver objeto vacío en lugar de fallar\r\n    }\r\n    \r\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readonly');\r\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\r\n    \r\n    const request = store.get('business_info_1');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        resolve(request.result || {});\r\n      };\r\n      request.onerror = (event) => {\r\n        console.error('Error en request:', event.target.error);\r\n        reject(event.target.error);\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener información del negocio:', error);\r\n    // Devolvemos un objeto vacío en lugar de fallar\r\n    return {};\r\n  }\r\n}\r\n\r\n// Guardar elementos vendidos\r\nexport async function saveSoldItems(items) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readwrite');\r\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\r\n    \r\n    // Usar un ID fijo para los elementos vendidos\r\n    store.put({ id: 'sold_items_1', items });\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar elementos vendidos:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener elementos vendidos\r\nexport async function getSoldItems() {\r\n  try {\r\n    const db = await openDatabase();\r\n    \r\n    // Verificar que el almacén existe\r\n    if (!Array.from(db.objectStoreNames).includes(SOLD_ITEMS_STORE)) {\r\n      console.error(`El almacén ${SOLD_ITEMS_STORE} no existe en la base de datos`);\r\n      return []; // Devolver array vacío en lugar de fallar\r\n    }\r\n    \r\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readonly');\r\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\r\n    \r\n    const request = store.get('sold_items_1');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        if (request.result) {\r\n          resolve(request.result.items);\r\n        } else {\r\n          resolve([]);\r\n        }\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener elementos vendidos:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Migrar datos de localStorage a IndexedDB\r\nexport async function migrateFromLocalStorage() {\r\n  try {\r\n    console.log(\"Iniciando migración desde localStorage...\");\r\n    \r\n    let success = true;\r\n    \r\n    // Migrar información del negocio\r\n    const businessInfo = localStorage.getItem('businessInfo');\r\n    if (businessInfo) {\r\n      console.log(\"Migrando información del negocio...\");\r\n      try {\r\n        await saveBusinessInfo(JSON.parse(businessInfo));\r\n      } catch (error) {\r\n        console.error('Error al migrar información de negocio:', error);\r\n        success = false;\r\n      }\r\n    }\r\n    \r\n    // Migrar elementos del menú\r\n    const menuItems = localStorage.getItem('menuItems');\r\n    if (menuItems) {\r\n      console.log(\"Migrando elementos del menú...\");\r\n      try {\r\n        const parsedMenuItems = JSON.parse(menuItems);\r\n        \r\n        // Asegurarse de que cada elemento tiene un ID\r\n        const processedMenuItems = parsedMenuItems.map(item => {\r\n          if (!item.id) {\r\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\r\n          }\r\n          return item;\r\n        });\r\n        \r\n        await saveMenuItems(processedMenuItems);\r\n        console.log(`Migrados ${processedMenuItems.length} elementos de menú.`);\r\n      } catch (error) {\r\n        console.error('Error al migrar elementos del menú:', error);\r\n        success = false;\r\n      }\r\n    }\r\n    \r\n    // Migrar elementos vendidos\r\n    const soldItems = localStorage.getItem('soldItems');\r\n    if (soldItems) {\r\n      console.log(\"Migrando elementos vendidos...\");\r\n      try {\r\n        await saveSoldItems(JSON.parse(soldItems));\r\n      } catch (error) {\r\n        console.error('Error al migrar elementos vendidos:', error);\r\n        success = false;\r\n      }\r\n    }\r\n    \r\n    console.log(success ? \"Migración completada exitosamente.\" : \"Migración completada con errores.\");\r\n    return success;\r\n  } catch (error) {\r\n    console.error('Error al migrar datos desde localStorage:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Comprimir imagen\r\nexport function compressImage(base64Image, maxWidth = 800, maxHeight = 600, quality = 0.7) {\r\n  return new Promise((resolve) => {\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      // Crear un canvas para comprimir la imagen\r\n      const canvas = document.createElement('canvas');\r\n      \r\n      let width = img.width;\r\n      let height = img.height;\r\n      \r\n      // Calcular nuevas dimensiones manteniendo proporción\r\n      if (width > height) {\r\n        if (width > maxWidth) {\r\n          height = Math.round((height * maxWidth) / width);\r\n          width = maxWidth;\r\n        }\r\n      } else {\r\n        if (height > maxHeight) {\r\n          width = Math.round((width * maxHeight) / height);\r\n          height = maxHeight;\r\n        }\r\n      }\r\n      \r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      \r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0, width, height);\r\n      \r\n      // Obtener imagen comprimida como JPEG con calidad reducida\r\n      const compressedImage = canvas.toDataURL('image/jpeg', quality);\r\n      resolve(compressedImage);\r\n    };\r\n    img.src = base64Image;\r\n  });\r\n}\r\n\r\n// Mejorar la función resetDatabase para que sea más completa\r\nexport async function resetDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      console.log(\"Iniciando proceso de eliminación de la base de datos...\");\r\n      \r\n      // Cerrar todas las conexiones abiertas primero\r\n      const connections = indexedDB.databases ? indexedDB.databases() : [];\r\n      if (connections.length > 0) {\r\n        console.log(\"Cerrando conexiones existentes...\");\r\n      }\r\n      \r\n      const deleteRequest = indexedDB.deleteDatabase(DB_NAME);\r\n      \r\n      deleteRequest.onsuccess = () => {\r\n        console.log(\"Base de datos eliminada con éxito\");\r\n        \r\n        // Verificar si hay datos en localStorage para limpiarlos también\r\n        const localItems = ['businessInfo', 'menuItems', 'soldItems', 'users'];\r\n        localItems.forEach(item => {\r\n          if (localStorage.getItem(item)) {\r\n            localStorage.removeItem(item);\r\n            console.log(`Eliminado ${item} de localStorage`);\r\n          }\r\n        });\r\n        \r\n        console.log(\"Limpieza completa. La aplicación está lista para comenzar de nuevo.\");\r\n        resolve(true);\r\n      };\r\n      \r\n      deleteRequest.onerror = (event) => {\r\n        console.error(\"Error al eliminar la base de datos:\", event.target.error);\r\n        reject(event.target.error);\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error al intentar resetear la base de datos:\", error);\r\n      reject(error);\r\n    }\r\n  });\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}