{"ast":null,"code":"import { ref, onMounted, onUnmounted } from 'vue';\nimport { saveWhatsAppReservation } from '../services/reservaService';\nimport eventBus from '../utils/eventBus';\nexport default {\n  __name: 'WhatsAppReservationHandler',\n  setup(__props, {\n    expose: __expose\n  }) {\n    const isProcessing = ref(false);\n    const lastProcessedMessage = ref('');\n\n    // Función para procesar mensajes de WhatsApp\n    const processWhatsAppMessage = async message => {\n      try {\n        // Evitar procesar el mismo mensaje más de una vez\n        if (message === lastProcessedMessage.value) {\n          console.log('Mensaje ya procesado, ignorando duplicado:', message);\n          return;\n        }\n        console.log('Procesando mensaje de WhatsApp:', message);\n        isProcessing.value = true;\n        lastProcessedMessage.value = message;\n\n        // Extraer información del mensaje\n        const data = extractReservationData(message);\n        if (!data) {\n          console.warn('No se pudo extraer información de reserva del mensaje:', message);\n          return;\n        }\n        console.log('Datos extraídos del mensaje:', data);\n\n        // Guardar la reserva\n        const result = await saveWhatsAppReservation(data);\n        if (result.success) {\n          console.log('Reserva de WhatsApp guardada correctamente:', result.reservation);\n\n          // Emitir evento para actualizar la lista de reservas\n          eventBus.emit('nueva-reserva', result.reservation);\n          eventBus.emit('refresh-reservations');\n          console.log('Eventos emitidos: nueva-reserva y refresh-reservations');\n        } else {\n          console.error('Error al guardar reserva de WhatsApp:', result.error);\n        }\n      } catch (error) {\n        console.error('Error al procesar mensaje de WhatsApp:', error);\n      } finally {\n        isProcessing.value = false;\n      }\n    };\n\n    // Función para extraer datos de reserva del mensaje\n    const extractReservationData = message => {\n      // Implementación básica para extraer datos\n      // En un caso real, se usaría una expresión regular más robusta\n      try {\n        // Buscar patrones comunes en el mensaje\n        const nombreMatch = message.match(/\\*Nombre:\\*\\s*([^\\n]+)/i);\n        const telefonoMatch = message.match(/\\*Teléfono móvil:\\*\\s*([^\\n]+)/i);\n        const fechaMatch = message.match(/\\*Fecha:\\*\\s*([^\\n]+)/i);\n        const horaMatch = message.match(/\\*Hora:\\*\\s*([^\\n]+)/i);\n        const personasMatch = message.match(/\\*Personas:\\*\\s*([^\\n]+)/i);\n        const notasMatch = message.match(/\\*Notas:\\*\\s*([^\\n]+)/i);\n        const emailMatch = message.match(/\\*Email:\\*\\s*([^\\n]+)/i);\n\n        // Si no encontramos al menos nombre y teléfono, no es una reserva válida\n        if (!nombreMatch && !telefonoMatch) {\n          console.warn('El mensaje no contiene información suficiente para una reserva');\n          return null;\n        }\n\n        // Construir objeto de datos\n        return {\n          nombre: nombreMatch ? nombreMatch[1].trim() : 'Cliente sin nombre',\n          telefono: telefonoMatch ? telefonoMatch[1].trim() : '',\n          email: emailMatch ? emailMatch[1].trim() : '',\n          fecha: fechaMatch ? fechaMatch[1].trim() : new Date().toISOString().split('T')[0],\n          hora: horaMatch ? horaMatch[1].trim() : '19:00',\n          personas: personasMatch ? parseInt(personasMatch[1].trim(), 10) || 2 : 2,\n          notas: notasMatch ? notasMatch[1].trim() : 'Reserva desde WhatsApp'\n        };\n      } catch (error) {\n        console.error('Error al extraer datos del mensaje:', error);\n        return null;\n      }\n    };\n\n    // Función para simular la recepción de un mensaje de WhatsApp\n    const simulateWhatsAppMessage = message => {\n      console.log('Mensaje de WhatsApp simulado recibido');\n      processWhatsAppMessage(message);\n    };\n\n    // Escuchar eventos de mensajes de WhatsApp\n    onMounted(() => {\n      console.log('WhatsAppReservationHandler montado');\n      eventBus.on('whatsapp-message', simulateWhatsAppMessage);\n\n      // Para pruebas, podemos simular un mensaje después de 5 segundos\n      /*\n      setTimeout(() => {\n        simulateWhatsAppMessage(`\n          *NUEVA RESERVA DE MESA*\n          ---------------------------\n          *Nombre:* Juan Pérez\n          *Teléfono móvil:* 123456789\n          *Email:* juan@example.com\n          *Fecha:* 2023-05-15\n          *Hora:* 20:30\n          *Personas:* 4\n          *Notas:* Mesa cerca de la ventana\n          ---------------------------\n        `);\n      }, 5000);\n      */\n    });\n\n    // Limpiar listeners al desmontar\n    onUnmounted(() => {\n      console.log('WhatsAppReservationHandler desmontado');\n      eventBus.off('whatsapp-message', simulateWhatsAppMessage);\n    });\n\n    // Exponer funciones para uso externo\n    __expose({\n      processWhatsAppMessage,\n      simulateWhatsAppMessage\n    });\n    const __returned__ = {\n      isProcessing,\n      lastProcessedMessage,\n      processWhatsAppMessage,\n      extractReservationData,\n      simulateWhatsAppMessage,\n      ref,\n      onMounted,\n      onUnmounted,\n      get saveWhatsAppReservation() {\n        return saveWhatsAppReservation;\n      },\n      get eventBus() {\n        return eventBus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","saveWhatsAppReservation","eventBus","isProcessing","lastProcessedMessage","processWhatsAppMessage","message","value","console","log","data","extractReservationData","warn","result","success","reservation","emit","error","nombreMatch","match","telefonoMatch","fechaMatch","horaMatch","personasMatch","notasMatch","emailMatch","nombre","trim","telefono","email","fecha","Date","toISOString","split","hora","personas","parseInt","notas","simulateWhatsAppMessage","on","off","__expose"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/components/WhatsAppReservationHandler.vue"],"sourcesContent":["<template>\n  <!-- Este componente no tiene representación visual, solo maneja la lógica -->\n  <div style=\"display: none;\">\n    <p>Manejador de reservas de WhatsApp activo</p>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport { saveWhatsAppReservation } from '../services/reservaService';\nimport eventBus from '../utils/eventBus';\n\nconst isProcessing = ref(false);\nconst lastProcessedMessage = ref('');\n\n// Función para procesar mensajes de WhatsApp\nconst processWhatsAppMessage = async (message) => {\n  try {\n    // Evitar procesar el mismo mensaje más de una vez\n    if (message === lastProcessedMessage.value) {\n      console.log('Mensaje ya procesado, ignorando duplicado:', message);\n      return;\n    }\n    \n    console.log('Procesando mensaje de WhatsApp:', message);\n    isProcessing.value = true;\n    lastProcessedMessage.value = message;\n    \n    // Extraer información del mensaje\n    const data = extractReservationData(message);\n    \n    if (!data) {\n      console.warn('No se pudo extraer información de reserva del mensaje:', message);\n      return;\n    }\n    \n    console.log('Datos extraídos del mensaje:', data);\n    \n    // Guardar la reserva\n    const result = await saveWhatsAppReservation(data);\n    \n    if (result.success) {\n      console.log('Reserva de WhatsApp guardada correctamente:', result.reservation);\n      \n      // Emitir evento para actualizar la lista de reservas\n      eventBus.emit('nueva-reserva', result.reservation);\n      eventBus.emit('refresh-reservations');\n      \n      console.log('Eventos emitidos: nueva-reserva y refresh-reservations');\n    } else {\n      console.error('Error al guardar reserva de WhatsApp:', result.error);\n    }\n  } catch (error) {\n    console.error('Error al procesar mensaje de WhatsApp:', error);\n  } finally {\n    isProcessing.value = false;\n  }\n};\n\n// Función para extraer datos de reserva del mensaje\nconst extractReservationData = (message) => {\n  // Implementación básica para extraer datos\n  // En un caso real, se usaría una expresión regular más robusta\n  try {\n    // Buscar patrones comunes en el mensaje\n    const nombreMatch = message.match(/\\*Nombre:\\*\\s*([^\\n]+)/i);\n    const telefonoMatch = message.match(/\\*Teléfono móvil:\\*\\s*([^\\n]+)/i);\n    const fechaMatch = message.match(/\\*Fecha:\\*\\s*([^\\n]+)/i);\n    const horaMatch = message.match(/\\*Hora:\\*\\s*([^\\n]+)/i);\n    const personasMatch = message.match(/\\*Personas:\\*\\s*([^\\n]+)/i);\n    const notasMatch = message.match(/\\*Notas:\\*\\s*([^\\n]+)/i);\n    const emailMatch = message.match(/\\*Email:\\*\\s*([^\\n]+)/i);\n    \n    // Si no encontramos al menos nombre y teléfono, no es una reserva válida\n    if (!nombreMatch && !telefonoMatch) {\n      console.warn('El mensaje no contiene información suficiente para una reserva');\n      return null;\n    }\n    \n    // Construir objeto de datos\n    return {\n      nombre: nombreMatch ? nombreMatch[1].trim() : 'Cliente sin nombre',\n      telefono: telefonoMatch ? telefonoMatch[1].trim() : '',\n      email: emailMatch ? emailMatch[1].trim() : '',\n      fecha: fechaMatch ? fechaMatch[1].trim() : new Date().toISOString().split('T')[0],\n      hora: horaMatch ? horaMatch[1].trim() : '19:00',\n      personas: personasMatch ? parseInt(personasMatch[1].trim(), 10) || 2 : 2,\n      notas: notasMatch ? notasMatch[1].trim() : 'Reserva desde WhatsApp'\n    };\n  } catch (error) {\n    console.error('Error al extraer datos del mensaje:', error);\n    return null;\n  }\n};\n\n// Función para simular la recepción de un mensaje de WhatsApp\nconst simulateWhatsAppMessage = (message) => {\n  console.log('Mensaje de WhatsApp simulado recibido');\n  processWhatsAppMessage(message);\n};\n\n// Escuchar eventos de mensajes de WhatsApp\nonMounted(() => {\n  console.log('WhatsAppReservationHandler montado');\n  eventBus.on('whatsapp-message', simulateWhatsAppMessage);\n  \n  // Para pruebas, podemos simular un mensaje después de 5 segundos\n  /*\n  setTimeout(() => {\n    simulateWhatsAppMessage(`\n      *NUEVA RESERVA DE MESA*\n      ---------------------------\n      *Nombre:* Juan Pérez\n      *Teléfono móvil:* 123456789\n      *Email:* juan@example.com\n      *Fecha:* 2023-05-15\n      *Hora:* 20:30\n      *Personas:* 4\n      *Notas:* Mesa cerca de la ventana\n      ---------------------------\n    `);\n  }, 5000);\n  */\n});\n\n// Limpiar listeners al desmontar\nonUnmounted(() => {\n  console.log('WhatsAppReservationHandler desmontado');\n  eventBus.off('whatsapp-message', simulateWhatsAppMessage);\n});\n\n// Exponer funciones para uso externo\ndefineExpose({\n  processWhatsAppMessage,\n  simulateWhatsAppMessage\n});\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}