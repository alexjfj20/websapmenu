{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nconst DB_NAME = 'websapDatabase';\n// Incrementar la versión de la base de datos para forzar la actualización\nconst DB_VERSION = 3; // Incrementado a 3 para forzar upgradeneeded\nconst MENU_STORE = 'menuItems';\nconst IMAGE_STORE = 'menuImages';\nconst SOLD_ITEMS_STORE = 'soldItems';\nconst BUSINESS_INFO_STORE = 'businessInfo';\nconst USERS_STORE = 'users';\nconst SHARED_MENU_STORE = 'sharedMenus';\n\n// Abrir la conexión a la base de datos con manejo mejorado de errores\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      console.log(\"Intentando abrir la base de datos con versión:\", DB_VERSION);\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\n        reject('Error al abrir la base de datos: ' + event.target.errorCode);\n      };\n      request.onsuccess = event => {\n        const db = event.target.result;\n        console.log(\"Base de datos abierta con éxito, versión:\", db.version);\n\n        // Verificar que todos los almacenes necesarios existen\n        const existingStores = Array.from(db.objectStoreNames);\n        console.log(\"Almacenes existentes:\", existingStores);\n        resolve(db);\n      };\n      request.onupgradeneeded = event => {\n        console.log(\"Actualizando estructura de la base de datos a versión:\", event.newVersion);\n        const db = event.target.result;\n\n        // Crear todos los almacenes necesarios si no existen\n        const requiredStores = [{\n          name: USERS_STORE,\n          keyPath: 'id'\n        }, {\n          name: MENU_STORE,\n          keyPath: 'id'\n        }, {\n          name: IMAGE_STORE,\n          keyPath: 'id'\n        }, {\n          name: SOLD_ITEMS_STORE,\n          keyPath: 'id'\n        }, {\n          name: BUSINESS_INFO_STORE,\n          keyPath: 'id'\n        }, {\n          name: SHARED_MENU_STORE,\n          keyPath: 'id'\n        }];\n\n        // Crear cada almacén\n        requiredStores.forEach(store => {\n          if (!db.objectStoreNames.contains(store.name)) {\n            console.log(`Creando almacén: ${store.name}`);\n            db.createObjectStore(store.name, {\n              keyPath: store.keyPath\n            });\n          }\n        });\n      };\n    } catch (error) {\n      console.error(\"Error crítico en IndexedDB:\", error);\n      reject(error);\n    }\n  });\n}\n\n// Guardar elementos del menú\nexport async function saveMenuItems(items) {\n  try {\n    // Primero procesamos todas las imágenes y creamos copias de los objetos\n    const processedItems = [];\n    for (const item of items) {\n      // Crear una copia del elemento\n      const itemToStore = {\n        ...item\n      };\n\n      // Asegurarse de que el elemento tiene un id\n      if (!itemToStore.id) {\n        itemToStore.id = Date.now() + Math.random().toString(36).substring(2, 10);\n      }\n\n      // Si tiene imagen, guardarla por separado antes de la transacción principal\n      if (itemToStore.image && typeof itemToStore.image === 'string' && itemToStore.image.length > 0) {\n        try {\n          await saveMenuImage(itemToStore.id, itemToStore.image);\n          itemToStore.image = null;\n          itemToStore.hasStoredImage = true;\n        } catch (imageError) {\n          console.warn('Error al guardar imagen, continuando sin imagen:', imageError);\n          // Si hay error al guardar la imagen, continuamos sin ella\n          itemToStore.image = null;\n          itemToStore.hasStoredImage = false;\n        }\n      }\n      processedItems.push(itemToStore);\n    }\n\n    // Ahora guardamos todos los items en una sola transacción\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(MENU_STORE);\n\n    // Usamos Promise.all para manejar todas las operaciones put juntas\n    const putPromises = processedItems.map(item => {\n      return new Promise((resolve, reject) => {\n        const request = store.put(item);\n        request.onsuccess = () => resolve();\n        request.onerror = e => reject(e.target.error);\n      });\n    });\n\n    // Esperamos a que se completen todas las operaciones put\n    await Promise.all(putPromises);\n\n    // Esperamos a que se complete la transacción\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar elementos del menú:', error);\n    throw error;\n  }\n}\n\n// Guardar imagen de un elemento del menú\nexport async function saveMenuImage(itemId, imageData) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([IMAGE_STORE], 'readwrite');\n    const store = transaction.objectStore(IMAGE_STORE);\n    store.put({\n      id: itemId,\n      data: imageData\n    });\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar imagen:', error);\n    throw error;\n  }\n}\n\n// Obtener todos los elementos del menú\nexport async function getMenuItems() {\n  try {\n    const db = await openDatabase();\n\n    // Verificar que el almacén existe\n    if (!Array.from(db.objectStoreNames).includes(MENU_STORE)) {\n      console.error(`El almacén ${MENU_STORE} no existe en la base de datos`);\n      return []; // Devolver array vacío en lugar de fallar\n    }\n    const transaction = db.transaction([MENU_STORE], 'readonly');\n    const store = transaction.objectStore(MENU_STORE);\n    const request = store.getAll();\n    return new Promise((resolve, reject) => {\n      request.onsuccess = async () => {\n        let items = request.result;\n\n        // Verificar que todos los elementos tengan IDs únicos\n        const uniqueItems = [];\n        const seenIds = new Set();\n        for (const item of items) {\n          // Si el elemento no tiene ID o es un ID duplicado, generamos uno nuevo\n          if (!item.id || seenIds.has(item.id)) {\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\n          }\n\n          // Marcar este ID como visto\n          seenIds.add(item.id);\n          uniqueItems.push(item);\n        }\n\n        // Recuperar imágenes para cada elemento\n        for (const item of uniqueItems) {\n          if (item.hasStoredImage) {\n            item.image = await getMenuImage(item.id);\n          }\n        }\n        resolve(uniqueItems);\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener elementos del menú:', error);\n    return []; // Devolver array vacío en caso de error\n  }\n}\n\n// Eliminar un elemento del menú - RENOMBRANDO LA FUNCIÓN\nexport async function deleteMenuItemFromDB(itemId) {\n  try {\n    console.log(`Intentando eliminar elemento con ID: ${itemId}`);\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE, IMAGE_STORE], 'readwrite');\n    const menuStore = transaction.objectStore(MENU_STORE);\n    const imageStore = transaction.objectStore(IMAGE_STORE);\n\n    // Verificar primero si el elemento existe\n    const getRequest = menuStore.get(itemId);\n    return new Promise((resolve, reject) => {\n      getRequest.onsuccess = () => {\n        if (!getRequest.result) {\n          console.warn(`No se encontró el elemento con ID: ${itemId}`);\n          // Resolver con éxito incluso si el elemento no existe\n          resolve(true);\n          return;\n        }\n\n        // Eliminar el elemento\n        const deleteRequest = menuStore.delete(itemId);\n        deleteRequest.onsuccess = () => {\n          console.log(`Elemento con ID ${itemId} eliminado correctamente`);\n\n          // Intentar eliminar la imagen asociada (no falla si no existe)\n          const imageRequest = imageStore.delete(itemId);\n          imageRequest.onsuccess = () => {\n            console.log(`Imagen para elemento ${itemId} eliminada (si existía)`);\n            resolve(true);\n          };\n          imageRequest.onerror = e => {\n            // No fallar si la imagen no existe\n            console.warn(`Error al eliminar imagen para ${itemId}:`, e.target.error);\n            resolve(true);\n          };\n        };\n        deleteRequest.onerror = e => {\n          console.error(`Error al eliminar elemento ${itemId}:`, e.target.error);\n          reject(e.target.error);\n        };\n      };\n      getRequest.onerror = event => {\n        console.error(`Error al verificar existencia del elemento ${itemId}:`, event.target.error);\n        reject(event.target.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error al eliminar elemento del menú:', error);\n    throw error;\n  }\n}\n\n// Mantener la función original por compatibilidad, pero que use la nueva\nexport async function deleteMenuItem(itemId) {\n  console.warn('La función deleteMenuItem está obsoleta, use deleteMenuItemFromDB en su lugar');\n  return deleteMenuItemFromDB(itemId);\n}\n\n// Obtener imagen de un elemento del menú\nexport async function getMenuImage(itemId) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([IMAGE_STORE], 'readonly');\n    const store = transaction.objectStore(IMAGE_STORE);\n    const request = store.get(itemId);\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        if (request.result) {\n          resolve(request.result.data);\n        } else {\n          resolve(null);\n        }\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener imagen:', error);\n    throw error;\n  }\n}\n\n// Guardar información del negocio - MEJORADA\nexport async function saveBusinessInfo(businessInfo) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction(['businessInfo'], 'readwrite');\n    const store = transaction.objectStore('businessInfo');\n\n    // Crear una copia limpia del objeto sin referencias circulares o propiedades no serializables\n    const cleanBusinessInfo = {\n      id: businessInfo.id || 'business_info_1',\n      // Usar un ID consistente\n      name: businessInfo.name || '',\n      description: businessInfo.description || '',\n      contact: businessInfo.contact || '',\n      address: businessInfo.address || '',\n      logo: businessInfo.logo || ''\n    };\n\n    // Manejar información de pago por separado si existe\n    if (businessInfo.paymentInfo) {\n      cleanBusinessInfo.paymentInfo = {\n        qrTitle: businessInfo.paymentInfo.qrTitle || '',\n        qrImage: businessInfo.paymentInfo.qrImage || '',\n        nequiNumber: businessInfo.paymentInfo.nequiNumber || '',\n        nequiImage: businessInfo.paymentInfo.nequiImage || ''\n      };\n    }\n\n    // Para debugging, verificamos que es serializable\n    try {\n      JSON.stringify(cleanBusinessInfo);\n    } catch (e) {\n      console.error('El objeto businessInfo no es serializable:', e);\n      throw new Error('El objeto businessInfo no es serializable');\n    }\n\n    // Guardar el objeto limpio\n    const request = store.put(cleanBusinessInfo);\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => resolve(true);\n      request.onerror = event => {\n        console.error('Error específico al guardar businessInfo:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error al guardar información del negocio:', error);\n    throw error;\n  }\n}\n\n// Obtener información del negocio\nexport async function getBusinessInfo() {\n  try {\n    const db = await openDatabase();\n\n    // Verificar que el almacén existe\n    if (!Array.from(db.objectStoreNames).includes(BUSINESS_INFO_STORE)) {\n      console.error(`El almacén ${BUSINESS_INFO_STORE} no existe en la base de datos`);\n      return {}; // Devolver objeto vacío en lugar de fallar\n    }\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readonly');\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\n    const request = store.get('business_info_1');\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        resolve(request.result || {});\n      };\n      request.onerror = event => {\n        console.error('Error en request:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error al obtener información del negocio:', error);\n    // Devolvemos un objeto vacío en lugar de fallar\n    return {};\n  }\n}\n\n// Guardar elementos vendidos\nexport async function saveSoldItems(items) {\n  try {\n    // Asegurarse de que items sea un array y que cada elemento sea serializable\n    if (!Array.isArray(items)) {\n      console.warn('saveSoldItems recibió un valor que no es array:', items);\n      items = [];\n    }\n\n    // Limpiar los objetos para asegurar que sean serializables\n    const cleanItems = items.map(item => {\n      // Si el item no es un objeto, crear uno básico\n      if (!item || typeof item !== 'object') {\n        return {\n          name: 'Producto desconocido',\n          quantity: 1,\n          price: 0,\n          includesDrink: false\n        };\n      }\n\n      // Crear una copia limpia con solo las propiedades necesarias\n      return {\n        name: String(item.name || 'Producto desconocido'),\n        quantity: Number(item.quantity) || 1,\n        price: Number(item.price) || 0,\n        includesDrink: Boolean(item.includesDrink)\n      };\n    });\n    const db = await openDatabase();\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readwrite');\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\n\n    // Asegurarnos de que estamos guardando un objeto serializable\n    const soldItemsObject = {\n      id: 'sold_items_1',\n      items: cleanItems\n    };\n\n    // Verificar que el objeto es serializable antes de guardarlo\n    try {\n      // Esto lanzará error si el objeto no es serializable\n      JSON.stringify(soldItemsObject);\n    } catch (e) {\n      console.error('El objeto soldItems no es serializable:', e);\n      throw new Error('El objeto soldItems no es serializable');\n    }\n    const request = store.put(soldItemsObject);\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => resolve(true);\n      request.onerror = event => {\n        console.error('Error específico al guardar soldItems:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error al guardar elementos vendidos:', error);\n    throw error;\n  }\n}\n\n// Obtener elementos vendidos\nexport async function getSoldItems() {\n  try {\n    const db = await openDatabase();\n\n    // Verificar que el almacén existe\n    if (!Array.from(db.objectStoreNames).includes(SOLD_ITEMS_STORE)) {\n      console.error(`El almacén ${SOLD_ITEMS_STORE} no existe en la base de datos`);\n      return []; // Devolver array vacío en lugar de fallar\n    }\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readonly');\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\n    const request = store.get('sold_items_1');\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        if (request.result) {\n          resolve(request.result.items);\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener elementos vendidos:', error);\n    return [];\n  }\n}\n\n// Eliminar completamente la función migrateFromLocalStorage ya que no queremos usar localStorage\nexport async function migrateFromLocalStorage() {\n  console.log(\"Función migrateFromLocalStorage en desuso - no se utilizará localStorage\");\n  return true; // Solo para mantener la compatibilidad con el código existente\n}\n\n// Comprimir imagen\nexport function compressImage(base64Image, maxWidth = 800, maxHeight = 600, quality = 0.7) {\n  return new Promise(resolve => {\n    const img = new Image();\n    img.onload = () => {\n      // Crear un canvas para comprimir la imagen\n      const canvas = document.createElement('canvas');\n      let width = img.width;\n      let height = img.height;\n\n      // Calcular nuevas dimensiones manteniendo proporción\n      if (width > height) {\n        if (width > maxWidth) {\n          height = Math.round(height * maxWidth / width);\n          width = maxWidth;\n        }\n      } else {\n        if (height > maxHeight) {\n          width = Math.round(width * maxHeight / height);\n          height = maxHeight;\n        }\n      }\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, width, height);\n\n      // Obtener imagen comprimida como JPEG con calidad reducida\n      const compressedImage = canvas.toDataURL('image/jpeg', quality);\n      resolve(compressedImage);\n    };\n    img.src = base64Image;\n  });\n}\n\n// Mejorar la función resetDatabase para asegurarnos de que no use localStorage\nexport async function resetDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      console.log(\"Iniciando proceso de eliminación de la base de datos...\");\n      const deleteRequest = indexedDB.deleteDatabase(DB_NAME);\n      deleteRequest.onsuccess = () => {\n        console.log(\"Base de datos eliminada con éxito\");\n        console.log(\"Limpieza completa. La aplicación está lista para comenzar de nuevo.\");\n        resolve(true);\n      };\n      deleteRequest.onerror = event => {\n        console.error(\"Error al eliminar la base de datos:\", event.target.error);\n        reject(event.target.error);\n      };\n    } catch (error) {\n      console.error(\"Error al intentar resetear la base de datos:\", error);\n      reject(error);\n    }\n  });\n}","map":{"version":3,"names":["DB_NAME","DB_VERSION","MENU_STORE","IMAGE_STORE","SOLD_ITEMS_STORE","BUSINESS_INFO_STORE","USERS_STORE","SHARED_MENU_STORE","openDatabase","Promise","resolve","reject","console","log","request","indexedDB","open","onerror","event","error","target","errorCode","onsuccess","db","result","version","existingStores","Array","from","objectStoreNames","onupgradeneeded","newVersion","requiredStores","name","keyPath","forEach","store","contains","createObjectStore","saveMenuItems","items","processedItems","item","itemToStore","id","Date","now","Math","random","toString","substring","image","length","saveMenuImage","hasStoredImage","imageError","warn","push","transaction","objectStore","putPromises","map","put","e","all","oncomplete","itemId","imageData","data","getMenuItems","includes","getAll","uniqueItems","seenIds","Set","has","add","getMenuImage","deleteMenuItemFromDB","menuStore","imageStore","getRequest","get","deleteRequest","delete","imageRequest","deleteMenuItem","saveBusinessInfo","businessInfo","cleanBusinessInfo","description","contact","address","logo","paymentInfo","qrTitle","qrImage","nequiNumber","nequiImage","JSON","stringify","Error","getBusinessInfo","saveSoldItems","isArray","cleanItems","quantity","price","includesDrink","String","Number","Boolean","soldItemsObject","getSoldItems","migrateFromLocalStorage","compressImage","base64Image","maxWidth","maxHeight","quality","img","Image","onload","canvas","document","createElement","width","height","round","ctx","getContext","drawImage","compressedImage","toDataURL","src","resetDatabase","deleteDatabase"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/storageService.js"],"sourcesContent":["const DB_NAME = 'websapDatabase';\r\n// Incrementar la versión de la base de datos para forzar la actualización\r\nconst DB_VERSION = 3; // Incrementado a 3 para forzar upgradeneeded\r\nconst MENU_STORE = 'menuItems';\r\nconst IMAGE_STORE = 'menuImages';\r\nconst SOLD_ITEMS_STORE = 'soldItems'; \r\nconst BUSINESS_INFO_STORE = 'businessInfo';\r\nconst USERS_STORE = 'users';\r\nconst SHARED_MENU_STORE = 'sharedMenus';\r\n\r\n// Abrir la conexión a la base de datos con manejo mejorado de errores\r\nfunction openDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      console.log(\"Intentando abrir la base de datos con versión:\", DB_VERSION);\r\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n      \r\n      request.onerror = (event) => {\r\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\r\n        reject('Error al abrir la base de datos: ' + event.target.errorCode);\r\n      };\r\n      \r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        console.log(\"Base de datos abierta con éxito, versión:\", db.version);\r\n        \r\n        // Verificar que todos los almacenes necesarios existen\r\n        const existingStores = Array.from(db.objectStoreNames);\r\n        console.log(\"Almacenes existentes:\", existingStores);\r\n        \r\n        resolve(db);\r\n      };\r\n      \r\n      request.onupgradeneeded = (event) => {\r\n        console.log(\"Actualizando estructura de la base de datos a versión:\", event.newVersion);\r\n        const db = event.target.result;\r\n        \r\n        // Crear todos los almacenes necesarios si no existen\r\n        const requiredStores = [\r\n          { name: USERS_STORE, keyPath: 'id' },\r\n          { name: MENU_STORE, keyPath: 'id' },\r\n          { name: IMAGE_STORE, keyPath: 'id' },\r\n          { name: SOLD_ITEMS_STORE, keyPath: 'id' },\r\n          { name: BUSINESS_INFO_STORE, keyPath: 'id' },\r\n          { name: SHARED_MENU_STORE, keyPath: 'id' }\r\n        ];\r\n        \r\n        // Crear cada almacén\r\n        requiredStores.forEach(store => {\r\n          if (!db.objectStoreNames.contains(store.name)) {\r\n            console.log(`Creando almacén: ${store.name}`);\r\n            db.createObjectStore(store.name, { keyPath: store.keyPath });\r\n          }\r\n        });\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error crítico en IndexedDB:\", error);\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\n// Guardar elementos del menú\r\nexport async function saveMenuItems(items) {\r\n  try {\r\n    // Primero procesamos todas las imágenes y creamos copias de los objetos\r\n    const processedItems = [];\r\n    for (const item of items) {\r\n      // Crear una copia del elemento\r\n      const itemToStore = { ...item };\r\n      \r\n      // Asegurarse de que el elemento tiene un id\r\n      if (!itemToStore.id) {\r\n        itemToStore.id = Date.now() + Math.random().toString(36).substring(2, 10);\r\n      }\r\n      \r\n      // Si tiene imagen, guardarla por separado antes de la transacción principal\r\n      if (itemToStore.image && typeof itemToStore.image === 'string' && itemToStore.image.length > 0) {\r\n        try {\r\n          await saveMenuImage(itemToStore.id, itemToStore.image);\r\n          itemToStore.image = null;\r\n          itemToStore.hasStoredImage = true;\r\n        } catch (imageError) {\r\n          console.warn('Error al guardar imagen, continuando sin imagen:', imageError);\r\n          // Si hay error al guardar la imagen, continuamos sin ella\r\n          itemToStore.image = null;\r\n          itemToStore.hasStoredImage = false;\r\n        }\r\n      }\r\n      \r\n      processedItems.push(itemToStore);\r\n    }\r\n    \r\n    // Ahora guardamos todos los items en una sola transacción\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([MENU_STORE], 'readwrite');\r\n    const store = transaction.objectStore(MENU_STORE);\r\n    \r\n    // Usamos Promise.all para manejar todas las operaciones put juntas\r\n    const putPromises = processedItems.map(item => {\r\n      return new Promise((resolve, reject) => {\r\n        const request = store.put(item);\r\n        request.onsuccess = () => resolve();\r\n        request.onerror = (e) => reject(e.target.error);\r\n      });\r\n    });\r\n    \r\n    // Esperamos a que se completen todas las operaciones put\r\n    await Promise.all(putPromises);\r\n    \r\n    // Esperamos a que se complete la transacción\r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar elementos del menú:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Guardar imagen de un elemento del menú\r\nexport async function saveMenuImage(itemId, imageData) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([IMAGE_STORE], 'readwrite');\r\n    const store = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    store.put({ id: itemId, data: imageData });\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar imagen:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener todos los elementos del menú\r\nexport async function getMenuItems() {\r\n  try {\r\n    const db = await openDatabase();\r\n    \r\n    // Verificar que el almacén existe\r\n    if (!Array.from(db.objectStoreNames).includes(MENU_STORE)) {\r\n      console.error(`El almacén ${MENU_STORE} no existe en la base de datos`);\r\n      return []; // Devolver array vacío en lugar de fallar\r\n    }\r\n    \r\n    const transaction = db.transaction([MENU_STORE], 'readonly');\r\n    const store = transaction.objectStore(MENU_STORE);\r\n    \r\n    const request = store.getAll();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = async () => {\r\n        let items = request.result;\r\n        \r\n        // Verificar que todos los elementos tengan IDs únicos\r\n        const uniqueItems = [];\r\n        const seenIds = new Set();\r\n        \r\n        for (const item of items) {\r\n          // Si el elemento no tiene ID o es un ID duplicado, generamos uno nuevo\r\n          if (!item.id || seenIds.has(item.id)) {\r\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\r\n          }\r\n          \r\n          // Marcar este ID como visto\r\n          seenIds.add(item.id);\r\n          uniqueItems.push(item);\r\n        }\r\n        \r\n        // Recuperar imágenes para cada elemento\r\n        for (const item of uniqueItems) {\r\n          if (item.hasStoredImage) {\r\n            item.image = await getMenuImage(item.id);\r\n          }\r\n        }\r\n        \r\n        resolve(uniqueItems);\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener elementos del menú:', error);\r\n    return []; // Devolver array vacío en caso de error\r\n  }\r\n}\r\n\r\n// Eliminar un elemento del menú - RENOMBRANDO LA FUNCIÓN\r\nexport async function deleteMenuItemFromDB(itemId) {\r\n  try {\r\n    console.log(`Intentando eliminar elemento con ID: ${itemId}`);\r\n    \r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([MENU_STORE, IMAGE_STORE], 'readwrite');\r\n    const menuStore = transaction.objectStore(MENU_STORE);\r\n    const imageStore = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    // Verificar primero si el elemento existe\r\n    const getRequest = menuStore.get(itemId);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      getRequest.onsuccess = () => {\r\n        if (!getRequest.result) {\r\n          console.warn(`No se encontró el elemento con ID: ${itemId}`);\r\n          // Resolver con éxito incluso si el elemento no existe\r\n          resolve(true);\r\n          return;\r\n        }\r\n        \r\n        // Eliminar el elemento\r\n        const deleteRequest = menuStore.delete(itemId);\r\n        deleteRequest.onsuccess = () => {\r\n          console.log(`Elemento con ID ${itemId} eliminado correctamente`);\r\n          \r\n          // Intentar eliminar la imagen asociada (no falla si no existe)\r\n          const imageRequest = imageStore.delete(itemId);\r\n          imageRequest.onsuccess = () => {\r\n            console.log(`Imagen para elemento ${itemId} eliminada (si existía)`);\r\n            resolve(true);\r\n          };\r\n          imageRequest.onerror = (e) => {\r\n            // No fallar si la imagen no existe\r\n            console.warn(`Error al eliminar imagen para ${itemId}:`, e.target.error);\r\n            resolve(true);\r\n          };\r\n        };\r\n        \r\n        deleteRequest.onerror = (e) => {\r\n          console.error(`Error al eliminar elemento ${itemId}:`, e.target.error);\r\n          reject(e.target.error);\r\n        };\r\n      };\r\n      \r\n      getRequest.onerror = (event) => {\r\n        console.error(`Error al verificar existencia del elemento ${itemId}:`, event.target.error);\r\n        reject(event.target.error);\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al eliminar elemento del menú:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Mantener la función original por compatibilidad, pero que use la nueva\r\nexport async function deleteMenuItem(itemId) {\r\n  console.warn('La función deleteMenuItem está obsoleta, use deleteMenuItemFromDB en su lugar');\r\n  return deleteMenuItemFromDB(itemId);\r\n}\r\n\r\n// Obtener imagen de un elemento del menú\r\nexport async function getMenuImage(itemId) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([IMAGE_STORE], 'readonly');\r\n    const store = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    const request = store.get(itemId);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        if (request.result) {\r\n          resolve(request.result.data);\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener imagen:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Guardar información del negocio - MEJORADA\r\nexport async function saveBusinessInfo(businessInfo) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction(['businessInfo'], 'readwrite');\r\n    const store = transaction.objectStore('businessInfo');\r\n\r\n    // Crear una copia limpia del objeto sin referencias circulares o propiedades no serializables\r\n    const cleanBusinessInfo = {\r\n      id: businessInfo.id || 'business_info_1', // Usar un ID consistente\r\n      name: businessInfo.name || '',\r\n      description: businessInfo.description || '',\r\n      contact: businessInfo.contact || '',\r\n      address: businessInfo.address || '',\r\n      logo: businessInfo.logo || ''\r\n    };\r\n\r\n    // Manejar información de pago por separado si existe\r\n    if (businessInfo.paymentInfo) {\r\n      cleanBusinessInfo.paymentInfo = {\r\n        qrTitle: businessInfo.paymentInfo.qrTitle || '',\r\n        qrImage: businessInfo.paymentInfo.qrImage || '',\r\n        nequiNumber: businessInfo.paymentInfo.nequiNumber || '',\r\n        nequiImage: businessInfo.paymentInfo.nequiImage || ''\r\n      };\r\n    }\r\n\r\n    // Para debugging, verificamos que es serializable\r\n    try {\r\n      JSON.stringify(cleanBusinessInfo);\r\n    } catch (e) {\r\n      console.error('El objeto businessInfo no es serializable:', e);\r\n      throw new Error('El objeto businessInfo no es serializable');\r\n    }\r\n\r\n    // Guardar el objeto limpio\r\n    const request = store.put(cleanBusinessInfo);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => resolve(true);\r\n      request.onerror = (event) => {\r\n        console.error('Error específico al guardar businessInfo:', event.target.error);\r\n        reject(event.target.error);\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar información del negocio:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener información del negocio\r\nexport async function getBusinessInfo() {\r\n  try {\r\n    const db = await openDatabase();\r\n    \r\n    // Verificar que el almacén existe\r\n    if (!Array.from(db.objectStoreNames).includes(BUSINESS_INFO_STORE)) {\r\n      console.error(`El almacén ${BUSINESS_INFO_STORE} no existe en la base de datos`);\r\n      return {}; // Devolver objeto vacío en lugar de fallar\r\n    }\r\n    \r\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readonly');\r\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\r\n    \r\n    const request = store.get('business_info_1');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        resolve(request.result || {});\r\n      };\r\n      request.onerror = (event) => {\r\n        console.error('Error en request:', event.target.error);\r\n        reject(event.target.error);\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener información del negocio:', error);\r\n    // Devolvemos un objeto vacío en lugar de fallar\r\n    return {};\r\n  }\r\n}\r\n\r\n// Guardar elementos vendidos\r\nexport async function saveSoldItems(items) {\r\n  try {\r\n    // Asegurarse de que items sea un array y que cada elemento sea serializable\r\n    if (!Array.isArray(items)) {\r\n      console.warn('saveSoldItems recibió un valor que no es array:', items);\r\n      items = [];\r\n    }\r\n    \r\n    // Limpiar los objetos para asegurar que sean serializables\r\n    const cleanItems = items.map(item => {\r\n      // Si el item no es un objeto, crear uno básico\r\n      if (!item || typeof item !== 'object') {\r\n        return {\r\n          name: 'Producto desconocido',\r\n          quantity: 1,\r\n          price: 0,\r\n          includesDrink: false\r\n        };\r\n      }\r\n      \r\n      // Crear una copia limpia con solo las propiedades necesarias\r\n      return {\r\n        name: String(item.name || 'Producto desconocido'),\r\n        quantity: Number(item.quantity) || 1,\r\n        price: Number(item.price) || 0,\r\n        includesDrink: Boolean(item.includesDrink)\r\n      };\r\n    });\r\n    \r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readwrite');\r\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\r\n    \r\n    // Asegurarnos de que estamos guardando un objeto serializable\r\n    const soldItemsObject = { \r\n      id: 'sold_items_1', \r\n      items: cleanItems\r\n    };\r\n    \r\n    // Verificar que el objeto es serializable antes de guardarlo\r\n    try {\r\n      // Esto lanzará error si el objeto no es serializable\r\n      JSON.stringify(soldItemsObject);\r\n    } catch (e) {\r\n      console.error('El objeto soldItems no es serializable:', e);\r\n      throw new Error('El objeto soldItems no es serializable');\r\n    }\r\n    \r\n    const request = store.put(soldItemsObject);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => resolve(true);\r\n      request.onerror = (event) => {\r\n        console.error('Error específico al guardar soldItems:', event.target.error);\r\n        reject(event.target.error);\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar elementos vendidos:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener elementos vendidos\r\nexport async function getSoldItems() {\r\n  try {\r\n    const db = await openDatabase();\r\n    \r\n    // Verificar que el almacén existe\r\n    if (!Array.from(db.objectStoreNames).includes(SOLD_ITEMS_STORE)) {\r\n      console.error(`El almacén ${SOLD_ITEMS_STORE} no existe en la base de datos`);\r\n      return []; // Devolver array vacío en lugar de fallar\r\n    }\r\n    \r\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readonly');\r\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\r\n    \r\n    const request = store.get('sold_items_1');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        if (request.result) {\r\n          resolve(request.result.items);\r\n        } else {\r\n          resolve([]);\r\n        }\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener elementos vendidos:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Eliminar completamente la función migrateFromLocalStorage ya que no queremos usar localStorage\r\nexport async function migrateFromLocalStorage() {\r\n  console.log(\"Función migrateFromLocalStorage en desuso - no se utilizará localStorage\");\r\n  return true; // Solo para mantener la compatibilidad con el código existente\r\n}\r\n\r\n// Comprimir imagen\r\nexport function compressImage(base64Image, maxWidth = 800, maxHeight = 600, quality = 0.7) {\r\n  return new Promise((resolve) => {\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      // Crear un canvas para comprimir la imagen\r\n      const canvas = document.createElement('canvas');\r\n      \r\n      let width = img.width;\r\n      let height = img.height;\r\n      \r\n      // Calcular nuevas dimensiones manteniendo proporción\r\n      if (width > height) {\r\n        if (width > maxWidth) {\r\n          height = Math.round((height * maxWidth) / width);\r\n          width = maxWidth;\r\n        }\r\n      } else {\r\n        if (height > maxHeight) {\r\n          width = Math.round((width * maxHeight) / height);\r\n          height = maxHeight;\r\n        }\r\n      }\r\n      \r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      \r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0, width, height);\r\n      \r\n      // Obtener imagen comprimida como JPEG con calidad reducida\r\n      const compressedImage = canvas.toDataURL('image/jpeg', quality);\r\n      resolve(compressedImage);\r\n    };\r\n    img.src = base64Image;\r\n  });\r\n}\r\n\r\n// Mejorar la función resetDatabase para asegurarnos de que no use localStorage\r\nexport async function resetDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      console.log(\"Iniciando proceso de eliminación de la base de datos...\");\r\n      \r\n      const deleteRequest = indexedDB.deleteDatabase(DB_NAME);\r\n      \r\n      deleteRequest.onsuccess = () => {\r\n        console.log(\"Base de datos eliminada con éxito\");\r\n        \r\n        console.log(\"Limpieza completa. La aplicación está lista para comenzar de nuevo.\");\r\n        resolve(true);\r\n      };\r\n      \r\n      deleteRequest.onerror = (event) => {\r\n        console.error(\"Error al eliminar la base de datos:\", event.target.error);\r\n        reject(event.target.error);\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error al intentar resetear la base de datos:\", error);\r\n      reject(error);\r\n    }\r\n  });\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}