{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\n// src/scripts/extractIndexedDBImages.js\n\nimport { getAllPlatos } from '../services/indexedDBService';\nimport apiService from '../services/apiService';\nimport { optimizeImageForSync } from '../services/imageService';\n\n/**\n * Función para extraer las imágenes de los platos desde IndexedDB y enviarlas al servidor\n */\nexport async function extractIndexedDBImages() {\n  try {\n    console.log('Extrayendo imágenes de IndexedDB...');\n\n    // Obtener todos los platos de IndexedDB\n    const platos = await getAllPlatos();\n    if (!platos || platos.length === 0) {\n      console.warn('No hay platos en IndexedDB para extraer imágenes');\n      return {\n        success: false,\n        message: 'No hay platos en IndexedDB para extraer imágenes'\n      };\n    }\n    console.log(`Se encontraron ${platos.length} platos en IndexedDB`);\n\n    // Filtrar solo los platos que tienen imagen\n    const platosConImagen = platos.filter(plato => plato.image && plato.image.length > 0);\n    console.log(`${platosConImagen.length} platos tienen imágenes en IndexedDB`);\n    if (platosConImagen.length === 0) {\n      console.warn('Ninguno de los platos tiene imágenes en IndexedDB');\n      return {\n        success: false,\n        message: 'Ninguno de los platos tiene imágenes en IndexedDB'\n      };\n    }\n\n    // Optimizar las imágenes antes de enviarlas\n    console.log('Optimizando imágenes antes de enviarlas...');\n    const platosOptimizados = [];\n    for (const plato of platosConImagen) {\n      try {\n        // Crear una copia del plato para no modificar el original\n        const platoOptimizado = {\n          ...plato\n        };\n\n        // Optimizar la imagen\n        platoOptimizado.image = await optimizeImageForSync(plato.image);\n        platosOptimizados.push(platoOptimizado);\n      } catch (error) {\n        console.warn(`Error al optimizar imagen del plato ${plato.name}:`, error);\n        // Incluir el plato con la imagen original en caso de error\n        platosOptimizados.push(plato);\n      }\n    }\n    console.log(`${platosOptimizados.length} platos con imágenes optimizadas listos para enviar`);\n\n    // Enviar los platos con imágenes optimizadas al servidor\n    const response = await apiService.post('/indexeddb/backup', {\n      platos: platosOptimizados\n    });\n    if (response && response.success) {\n      console.log('Imágenes extraídas y enviadas al servidor con éxito');\n\n      // Sincronizar las imágenes con MySQL\n      try {\n        const syncResponse = await apiService.post('/indexeddb/sync-images');\n        if (syncResponse && syncResponse.success) {\n          console.log('Imágenes sincronizadas con MySQL con éxito');\n          return {\n            success: true,\n            message: `Imágenes extraídas y sincronizadas con éxito. ${syncResponse.data.actualizados} platos actualizados.`\n          };\n        } else {\n          console.error('Error al sincronizar imágenes con MySQL:', syncResponse?.message || 'Error desconocido');\n          return {\n            success: false,\n            message: 'Error al sincronizar imágenes con MySQL: ' + (syncResponse?.message || 'Error desconocido')\n          };\n        }\n      } catch (syncError) {\n        console.error('Error al sincronizar imágenes con MySQL:', syncError);\n        return {\n          success: false,\n          message: 'Error al sincronizar imágenes con MySQL: ' + syncError.message\n        };\n      }\n    } else {\n      console.error('Error al enviar imágenes al servidor:', response?.message || 'Error desconocido');\n      return {\n        success: false,\n        message: 'Error al enviar imágenes al servidor: ' + (response?.message || 'Error desconocido')\n      };\n    }\n  } catch (error) {\n    console.error('Error al extraer imágenes de IndexedDB:', error);\n    return {\n      success: false,\n      message: 'Error al extraer imágenes de IndexedDB: ' + error.message\n    };\n  }\n}","map":{"version":3,"names":["getAllPlatos","apiService","optimizeImageForSync","extractIndexedDBImages","console","log","platos","length","warn","success","message","platosConImagen","filter","plato","image","platosOptimizados","platoOptimizado","push","error","name","response","post","syncResponse","data","actualizados","syncError"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/scripts/extractIndexedDBImages.js"],"sourcesContent":["// src/scripts/extractIndexedDBImages.js\n\nimport { getAllPlatos } from '../services/indexedDBService';\nimport apiService from '../services/apiService';\nimport { optimizeImageForSync } from '../services/imageService';\n\n/**\n * Función para extraer las imágenes de los platos desde IndexedDB y enviarlas al servidor\n */\nexport async function extractIndexedDBImages() {\n  try {\n    console.log('Extrayendo imágenes de IndexedDB...');\n    \n    // Obtener todos los platos de IndexedDB\n    const platos = await getAllPlatos();\n    \n    if (!platos || platos.length === 0) {\n      console.warn('No hay platos en IndexedDB para extraer imágenes');\n      return {\n        success: false,\n        message: 'No hay platos en IndexedDB para extraer imágenes'\n      };\n    }\n    \n    console.log(`Se encontraron ${platos.length} platos en IndexedDB`);\n    \n    // Filtrar solo los platos que tienen imagen\n    const platosConImagen = platos.filter(plato => plato.image && plato.image.length > 0);\n    \n    console.log(`${platosConImagen.length} platos tienen imágenes en IndexedDB`);\n    \n    if (platosConImagen.length === 0) {\n      console.warn('Ninguno de los platos tiene imágenes en IndexedDB');\n      return {\n        success: false,\n        message: 'Ninguno de los platos tiene imágenes en IndexedDB'\n      };\n    }\n    \n    // Optimizar las imágenes antes de enviarlas\n    console.log('Optimizando imágenes antes de enviarlas...');\n    const platosOptimizados = [];\n    \n    for (const plato of platosConImagen) {\n      try {\n        // Crear una copia del plato para no modificar el original\n        const platoOptimizado = { ...plato };\n        \n        // Optimizar la imagen\n        platoOptimizado.image = await optimizeImageForSync(plato.image);\n        \n        platosOptimizados.push(platoOptimizado);\n      } catch (error) {\n        console.warn(`Error al optimizar imagen del plato ${plato.name}:`, error);\n        // Incluir el plato con la imagen original en caso de error\n        platosOptimizados.push(plato);\n      }\n    }\n    \n    console.log(`${platosOptimizados.length} platos con imágenes optimizadas listos para enviar`);\n    \n    // Enviar los platos con imágenes optimizadas al servidor\n    const response = await apiService.post('/indexeddb/backup', { platos: platosOptimizados });\n    \n    if (response && response.success) {\n      console.log('Imágenes extraídas y enviadas al servidor con éxito');\n      \n      // Sincronizar las imágenes con MySQL\n      try {\n        const syncResponse = await apiService.post('/indexeddb/sync-images');\n        \n        if (syncResponse && syncResponse.success) {\n          console.log('Imágenes sincronizadas con MySQL con éxito');\n          return {\n            success: true,\n            message: `Imágenes extraídas y sincronizadas con éxito. ${syncResponse.data.actualizados} platos actualizados.`\n          };\n        } else {\n          console.error('Error al sincronizar imágenes con MySQL:', syncResponse?.message || 'Error desconocido');\n          return {\n            success: false,\n            message: 'Error al sincronizar imágenes con MySQL: ' + (syncResponse?.message || 'Error desconocido')\n          };\n        }\n      } catch (syncError) {\n        console.error('Error al sincronizar imágenes con MySQL:', syncError);\n        return {\n          success: false,\n          message: 'Error al sincronizar imágenes con MySQL: ' + syncError.message\n        };\n      }\n    } else {\n      console.error('Error al enviar imágenes al servidor:', response?.message || 'Error desconocido');\n      return {\n        success: false,\n        message: 'Error al enviar imágenes al servidor: ' + (response?.message || 'Error desconocido')\n      };\n    }\n  } catch (error) {\n    console.error('Error al extraer imágenes de IndexedDB:', error);\n    return {\n      success: false,\n      message: 'Error al extraer imágenes de IndexedDB: ' + error.message\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}