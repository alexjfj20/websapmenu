{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\n/**\r\n * Clase cliente para manejar conexiones WebSocket con reconexión automática\r\n */\nexport default class WebSocketClient {\n  /**\r\n   * Constructor\r\n   * @param {String} url - URL del servidor WebSocket\r\n   * @param {Object} options - Opciones de configuración\r\n   */\n  constructor(url, options = {}) {\n    this.url = url;\n    this.options = {\n      reconnectInterval: 3000,\n      // Intervalo entre intentos de reconexión (3 segundos)\n      reconnectAttempts: 5,\n      // Número máximo de intentos de reconexión\n      ...options\n    };\n    this.socket = null;\n    this.reconnectCount = 0;\n    this.isConnecting = false;\n    this.listeners = {\n      message: [],\n      open: [],\n      close: [],\n      error: []\n    };\n  }\n\n  /**\r\n   * Iniciar la conexión WebSocket\r\n   */\n  connect() {\n    if (this.socket && (this.socket.readyState === WebSocket.CONNECTING || this.socket.readyState === WebSocket.OPEN)) {\n      console.log('WebSocket: Ya existe una conexión activa o en proceso');\n      return;\n    }\n    this.isConnecting = true;\n    try {\n      console.log(`WebSocket: Intentando conectar a ${this.url}`);\n      this.socket = new WebSocket(this.url);\n      this.socket.onopen = event => {\n        console.log('WebSocket: Conexión establecida');\n        this.isConnecting = false;\n        this.reconnectCount = 0;\n        this._notifyListeners('open', event);\n      };\n      this.socket.onmessage = event => {\n        this._notifyListeners('message', event);\n      };\n      this.socket.onclose = event => {\n        console.log(`WebSocket: Conexión cerrada (código: ${event.code})`);\n        this._notifyListeners('close', event);\n        this._attemptReconnect();\n      };\n      this.socket.onerror = event => {\n        console.error('WebSocket: Error en la conexión', event);\n        this._notifyListeners('error', event);\n      };\n    } catch (error) {\n      console.error('WebSocket: Error al crear la conexión', error);\n      this.isConnecting = false;\n      this._attemptReconnect();\n    }\n  }\n\n  /**\r\n   * Intentar reconexión si es apropiado\r\n   * @private\r\n   */\n  _attemptReconnect() {\n    if (this.isConnecting) return;\n    if (this.reconnectCount < this.options.reconnectAttempts) {\n      this.reconnectCount++;\n      console.log(`WebSocket: Intentando reconectar (${this.reconnectCount}/${this.options.reconnectAttempts})...`);\n      setTimeout(() => {\n        this.connect();\n      }, this.options.reconnectInterval);\n    } else {\n      console.error(`WebSocket: Máximo número de intentos de reconexión (${this.options.reconnectAttempts}) alcanzado.`);\n    }\n  }\n\n  /**\r\n   * Notificar a los listeners de un evento\r\n   * @param {string} type - Tipo de evento ('message', 'open', 'close', 'error')\r\n   * @param {Event} event - Objeto evento\r\n   * @private\r\n   */\n  _notifyListeners(type, event) {\n    if (this.listeners[type]) {\n      this.listeners[type].forEach(callback => callback(event));\n    }\n  }\n\n  /**\r\n   * Añadir un listener para un tipo de evento\r\n   * @param {string} type - Tipo de evento ('message', 'open', 'close', 'error') \r\n   * @param {function} callback - Función callback a ejecutar\r\n   */\n  on(type, callback) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n    this.listeners[type].push(callback);\n  }\n\n  /**\r\n   * Eliminar un listener específico\r\n   * @param {string} type - Tipo de evento\r\n   * @param {function} callback - Callback a eliminar\r\n   */\n  off(type, callback) {\n    if (this.listeners[type]) {\n      this.listeners[type] = this.listeners[type].filter(cb => cb !== callback);\n    }\n  }\n\n  /**\r\n   * Enviar un mensaje al servidor WebSocket\r\n   * @param {any} data - Datos a enviar\r\n   * @returns {boolean} - true si se envió correctamente, false en caso contrario\r\n   */\n  send(data) {\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\n      console.error('WebSocket: Intento de envío sin conexión establecida');\n      return false;\n    }\n    try {\n      // Si es un objeto, lo convertimos a JSON\n      const message = typeof data === 'object' ? JSON.stringify(data) : data;\n      this.socket.send(message);\n      return true;\n    } catch (error) {\n      console.error('WebSocket: Error al enviar mensaje', error);\n      return false;\n    }\n  }\n\n  /**\r\n   * Cerrar la conexión WebSocket\r\n   * @param {number} code - Código de cierre\r\n   * @param {string} reason - Razón del cierre\r\n   */\n  disconnect(code = 1000, reason = 'Cierre normal') {\n    if (this.socket) {\n      try {\n        this.socket.close(code, reason);\n      } catch (error) {\n        console.error('WebSocket: Error al cerrar la conexión', error);\n      }\n    }\n\n    // Limpiar todos los listeners\n    Object.keys(this.listeners).forEach(type => {\n      this.listeners[type] = [];\n    });\n  }\n\n  /**\r\n   * Obtener el estado de la conexión\r\n   * @returns {string} - Estado actual de la conexión\r\n   */\n  getState() {\n    if (!this.socket) return 'CLOSED';\n    switch (this.socket.readyState) {\n      case WebSocket.CONNECTING:\n        return 'CONNECTING';\n      case WebSocket.OPEN:\n        return 'OPEN';\n      case WebSocket.CLOSING:\n        return 'CLOSING';\n      case WebSocket.CLOSED:\n      default:\n        return 'CLOSED';\n    }\n  }\n}","map":{"version":3,"names":["WebSocketClient","constructor","url","options","reconnectInterval","reconnectAttempts","socket","reconnectCount","isConnecting","listeners","message","open","close","error","connect","readyState","WebSocket","CONNECTING","OPEN","console","log","onopen","event","_notifyListeners","onmessage","onclose","code","_attemptReconnect","onerror","setTimeout","type","forEach","callback","on","push","off","filter","cb","send","data","JSON","stringify","disconnect","reason","Object","keys","getState","CLOSING","CLOSED"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/WebSocketClient.js"],"sourcesContent":["/**\r\n * Clase cliente para manejar conexiones WebSocket con reconexión automática\r\n */\r\nexport default class WebSocketClient {\r\n  /**\r\n   * Constructor\r\n   * @param {String} url - URL del servidor WebSocket\r\n   * @param {Object} options - Opciones de configuración\r\n   */\r\n  constructor(url, options = {}) {\r\n    this.url = url;\r\n    this.options = {\r\n      reconnectInterval: 3000, // Intervalo entre intentos de reconexión (3 segundos)\r\n      reconnectAttempts: 5,    // Número máximo de intentos de reconexión\r\n      ...options\r\n    };\r\n    \r\n    this.socket = null;\r\n    this.reconnectCount = 0;\r\n    this.isConnecting = false;\r\n    this.listeners = {\r\n      message: [],\r\n      open: [],\r\n      close: [],\r\n      error: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Iniciar la conexión WebSocket\r\n   */\r\n  connect() {\r\n    if (this.socket && (this.socket.readyState === WebSocket.CONNECTING || \r\n                       this.socket.readyState === WebSocket.OPEN)) {\r\n      console.log('WebSocket: Ya existe una conexión activa o en proceso');\r\n      return;\r\n    }\r\n\r\n    this.isConnecting = true;\r\n    \r\n    try {\r\n      console.log(`WebSocket: Intentando conectar a ${this.url}`);\r\n      this.socket = new WebSocket(this.url);\r\n      \r\n      this.socket.onopen = (event) => {\r\n        console.log('WebSocket: Conexión establecida');\r\n        this.isConnecting = false;\r\n        this.reconnectCount = 0;\r\n        this._notifyListeners('open', event);\r\n      };\r\n      \r\n      this.socket.onmessage = (event) => {\r\n        this._notifyListeners('message', event);\r\n      };\r\n      \r\n      this.socket.onclose = (event) => {\r\n        console.log(`WebSocket: Conexión cerrada (código: ${event.code})`);\r\n        this._notifyListeners('close', event);\r\n        this._attemptReconnect();\r\n      };\r\n      \r\n      this.socket.onerror = (event) => {\r\n        console.error('WebSocket: Error en la conexión', event);\r\n        this._notifyListeners('error', event);\r\n      };\r\n    } catch (error) {\r\n      console.error('WebSocket: Error al crear la conexión', error);\r\n      this.isConnecting = false;\r\n      this._attemptReconnect();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Intentar reconexión si es apropiado\r\n   * @private\r\n   */\r\n  _attemptReconnect() {\r\n    if (this.isConnecting) return;\r\n    \r\n    if (this.reconnectCount < this.options.reconnectAttempts) {\r\n      this.reconnectCount++;\r\n      console.log(`WebSocket: Intentando reconectar (${this.reconnectCount}/${this.options.reconnectAttempts})...`);\r\n      \r\n      setTimeout(() => {\r\n        this.connect();\r\n      }, this.options.reconnectInterval);\r\n    } else {\r\n      console.error(`WebSocket: Máximo número de intentos de reconexión (${this.options.reconnectAttempts}) alcanzado.`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notificar a los listeners de un evento\r\n   * @param {string} type - Tipo de evento ('message', 'open', 'close', 'error')\r\n   * @param {Event} event - Objeto evento\r\n   * @private\r\n   */\r\n  _notifyListeners(type, event) {\r\n    if (this.listeners[type]) {\r\n      this.listeners[type].forEach(callback => callback(event));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Añadir un listener para un tipo de evento\r\n   * @param {string} type - Tipo de evento ('message', 'open', 'close', 'error') \r\n   * @param {function} callback - Función callback a ejecutar\r\n   */\r\n  on(type, callback) {\r\n    if (!this.listeners[type]) {\r\n      this.listeners[type] = [];\r\n    }\r\n    this.listeners[type].push(callback);\r\n  }\r\n\r\n  /**\r\n   * Eliminar un listener específico\r\n   * @param {string} type - Tipo de evento\r\n   * @param {function} callback - Callback a eliminar\r\n   */\r\n  off(type, callback) {\r\n    if (this.listeners[type]) {\r\n      this.listeners[type] = this.listeners[type].filter(cb => cb !== callback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enviar un mensaje al servidor WebSocket\r\n   * @param {any} data - Datos a enviar\r\n   * @returns {boolean} - true si se envió correctamente, false en caso contrario\r\n   */\r\n  send(data) {\r\n    if (!this.socket || this.socket.readyState !== WebSocket.OPEN) {\r\n      console.error('WebSocket: Intento de envío sin conexión establecida');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      // Si es un objeto, lo convertimos a JSON\r\n      const message = typeof data === 'object' ? JSON.stringify(data) : data;\r\n      this.socket.send(message);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('WebSocket: Error al enviar mensaje', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cerrar la conexión WebSocket\r\n   * @param {number} code - Código de cierre\r\n   * @param {string} reason - Razón del cierre\r\n   */\r\n  disconnect(code = 1000, reason = 'Cierre normal') {\r\n    if (this.socket) {\r\n      try {\r\n        this.socket.close(code, reason);\r\n      } catch (error) {\r\n        console.error('WebSocket: Error al cerrar la conexión', error);\r\n      }\r\n    }\r\n    \r\n    // Limpiar todos los listeners\r\n    Object.keys(this.listeners).forEach(type => {\r\n      this.listeners[type] = [];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Obtener el estado de la conexión\r\n   * @returns {string} - Estado actual de la conexión\r\n   */\r\n  getState() {\r\n    if (!this.socket) return 'CLOSED';\r\n    \r\n    switch (this.socket.readyState) {\r\n      case WebSocket.CONNECTING:\r\n        return 'CONNECTING';\r\n      case WebSocket.OPEN:\r\n        return 'OPEN';\r\n      case WebSocket.CLOSING:\r\n        return 'CLOSING';\r\n      case WebSocket.CLOSED:\r\n      default:\r\n        return 'CLOSED';\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}