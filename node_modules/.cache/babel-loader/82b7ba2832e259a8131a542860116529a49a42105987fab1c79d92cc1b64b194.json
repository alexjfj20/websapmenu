{"ast":null,"code":"import apiService from './apiService';\nimport { alert } from './dialogService';\n\n/**\r\n * Inicia sesión con credenciales\r\n * @param {string} email - Email del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\nexport async function login(email, password) {\n  try {\n    const response = await apiService.post('/auth/login', {\n      email,\n      password\n    });\n    if (response.success && response.data) {\n      // Guardar token\n      apiService.setToken(response.data.token);\n\n      // Guardar estado de sesión\n      localStorage.setItem('isLoggedIn', 'true');\n      localStorage.setItem('currentUser', JSON.stringify({\n        id: response.data.id,\n        nombre: response.data.nombre,\n        email: response.data.email,\n        roles: response.data.roles || []\n      }));\n      return response.data;\n    } else {\n      throw new Error('Error en la autenticación');\n    }\n  } catch (error) {\n    console.error('Error en login:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Cierra la sesión del usuario actual\r\n */\nexport function logout() {\n  // Limpiar token\n  apiService.setToken('');\n\n  // Limpiar localStorage\n  localStorage.removeItem('isLoggedIn');\n  localStorage.removeItem('currentUser');\n  localStorage.removeItem('authToken');\n\n  // Redirigir a la página de inicio\n  window.location.href = '/login';\n}\n\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} - true si está autenticado, false en caso contrario\r\n */\nexport function isAuthenticated() {\n  return localStorage.getItem('isLoggedIn') === 'true';\n}\n\n/**\r\n * Verifica si el usuario actual tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\nexport function hasRole(roleName) {\n  const user = getCurrentUser();\n  if (!user || !user.roles) {\n    return false;\n  }\n\n  // Si roles es un array, verificar si contiene el rol\n  if (Array.isArray(user.roles)) {\n    return user.roles.includes(roleName);\n  }\n\n  // Si roles es un string, verificar si es igual al rol buscado\n  if (typeof user.roles === 'string') {\n    return user.roles === roleName;\n  }\n  return false;\n}\n\n/**\r\n * Obtiene datos del usuario actual\r\n * @returns {Object|null} - Datos del usuario o null si no hay sesión\r\n */\nexport function getCurrentUser() {\n  try {\n    const userStr = localStorage.getItem('currentUser');\n    return userStr ? JSON.parse(userStr) : null;\n  } catch (e) {\n    console.error('Error al obtener usuario actual:', e);\n    return null;\n  }\n}\nexport default {\n  login,\n  logout,\n  isAuthenticated,\n  hasRole,\n  getCurrentUser\n};","map":{"version":3,"names":["apiService","alert","login","email","password","response","post","success","data","setToken","token","localStorage","setItem","JSON","stringify","id","nombre","roles","Error","error","console","logout","removeItem","window","location","href","isAuthenticated","getItem","hasRole","roleName","user","getCurrentUser","Array","isArray","includes","userStr","parse","e"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/authService.js"],"sourcesContent":["import apiService from './apiService';\r\nimport { alert } from './dialogService';\r\n\r\n/**\r\n * Inicia sesión con credenciales\r\n * @param {string} email - Email del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\r\nexport async function login(email, password) {\r\n  try {\r\n    const response = await apiService.post('/auth/login', { email, password });\r\n    \r\n    if (response.success && response.data) {\r\n      // Guardar token\r\n      apiService.setToken(response.data.token);\r\n      \r\n      // Guardar estado de sesión\r\n      localStorage.setItem('isLoggedIn', 'true');\r\n      localStorage.setItem('currentUser', JSON.stringify({\r\n        id: response.data.id,\r\n        nombre: response.data.nombre,\r\n        email: response.data.email,\r\n        roles: response.data.roles || []\r\n      }));\r\n      \r\n      return response.data;\r\n    } else {\r\n      throw new Error('Error en la autenticación');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error en login:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Cierra la sesión del usuario actual\r\n */\r\nexport function logout() {\r\n  // Limpiar token\r\n  apiService.setToken('');\r\n  \r\n  // Limpiar localStorage\r\n  localStorage.removeItem('isLoggedIn');\r\n  localStorage.removeItem('currentUser');\r\n  localStorage.removeItem('authToken');\r\n  \r\n  // Redirigir a la página de inicio\r\n  window.location.href = '/login';\r\n}\r\n\r\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} - true si está autenticado, false en caso contrario\r\n */\r\nexport function isAuthenticated() {\r\n  return localStorage.getItem('isLoggedIn') === 'true';\r\n}\r\n\r\n/**\r\n * Verifica si el usuario actual tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\r\nexport function hasRole(roleName) {\r\n  const user = getCurrentUser();\r\n  \r\n  if (!user || !user.roles) {\r\n    return false;\r\n  }\r\n  \r\n  // Si roles es un array, verificar si contiene el rol\r\n  if (Array.isArray(user.roles)) {\r\n    return user.roles.includes(roleName);\r\n  }\r\n  \r\n  // Si roles es un string, verificar si es igual al rol buscado\r\n  if (typeof user.roles === 'string') {\r\n    return user.roles === roleName;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\n/**\r\n * Obtiene datos del usuario actual\r\n * @returns {Object|null} - Datos del usuario o null si no hay sesión\r\n */\r\nexport function getCurrentUser() {\r\n  try {\r\n    const userStr = localStorage.getItem('currentUser');\r\n    return userStr ? JSON.parse(userStr) : null;\r\n  } catch (e) {\r\n    console.error('Error al obtener usuario actual:', e);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}