{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"public-menu\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[1] || (_cache[1] = _createElementVNode(\"h1\", null, \"Menú Público\", -1)), $options.menuId ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"p\", null, \"Cargando menú con ID: \" + _toDisplayString($options.menuId), 1)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _cache[0] || (_cache[0] = [_createElementVNode(\"p\", null, \"Cargando menú...\", -1)])))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","$options","menuId","_hoisted_2","_toDisplayString","_hoisted_3","_cache"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\views\\PublicMenu.vue"],"sourcesContent":["<template>\r\n  <div class=\"public-menu\">\r\n    <h1>Menú Público</h1>\r\n    <!-- Aquí iría el contenido del menú basado en el ID -->\r\n    <div v-if=\"menuId\">\r\n      <p>Cargando menú con ID: {{ menuId }}</p>\r\n      <!-- Aquí irían los componentes para mostrar el menú actual -->\r\n    </div>\r\n    <div v-else>\r\n      <p>Cargando menú...</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'PublicMenu',\r\n  props: {\r\n    id: {\r\n      type: String,\r\n      required: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      menu: null,\r\n      loading: true,\r\n      error: null\r\n    }\r\n  },\r\n  computed: {\r\n    menuId() {\r\n      // Usar el ID del prop o del parámetro de ruta\r\n      return this.id || this.$route.params.id;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.loadMenu();\r\n  },\r\n  methods: {\r\n    async loadMenu() {\r\n      if (!this.menuId) return;\r\n      \r\n      try {\r\n        this.loading = true;\r\n        // Aquí deberías hacer una llamada a tu API para cargar los datos del menú\r\n        // Por ejemplo:\r\n        // const response = await fetch(`/api/menus/${this.menuId}`);\r\n        // this.menu = await response.json();\r\n        \r\n        // Simulación temporal de carga\r\n        setTimeout(() => {\r\n          this.loading = false;\r\n          this.menu = { id: this.menuId, name: \"Menú de prueba\" };\r\n        }, 500);\r\n      } catch (error) {\r\n        console.error(\"Error al cargar el menú:\", error);\r\n        this.error = \"No se pudo cargar el menú. Inténtalo de nuevo más tarde.\";\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.public-menu {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAa;;EAD1BC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAUM,OAVNC,UAUM,G,0BATJC,mBAAA,CAAqB,YAAjB,cAAY,QAELC,QAAA,CAAAC,MAAM,I,cAAjBJ,mBAAA,CAGM,OAPVK,UAAA,GAKMH,mBAAA,CAAyC,WAAtC,wBAAsB,GAAAI,gBAAA,CAAGH,QAAA,CAAAC,MAAM,M,oBAGpCJ,mBAAA,CAEM,OAVVO,UAAA,EAAAC,MAAA,QAAAA,MAAA,OASMN,mBAAA,CAAuB,WAApB,kBAAgB,M","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}