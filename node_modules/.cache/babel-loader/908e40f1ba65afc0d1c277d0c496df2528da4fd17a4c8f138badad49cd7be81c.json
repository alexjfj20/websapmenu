{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"menu-component\"\n};\nconst _hoisted_2 = {\n  class: \"business-info-section\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"business-form\"\n};\nconst _hoisted_4 = {\n  class: \"form-group\"\n};\nconst _hoisted_5 = {\n  class: \"form-group\"\n};\nconst _hoisted_6 = {\n  class: \"form-group\"\n};\nconst _hoisted_7 = {\n  class: \"form-actions\"\n};\nconst _hoisted_8 = [\"disabled\"];\nconst _hoisted_9 = {\n  class: \"payment-info-section\"\n};\nconst _hoisted_10 = {\n  key: 0,\n  class: \"payment-form\"\n};\nconst _hoisted_11 = {\n  class: \"form-group\"\n};\nconst _hoisted_12 = {\n  class: \"form-group\"\n};\nconst _hoisted_13 = {\n  class: \"form-group\"\n};\nconst _hoisted_14 = {\n  class: \"form-group\"\n};\nconst _hoisted_15 = {\n  class: \"form-actions\"\n};\nconst _hoisted_16 = [\"disabled\"];\nconst _hoisted_17 = {\n  class: \"inventory-section\"\n};\nconst _hoisted_18 = {\n  key: 0,\n  class: \"inventory-content\"\n};\nconst _hoisted_19 = {\n  class: \"inventory-filters\"\n};\nconst _hoisted_20 = {\n  class: \"inventory-list\"\n};\nconst _hoisted_21 = {\n  class: \"item-info\"\n};\nconst _hoisted_22 = {\n  class: \"item-actions\"\n};\nconst _hoisted_23 = [\"onClick\"];\nconst _hoisted_24 = [\"onClick\"];\nconst _hoisted_25 = {\n  class: \"categories-section\"\n};\nconst _hoisted_26 = {\n  key: 0,\n  class: \"categories-content\"\n};\nconst _hoisted_27 = {\n  class: \"categories-list\"\n};\nconst _hoisted_28 = {\n  class: \"category-info\"\n};\nconst _hoisted_29 = {\n  class: \"category-actions\"\n};\nconst _hoisted_30 = [\"onClick\"];\nconst _hoisted_31 = [\"onClick\"];\nconst _hoisted_32 = {\n  class: \"add-category\"\n};\nconst _hoisted_33 = {\n  key: 0,\n  class: \"category-form\"\n};\nconst _hoisted_34 = {\n  class: \"form-group\"\n};\nconst _hoisted_35 = {\n  class: \"form-group\"\n};\nconst _hoisted_36 = {\n  class: \"form-actions\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Sección de información del negocio \"), _createElementVNode(\"div\", _hoisted_2, [_cache[24] || (_cache[24] = _createElementVNode(\"h3\", null, \"Información del Negocio\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.toggleBusinessForm && $setup.toggleBusinessForm(...args)),\n    class: \"btn btn-primary\"\n  }, _toDisplayString($setup.showBusinessForm ? 'Cancelar' : 'Editar información'), 1 /* TEXT */), $setup.showBusinessForm ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_cache[21] || (_cache[21] = _createElementVNode(\"label\", null, \"Nombre del negocio\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.businessInfo.name = $event),\n    type: \"text\",\n    class: \"form-control\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.businessInfo.name]])]), _createElementVNode(\"div\", _hoisted_5, [_cache[22] || (_cache[22] = _createElementVNode(\"label\", null, \"Descripción\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.businessInfo.description = $event),\n    class: \"form-control\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.businessInfo.description]])]), _createElementVNode(\"div\", _hoisted_6, [_cache[23] || (_cache[23] = _createElementVNode(\"label\", null, \"Logo\", -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[3] || (_cache[3] = (...args) => $setup.onLogoChange && $setup.onLogoChange(...args)),\n    accept: \"image/*\"\n  }, null, 32 /* NEED_HYDRATION */)]), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $setup.saveBusinessInfo && $setup.saveBusinessInfo(...args)),\n    class: \"btn btn-success\",\n    disabled: $setup.loading.businessInfo\n  }, _toDisplayString($setup.loading.businessInfo ? 'Guardando...' : 'Guardar'), 9 /* TEXT, PROPS */, _hoisted_8), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $setup.clearBusinessForm && $setup.clearBusinessForm(...args)),\n    class: \"btn btn-secondary\"\n  }, \" Limpiar \")])])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Sección de información de pago \"), _createElementVNode(\"div\", _hoisted_9, [_cache[29] || (_cache[29] = _createElementVNode(\"h3\", null, \"Forma de Pago\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $setup.togglePaymentForm && $setup.togglePaymentForm(...args)),\n    class: \"btn btn-primary\"\n  }, _toDisplayString($setup.showPaymentForm ? 'Cancelar' : 'Editar información de pago'), 1 /* TEXT */), $setup.showPaymentForm ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [_cache[25] || (_cache[25] = _createElementVNode(\"label\", null, \"Título QR\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => $setup.paymentInfo.qrTitle = $event),\n    type: \"text\",\n    class: \"form-control\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.paymentInfo.qrTitle]])]), _createElementVNode(\"div\", _hoisted_12, [_cache[26] || (_cache[26] = _createElementVNode(\"label\", null, \"Imagen QR\", -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[8] || (_cache[8] = (...args) => $setup.onQRImageChange && $setup.onQRImageChange(...args)),\n    accept: \"image/*\"\n  }, null, 32 /* NEED_HYDRATION */)]), _createElementVNode(\"div\", _hoisted_13, [_cache[27] || (_cache[27] = _createElementVNode(\"label\", null, \"Número Nequi\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => $setup.paymentInfo.nequiNumber = $event),\n    type: \"text\",\n    class: \"form-control\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.paymentInfo.nequiNumber]])]), _createElementVNode(\"div\", _hoisted_14, [_cache[28] || (_cache[28] = _createElementVNode(\"label\", null, \"Imagen Nequi\", -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[10] || (_cache[10] = (...args) => $setup.onNequiImageChange && $setup.onNequiImageChange(...args)),\n    accept: \"image/*\"\n  }, null, 32 /* NEED_HYDRATION */)]), _createElementVNode(\"div\", _hoisted_15, [_createElementVNode(\"button\", {\n    onClick: _cache[11] || (_cache[11] = (...args) => $setup.savePaymentInfo && $setup.savePaymentInfo(...args)),\n    class: \"btn btn-success\",\n    disabled: $setup.loading.paymentInfo\n  }, _toDisplayString($setup.loading.paymentInfo ? 'Guardando...' : 'Guardar'), 9 /* TEXT, PROPS */, _hoisted_16), _createElementVNode(\"button\", {\n    onClick: _cache[12] || (_cache[12] = (...args) => $setup.clearPaymentForm && $setup.clearPaymentForm(...args)),\n    class: \"btn btn-secondary\"\n  }, \"Limpiar\")])])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Sección de gestión de inventario \"), _createElementVNode(\"div\", _hoisted_17, [_cache[31] || (_cache[31] = _createElementVNode(\"h3\", null, \"Gestión de Inventario\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[13] || (_cache[13] = (...args) => $setup.toggleInventorySection && $setup.toggleInventorySection(...args)),\n    class: \"btn btn-primary\"\n  }, _toDisplayString($setup.showInventorySection ? 'Ocultar inventario' : 'Mostrar inventario'), 1 /* TEXT */), $setup.showInventorySection ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[14] || (_cache[14] = $event => $setup.inventoryFilter = $event),\n    class: \"form-control\"\n  }, _cache[30] || (_cache[30] = [_createElementVNode(\"option\", {\n    value: \"all\"\n  }, \"Todos los productos\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"available\"\n  }, \"Disponibles\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"unavailable\"\n  }, \"No disponibles\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, $setup.inventoryFilter]])]), _createElementVNode(\"div\", _hoisted_20, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredInventoryItems, item => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: item.id,\n      class: \"inventory-item\"\n    }, [_createElementVNode(\"div\", _hoisted_21, [_createElementVNode(\"h4\", null, _toDisplayString(item.name), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(item.description), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Precio: $\" + _toDisplayString(item.price), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Disponible: \" + _toDisplayString(item.availableQuantity > 0 ? 'Sí' : 'No'), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Cantidad: \" + _toDisplayString(item.availableQuantity), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"button\", {\n      onClick: $event => $setup.editInventoryItem(item),\n      class: \"btn btn-info\"\n    }, \"Editar\", 8 /* PROPS */, _hoisted_23), _createElementVNode(\"button\", {\n      onClick: $event => $setup.toggleItemAvailability(item),\n      class: _normalizeClass([\"btn\", item.availableQuantity > 0 ? 'btn-warning' : 'btn-success'])\n    }, _toDisplayString(item.availableQuantity > 0 ? 'Marcar no disponible' : 'Marcar disponible'), 11 /* TEXT, CLASS, PROPS */, _hoisted_24)])]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Sección de categorías \"), _createElementVNode(\"div\", _hoisted_25, [_cache[34] || (_cache[34] = _createElementVNode(\"h3\", null, \"Categorías\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[15] || (_cache[15] = (...args) => $setup.toggleCategoriesSection && $setup.toggleCategoriesSection(...args)),\n    class: \"btn btn-primary\"\n  }, _toDisplayString($setup.showCategoriesSection ? 'Ocultar categorías' : 'Mostrar categorías'), 1 /* TEXT */), $setup.showCategoriesSection ? (_openBlock(), _createElementBlock(\"div\", _hoisted_26, [_createElementVNode(\"div\", _hoisted_27, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.categories, category => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: category.id,\n      class: \"category-item\"\n    }, [_createElementVNode(\"div\", _hoisted_28, [_createElementVNode(\"h4\", null, _toDisplayString(category.name), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(category.description), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_29, [_createElementVNode(\"button\", {\n      onClick: $event => $setup.editCategory(category),\n      class: \"btn btn-info\"\n    }, \"Editar\", 8 /* PROPS */, _hoisted_30), _createElementVNode(\"button\", {\n      onClick: $event => $setup.deleteCategory(category),\n      class: \"btn btn-danger\"\n    }, \"Eliminar\", 8 /* PROPS */, _hoisted_31)])]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_32, [_createElementVNode(\"button\", {\n    onClick: _cache[16] || (_cache[16] = $event => $setup.showAddCategoryForm = !$setup.showAddCategoryForm),\n    class: \"btn btn-success\"\n  }, _toDisplayString($setup.showAddCategoryForm ? 'Cancelar' : 'Añadir categoría'), 1 /* TEXT */), $setup.showAddCategoryForm ? (_openBlock(), _createElementBlock(\"div\", _hoisted_33, [_createElementVNode(\"div\", _hoisted_34, [_cache[32] || (_cache[32] = _createElementVNode(\"label\", null, \"Nombre de la categoría\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[17] || (_cache[17] = $event => $setup.newCategory.name = $event),\n    type: \"text\",\n    class: \"form-control\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newCategory.name]])]), _createElementVNode(\"div\", _hoisted_35, [_cache[33] || (_cache[33] = _createElementVNode(\"label\", null, \"Descripción\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[18] || (_cache[18] = $event => $setup.newCategory.description = $event),\n    class: \"form-control\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newCategory.description]])]), _createElementVNode(\"div\", _hoisted_36, [_createElementVNode(\"button\", {\n    onClick: _cache[19] || (_cache[19] = (...args) => $setup.saveNewCategory && $setup.saveNewCategory(...args)),\n    class: \"btn btn-success\"\n  }, \"Guardar\"), _createElementVNode(\"button\", {\n    onClick: _cache[20] || (_cache[20] = (...args) => $setup.clearCategoryForm && $setup.clearCategoryForm(...args)),\n    class: \"btn btn-secondary\"\n  }, \"Limpiar\")])])) : _createCommentVNode(\"v-if\", true)])])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" Notificación \"), $setup.notification.show ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: _normalizeClass(['notification', $setup.notification.type])\n  }, _toDisplayString($setup.notification.message), 3 /* TEXT, CLASS */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","onClick","_cache","args","$setup","toggleBusinessForm","showBusinessForm","_hoisted_3","_hoisted_4","$event","businessInfo","name","type","_hoisted_5","description","_hoisted_6","onChange","onLogoChange","accept","_hoisted_7","saveBusinessInfo","disabled","loading","_hoisted_8","clearBusinessForm","_hoisted_9","togglePaymentForm","showPaymentForm","_hoisted_10","_hoisted_11","paymentInfo","qrTitle","_hoisted_12","onQRImageChange","_hoisted_13","nequiNumber","_hoisted_14","onNequiImageChange","_hoisted_15","savePaymentInfo","_hoisted_16","clearPaymentForm","_hoisted_17","toggleInventorySection","showInventorySection","_hoisted_18","_hoisted_19","inventoryFilter","value","_hoisted_20","_Fragment","_renderList","filteredInventoryItems","item","id","_hoisted_21","_toDisplayString","price","availableQuantity","_hoisted_22","editInventoryItem","_hoisted_23","toggleItemAvailability","_normalizeClass","_hoisted_24","_hoisted_25","toggleCategoriesSection","showCategoriesSection","_hoisted_26","_hoisted_27","categories","category","_hoisted_28","_hoisted_29","editCategory","_hoisted_30","deleteCategory","_hoisted_31","_hoisted_32","showAddCategoryForm","_hoisted_33","_hoisted_34","newCategory","_hoisted_35","_hoisted_36","saveNewCategory","clearCategoryForm","notification","show","message"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\components\\MenuComponent.vue"],"sourcesContent":["<template>\n  <div class=\"menu-component\">\n    <!-- Sección de información del negocio -->\n    <div class=\"business-info-section\">\n      <h3>Información del Negocio</h3>\n      <button @click=\"toggleBusinessForm\" class=\"btn btn-primary\">\n        {{ showBusinessForm ? 'Cancelar' : 'Editar información' }}\n      </button>\n      \n      <div v-if=\"showBusinessForm\" class=\"business-form\">\n        <div class=\"form-group\">\n          <label>Nombre del negocio</label>\n          <input v-model=\"businessInfo.name\" type=\"text\" class=\"form-control\" />\n        </div>\n        <div class=\"form-group\">\n          <label>Descripción</label>\n          <textarea v-model=\"businessInfo.description\" class=\"form-control\"></textarea>\n        </div>\n        <div class=\"form-group\">\n          <label>Logo</label>\n          <input type=\"file\" @change=\"onLogoChange\" accept=\"image/*\" />\n        </div>\n        <div class=\"form-actions\">\n          <button @click=\"saveBusinessInfo\" class=\"btn btn-success\" :disabled=\"loading.businessInfo\">\n            {{ loading.businessInfo ? 'Guardando...' : 'Guardar' }}\n          </button>\n          <button @click=\"clearBusinessForm\" class=\"btn btn-secondary\">\n            Limpiar\n          </button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Sección de información de pago -->\n    <div class=\"payment-info-section\">\n      <h3>Forma de Pago</h3>\n      <button @click=\"togglePaymentForm\" class=\"btn btn-primary\">\n        {{ showPaymentForm ? 'Cancelar' : 'Editar información de pago' }}\n      </button>\n      \n      <div v-if=\"showPaymentForm\" class=\"payment-form\">\n        <div class=\"form-group\">\n          <label>Título QR</label>\n          <input v-model=\"paymentInfo.qrTitle\" type=\"text\" class=\"form-control\" />\n        </div>\n        <div class=\"form-group\">\n          <label>Imagen QR</label>\n          <input type=\"file\" @change=\"onQRImageChange\" accept=\"image/*\" />\n        </div>\n        <div class=\"form-group\">\n          <label>Número Nequi</label>\n          <input v-model=\"paymentInfo.nequiNumber\" type=\"text\" class=\"form-control\" />\n        </div>\n        <div class=\"form-group\">\n          <label>Imagen Nequi</label>\n          <input type=\"file\" @change=\"onNequiImageChange\" accept=\"image/*\" />\n        </div>\n        <div class=\"form-actions\">\n          <button @click=\"savePaymentInfo\" class=\"btn btn-success\" :disabled=\"loading.paymentInfo\">\n            {{ loading.paymentInfo ? 'Guardando...' : 'Guardar' }}\n          </button>\n          <button @click=\"clearPaymentForm\" class=\"btn btn-secondary\">Limpiar</button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Sección de gestión de inventario -->\n    <div class=\"inventory-section\">\n      <h3>Gestión de Inventario</h3>\n      <button @click=\"toggleInventorySection\" class=\"btn btn-primary\">\n        {{ showInventorySection ? 'Ocultar inventario' : 'Mostrar inventario' }}\n      </button>\n      \n      <div v-if=\"showInventorySection\" class=\"inventory-content\">\n        <div class=\"inventory-filters\">\n          <select v-model=\"inventoryFilter\" class=\"form-control\">\n            <option value=\"all\">Todos los productos</option>\n            <option value=\"available\">Disponibles</option>\n            <option value=\"unavailable\">No disponibles</option>\n          </select>\n        </div>\n        \n        <div class=\"inventory-list\">\n          <div v-for=\"item in filteredInventoryItems\" :key=\"item.id\" class=\"inventory-item\">\n            <div class=\"item-info\">\n              <h4>{{ item.name }}</h4>\n              <p>{{ item.description }}</p>\n              <p>Precio: ${{ item.price }}</p>\n              <p>Disponible: {{ item.availableQuantity > 0 ? 'Sí' : 'No' }}</p>\n              <p>Cantidad: {{ item.availableQuantity }}</p>\n            </div>\n            <div class=\"item-actions\">\n              <button @click=\"editInventoryItem(item)\" class=\"btn btn-info\">Editar</button>\n              <button @click=\"toggleItemAvailability(item)\" class=\"btn\" :class=\"item.availableQuantity > 0 ? 'btn-warning' : 'btn-success'\">\n                {{ item.availableQuantity > 0 ? 'Marcar no disponible' : 'Marcar disponible' }}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Sección de categorías -->\n    <div class=\"categories-section\">\n      <h3>Categorías</h3>\n      <button @click=\"toggleCategoriesSection\" class=\"btn btn-primary\">\n        {{ showCategoriesSection ? 'Ocultar categorías' : 'Mostrar categorías' }}\n      </button>\n      \n      <div v-if=\"showCategoriesSection\" class=\"categories-content\">\n        <div class=\"categories-list\">\n          <div v-for=\"category in categories\" :key=\"category.id\" class=\"category-item\">\n            <div class=\"category-info\">\n              <h4>{{ category.name }}</h4>\n              <p>{{ category.description }}</p>\n            </div>\n            <div class=\"category-actions\">\n              <button @click=\"editCategory(category)\" class=\"btn btn-info\">Editar</button>\n              <button @click=\"deleteCategory(category)\" class=\"btn btn-danger\">Eliminar</button>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"add-category\">\n          <button @click=\"showAddCategoryForm = !showAddCategoryForm\" class=\"btn btn-success\">\n            {{ showAddCategoryForm ? 'Cancelar' : 'Añadir categoría' }}\n          </button>\n          \n          <div v-if=\"showAddCategoryForm\" class=\"category-form\">\n            <div class=\"form-group\">\n              <label>Nombre de la categoría</label>\n              <input v-model=\"newCategory.name\" type=\"text\" class=\"form-control\" />\n            </div>\n            <div class=\"form-group\">\n              <label>Descripción</label>\n              <textarea v-model=\"newCategory.description\" class=\"form-control\"></textarea>\n            </div>\n            <div class=\"form-actions\">\n              <button @click=\"saveNewCategory\" class=\"btn btn-success\">Guardar</button>\n              <button @click=\"clearCategoryForm\" class=\"btn btn-secondary\">Limpiar</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Notificación -->\n    <div v-if=\"notification.show\" :class=\"['notification', notification.type]\">\n      {{ notification.message }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, computed } from 'vue';\nimport { \n  getBusinessInfo, \n  saveBusinessInfo, \n  getMenuItems, \n  saveMenuItem, \n  deleteMenuItem, \n  updateItemAvailability \n} from '../services/storageService';\n\nexport default {\n  name: 'MenuComponent',\n  \n  setup() {\n    // Estado para información del negocio\n    const businessInfo = ref({\n      id: 'business_info_1',\n      name: '',\n      description: '',\n      logo: '',\n      paymentInfo: {\n        qrTitle: '',\n        qrImage: '',\n        nequiNumber: '',\n        nequiImage: ''\n      }\n    });\n    \n    const showBusinessForm = ref(false);\n    \n    // Estado para información de pago\n    const paymentInfo = ref({\n      qrTitle: '',\n      qrImage: '',\n      nequiNumber: '',\n      nequiImage: ''\n    });\n    \n    const showPaymentForm = ref(false);\n    \n    // Estado para gestión de inventario\n    const inventoryItems = ref([]);\n    const inventoryFilter = ref('all');\n    const showInventorySection = ref(false);\n    \n    // Propiedad computada para filtrar items de inventario\n    const filteredInventoryItems = computed(() => {\n      if (inventoryFilter.value === 'all') {\n        return inventoryItems.value;\n      } else if (inventoryFilter.value === 'available') {\n        return inventoryItems.value.filter(item => item.availableQuantity > 0);\n      } else {\n        return inventoryItems.value.filter(item => item.availableQuantity <= 0);\n      }\n    });\n    \n    // Estado para categorías\n    const categories = ref([]);\n    const showCategoriesSection = ref(false);\n    const newCategory = ref({\n      name: '',\n      description: ''\n    });\n    const showAddCategoryForm = ref(false);\n    \n    // Estado para notificaciones\n    const notification = ref({\n      show: false,\n      message: '',\n      type: 'success',\n      timeout: null\n    });\n    \n    // Estado para indicadores de carga\n    const loading = ref({\n      businessInfo: false,\n      paymentInfo: false,\n      inventory: false,\n      categories: false\n    });\n    \n    // Cargar datos al montar el componente\n    onMounted(async () => {\n      try {\n        // Cargar información del negocio desde IndexedDB\n        const storedBusinessInfo = await getBusinessInfo();\n        \n        if (storedBusinessInfo) {\n          businessInfo.value = storedBusinessInfo;\n          \n          // Si hay información de pago, cargarla en el estado correspondiente\n          if (storedBusinessInfo.paymentInfo) {\n            paymentInfo.value = {\n              qrTitle: storedBusinessInfo.paymentInfo.qrTitle || '',\n              qrImage: storedBusinessInfo.paymentInfo.qrImage || '',\n              nequiNumber: storedBusinessInfo.paymentInfo.nequiNumber || '',\n              nequiImage: storedBusinessInfo.paymentInfo.nequiImage || ''\n            };\n          }\n        }\n        \n        // Cargar inventario y categorías\n        try {\n          const items = await getMenuItems();\n          if (items && items.length > 0) {\n            // Filtrar solo los elementos que son platos (no categorías)\n            inventoryItems.value = items.filter(item => !item.isCategory);\n          }\n          \n          // Extraer categorías de los items (en este caso, asumimos que las categorías están marcadas con isCategory=true)\n          // o podemos usar una lista predefinida si no hay categorías en la base de datos\n          const cats = items ? items.filter(item => item.isCategory) : [];\n          if (cats && cats.length > 0) {\n            categories.value = cats;\n          } else {\n            // Categorías predefinidas si no hay ninguna en la base de datos\n            categories.value = [\n              { id: 'category_1', name: 'Principal', description: 'Platos principales' },\n              { id: 'category_2', name: 'Entradas', description: 'Entradas y aperitivos' },\n              { id: 'category_3', name: 'Postres', description: 'Postres y dulces' },\n              { id: 'category_4', name: 'Bebidas', description: 'Bebidas y refrescos' }\n            ];\n          }\n        } catch (loadError) {\n          console.error('Error al cargar inventario y categorías:', loadError);\n          // No mostrar error al usuario, solo registrar en consola\n        }\n        \n        console.log('Datos cargados correctamente');\n      } catch (error) {\n        console.error('Error al cargar datos:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al cargar datos. Por favor, intente nuevamente.',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    });\n    \n    // Función para sincronizar con el backend con manejo adecuado de conexiones\n    const syncWithBackend = async (data, type) => {\n      try {\n        const { syncBusinessInfoWithBackend } = await import('../services/menuService');\n        \n        // Añadir metadatos para ayudar al backend a gestionar las conexiones eficientemente\n        const syncData = {\n          ...data,\n          syncType: type,\n          timestamp: new Date().toISOString(),\n          // Añadir un identificador único para cada solicitud\n          requestId: `sync_${type}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`\n        };\n        \n        // Realizar la sincronización\n        const result = await syncBusinessInfoWithBackend(syncData);\n        \n        if (result && result.success) {\n          console.log(`Sincronización de ${type} completada con éxito`);\n          return { success: true };\n        } else {\n          console.error(`Error en sincronización de ${type}:`, result);\n          return { \n            success: false, \n            message: result?.message || `Error al sincronizar ${type}` \n          };\n        }\n      } catch (error) {\n        console.error(`Error en sincronización de ${type}:`, error);\n        return { \n          success: false, \n          message: error.message || `Error al sincronizar ${type}` \n        };\n      }\n    };\n    \n    // Métodos para información del negocio\n    const toggleBusinessForm = () => {\n      showBusinessForm.value = !showBusinessForm.value;\n    };\n    \n    const onLogoChange = (event) => {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          businessInfo.value.logo = e.target.result;\n        };\n        reader.readAsDataURL(file);\n      }\n    };\n    \n    const saveBusinessInfo = async () => {\n      try {\n        if (notification.value.timeout) {\n          clearTimeout(notification.value.timeout);\n        }\n        \n        // Validar campos obligatorios\n        if (!businessInfo.value.name || businessInfo.value.name.trim() === '') {\n          notification.value = {\n            show: true,\n            message: 'El nombre del negocio es obligatorio',\n            type: 'error',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n          return;\n        }\n        \n        // Mostrar indicador de carga\n        loading.value.businessInfo = true;\n        \n        await saveBusinessInfo(businessInfo.value);\n        \n        // Sincronizar con el backend\n        try {\n          const syncResult = await syncWithBackend(businessInfo.value, 'business_info');\n          if (!syncResult.success) {\n            console.error('Error al sincronizar información del negocio:', syncResult.message);\n            notification.value = {\n              show: true,\n              message: 'Error al sincronizar información del negocio',\n              type: 'error',\n              timeout: setTimeout(() => {\n                notification.value.show = false;\n              }, 3000)\n            };\n          }\n        } catch (syncError) {\n          console.error('Error al sincronizar información del negocio:', syncError);\n          // No mostrar error al usuario, solo registrar en consola\n        }\n        \n        // Ocultar indicador de carga\n        loading.value.businessInfo = false;\n        \n        notification.value = {\n          show: true,\n          message: 'Información del negocio guardada con éxito!',\n          type: 'success',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      } catch (error) {\n        // Ocultar indicador de carga en caso de error\n        loading.value.businessInfo = false;\n        \n        console.error('Error al guardar información del negocio:', error);\n        \n        notification.value = {\n          show: true,\n          message: 'Error al guardar información del negocio',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    \n    const clearBusinessForm = () => {\n      businessInfo.value = {\n        id: 'business_info_1',\n        name: '',\n        description: '',\n        logo: '',\n        paymentInfo: {\n          qrTitle: '',\n          qrImage: '',\n          nequiNumber: '',\n          nequiImage: ''\n        }\n      };\n    };\n    \n    // Métodos para información de pago\n    const togglePaymentForm = () => {\n      showPaymentForm.value = !showPaymentForm.value;\n    };\n    \n    const onQRImageChange = (event) => {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          paymentInfo.value.qrImage = e.target.result;\n        };\n        reader.readAsDataURL(file);\n      }\n    };\n    \n    const onNequiImageChange = (event) => {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          paymentInfo.value.nequiImage = e.target.result;\n        };\n        reader.readAsDataURL(file);\n      }\n    };\n    \n    const savePaymentInfo = async () => {\n      try {\n        if (notification.value.timeout) {\n          clearTimeout(notification.value.timeout);\n        }\n        \n        // Mostrar indicador de carga\n        loading.value.paymentInfo = true;\n        \n        if (!businessInfo.value.paymentInfo) {\n          businessInfo.value.paymentInfo = {};\n        }\n        \n        businessInfo.value.paymentInfo.qrTitle = paymentInfo.value.qrTitle;\n        businessInfo.value.paymentInfo.qrImage = paymentInfo.value.qrImage;\n        businessInfo.value.paymentInfo.nequiNumber = paymentInfo.value.nequiNumber;\n        businessInfo.value.paymentInfo.nequiImage = paymentInfo.value.nequiImage;\n        \n        await saveBusinessInfo(businessInfo.value);\n        \n        // Sincronizar con el backend\n        try {\n          const syncResult = await syncWithBackend(businessInfo.value, 'payment_info');\n          if (!syncResult.success) {\n            console.error('Error al sincronizar información de pago:', syncResult.message);\n            notification.value = {\n              show: true,\n              message: 'Error al sincronizar información de pago',\n              type: 'error',\n              timeout: setTimeout(() => {\n                notification.value.show = false;\n              }, 3000)\n            };\n          }\n        } catch (syncError) {\n          console.error('Error al sincronizar información de pago:', syncError);\n          // No mostrar error al usuario, solo registrar en consola\n        }\n        \n        // Ocultar indicador de carga\n        loading.value.paymentInfo = false;\n        \n        notification.value = {\n          show: true,\n          message: 'Información de pago guardada con éxito!',\n          type: 'success',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      } catch (error) {\n        // Ocultar indicador de carga en caso de error\n        loading.value.paymentInfo = false;\n        \n        console.error('Error al guardar información de pago:', error);\n        \n        notification.value = {\n          show: true,\n          message: 'Error al guardar información de pago',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    \n    const clearPaymentForm = () => {\n      paymentInfo.value = {\n        qrTitle: '',\n        qrImage: '',\n        nequiNumber: '',\n        nequiImage: ''\n      };\n    };\n    \n    // Métodos para gestión de inventario\n    const toggleInventorySection = () => {\n      showInventorySection.value = !showInventorySection.value;\n    };\n    \n    const editInventoryItem = async (item) => {\n      try {\n        // Aquí se implementaría un modal o formulario para editar el item\n        console.log('Editando item:', item);\n        \n        // Simulación de edición (en una implementación real, esto sería un formulario)\n        const updatedItem = { ...item, updatedAt: new Date().toISOString() };\n        \n        // Actualizar el item en el array local\n        const index = inventoryItems.value.findIndex(i => i.id === item.id);\n        if (index !== -1) {\n          inventoryItems.value[index] = updatedItem;\n        }\n        \n        // Guardar en IndexedDB\n        await saveMenuItem(updatedItem);\n        \n        // Sincronizar con el backend\n        try {\n          const syncResult = await syncWithBackend(updatedItem, 'inventory_item');\n          if (!syncResult.success) {\n            console.error('Error al sincronizar item de inventario:', syncResult.message);\n            notification.value = {\n              show: true,\n              message: 'Item actualizado localmente, pero hubo un error al sincronizar con el servidor',\n              type: 'warning',\n              timeout: setTimeout(() => {\n                notification.value.show = false;\n              }, 3000)\n            };\n          }\n        } catch (syncError) {\n          console.error('Error al sincronizar item de inventario:', syncError);\n          notification.value = {\n            show: true,\n            message: 'Item actualizado localmente, pero hubo un error al sincronizar con el servidor',\n            type: 'warning',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        }\n        \n        notification.value = {\n          show: true,\n          message: 'Item actualizado con éxito!',\n          type: 'success',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      } catch (error) {\n        console.error('Error al editar item:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al actualizar el item',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    \n    const toggleItemAvailability = async (item) => {\n      try {\n        // Cambiar la disponibilidad del item\n        const updatedItem = { \n          ...item, \n          availableQuantity: item.availableQuantity > 0 ? 0 : 10,\n          updatedAt: new Date().toISOString()\n        };\n        \n        // Actualizar el item en el array local\n        const index = inventoryItems.value.findIndex(i => i.id === item.id);\n        if (index !== -1) {\n          inventoryItems.value[index] = updatedItem;\n        }\n        \n        // Guardar en IndexedDB\n        await saveMenuItem(updatedItem);\n        \n        // Sincronizar con el backend\n        try {\n          const syncResult = await syncWithBackend(updatedItem, 'inventory_item');\n          if (!syncResult.success) {\n            console.error('Error al sincronizar disponibilidad del item:', syncResult.message);\n            notification.value = {\n              show: true,\n              message: 'Disponibilidad actualizada localmente, pero hubo un error al sincronizar con el servidor',\n              type: 'warning',\n              timeout: setTimeout(() => {\n                notification.value.show = false;\n              }, 3000)\n            };\n          }\n        } catch (syncError) {\n          console.error('Error al sincronizar disponibilidad del item:', syncError);\n          notification.value = {\n            show: true,\n            message: 'Disponibilidad actualizada localmente, pero hubo un error al sincronizar con el servidor',\n            type: 'warning',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        }\n        \n        notification.value = {\n          show: true,\n          message: `Item ${updatedItem.availableQuantity > 0 ? 'disponible' : 'no disponible'} actualizado con éxito!`,\n          type: 'success',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      } catch (error) {\n        console.error('Error al cambiar disponibilidad:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al actualizar la disponibilidad',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    \n    const saveInventoryItem = async (item) => {\n      try {\n        if (notification.value.timeout) {\n          clearTimeout(notification.value.timeout);\n        }\n        \n        // Mostrar indicador de carga\n        loading.value.inventory = true;\n        \n        // Validar campos obligatorios\n        if (!item.name || item.name.trim() === '') {\n          loading.value.inventory = false;\n          notification.value = {\n            show: true,\n            message: 'El nombre del item es obligatorio',\n            type: 'error',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n          return;\n        }\n        \n        if (!item.price || isNaN(item.price) || item.price <= 0) {\n          loading.value.inventory = false;\n          notification.value = {\n            show: true,\n            message: 'El precio debe ser un número mayor que cero',\n            type: 'error',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n          return;\n        }\n        \n        // Actualizar la lista local\n        const index = inventoryItems.value.findIndex(i => i.id === item.id);\n        if (index !== -1) {\n          inventoryItems.value[index] = { ...item };\n        } else {\n          inventoryItems.value.push({ ...item });\n        }\n        \n        // Guardar en IndexedDB\n        await saveMenuItem(item);\n        \n        // Sincronizar con el backend\n        try {\n          const syncResult = await syncWithBackend(item, 'inventory_item');\n          if (!syncResult.success) {\n            console.error('Error al sincronizar item de inventario:', syncResult.message);\n            loading.value.inventory = false;\n            notification.value = {\n              show: true,\n              message: 'Item guardado localmente, pero hubo un error al sincronizar con el servidor',\n              type: 'warning',\n              timeout: setTimeout(() => {\n                notification.value.show = false;\n              }, 3000)\n            };\n            return;\n          }\n        } catch (syncError) {\n          console.error('Error al sincronizar item de inventario:', syncError);\n          loading.value.inventory = false;\n          notification.value = {\n            show: true,\n            message: 'Item guardado localmente, pero hubo un error al sincronizar con el servidor',\n            type: 'warning',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n          return;\n        }\n        \n        // Ocultar indicador de carga\n        loading.value.inventory = false;\n        \n        notification.value = {\n          show: true,\n          message: 'Item guardado con éxito!',\n          type: 'success',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n        \n        // Limpiar el formulario y cerrar el modal\n        clearInventoryForm();\n        showInventoryForm.value = false;\n      } catch (error) {\n        // Ocultar indicador de carga en caso de error\n        loading.value.inventory = false;\n        \n        console.error('Error al guardar item:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al guardar el item',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    \n    // Métodos para categorías\n    const toggleCategoriesSection = () => {\n      showCategoriesSection.value = !showCategoriesSection.value;\n    };\n    \n    const editCategory = (category) => {\n      console.log('Editar categoría:', category);\n    };\n    \n    const deleteCategory = async (category) => {\n      try {\n        if (notification.value.timeout) {\n          clearTimeout(notification.value.timeout);\n        }\n        \n        if (confirm(`¿Está seguro de eliminar la categoría ${category.name}?`)) {\n          // Eliminar de la lista local\n          categories.value = categories.value.filter(c => c.id !== category.id);\n          \n          // Eliminar de IndexedDB\n          await deleteMenuItem(category.id);\n          \n          // Sincronizar con el backend\n          try {\n            const syncResult = await syncWithBackend({ categoryId: category.id }, 'category_delete');\n            if (!syncResult.success) {\n              console.error('Error al sincronizar eliminación de categoría:', syncResult.message);\n              notification.value = {\n                show: true,\n                message: 'Categoría eliminada localmente, pero hubo un error al sincronizar con el servidor',\n                type: 'warning',\n                timeout: setTimeout(() => {\n                  notification.value.show = false;\n                }, 3000)\n              };\n            } else {\n              notification.value = {\n                show: true,\n                message: 'Categoría eliminada con éxito!',\n                type: 'success',\n                timeout: setTimeout(() => {\n                  notification.value.show = false;\n                }, 3000)\n              };\n            }\n          } catch (syncError) {\n            console.error('Error al sincronizar eliminación de categoría:', syncError);\n            notification.value = {\n              show: true,\n              message: 'Categoría eliminada localmente, pero hubo un error al sincronizar con el servidor',\n              type: 'warning',\n              timeout: setTimeout(() => {\n                notification.value.show = false;\n              }, 3000)\n            };\n          }\n        }\n      } catch (error) {\n        console.error('Error al eliminar categoría:', error);\n        notification.value = {\n          show: true,\n          message: 'Error al eliminar la categoría',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    \n    const saveNewCategory = async () => {\n      try {\n        if (notification.value.timeout) {\n          clearTimeout(notification.value.timeout);\n        }\n        \n        // Validar que la categoría tenga un nombre\n        if (!newCategory.value.name.trim()) {\n          notification.value = {\n            show: true,\n            message: 'El nombre de la categoría es obligatorio',\n            type: 'error',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n          return;\n        }\n        \n        // Crear un ID único para la nueva categoría\n        const newCategoryWithId = {\n          ...newCategory.value,\n          id: 'category_' + Date.now(),\n          createdAt: new Date().toISOString()\n        };\n        \n        // Añadir la categoría al array local\n        categories.value.push(newCategoryWithId);\n        \n        // Guardar en IndexedDB\n        await saveMenuItem({\n          ...newCategoryWithId,\n          isCategory: true\n        });\n        \n        // Sincronizar con el backend\n        try {\n          const syncResult = await syncWithBackend(newCategoryWithId, 'category_update');\n          if (!syncResult.success) {\n            console.error('Error al sincronizar categoría:', syncResult.message);\n            notification.value = {\n              show: true,\n              message: 'Categoría guardada localmente, pero hubo un error al sincronizar con el servidor',\n              type: 'warning',\n              timeout: setTimeout(() => {\n                notification.value.show = false;\n              }, 3000)\n            };\n          }\n        } catch (syncError) {\n          console.error('Error al sincronizar categoría:', syncError);\n          notification.value = {\n            show: true,\n            message: 'Categoría guardada localmente, pero hubo un error al sincronizar con el servidor',\n            type: 'warning',\n            timeout: setTimeout(() => {\n              notification.value.show = false;\n            }, 3000)\n          };\n        }\n        \n        // Limpiar el formulario\n        clearCategoryForm();\n        \n        // Mostrar notificación de éxito\n        notification.value = {\n          show: true,\n          message: 'Categoría guardada con éxito!',\n          type: 'success',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      } catch (error) {\n        console.error('Error al guardar categoría:', error);\n        \n        notification.value = {\n          show: true,\n          message: 'Error al guardar categoría',\n          type: 'error',\n          timeout: setTimeout(() => {\n            notification.value.show = false;\n          }, 3000)\n        };\n      }\n    };\n    \n    const clearCategoryForm = () => {\n      newCategory.value = {\n        name: '',\n        description: ''\n      };\n    };\n    \n    return {\n      businessInfo,\n      showBusinessForm,\n      toggleBusinessForm,\n      onLogoChange,\n      saveBusinessInfo,\n      clearBusinessForm,\n      paymentInfo,\n      showPaymentForm,\n      togglePaymentForm,\n      onQRImageChange,\n      onNequiImageChange,\n      savePaymentInfo,\n      clearPaymentForm,\n      inventoryItems,\n      inventoryFilter,\n      showInventorySection,\n      toggleInventorySection,\n      editInventoryItem,\n      toggleItemAvailability,\n      filteredInventoryItems,\n      categories,\n      showCategoriesSection,\n      toggleCategoriesSection,\n      editCategory,\n      deleteCategory,\n      newCategory,\n      showAddCategoryForm,\n      saveNewCategory,\n      clearCategoryForm,\n      notification,\n      loading\n    };\n  }\n};\n</script>\n\n<style scoped>\n.menu-component {\n  padding: 20px;\n}\n\n.business-info-section,\n.payment-info-section,\n.inventory-section,\n.categories-section {\n  margin-bottom: 30px;\n  padding: 20px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\n.form-control {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.form-actions {\n  margin-top: 20px;\n}\n\n.btn {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-right: 10px;\n}\n\n.btn-primary {\n  background-color: #007bff;\n  color: white;\n}\n\n.btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.btn-secondary {\n  background-color: #6c757d;\n  color: white;\n}\n\n.notification {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  padding: 15px;\n  border-radius: 4px;\n  color: white;\n  z-index: 1000;\n}\n\n.success {\n  background-color: #28a745;\n}\n\n.error {\n  background-color: #dc3545;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}