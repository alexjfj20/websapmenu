{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { alert } from './dialogService';\n\n// Lista de usuarios predefinidos para pruebas\nconst DEFAULT_USERS = [{\n  id: 1,\n  email: 'admin@example.com',\n  password: 'password',\n  nombre: 'Administrador',\n  roles: ['Superadministrador'],\n  estado: 'activo'\n}, {\n  id: 2,\n  email: 'test@test.com',\n  password: '123456',\n  nombre: 'Usuario de Prueba',\n  roles: ['Empleado'],\n  estado: 'activo'\n}, {\n  id: 3,\n  email: 'admin',\n  password: 'admin',\n  nombre: 'SuperAdmin',\n  roles: ['Superadministrador', 'Empleado'],\n  estado: 'activo'\n}];\n\n// Usuario actualmente autenticado\nlet currentUser = null;\n\n/**\r\n * Obtiene los usuarios almacenados en IndexedDB\r\n * @returns {Promise<Array>} Lista de usuarios o array vacío si hay error\r\n */\nasync function getStoredUsers() {\n  try {\n    const DB_NAME = 'websapDatabase';\n    const DB_VERSION = 3;\n    const USERS_STORE = 'users';\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\n        // Si hay error, devolver los usuarios predefinidos\n        resolve(DEFAULT_USERS);\n      };\n      request.onsuccess = event => {\n        const db = event.target.result;\n\n        // Verificar que existe el almacén de usuarios\n        if (!db.objectStoreNames.contains(USERS_STORE)) {\n          console.warn(`El almacén ${USERS_STORE} no existe en la base de datos`);\n          resolve(DEFAULT_USERS);\n          return;\n        }\n        const transaction = db.transaction([USERS_STORE], 'readonly');\n        const store = transaction.objectStore(USERS_STORE);\n        const request = store.getAll();\n        request.onsuccess = () => {\n          const storedUsers = request.result || [];\n          const allUsers = [...storedUsers, ...DEFAULT_USERS];\n\n          // Eliminar duplicados basados en email\n          const uniqueUsers = [];\n          const emails = new Set();\n          for (const user of allUsers) {\n            if (user.email && !emails.has(user.email.toLowerCase())) {\n              emails.add(user.email.toLowerCase());\n              uniqueUsers.push(user);\n            }\n          }\n          resolve(uniqueUsers);\n        };\n        request.onerror = event => {\n          console.error('Error al obtener usuarios:', event.target.error);\n          // Si hay error, devolver los usuarios predefinidos\n          resolve(DEFAULT_USERS);\n        };\n      };\n    });\n  } catch (error) {\n    console.error('Error al acceder a la base de datos:', error);\n    return DEFAULT_USERS;\n  }\n}\n\n/**\r\n * Intenta iniciar sesión con las credenciales proporcionadas\r\n * @param {string} email - Correo electrónico o nombre de usuario\r\n * @param {string} password - Contraseña\r\n * @returns {Promise<Object>} - Promesa que se resuelve con el usuario o se rechaza con un error\r\n */\nexport async function login(email, password) {\n  try {\n    // Simular una llamada a la API esperando 500ms\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Obtener todos los usuarios (predefinidos y creados)\n    const allUsers = await getStoredUsers();\n    console.log(\"Intentando iniciar sesión como:\", email);\n    console.log(\"Usuarios disponibles:\", allUsers);\n\n    // Buscar usuario por email o nombre de usuario\n    const user = allUsers.find(u => {\n      const emailMatches = u.email && u.email.toLowerCase() === email.toLowerCase();\n      const passwordMatches = u.password === password;\n      // También comprobar si el usuario está activo\n      const isActive = u.estado !== 'inactivo';\n      return emailMatches && passwordMatches && isActive;\n    });\n    if (user) {\n      console.log(\"Usuario encontrado:\", user);\n\n      // Verificar estado del usuario\n      if (user.estado === 'inactivo') {\n        throw new Error('Esta cuenta ha sido desactivada. Contacte al administrador.');\n      }\n\n      // Hacer una copia del usuario sin la contraseña\n      const {\n        password,\n        ...userWithoutPassword\n      } = user;\n      currentUser = userWithoutPassword;\n\n      // Guardar estado de autenticación en localStorage\n      localStorage.setItem('isLoggedIn', 'true');\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      return userWithoutPassword;\n    } else {\n      throw new Error('Credenciales incorrectas');\n    }\n  } catch (error) {\n    console.error(\"Error en login:\", error);\n    throw error;\n  }\n}\n\n/**\r\n * Cierra la sesión del usuario actual\r\n */\nexport function logout() {\n  currentUser = null;\n  localStorage.removeItem('isLoggedIn');\n  localStorage.removeItem('currentUser');\n}\n\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\nexport function isAuthenticated() {\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser) {\n        currentUser = storedUser;\n      }\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n      return false;\n    }\n  }\n  return !!currentUser;\n}\n\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\nexport function getCurrentUser() {\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser) {\n        currentUser = storedUser;\n      }\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n      return null;\n    }\n  }\n  return currentUser;\n}\n\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\nexport function hasRole(roleName) {\n  const user = getCurrentUser();\n  if (!user || !user.roles) {\n    return false;\n  }\n\n  // Si roles es un array, verificar si contiene el rol\n  if (Array.isArray(user.roles)) {\n    return user.roles.includes(roleName);\n  }\n\n  // Si roles es un string, verificar si es igual al rol buscado\n  if (typeof user.roles === 'string') {\n    return user.roles === roleName;\n  }\n  return false;\n}\nexport default {\n  login,\n  logout,\n  isAuthenticated,\n  hasRole,\n  getCurrentUser\n};","map":{"version":3,"names":["alert","DEFAULT_USERS","id","email","password","nombre","roles","estado","currentUser","getStoredUsers","DB_NAME","DB_VERSION","USERS_STORE","Promise","resolve","reject","request","indexedDB","open","onerror","event","console","error","target","onsuccess","db","result","objectStoreNames","contains","warn","transaction","store","objectStore","getAll","storedUsers","allUsers","uniqueUsers","emails","Set","user","has","toLowerCase","add","push","login","setTimeout","log","find","u","emailMatches","passwordMatches","isActive","Error","userWithoutPassword","localStorage","setItem","JSON","stringify","logout","removeItem","isAuthenticated","getItem","storedUser","parse","e","getCurrentUser","hasRole","roleName","Array","isArray","includes"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/authService.js"],"sourcesContent":["import { alert } from './dialogService';\r\n\r\n// Lista de usuarios predefinidos para pruebas\r\nconst DEFAULT_USERS = [\r\n  {\r\n    id: 1,\r\n    email: 'admin@example.com',\r\n    password: 'password',\r\n    nombre: 'Administrador',\r\n    roles: ['Superadministrador'],\r\n    estado: 'activo'\r\n  },\r\n  {\r\n    id: 2,\r\n    email: 'test@test.com',\r\n    password: '123456',\r\n    nombre: 'Usuario de Prueba',\r\n    roles: ['Empleado'],\r\n    estado: 'activo'\r\n  },\r\n  {\r\n    id: 3,\r\n    email: 'admin',\r\n    password: 'admin',\r\n    nombre: 'SuperAdmin',\r\n    roles: ['Superadministrador', 'Empleado'],\r\n    estado: 'activo'\r\n  }\r\n];\r\n\r\n// Usuario actualmente autenticado\r\nlet currentUser = null;\r\n\r\n/**\r\n * Obtiene los usuarios almacenados en IndexedDB\r\n * @returns {Promise<Array>} Lista de usuarios o array vacío si hay error\r\n */\r\nasync function getStoredUsers() {\r\n  try {\r\n    const DB_NAME = 'websapDatabase';\r\n    const DB_VERSION = 3;\r\n    const USERS_STORE = 'users';\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n      \r\n      request.onerror = (event) => {\r\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\r\n        // Si hay error, devolver los usuarios predefinidos\r\n        resolve(DEFAULT_USERS);\r\n      };\r\n      \r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        \r\n        // Verificar que existe el almacén de usuarios\r\n        if (!db.objectStoreNames.contains(USERS_STORE)) {\r\n          console.warn(`El almacén ${USERS_STORE} no existe en la base de datos`);\r\n          resolve(DEFAULT_USERS);\r\n          return;\r\n        }\r\n        \r\n        const transaction = db.transaction([USERS_STORE], 'readonly');\r\n        const store = transaction.objectStore(USERS_STORE);\r\n        const request = store.getAll();\r\n        \r\n        request.onsuccess = () => {\r\n          const storedUsers = request.result || [];\r\n          const allUsers = [...storedUsers, ...DEFAULT_USERS];\r\n          \r\n          // Eliminar duplicados basados en email\r\n          const uniqueUsers = [];\r\n          const emails = new Set();\r\n          \r\n          for (const user of allUsers) {\r\n            if (user.email && !emails.has(user.email.toLowerCase())) {\r\n              emails.add(user.email.toLowerCase());\r\n              uniqueUsers.push(user);\r\n            }\r\n          }\r\n          \r\n          resolve(uniqueUsers);\r\n        };\r\n        \r\n        request.onerror = (event) => {\r\n          console.error('Error al obtener usuarios:', event.target.error);\r\n          // Si hay error, devolver los usuarios predefinidos\r\n          resolve(DEFAULT_USERS);\r\n        };\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al acceder a la base de datos:', error);\r\n    return DEFAULT_USERS;\r\n  }\r\n}\r\n\r\n/**\r\n * Intenta iniciar sesión con las credenciales proporcionadas\r\n * @param {string} email - Correo electrónico o nombre de usuario\r\n * @param {string} password - Contraseña\r\n * @returns {Promise<Object>} - Promesa que se resuelve con el usuario o se rechaza con un error\r\n */\r\nexport async function login(email, password) {\r\n  try {\r\n    // Simular una llamada a la API esperando 500ms\r\n    await new Promise(resolve => setTimeout(resolve, 500));\r\n    \r\n    // Obtener todos los usuarios (predefinidos y creados)\r\n    const allUsers = await getStoredUsers();\r\n    \r\n    console.log(\"Intentando iniciar sesión como:\", email);\r\n    console.log(\"Usuarios disponibles:\", allUsers);\r\n    \r\n    // Buscar usuario por email o nombre de usuario\r\n    const user = allUsers.find(u => {\r\n      const emailMatches = u.email && u.email.toLowerCase() === email.toLowerCase();\r\n      const passwordMatches = u.password === password;\r\n      // También comprobar si el usuario está activo\r\n      const isActive = u.estado !== 'inactivo';\r\n      \r\n      return (emailMatches && passwordMatches && isActive);\r\n    });\r\n    \r\n    if (user) {\r\n      console.log(\"Usuario encontrado:\", user);\r\n      \r\n      // Verificar estado del usuario\r\n      if (user.estado === 'inactivo') {\r\n        throw new Error('Esta cuenta ha sido desactivada. Contacte al administrador.');\r\n      }\r\n      \r\n      // Hacer una copia del usuario sin la contraseña\r\n      const { password, ...userWithoutPassword } = user;\r\n      currentUser = userWithoutPassword;\r\n      \r\n      // Guardar estado de autenticación en localStorage\r\n      localStorage.setItem('isLoggedIn', 'true');\r\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\r\n      \r\n      return userWithoutPassword;\r\n    } else {\r\n      throw new Error('Credenciales incorrectas');\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error en login:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Cierra la sesión del usuario actual\r\n */\r\nexport function logout() {\r\n  currentUser = null;\r\n  localStorage.removeItem('isLoggedIn');\r\n  localStorage.removeItem('currentUser');\r\n}\r\n\r\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\r\nexport function isAuthenticated() {\r\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\r\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser) {\r\n        currentUser = storedUser;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  return !!currentUser;\r\n}\r\n\r\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\r\nexport function getCurrentUser() {\r\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\r\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser) {\r\n        currentUser = storedUser;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  return currentUser;\r\n}\r\n\r\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\r\nexport function hasRole(roleName) {\r\n  const user = getCurrentUser();\r\n  \r\n  if (!user || !user.roles) {\r\n    return false;\r\n  }\r\n  \r\n  // Si roles es un array, verificar si contiene el rol\r\n  if (Array.isArray(user.roles)) {\r\n    return user.roles.includes(roleName);\r\n  }\r\n  \r\n  // Si roles es un string, verificar si es igual al rol buscado\r\n  if (typeof user.roles === 'string') {\r\n    return user.roles === roleName;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}