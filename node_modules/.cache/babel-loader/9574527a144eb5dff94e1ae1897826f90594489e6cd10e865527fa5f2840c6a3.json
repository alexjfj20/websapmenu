{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/**\r\n * Servicio para gestionar las operaciones administrativas\r\n */\nimport * as storageService from './storageService';\nimport * as apiService from './apiService';\n\n// Lista local de usuarios para mantener estado entre llamadas\nlet localUsers = [];\n\n/**\r\n * Obtiene estadísticas para el dashboard de administrador\r\n * @returns {Promise<Object>} Estadísticas del sistema\r\n */\nexport async function getDashboardStats() {\n  try {\n    // En desarrollo, devolver datos simulados pero con lógica para actualizarlos\n    if (process.env.NODE_ENV === 'development') {\n      // Obtener usuarios actuales para tener un conteo real\n      const usersResponse = await getUsers();\n      const userCount = usersResponse && usersResponse.success && Array.isArray(usersResponse.data) ? usersResponse.data.length : 45; // Valor por defecto si no podemos obtener el conteo real\n\n      // Calcular usuarios activos/inactivos\n      const activeUsers = usersResponse && usersResponse.success && Array.isArray(usersResponse.data) ? usersResponse.data.filter(user => user.estado === 'activo').length : Math.floor(userCount * 0.75); // Aproximadamente 75% activos por defecto\n\n      const inactiveUsers = userCount - activeUsers;\n      console.log(`Estadísticas actualizadas: ${userCount} usuarios totales (${activeUsers} activos, ${inactiveUsers} inactivos)`);\n      return {\n        success: true,\n        data: {\n          totalUsers: userCount,\n          activeUsers: activeUsers,\n          inactiveUsers: inactiveUsers,\n          activePayments: 28,\n          pendingPayments: 8,\n          overduePayments: 3,\n          totalIncome: 15750000,\n          status: 'Normal',\n          lastBackup: new Date().toISOString(),\n          recentActivity: [\n          // Añadir actividad reciente de creación de usuario si se ha creado uno recientemente\n          {\n            tipo: 'user_created',\n            usuario_nombre: 'Admin',\n            accion: 'creó un nuevo usuario',\n            fecha: new Date().toISOString()\n          }, {\n            tipo: 'login',\n            usuario_nombre: 'Laura Méndez',\n            accion: 'inició sesión en el sistema',\n            fecha: new Date().toISOString()\n          }, {\n            tipo: 'payment',\n            usuario_nombre: 'Carlos Gómez',\n            accion: 'realizó un pago de $350.000',\n            fecha: new Date(Date.now() - 3600000).toISOString() // 1 hora atrás\n          }, {\n            tipo: 'backup',\n            usuario_nombre: 'Sistema',\n            accion: 'realizó un respaldo automático',\n            fecha: new Date(Date.now() - 172800000).toISOString() // 2 días atrás\n          }]\n        }\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    return await apiService.get('/admin/stats');\n  } catch (error) {\n    console.error('Error al obtener estadísticas del dashboard:', error);\n    // Incluso en caso de error, devolver alguna información\n    return {\n      success: false,\n      error: error.message,\n      data: {\n        totalUsers: localUsers.length || 1,\n        activeUsers: localUsers.length || 1,\n        inactiveUsers: 0,\n        menuItemsCount: 0,\n        totalSales: 0,\n        status: 'Error',\n        recentActivity: []\n      }\n    };\n  }\n}\n\n/**\r\n * Obtiene los elementos del menú\r\n * @returns {Promise<Object>} Lista de elementos del menú\r\n */\nexport async function getMenuItems() {\n  try {\n    // En desarrollo, simular llamada a la API\n    if (process.env.NODE_ENV === 'development') {\n      // Obtener datos del servicio de almacenamiento\n      const menuItems = await storageService.getMenuItems();\n      return {\n        success: true,\n        data: menuItems\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    return await apiService.get('/admin/menu-items');\n  } catch (error) {\n    console.error('Error al obtener elementos del menú:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Obtiene los elementos vendidos para el inventario\r\n * @returns {Promise<Object>} Lista de elementos vendidos\r\n */\nexport async function getSoldItems() {\n  try {\n    // En desarrollo, simular llamada a la API\n    if (process.env.NODE_ENV === 'development') {\n      // Obtener datos del servicio de almacenamiento\n      const soldItems = await storageService.getSoldItems();\n      return {\n        success: true,\n        data: soldItems\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    return await apiService.get('/admin/sold-items');\n  } catch (error) {\n    console.error('Error al obtener elementos vendidos:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Obtiene los usuarios del sistema\r\n * @param {Object} options Opciones de filtrado y paginación\r\n * @returns {Promise<Array>} Lista de usuarios\r\n */\nexport async function getUsers(options = {}) {\n  try {\n    // En desarrollo, devolver datos simulados\n    if (process.env.NODE_ENV === 'development') {\n      // Si la lista local está vacía, inicializarla con usuarios default\n      if (localUsers.length === 0) {\n        localUsers = [{\n          id: 1,\n          nombre: 'Admin Principal',\n          email: 'admin@ejemplo.com',\n          telefono: '3001234567',\n          roles: ['Superadministrador'],\n          estado: 'activo',\n          fecha_creacion: '2023-05-15T08:30:00Z'\n        }, {\n          id: 2,\n          nombre: 'Juan Pérez',\n          email: 'juan@ejemplo.com',\n          telefono: '3009876543',\n          roles: ['Administrador'],\n          estado: 'activo',\n          fecha_creacion: '2023-06-20T14:45:00Z'\n        }, {\n          id: 3,\n          nombre: 'María López',\n          email: 'maria@ejemplo.com',\n          telefono: '3002223344',\n          roles: ['Empleado'],\n          estado: 'activo',\n          fecha_creacion: '2023-07-05T11:15:00Z'\n        }, {\n          id: 4,\n          nombre: 'Carlos Rodríguez',\n          email: 'carlos@ejemplo.com',\n          telefono: '3005556677',\n          roles: ['Empleado'],\n          estado: 'inactivo',\n          fecha_creacion: '2023-08-10T09:20:00Z'\n        }];\n      }\n      console.log(\"getUsers - Total usuarios en memoria:\", localUsers.length);\n\n      // Aplicar filtros\n      let filteredUsers = [...localUsers];\n      if (options.searchTerm) {\n        const term = options.searchTerm.toLowerCase();\n        filteredUsers = filteredUsers.filter(user => user.nombre.toLowerCase().includes(term) || user.email.toLowerCase().includes(term) || user.telefono && user.telefono.toLowerCase().includes(term));\n      }\n      if (options.role) {\n        filteredUsers = filteredUsers.filter(user => user.roles && user.roles.includes(options.role));\n      }\n      if (options.status) {\n        filteredUsers = filteredUsers.filter(user => user.estado === options.status);\n      }\n      return {\n        success: true,\n        data: filteredUsers,\n        total: filteredUsers.length\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    let queryParams = '';\n    if (options.searchTerm) queryParams += `search=${encodeURIComponent(options.searchTerm)}&`;\n    if (options.role) queryParams += `role=${encodeURIComponent(options.role)}&`;\n    if (options.status) queryParams += `status=${encodeURIComponent(options.status)}&`;\n    if (options.page) queryParams += `page=${options.page}&`;\n    if (options.limit) queryParams += `limit=${options.limit}&`;\n    if (queryParams.endsWith('&')) {\n      queryParams = queryParams.slice(0, -1);\n    }\n    return await apiService.get(`/admin/users${queryParams ? '?' + queryParams : ''}`);\n  } catch (error) {\n    console.error('Error al obtener usuarios:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Obtiene los registros del sistema\r\n * @returns {Promise<Object>} Lista de logs\r\n */\nexport async function getLogs() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        data: [{\n          id: 1,\n          timestamp: new Date().toISOString(),\n          type: 'info',\n          user: 'Admin',\n          message: 'Inicio de sesión exitoso',\n          details: {\n            ip: '192.168.1.1',\n            userAgent: 'Chrome/96.0'\n          }\n        }, {\n          id: 2,\n          timestamp: new Date(Date.now() - 3600000).toISOString(),\n          // 1 hora atrás\n          type: 'warning',\n          user: 'Sistema',\n          message: 'Intento de acceso fallido',\n          details: {\n            ip: '203.0.113.1',\n            userAgent: 'Edge/96.0',\n            attempts: 3\n          }\n        }, {\n          id: 3,\n          timestamp: new Date(Date.now() - 7200000).toISOString(),\n          // 2 horas atrás\n          type: 'error',\n          user: 'Sistema',\n          message: 'Error en la creación de backup',\n          details: {\n            error: 'Espacio insuficiente',\n            code: 'E0023'\n          }\n        }, {\n          id: 4,\n          timestamp: new Date(Date.now() - 86400000).toISOString(),\n          // 1 día atrás\n          type: 'success',\n          user: 'Juan Pérez',\n          message: 'Nuevo usuario creado',\n          details: {\n            newUser: 'carlos@ejemplo.com'\n          }\n        }]\n      });\n    }, 1000);\n  });\n}\n\n/**\r\n * Descarga los logs en formato CSV\r\n * @returns {Promise<Object>} Datos CSV de los logs\r\n */\nexport async function downloadLogsCSV() {\n  // Simulamos la generación de un CSV\n  return new Promise(resolve => {\n    setTimeout(() => {\n      // Encabezados y datos de prueba en formato CSV\n      const csvData = 'Fecha,Tipo,Usuario,Mensaje\\n' + '2023-10-15 10:30:00,info,Admin,Inicio de sesión exitoso\\n' + '2023-10-15 09:30:00,warning,Sistema,Intento de acceso fallido\\n' + '2023-10-15 08:30:00,error,Sistema,Error en la creación de backup\\n' + '2023-10-14 15:45:00,success,Juan Pérez,Nuevo usuario creado';\n      resolve({\n        success: true,\n        data: csvData\n      });\n    }, 1000);\n  });\n}\n\n/**\r\n * Obtiene los roles disponibles en el sistema\r\n * @returns {Promise<Array>} Lista de roles\r\n */\nexport async function getRoles() {\n  try {\n    // En desarrollo, devolver datos simulados\n    if (process.env.NODE_ENV === 'development') {\n      return {\n        success: true,\n        data: [{\n          id: 1,\n          nombre: 'Superadministrador'\n        }, {\n          id: 2,\n          nombre: 'Administrador'\n        }, {\n          id: 3,\n          nombre: 'Empleado'\n        }]\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    return await apiService.get('/admin/roles');\n  } catch (error) {\n    console.error('Error al obtener roles:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Obtiene todos los roles disponibles en el sistema\r\n * @returns {Promise<Object>} Lista de roles\r\n */\nexport async function getAllRoles() {\n  try {\n    // En desarrollo, devolver roles fijos\n    if (process.env.NODE_ENV === 'development') {\n      // Simulando tiempo de respuesta del servidor\n      await new Promise(resolve => setTimeout(resolve, 300));\n      const roles = [{\n        id: 1,\n        nombre: 'Empleado',\n        descripcion: 'Acceso básico al sistema'\n      }, {\n        id: 2,\n        nombre: 'Administrador',\n        descripcion: 'Acceso a configuración y gestión de usuarios'\n      }, {\n        id: 3,\n        nombre: 'Superadministrador',\n        descripcion: 'Acceso total al sistema'\n      }];\n      return {\n        success: true,\n        data: roles\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    return await apiService.get('/admin/roles');\n  } catch (error) {\n    console.error('Error al obtener roles:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Crea un nuevo usuario\r\n * @param {Object} userData Datos del usuario a crear\r\n * @returns {Promise<Object>} Usuario creado\r\n */\nexport async function createUser(userData) {\n  try {\n    console.log(\"adminService.createUser - Iniciando creación con datos:\", userData);\n\n    // En desarrollo, simular la creación\n    if (process.env.NODE_ENV === 'development') {\n      // Simulando tiempo de respuesta del servidor\n      await new Promise(resolve => setTimeout(resolve, 500));\n      // Comprobar si ya existe un usuario con el mismo email\n      const existingUser = localUsers.find(u => u.email && u.email.toLowerCase() === userData.email.toLowerCase());\n      if (existingUser) {\n        return {\n          success: false,\n          error: 'Ya existe un usuario con este correo electrónico.',\n          message: 'El correo electrónico ya está registrado'\n        };\n      }\n\n      // Crear un nuevo usuario con formato completo\n      const newUser = {\n        id: localUsers.length > 0 ? Math.max(...localUsers.map(u => u.id)) + 1 : 1,\n        nombre: userData.nombre || 'Usuario sin nombre',\n        email: userData.email || `usuario${Date.now()}@ejemplo.com`,\n        telefono: userData.telefono || '',\n        roles: Array.isArray(userData.roles) ? [...userData.roles] : ['Empleado'],\n        estado: userData.estado || 'activo',\n        fecha_creacion: new Date().toISOString()\n      };\n      console.log(\"Usuario creado para añadir a la lista local:\", newUser);\n\n      // Añadir a la lista local de usuarios\n      localUsers.push(newUser);\n      console.log(\"Lista actualizada de usuarios:\", localUsers.length);\n      return {\n        success: true,\n        data: newUser,\n        message: 'Usuario creado con éxito'\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    console.log(\"Llamando a API real para crear usuario\");\n    return await apiService.post('/admin/users', userData);\n  } catch (error) {\n    console.error('Error en adminService.createUser:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Actualiza un usuario existente\r\n * @param {String|Number} id ID del usuario\r\n * @param {Object} userData Datos actualizados del usuario\r\n * @returns {Promise<Object>} Usuario actualizado\r\n */\nexport async function updateUser(id, userData) {\n  try {\n    // En desarrollo, simular la actualización\n    if (process.env.NODE_ENV === 'development') {\n      // Simulando tiempo de respuesta del servidor\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Buscar el usuario en localUsers\n      const userIndex = localUsers.findIndex(user => user.id == id);\n      if (userIndex === -1) {\n        return {\n          success: false,\n          message: `Usuario con ID ${id} no encontrado`\n        };\n      }\n\n      // Actualizar en la lista local\n      const updatedUser = {\n        ...localUsers[userIndex],\n        ...userData\n      };\n      localUsers[userIndex] = updatedUser;\n      console.log('Usuario actualizado:', updatedUser);\n      return {\n        success: true,\n        data: updatedUser,\n        message: 'Usuario actualizado con éxito'\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    return await apiService.put(`/admin/users/${id}`, userData);\n  } catch (error) {\n    console.error(`Error al actualizar usuario con ID ${id}:`, error);\n    throw error;\n  }\n}\n\n/**\r\n * Cambia el estado de un usuario\r\n * @param {String|Number} id ID del usuario\r\n * @param {String} estado Nuevo estado ('activo' o 'inactivo')\r\n * @returns {Promise<Object>} Resultado de la operación\r\n */\nexport async function cambiarEstadoUsuario(id, estado) {\n  try {\n    console.log(`adminService.cambiarEstadoUsuario: ID=${id}, estado=${estado}`);\n\n    // En desarrollo, simular la actualización\n    if (process.env.NODE_ENV === 'development') {\n      // Simulando tiempo de respuesta del servidor\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Buscar el usuario en localUsers\n      const userIndex = localUsers.findIndex(user => user.id == id);\n      if (userIndex === -1) {\n        return {\n          success: false,\n          message: `Usuario con ID ${id} no encontrado`\n        };\n      }\n\n      // Cambiar estado\n      localUsers[userIndex].estado = estado;\n      console.log(`Estado de usuario ${id} cambiado a ${estado}`);\n      return {\n        success: true,\n        message: `Estado del usuario cambiado a ${estado} exitosamente`,\n        data: localUsers[userIndex]\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    return await apiService.put(`/admin/users/${id}/status`, {\n      estado\n    });\n  } catch (error) {\n    console.error('Error en cambiarEstadoUsuario:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Elimina un usuario\r\n * @param {String|Number} id ID del usuario a eliminar\r\n * @returns {Promise<Object>} Resultado de la operación\r\n */\nexport async function deleteUser(id) {\n  try {\n    // En desarrollo, simular la eliminación\n    if (process.env.NODE_ENV === 'development') {\n      // Simulando tiempo de respuesta del servidor\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Verificar que el ID existe\n      const index = localUsers.findIndex(user => user.id == id);\n      if (index === -1) {\n        return {\n          success: false,\n          message: `Usuario con ID ${id} no encontrado`\n        };\n      }\n\n      // Eliminar el usuario\n      const deletedUser = localUsers.splice(index, 1)[0];\n      console.log(`Usuario eliminado: ${deletedUser.nombre} (ID: ${deletedUser.id})`);\n      return {\n        success: true,\n        message: 'Usuario eliminado exitosamente'\n      };\n    }\n\n    // En producción, hacer la llamada a la API real\n    return await apiService.delete(`/admin/users/${id}`);\n  } catch (error) {\n    console.error('Error en deleteUser:', error);\n    throw error;\n  }\n}\nexport default {\n  getDashboardStats,\n  getMenuItems,\n  getSoldItems,\n  getUsers,\n  getLogs,\n  downloadLogsCSV,\n  getRoles,\n  getAllRoles,\n  createUser,\n  updateUser,\n  cambiarEstadoUsuario,\n  deleteUser\n};","map":{"version":3,"names":["storageService","apiService","localUsers","getDashboardStats","process","env","NODE_ENV","usersResponse","getUsers","userCount","success","Array","isArray","data","length","activeUsers","filter","user","estado","Math","floor","inactiveUsers","console","log","totalUsers","activePayments","pendingPayments","overduePayments","totalIncome","status","lastBackup","Date","toISOString","recentActivity","tipo","usuario_nombre","accion","fecha","now","get","error","message","menuItemsCount","totalSales","getMenuItems","menuItems","getSoldItems","soldItems","options","id","nombre","email","telefono","roles","fecha_creacion","filteredUsers","searchTerm","term","toLowerCase","includes","role","total","queryParams","encodeURIComponent","page","limit","endsWith","slice","getLogs","Promise","resolve","setTimeout","timestamp","type","details","ip","userAgent","attempts","code","newUser","downloadLogsCSV","csvData","getRoles","getAllRoles","descripcion","createUser","userData","existingUser","find","u","max","map","push","post","updateUser","userIndex","findIndex","updatedUser","put","cambiarEstadoUsuario","deleteUser","index","deletedUser","splice","delete"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/adminService.js"],"sourcesContent":["/**\r\n * Servicio para gestionar las operaciones administrativas\r\n */\r\nimport * as storageService from './storageService';\r\nimport * as apiService from './apiService';\r\n\r\n// Lista local de usuarios para mantener estado entre llamadas\r\nlet localUsers = [];\r\n\r\n/**\r\n * Obtiene estadísticas para el dashboard de administrador\r\n * @returns {Promise<Object>} Estadísticas del sistema\r\n */\r\nexport async function getDashboardStats() {\r\n  try {\r\n    // En desarrollo, devolver datos simulados pero con lógica para actualizarlos\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // Obtener usuarios actuales para tener un conteo real\r\n      const usersResponse = await getUsers();\r\n      \r\n      const userCount = (usersResponse && usersResponse.success && Array.isArray(usersResponse.data)) \r\n        ? usersResponse.data.length \r\n        : 45; // Valor por defecto si no podemos obtener el conteo real\r\n\r\n      // Calcular usuarios activos/inactivos\r\n      const activeUsers = usersResponse && usersResponse.success && Array.isArray(usersResponse.data)\r\n        ? usersResponse.data.filter(user => user.estado === 'activo').length\r\n        : Math.floor(userCount * 0.75); // Aproximadamente 75% activos por defecto\r\n        \r\n      const inactiveUsers = userCount - activeUsers;\r\n\r\n      console.log(`Estadísticas actualizadas: ${userCount} usuarios totales (${activeUsers} activos, ${inactiveUsers} inactivos)`);\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          totalUsers: userCount,\r\n          activeUsers: activeUsers,\r\n          inactiveUsers: inactiveUsers,\r\n          activePayments: 28,\r\n          pendingPayments: 8,\r\n          overduePayments: 3,\r\n          totalIncome: 15750000,\r\n          status: 'Normal',\r\n          lastBackup: new Date().toISOString(),\r\n          recentActivity: [\r\n            // Añadir actividad reciente de creación de usuario si se ha creado uno recientemente\r\n            {\r\n              tipo: 'user_created',\r\n              usuario_nombre: 'Admin',\r\n              accion: 'creó un nuevo usuario',\r\n              fecha: new Date().toISOString()\r\n            },\r\n            {\r\n              tipo: 'login',\r\n              usuario_nombre: 'Laura Méndez',\r\n              accion: 'inició sesión en el sistema',\r\n              fecha: new Date().toISOString()\r\n            },\r\n            {\r\n              tipo: 'payment',\r\n              usuario_nombre: 'Carlos Gómez',\r\n              accion: 'realizó un pago de $350.000',\r\n              fecha: new Date(Date.now() - 3600000).toISOString() // 1 hora atrás\r\n            },\r\n            {\r\n              tipo: 'backup',\r\n              usuario_nombre: 'Sistema',\r\n              accion: 'realizó un respaldo automático',\r\n              fecha: new Date(Date.now() - 172800000).toISOString() // 2 días atrás\r\n            }\r\n          ]\r\n        }\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    return await apiService.get('/admin/stats');\r\n  } catch (error) {\r\n    console.error('Error al obtener estadísticas del dashboard:', error);\r\n    // Incluso en caso de error, devolver alguna información\r\n    return {\r\n      success: false,\r\n      error: error.message,\r\n      data: {\r\n        totalUsers: localUsers.length || 1,\r\n        activeUsers: localUsers.length || 1,\r\n        inactiveUsers: 0,\r\n        menuItemsCount: 0,\r\n        totalSales: 0,\r\n        status: 'Error',\r\n        recentActivity: []\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene los elementos del menú\r\n * @returns {Promise<Object>} Lista de elementos del menú\r\n */\r\nexport async function getMenuItems() {\r\n  try {\r\n    // En desarrollo, simular llamada a la API\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // Obtener datos del servicio de almacenamiento\r\n      const menuItems = await storageService.getMenuItems();\r\n      return {\r\n        success: true,\r\n        data: menuItems,\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    return await apiService.get('/admin/menu-items');\r\n  } catch (error) {\r\n    console.error('Error al obtener elementos del menú:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene los elementos vendidos para el inventario\r\n * @returns {Promise<Object>} Lista de elementos vendidos\r\n */\r\nexport async function getSoldItems() {\r\n  try {\r\n    // En desarrollo, simular llamada a la API\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // Obtener datos del servicio de almacenamiento\r\n      const soldItems = await storageService.getSoldItems();\r\n      return {\r\n        success: true,\r\n        data: soldItems\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    return await apiService.get('/admin/sold-items');\r\n  } catch (error) {\r\n    console.error('Error al obtener elementos vendidos:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene los usuarios del sistema\r\n * @param {Object} options Opciones de filtrado y paginación\r\n * @returns {Promise<Array>} Lista de usuarios\r\n */\r\nexport async function getUsers(options = {}) {\r\n  try {\r\n    // En desarrollo, devolver datos simulados\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // Si la lista local está vacía, inicializarla con usuarios default\r\n      if (localUsers.length === 0) {\r\n        localUsers = [\r\n          {\r\n            id: 1,\r\n            nombre: 'Admin Principal',\r\n            email: 'admin@ejemplo.com',\r\n            telefono: '3001234567',\r\n            roles: ['Superadministrador'],\r\n            estado: 'activo',\r\n            fecha_creacion: '2023-05-15T08:30:00Z'\r\n          },\r\n          {\r\n            id: 2,\r\n            nombre: 'Juan Pérez',\r\n            email: 'juan@ejemplo.com',\r\n            telefono: '3009876543',\r\n            roles: ['Administrador'],\r\n            estado: 'activo',\r\n            fecha_creacion: '2023-06-20T14:45:00Z'\r\n          },\r\n          {\r\n            id: 3,\r\n            nombre: 'María López',\r\n            email: 'maria@ejemplo.com',\r\n            telefono: '3002223344',\r\n            roles: ['Empleado'],\r\n            estado: 'activo',\r\n            fecha_creacion: '2023-07-05T11:15:00Z'\r\n          },\r\n          {\r\n            id: 4,\r\n            nombre: 'Carlos Rodríguez',\r\n            email: 'carlos@ejemplo.com',\r\n            telefono: '3005556677',\r\n            roles: ['Empleado'],\r\n            estado: 'inactivo',\r\n            fecha_creacion: '2023-08-10T09:20:00Z'\r\n          }\r\n        ];\r\n      }\r\n      console.log(\"getUsers - Total usuarios en memoria:\", localUsers.length);\r\n      \r\n      // Aplicar filtros\r\n      let filteredUsers = [...localUsers];\r\n      \r\n      if (options.searchTerm) {\r\n        const term = options.searchTerm.toLowerCase();\r\n        filteredUsers = filteredUsers.filter(user => \r\n          user.nombre.toLowerCase().includes(term) || \r\n          user.email.toLowerCase().includes(term) ||\r\n          (user.telefono && user.telefono.toLowerCase().includes(term))\r\n        );\r\n      }\r\n      \r\n      if (options.role) {\r\n        filteredUsers = filteredUsers.filter(user => \r\n          user.roles && user.roles.includes(options.role)\r\n        );\r\n      }\r\n      \r\n      if (options.status) {\r\n        filteredUsers = filteredUsers.filter(user => \r\n          user.estado === options.status\r\n        );\r\n      }\r\n      \r\n      return {\r\n        success: true,\r\n        data: filteredUsers,\r\n        total: filteredUsers.length\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    let queryParams = '';\r\n    if (options.searchTerm) queryParams += `search=${encodeURIComponent(options.searchTerm)}&`;\r\n    if (options.role) queryParams += `role=${encodeURIComponent(options.role)}&`;\r\n    if (options.status) queryParams += `status=${encodeURIComponent(options.status)}&`;\r\n    if (options.page) queryParams += `page=${options.page}&`;\r\n    if (options.limit) queryParams += `limit=${options.limit}&`;\r\n    if (queryParams.endsWith('&')) {\r\n      queryParams = queryParams.slice(0, -1);\r\n    }\r\n    \r\n    return await apiService.get(`/admin/users${queryParams ? '?' + queryParams : ''}`);\r\n  } catch (error) {\r\n    console.error('Error al obtener usuarios:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene los registros del sistema\r\n * @returns {Promise<Object>} Lista de logs\r\n */\r\nexport async function getLogs() {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        success: true,\r\n        data: [\r\n          {\r\n            id: 1,\r\n            timestamp: new Date().toISOString(),\r\n            type: 'info',\r\n            user: 'Admin',\r\n            message: 'Inicio de sesión exitoso',\r\n            details: { ip: '192.168.1.1', userAgent: 'Chrome/96.0' }\r\n          },\r\n          {\r\n            id: 2,\r\n            timestamp: new Date(Date.now() - 3600000).toISOString(), // 1 hora atrás\r\n            type: 'warning',\r\n            user: 'Sistema',\r\n            message: 'Intento de acceso fallido',\r\n            details: { ip: '203.0.113.1', userAgent: 'Edge/96.0', attempts: 3 }\r\n          },\r\n          {\r\n            id: 3,\r\n            timestamp: new Date(Date.now() - 7200000).toISOString(), // 2 horas atrás\r\n            type: 'error',\r\n            user: 'Sistema',\r\n            message: 'Error en la creación de backup',\r\n            details: { error: 'Espacio insuficiente', code: 'E0023' }\r\n          },\r\n          {\r\n            id: 4,\r\n            timestamp: new Date(Date.now() - 86400000).toISOString(), // 1 día atrás\r\n            type: 'success',\r\n            user: 'Juan Pérez',\r\n            message: 'Nuevo usuario creado',\r\n            details: { newUser: 'carlos@ejemplo.com' }\r\n          }\r\n        ]\r\n      });\r\n    }, 1000);\r\n  });\r\n}\r\n\r\n/**\r\n * Descarga los logs en formato CSV\r\n * @returns {Promise<Object>} Datos CSV de los logs\r\n */\r\nexport async function downloadLogsCSV() {\r\n  // Simulamos la generación de un CSV\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      // Encabezados y datos de prueba en formato CSV\r\n      const csvData = 'Fecha,Tipo,Usuario,Mensaje\\n' +\r\n                     '2023-10-15 10:30:00,info,Admin,Inicio de sesión exitoso\\n' +\r\n                     '2023-10-15 09:30:00,warning,Sistema,Intento de acceso fallido\\n' +\r\n                     '2023-10-15 08:30:00,error,Sistema,Error en la creación de backup\\n' +\r\n                     '2023-10-14 15:45:00,success,Juan Pérez,Nuevo usuario creado';\r\n      \r\n      resolve({\r\n        success: true,\r\n        data: csvData\r\n      });\r\n    }, 1000);\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene los roles disponibles en el sistema\r\n * @returns {Promise<Array>} Lista de roles\r\n */\r\nexport async function getRoles() {\r\n  try {\r\n    // En desarrollo, devolver datos simulados\r\n    if (process.env.NODE_ENV === 'development') {\r\n      return {\r\n        success: true,\r\n        data: [\r\n          { id: 1, nombre: 'Superadministrador' },\r\n          { id: 2, nombre: 'Administrador' },\r\n          { id: 3, nombre: 'Empleado' }\r\n        ]\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    return await apiService.get('/admin/roles');\r\n  } catch (error) {\r\n    console.error('Error al obtener roles:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene todos los roles disponibles en el sistema\r\n * @returns {Promise<Object>} Lista de roles\r\n */\r\nexport async function getAllRoles() {\r\n  try {\r\n    // En desarrollo, devolver roles fijos\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // Simulando tiempo de respuesta del servidor\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n      \r\n      const roles = [\r\n        { id: 1, nombre: 'Empleado', descripcion: 'Acceso básico al sistema' },\r\n        { id: 2, nombre: 'Administrador', descripcion: 'Acceso a configuración y gestión de usuarios' },\r\n        { id: 3, nombre: 'Superadministrador', descripcion: 'Acceso total al sistema' }\r\n      ];\r\n      \r\n      return {\r\n        success: true,\r\n        data: roles\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    return await apiService.get('/admin/roles');\r\n  } catch (error) {\r\n    console.error('Error al obtener roles:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Crea un nuevo usuario\r\n * @param {Object} userData Datos del usuario a crear\r\n * @returns {Promise<Object>} Usuario creado\r\n */\r\nexport async function createUser(userData) {\r\n  try {\r\n    console.log(\"adminService.createUser - Iniciando creación con datos:\", userData);\r\n    \r\n    // En desarrollo, simular la creación\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // Simulando tiempo de respuesta del servidor\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      // Comprobar si ya existe un usuario con el mismo email\r\n      const existingUser = localUsers.find(u => u.email && u.email.toLowerCase() === userData.email.toLowerCase());\r\n      if (existingUser) {\r\n        return {\r\n          success: false,\r\n          error: 'Ya existe un usuario con este correo electrónico.',\r\n          message: 'El correo electrónico ya está registrado'\r\n        };\r\n      }\r\n      \r\n      // Crear un nuevo usuario con formato completo\r\n      const newUser = {\r\n        id: localUsers.length > 0 ? Math.max(...localUsers.map(u => u.id)) + 1 : 1,\r\n        nombre: userData.nombre || 'Usuario sin nombre',\r\n        email: userData.email || `usuario${Date.now()}@ejemplo.com`,\r\n        telefono: userData.telefono || '',\r\n        roles: Array.isArray(userData.roles) ? [...userData.roles] : ['Empleado'],\r\n        estado: userData.estado || 'activo',\r\n        fecha_creacion: new Date().toISOString()\r\n      };\r\n      console.log(\"Usuario creado para añadir a la lista local:\", newUser);\r\n      \r\n      // Añadir a la lista local de usuarios\r\n      localUsers.push(newUser);\r\n      \r\n      console.log(\"Lista actualizada de usuarios:\", localUsers.length);\r\n      \r\n      return {\r\n        success: true,\r\n        data: newUser,\r\n        message: 'Usuario creado con éxito'\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    console.log(\"Llamando a API real para crear usuario\");\r\n    return await apiService.post('/admin/users', userData);\r\n  } catch (error) {\r\n    console.error('Error en adminService.createUser:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Actualiza un usuario existente\r\n * @param {String|Number} id ID del usuario\r\n * @param {Object} userData Datos actualizados del usuario\r\n * @returns {Promise<Object>} Usuario actualizado\r\n */\r\nexport async function updateUser(id, userData) {\r\n  try {\r\n    // En desarrollo, simular la actualización\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // Simulando tiempo de respuesta del servidor\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      // Buscar el usuario en localUsers\r\n      const userIndex = localUsers.findIndex(user => user.id == id);\r\n      if (userIndex === -1) {\r\n        return {\r\n          success: false,\r\n          message: `Usuario con ID ${id} no encontrado`\r\n        };\r\n      }\r\n      \r\n      // Actualizar en la lista local\r\n      const updatedUser = {\r\n        ...localUsers[userIndex],\r\n        ...userData\r\n      };\r\n      localUsers[userIndex] = updatedUser;\r\n      \r\n      console.log('Usuario actualizado:', updatedUser);\r\n      return {\r\n        success: true,\r\n        data: updatedUser,\r\n        message: 'Usuario actualizado con éxito'\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    return await apiService.put(`/admin/users/${id}`, userData);\r\n  } catch (error) {\r\n    console.error(`Error al actualizar usuario con ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Cambia el estado de un usuario\r\n * @param {String|Number} id ID del usuario\r\n * @param {String} estado Nuevo estado ('activo' o 'inactivo')\r\n * @returns {Promise<Object>} Resultado de la operación\r\n */\r\nexport async function cambiarEstadoUsuario(id, estado) {\r\n  try {\r\n    console.log(`adminService.cambiarEstadoUsuario: ID=${id}, estado=${estado}`);\r\n    \r\n    // En desarrollo, simular la actualización\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // Simulando tiempo de respuesta del servidor\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      // Buscar el usuario en localUsers\r\n      const userIndex = localUsers.findIndex(user => user.id == id);\r\n      if (userIndex === -1) {\r\n        return {\r\n          success: false,\r\n          message: `Usuario con ID ${id} no encontrado`\r\n        };\r\n      }\r\n      \r\n      // Cambiar estado\r\n      localUsers[userIndex].estado = estado;\r\n      \r\n      console.log(`Estado de usuario ${id} cambiado a ${estado}`);\r\n      return {\r\n        success: true,\r\n        message: `Estado del usuario cambiado a ${estado} exitosamente`,\r\n        data: localUsers[userIndex]\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    return await apiService.put(`/admin/users/${id}/status`, { estado });\r\n  } catch (error) {\r\n    console.error('Error en cambiarEstadoUsuario:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Elimina un usuario\r\n * @param {String|Number} id ID del usuario a eliminar\r\n * @returns {Promise<Object>} Resultado de la operación\r\n */\r\nexport async function deleteUser(id) {\r\n  try {\r\n    // En desarrollo, simular la eliminación\r\n    if (process.env.NODE_ENV === 'development') {\r\n      // Simulando tiempo de respuesta del servidor\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      // Verificar que el ID existe\r\n      const index = localUsers.findIndex(user => user.id == id);\r\n      if (index === -1) {\r\n        return {\r\n          success: false,\r\n          message: `Usuario con ID ${id} no encontrado`\r\n        };\r\n      }\r\n      \r\n      // Eliminar el usuario\r\n      const deletedUser = localUsers.splice(index, 1)[0];\r\n      console.log(`Usuario eliminado: ${deletedUser.nombre} (ID: ${deletedUser.id})`);\r\n      return {\r\n        success: true,\r\n        message: 'Usuario eliminado exitosamente'\r\n      };\r\n    }\r\n    \r\n    // En producción, hacer la llamada a la API real\r\n    return await apiService.delete(`/admin/users/${id}`);\r\n  } catch (error) {\r\n    console.error('Error en deleteUser:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport default {\r\n  getDashboardStats,\r\n  getMenuItems,\r\n  getSoldItems,\r\n  getUsers,\r\n  getLogs,\r\n  downloadLogsCSV,\r\n  getRoles,\r\n  getAllRoles,\r\n  createUser,\r\n  updateUser,\r\n  cambiarEstadoUsuario,\r\n  deleteUser\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}