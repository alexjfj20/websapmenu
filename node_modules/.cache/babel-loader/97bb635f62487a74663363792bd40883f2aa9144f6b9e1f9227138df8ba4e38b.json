{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport { alert } from './dialogService';\n\n// Lista de usuarios predefinidos para pruebas\nconst DEFAULT_USERS = [{\n  id: 1,\n  email: 'superadmin@example.com',\n  password: 'SuperAdmin2023',\n  nombre: 'Superadministrador',\n  roles: ['Superadministrador']\n}, {\n  id: 2,\n  email: 'admin@example.com',\n  password: 'Admin2023',\n  nombre: 'Administrador',\n  roles: ['Administrador']\n}, {\n  id: 3,\n  email: 'empleado@example.com',\n  password: 'Empleado2023',\n  nombre: 'Empleado',\n  roles: ['Empleado']\n}, {\n  id: 4,\n  email: 'test@test.com',\n  password: '123456',\n  nombre: 'Usuario de Prueba',\n  roles: ['Empleado']\n}, {\n  id: 5,\n  email: 'admin',\n  password: 'admin',\n  nombre: 'SuperAdmin',\n  roles: ['Superadministrador', 'Empleado']\n},\n// Añadir el usuario que intentas usar\n{\n  id: 6,\n  email: 'superadmin@gmail.com',\n  password: 'SuperAdmin2023',\n  nombre: 'Super Administrador Gmail',\n  roles: ['Superadministrador']\n}];\n\n// Usuario actualmente autenticado\nlet currentUser = null;\n\n/**\r\n * Obtiene los usuarios almacenados en IndexedDB (creados desde el panel de administración)\r\n * @returns {Promise<Array>} Lista de usuarios o array vacío si hay error\r\n */\nasync function getStoredUsers() {\n  try {\n    const DB_NAME = 'websapDatabase';\n    const DB_VERSION = 3;\n    const USERS_STORE = 'users';\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\n        // Si hay error, devolver los usuarios predefinidos\n        resolve(DEFAULT_USERS);\n      };\n      request.onsuccess = event => {\n        const db = event.target.result;\n\n        // Verificar que existe el almacén de usuarios\n        if (!db.objectStoreNames.contains(USERS_STORE)) {\n          console.warn(`El almacén ${USERS_STORE} no existe en la base de datos`);\n          resolve(DEFAULT_USERS);\n          return;\n        }\n        const transaction = db.transaction([USERS_STORE], 'readonly');\n        const store = transaction.objectStore(USERS_STORE);\n        const request = store.getAll();\n        request.onsuccess = () => {\n          const storedUsers = request.result || [];\n          console.log(\"Usuarios encontrados en la base de datos:\", storedUsers);\n\n          // Combinar usuarios predefinidos con los almacenados en la BD\n          const allUsers = [...DEFAULT_USERS];\n\n          // Agregar usuarios almacenados que no sean duplicados (por email)\n          for (const user of storedUsers) {\n            if (!user.email) continue; // Ignorar usuarios sin email\n\n            // Verificar si ya existe un usuario con el mismo email en la lista por defecto\n            const existingUserIndex = allUsers.findIndex(u => u.email && u.email.toLowerCase() === user.email.toLowerCase());\n            if (existingUserIndex !== -1) {\n              // Reemplazar el usuario predefinido con el de la BD\n              allUsers[existingUserIndex] = user;\n            } else {\n              // Agregar el nuevo usuario\n              allUsers.push(user);\n            }\n          }\n          console.log(\"Lista completa de usuarios:\", allUsers);\n          resolve(allUsers);\n        };\n        request.onerror = event => {\n          console.error('Error al obtener usuarios:', event.target.error);\n          resolve(DEFAULT_USERS);\n        };\n      };\n    });\n  } catch (error) {\n    console.error('Error al acceder a la base de datos:', error);\n    return DEFAULT_USERS;\n  }\n}\n\n/**\r\n * Genera un token simple para autenticación\r\n * @param {Object} user - Datos del usuario\r\n * @returns {string} Token generado\r\n */\nfunction generateToken(user) {\n  // En una aplicación real, usaríamos JWT u otra implementación segura\n  // Para este ejemplo, simplemente codificamos algunos datos del usuario\n  const payload = {\n    id: user.id,\n    email: user.email,\n    roles: user.roles,\n    timestamp: new Date().getTime()\n  };\n  return btoa(JSON.stringify(payload));\n}\n\n/**\r\n * Función para iniciar sesión\r\n * @param {string} email - Correo electrónico del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\nasync function login(email, password) {\n  console.log(\"Intentando iniciar sesión como:\", email);\n  try {\n    // Obtener usuarios desde IndexedDB o lista predefinida\n    const usuarios = await getStoredUsers();\n    console.log(\"Total de usuarios disponibles:\", usuarios.length);\n\n    // Buscar usuario por email (ignorando mayúsculas/minúsculas)\n    const usuario = usuarios.find(u => u.email && u.email.toLowerCase() === email.toLowerCase());\n    if (!usuario) {\n      console.log(\"No se encontró usuario con las credenciales proporcionadas\");\n      throw new Error(\"Credenciales incorrectas\");\n    }\n\n    // Verificar contraseña\n    if (usuario.password && usuario.password.startsWith('$2')) {\n      // Para contraseñas hasheadas con bcrypt\n      try {\n        const bcrypt = require('bcrypt');\n        const match = await bcrypt.compare(password, usuario.password);\n        if (!match) {\n          console.log(\"Contraseña incorrecta (bcrypt)\");\n          throw new Error(\"Credenciales incorrectas\");\n        }\n      } catch (e) {\n        console.error(\"Error al comparar contraseñas con bcrypt:\", e);\n        throw new Error(\"Error en el sistema de autenticación\");\n      }\n    } else if (usuario.password !== password) {\n      // Para contraseñas en texto plano\n      console.log(\"Contraseña incorrecta (texto plano)\");\n      throw new Error(\"Credenciales incorrectas\");\n    }\n\n    // Crear objeto de usuario autenticado\n    const authenticatedUser = {\n      id: usuario.id,\n      email: usuario.email,\n      nombre: usuario.nombre || email.split('@')[0],\n      roles: usuario.roles || ['Usuario'],\n      token: generateToken(usuario)\n    };\n\n    // Guardar en memoria y localStorage\n    currentUser = authenticatedUser;\n    localStorage.setItem('isLoggedIn', 'true');\n    localStorage.setItem('currentUser', JSON.stringify(authenticatedUser));\n    return authenticatedUser;\n  } catch (error) {\n    console.log(\"Error en login:\", error);\n    throw error;\n  }\n}\n\n/**\r\n * Cierra la sesión del usuario actual\r\n */\nfunction logout() {\n  currentUser = null;\n  localStorage.removeItem('isLoggedIn');\n  localStorage.removeItem('currentUser');\n}\n\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\nfunction isAuthenticated() {\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser) {\n        currentUser = storedUser;\n      }\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n      return false;\n    }\n  }\n  return !!currentUser;\n}\n\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\nfunction getCurrentUser() {\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser) {\n        currentUser = storedUser;\n      }\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n      return null;\n    }\n  }\n  return currentUser;\n}\n\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\nfunction hasRole(roleName) {\n  const user = getCurrentUser();\n  if (!user || !user.roles) {\n    return false;\n  }\n\n  // Si roles es un array, verificar si contiene el rol\n  if (Array.isArray(user.roles)) {\n    return user.roles.includes(roleName);\n  }\n\n  // Si roles es un string, verificar si es igual al rol buscado\n  if (typeof user.roles === 'string') {\n    return user.roles === roleName;\n  }\n  return false;\n}\nexport { login, logout, isAuthenticated, hasRole, getCurrentUser };\nexport default {\n  login,\n  logout,\n  isAuthenticated,\n  hasRole,\n  getCurrentUser\n};","map":{"version":3,"names":["alert","DEFAULT_USERS","id","email","password","nombre","roles","currentUser","getStoredUsers","DB_NAME","DB_VERSION","USERS_STORE","Promise","resolve","reject","request","indexedDB","open","onerror","event","console","error","target","onsuccess","db","result","objectStoreNames","contains","warn","transaction","store","objectStore","getAll","storedUsers","log","allUsers","user","existingUserIndex","findIndex","u","toLowerCase","push","generateToken","payload","timestamp","Date","getTime","btoa","JSON","stringify","login","usuarios","length","usuario","find","Error","startsWith","bcrypt","require","match","compare","e","authenticatedUser","split","token","localStorage","setItem","logout","removeItem","isAuthenticated","getItem","storedUser","parse","getCurrentUser","hasRole","roleName","Array","isArray","includes"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/authService.js"],"sourcesContent":["import { alert } from './dialogService';\r\n\r\n// Lista de usuarios predefinidos para pruebas\r\nconst DEFAULT_USERS = [\r\n  {\r\n    id: 1,\r\n    email: 'superadmin@example.com',\r\n    password: 'SuperAdmin2023',\r\n    nombre: 'Superadministrador',\r\n    roles: ['Superadministrador']\r\n  },\r\n  {\r\n    id: 2,\r\n    email: 'admin@example.com',\r\n    password: 'Admin2023',\r\n    nombre: 'Administrador',\r\n    roles: ['Administrador']\r\n  },\r\n  {\r\n    id: 3,\r\n    email: 'empleado@example.com',\r\n    password: 'Empleado2023',\r\n    nombre: 'Empleado',\r\n    roles: ['Empleado']\r\n  },\r\n  {\r\n    id: 4,\r\n    email: 'test@test.com',\r\n    password: '123456',\r\n    nombre: 'Usuario de Prueba',\r\n    roles: ['Empleado']\r\n  },\r\n  {\r\n    id: 5,\r\n    email: 'admin',\r\n    password: 'admin',\r\n    nombre: 'SuperAdmin',\r\n    roles: ['Superadministrador', 'Empleado']\r\n  },\r\n  // Añadir el usuario que intentas usar\r\n  {\r\n    id: 6,\r\n    email: 'superadmin@gmail.com',\r\n    password: 'SuperAdmin2023',\r\n    nombre: 'Super Administrador Gmail',\r\n    roles: ['Superadministrador']\r\n  }\r\n];\r\n\r\n// Usuario actualmente autenticado\r\nlet currentUser = null;\r\n\r\n/**\r\n * Obtiene los usuarios almacenados en IndexedDB (creados desde el panel de administración)\r\n * @returns {Promise<Array>} Lista de usuarios o array vacío si hay error\r\n */\r\nasync function getStoredUsers() {\r\n  try {\r\n    const DB_NAME = 'websapDatabase';\r\n    const DB_VERSION = 3;\r\n    const USERS_STORE = 'users';\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n      \r\n      request.onerror = (event) => {\r\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\r\n        // Si hay error, devolver los usuarios predefinidos\r\n        resolve(DEFAULT_USERS);\r\n      };\r\n      \r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        \r\n        // Verificar que existe el almacén de usuarios\r\n        if (!db.objectStoreNames.contains(USERS_STORE)) {\r\n          console.warn(`El almacén ${USERS_STORE} no existe en la base de datos`);\r\n          resolve(DEFAULT_USERS);\r\n          return;\r\n        }\r\n        \r\n        const transaction = db.transaction([USERS_STORE], 'readonly');\r\n        const store = transaction.objectStore(USERS_STORE);\r\n        const request = store.getAll();\r\n        \r\n        request.onsuccess = () => {\r\n          const storedUsers = request.result || [];\r\n          console.log(\"Usuarios encontrados en la base de datos:\", storedUsers);\r\n          \r\n          // Combinar usuarios predefinidos con los almacenados en la BD\r\n          const allUsers = [...DEFAULT_USERS];\r\n          \r\n          // Agregar usuarios almacenados que no sean duplicados (por email)\r\n          for (const user of storedUsers) {\r\n            if (!user.email) continue; // Ignorar usuarios sin email\r\n            \r\n            // Verificar si ya existe un usuario con el mismo email en la lista por defecto\r\n            const existingUserIndex = allUsers.findIndex(u => \r\n              u.email && u.email.toLowerCase() === user.email.toLowerCase()\r\n            );\r\n            \r\n            if (existingUserIndex !== -1) {\r\n              // Reemplazar el usuario predefinido con el de la BD\r\n              allUsers[existingUserIndex] = user;\r\n            } else {\r\n              // Agregar el nuevo usuario\r\n              allUsers.push(user);\r\n            }\r\n          }\r\n          \r\n          console.log(\"Lista completa de usuarios:\", allUsers);\r\n          resolve(allUsers);\r\n        };\r\n        \r\n        request.onerror = (event) => {\r\n          console.error('Error al obtener usuarios:', event.target.error);\r\n          resolve(DEFAULT_USERS);\r\n        };\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al acceder a la base de datos:', error);\r\n    return DEFAULT_USERS;\r\n  }\r\n}\r\n\r\n/**\r\n * Genera un token simple para autenticación\r\n * @param {Object} user - Datos del usuario\r\n * @returns {string} Token generado\r\n */\r\nfunction generateToken(user) {\r\n  // En una aplicación real, usaríamos JWT u otra implementación segura\r\n  // Para este ejemplo, simplemente codificamos algunos datos del usuario\r\n  const payload = {\r\n    id: user.id,\r\n    email: user.email,\r\n    roles: user.roles,\r\n    timestamp: new Date().getTime()\r\n  };\r\n  \r\n  return btoa(JSON.stringify(payload));\r\n}\r\n\r\n/**\r\n * Función para iniciar sesión\r\n * @param {string} email - Correo electrónico del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\r\nasync function login(email, password) {\r\n  console.log(\"Intentando iniciar sesión como:\", email);\r\n  \r\n  try {\r\n    // Obtener usuarios desde IndexedDB o lista predefinida\r\n    const usuarios = await getStoredUsers();\r\n    console.log(\"Total de usuarios disponibles:\", usuarios.length);\r\n    \r\n    // Buscar usuario por email (ignorando mayúsculas/minúsculas)\r\n    const usuario = usuarios.find(u => \r\n      u.email && u.email.toLowerCase() === email.toLowerCase()\r\n    );\r\n    \r\n    if (!usuario) {\r\n      console.log(\"No se encontró usuario con las credenciales proporcionadas\");\r\n      throw new Error(\"Credenciales incorrectas\");\r\n    }\r\n    \r\n    // Verificar contraseña\r\n    if (usuario.password && usuario.password.startsWith('$2')) {\r\n      // Para contraseñas hasheadas con bcrypt\r\n      try {\r\n        const bcrypt = require('bcrypt');\r\n        const match = await bcrypt.compare(password, usuario.password);\r\n        \r\n        if (!match) {\r\n          console.log(\"Contraseña incorrecta (bcrypt)\");\r\n          throw new Error(\"Credenciales incorrectas\");\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error al comparar contraseñas con bcrypt:\", e);\r\n        throw new Error(\"Error en el sistema de autenticación\");\r\n      }\r\n    } else if (usuario.password !== password) {\r\n      // Para contraseñas en texto plano\r\n      console.log(\"Contraseña incorrecta (texto plano)\");\r\n      throw new Error(\"Credenciales incorrectas\");\r\n    }\r\n    \r\n    // Crear objeto de usuario autenticado\r\n    const authenticatedUser = {\r\n      id: usuario.id,\r\n      email: usuario.email,\r\n      nombre: usuario.nombre || email.split('@')[0],\r\n      roles: usuario.roles || ['Usuario'],\r\n      token: generateToken(usuario)\r\n    };\r\n    \r\n    // Guardar en memoria y localStorage\r\n    currentUser = authenticatedUser;\r\n    localStorage.setItem('isLoggedIn', 'true');\r\n    localStorage.setItem('currentUser', JSON.stringify(authenticatedUser));\r\n    \r\n    return authenticatedUser;\r\n  } catch (error) {\r\n    console.log(\"Error en login:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Cierra la sesión del usuario actual\r\n */\r\nfunction logout() {\r\n  currentUser = null;\r\n  localStorage.removeItem('isLoggedIn');\r\n  localStorage.removeItem('currentUser');\r\n}\r\n\r\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\r\nfunction isAuthenticated() {\r\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\r\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser) {\r\n        currentUser = storedUser;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  return !!currentUser;\r\n}\r\n\r\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\r\nfunction getCurrentUser() {\r\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\r\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser) {\r\n        currentUser = storedUser;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  return currentUser;\r\n}\r\n\r\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\r\nfunction hasRole(roleName) {\r\n  const user = getCurrentUser();\r\n  \r\n  if (!user || !user.roles) {\r\n    return false;\r\n  }\r\n  \r\n  // Si roles es un array, verificar si contiene el rol\r\n  if (Array.isArray(user.roles)) {\r\n    return user.roles.includes(roleName);\r\n  }\r\n  \r\n  // Si roles es un string, verificar si es igual al rol buscado\r\n  if (typeof user.roles === 'string') {\r\n    return user.roles === roleName;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\nexport {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}