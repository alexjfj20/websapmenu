{"ast":null,"code":"import { ref, onMounted, onUnmounted, computed } from 'vue';\nimport { runAddInformacionPagoMigration, syncBusinessInfoWithBackend, fetchBusinessInfoFromBackend, startBusinessInfoSyncInterval, stopBusinessInfoSyncInterval, checkForBusinessInfoChanges, invalidateBusinessInfoCache } from '../../services/businessInfoService';\nimport { getBusinessInfo } from '../../services/storageService';\nimport eventBus from '../../utils/eventBus';\nexport default {\n  name: 'SyncBusinessInfo',\n  setup() {\n    const loading = ref(false);\n    const success = ref(false);\n    const message = ref('');\n    const businessInfo = ref(null);\n    const lastSync = ref(null);\n    const lastUpdate = ref(null);\n    const isAutoSyncEnabled = ref(true);\n    const syncInterval = ref('30000');\n    const syncLogs = ref([]);\n\n    // Formatear la fecha de última sincronización\n    const lastSyncFormatted = computed(() => {\n      if (!lastSync.value) return 'Nunca';\n      return formatTimestamp(lastSync.value);\n    });\n\n    // Formatear la fecha de última actualización\n    const lastUpdateFormatted = computed(() => {\n      if (!lastUpdate.value) return '';\n      return `Actualizado: ${formatTimestamp(lastUpdate.value)}`;\n    });\n\n    // Formatear timestamp en fecha legible\n    const formatTimestamp = timestamp => {\n      if (!timestamp) return '';\n      const date = new Date(timestamp);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n    };\n\n    // Añadir entrada al registro de sincronización\n    const addSyncLog = (logMessage, isSuccess = true) => {\n      syncLogs.value.unshift({\n        message: logMessage,\n        success: isSuccess,\n        timestamp: Date.now()\n      });\n\n      // Limitar a 10 entradas\n      if (syncLogs.value.length > 10) {\n        syncLogs.value = syncLogs.value.slice(0, 10);\n      }\n    };\n\n    // Manejar evento de actualización de información\n    const handleBusinessInfoUpdate = updatedInfo => {\n      businessInfo.value = updatedInfo;\n      lastUpdate.value = Date.now();\n      addSyncLog('Información del negocio actualizada');\n    };\n\n    // Cargar la información del negocio al montar el componente\n    onMounted(async () => {\n      try {\n        // Suscribirse al evento de actualización\n        eventBus.on('business-info-updated', handleBusinessInfoUpdate);\n\n        // Cargar la información del negocio\n        await loadBusinessInfo();\n\n        // Iniciar sincronización automática\n        if (isAutoSyncEnabled.value) {\n          startBusinessInfoSyncInterval();\n          addSyncLog('Sincronización automática iniciada');\n        }\n      } catch (error) {\n        console.error('Error al montar el componente:', error);\n        message.value = 'Error al cargar información del negocio';\n        success.value = false;\n        addSyncLog('Error al cargar información del negocio', false);\n      }\n    });\n    onUnmounted(() => {\n      // Cancelar suscripción al evento\n      eventBus.off('business-info-updated', handleBusinessInfoUpdate);\n\n      // Detener sincronización automática\n      stopBusinessInfoSyncInterval();\n    });\n\n    // Cargar la información del negocio\n    const loadBusinessInfo = async () => {\n      try {\n        loading.value = true;\n        businessInfo.value = await getBusinessInfo();\n        lastUpdate.value = Date.now();\n      } catch (error) {\n        console.error('Error al cargar información del negocio:', error);\n        message.value = 'Error al cargar información del negocio';\n        success.value = false;\n        addSyncLog('Error al cargar información del negocio', false);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Ejecutar la migración para añadir la columna informacion_pago\n    const runMigration = async () => {\n      try {\n        loading.value = true;\n        message.value = 'Ejecutando migración...';\n        const result = await runAddInformacionPagoMigration();\n        success.value = result.success;\n        message.value = result.message;\n        if (result.success) {\n          addSyncLog('Migración ejecutada con éxito');\n        } else {\n          addSyncLog(`Error en migración: ${result.message}`, false);\n        }\n      } catch (error) {\n        console.error('Error al ejecutar migración:', error);\n        success.value = false;\n        message.value = error.message || 'Error al ejecutar migración';\n        addSyncLog(`Error en migración: ${error.message}`, false);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Sincronizar la información del negocio con el backend\n    const syncBusinessInfo = async () => {\n      try {\n        loading.value = true;\n        message.value = 'Sincronizando información...';\n        const result = await syncBusinessInfoWithBackend();\n        success.value = result.success;\n        message.value = result.message;\n        if (result.success) {\n          lastSync.value = result.timestamp || Date.now();\n          await loadBusinessInfo();\n          addSyncLog('Sincronización completada con éxito');\n        } else {\n          addSyncLog(`Error en sincronización: ${result.message}`, false);\n        }\n      } catch (error) {\n        console.error('Error al sincronizar información:', error);\n        success.value = false;\n        message.value = error.message || 'Error al sincronizar información';\n        addSyncLog(`Error en sincronización: ${error.message}`, false);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Obtener la información del negocio desde el backend\n    const fetchFromBackend = async () => {\n      try {\n        loading.value = true;\n        message.value = 'Obteniendo información desde el servidor...';\n\n        // Invalidar la caché primero\n        invalidateBusinessInfoCache();\n\n        // Forzar la actualización desde el backend\n        businessInfo.value = await fetchBusinessInfoFromBackend(true);\n        success.value = true;\n        message.value = 'Información actualizada desde el servidor';\n        lastUpdate.value = Date.now();\n        addSyncLog('Información actualizada desde el servidor');\n      } catch (error) {\n        console.error('Error al obtener información desde el servidor:', error);\n        success.value = false;\n        message.value = error.message || 'Error al obtener información desde el servidor';\n        addSyncLog(`Error al obtener información: ${error.message}`, false);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Sincronizar y verificar cambios\n    const syncAndRefresh = async () => {\n      try {\n        loading.value = true;\n        message.value = 'Sincronizando y verificando cambios...';\n\n        // Sincronizar la información actual con el backend\n        await syncBusinessInfoWithBackend();\n\n        // Verificar si hay cambios\n        const hasChanges = await checkForBusinessInfoChanges();\n        if (hasChanges) {\n          success.value = true;\n          message.value = 'Se detectaron y aplicaron cambios en la información';\n          addSyncLog('Se detectaron y aplicaron cambios');\n        } else {\n          success.value = true;\n          message.value = 'No se detectaron cambios en la información';\n          addSyncLog('No se detectaron cambios');\n        }\n\n        // Actualizar la información\n        await loadBusinessInfo();\n        lastSync.value = Date.now();\n      } catch (error) {\n        console.error('Error al sincronizar y verificar cambios:', error);\n        success.value = false;\n        message.value = error.message || 'Error al sincronizar y verificar cambios';\n        addSyncLog(`Error al sincronizar: ${error.message}`, false);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Alternar sincronización automática\n    const toggleAutoSync = () => {\n      if (isAutoSyncEnabled.value) {\n        startBusinessInfoSyncInterval();\n        addSyncLog('Sincronización automática activada');\n      } else {\n        stopBusinessInfoSyncInterval();\n        addSyncLog('Sincronización automática desactivada');\n      }\n    };\n\n    // Actualizar intervalo de sincronización\n    const updateSyncInterval = () => {\n      // Detener el intervalo actual\n      stopBusinessInfoSyncInterval();\n\n      // Actualizar SYNC_INTERVAL en businessInfoService.js\n      // Esto es solo visual, ya que no podemos modificar directamente la constante\n      addSyncLog(`Intervalo de sincronización actualizado a ${parseInt(syncInterval.value) / 1000} segundos`);\n\n      // Reiniciar si está habilitado\n      if (isAutoSyncEnabled.value) {\n        startBusinessInfoSyncInterval();\n      }\n    };\n    return {\n      loading,\n      success,\n      message,\n      businessInfo,\n      lastSync,\n      lastSyncFormatted,\n      lastUpdateFormatted,\n      isAutoSyncEnabled,\n      syncInterval,\n      syncLogs,\n      runMigration,\n      syncBusinessInfo,\n      fetchFromBackend,\n      syncAndRefresh,\n      toggleAutoSync,\n      updateSyncInterval,\n      formatTimestamp\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","computed","runAddInformacionPagoMigration","syncBusinessInfoWithBackend","fetchBusinessInfoFromBackend","startBusinessInfoSyncInterval","stopBusinessInfoSyncInterval","checkForBusinessInfoChanges","invalidateBusinessInfoCache","getBusinessInfo","eventBus","name","setup","loading","success","message","businessInfo","lastSync","lastUpdate","isAutoSyncEnabled","syncInterval","syncLogs","lastSyncFormatted","value","formatTimestamp","lastUpdateFormatted","timestamp","date","Date","toLocaleDateString","toLocaleTimeString","addSyncLog","logMessage","isSuccess","unshift","now","length","slice","handleBusinessInfoUpdate","updatedInfo","on","loadBusinessInfo","error","console","off","runMigration","result","syncBusinessInfo","fetchFromBackend","syncAndRefresh","hasChanges","toggleAutoSync","updateSyncInterval","parseInt"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\components\\admin\\SyncBusinessInfo.vue"],"sourcesContent":["<template>\n  <div class=\"sync-business-info\">\n    <h2>Sincronización de Información del Negocio</h2>\n    \n    <div v-if=\"message\" class=\"alert\" :class=\"{ 'alert-success': success, 'alert-danger': !success && message }\">\n      {{ message }}\n    </div>\n    \n    <div class=\"status-info\">\n      <div class=\"status-item\">\n        <strong>Estado de sincronización:</strong> \n        <span :class=\"isAutoSyncEnabled ? 'status-active' : 'status-inactive'\">\n          {{ isAutoSyncEnabled ? 'Activa' : 'Inactiva' }}\n        </span>\n      </div>\n      \n      <div class=\"status-item\">\n        <strong>Última sincronización:</strong> \n        <span>{{ lastSyncFormatted }}</span>\n      </div>\n    </div>\n    \n    <div class=\"settings-section\">\n      <h3>Configuración de Sincronización</h3>\n      \n      <div class=\"form-group\">\n        <label class=\"toggle-switch\">\n          <input type=\"checkbox\" v-model=\"isAutoSyncEnabled\" @change=\"toggleAutoSync\">\n          <span class=\"slider\"></span>\n          <span class=\"toggle-label\">Sincronización automática</span>\n        </label>\n      </div>\n      \n      <div class=\"form-group\">\n        <label>Intervalo de verificación:</label>\n        <select v-model=\"syncInterval\" @change=\"updateSyncInterval\" :disabled=\"!isAutoSyncEnabled\">\n          <option value=\"15000\">15 segundos (pruebas)</option>\n          <option value=\"30000\">30 segundos</option>\n          <option value=\"60000\">1 minuto</option>\n          <option value=\"300000\">5 minutos</option>\n        </select>\n      </div>\n    </div>\n    \n    <div class=\"actions\">\n      <button @click=\"runMigration\" class=\"btn btn-primary\" :disabled=\"loading\">\n        <span v-if=\"loading\" class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n        Ejecutar Migración\n      </button>\n      \n      <button @click=\"syncBusinessInfo\" class=\"btn btn-success\" :disabled=\"loading\">\n        <span v-if=\"loading\" class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n        Sincronizar Ahora\n      </button>\n      \n      <button @click=\"fetchFromBackend\" class=\"btn btn-info\" :disabled=\"loading\">\n        <span v-if=\"loading\" class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n        Actualizar desde Servidor\n      </button>\n      \n      <button @click=\"syncAndRefresh\" class=\"btn btn-warning\" :disabled=\"loading\">\n        <span v-if=\"loading\" class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n        Sincronizar y Refrescar\n      </button>\n    </div>\n    \n    <div class=\"current-info\" v-if=\"businessInfo\">\n      <h3>Información Actual del Negocio</h3>\n      <div class=\"info-card\">\n        <div class=\"info-header\">\n          <h4>{{ businessInfo.name || 'Sin nombre' }}</h4>\n          <div class=\"info-badge\">{{ lastUpdateFormatted }}</div>\n        </div>\n        <div class=\"info-content\">\n          <div class=\"info-row\">\n            <strong>Descripción:</strong> {{ businessInfo.description || 'Sin descripción' }}\n          </div>\n          <div class=\"info-row\">\n            <strong>Dirección:</strong> {{ businessInfo.address || 'Sin dirección' }}\n          </div>\n          <div class=\"info-row\">\n            <strong>Contacto:</strong> {{ businessInfo.contact || 'Sin contacto' }}\n          </div>\n          <div class=\"info-row logo-preview\" v-if=\"businessInfo.logo\">\n            <strong>Logo:</strong>\n            <img :src=\"businessInfo.logo\" alt=\"Logo\" class=\"logo-thumbnail\">\n          </div>\n          <div class=\"info-row\" v-if=\"businessInfo.paymentInfo\">\n            <strong>Información de Pago:</strong>\n            <div class=\"payment-info\">\n              <div v-if=\"businessInfo.paymentInfo.qrTitle\">QR: {{ businessInfo.paymentInfo.qrTitle }}</div>\n              <div v-if=\"businessInfo.paymentInfo.nequiNumber\">Nequi: {{ businessInfo.paymentInfo.nequiNumber }}</div>\n              <div v-if=\"businessInfo.paymentInfo.bankInfo\">Banco: {{ businessInfo.paymentInfo.bankInfo }}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"sync-log\">\n      <h3>Registro de Sincronización</h3>\n      <div class=\"log-container\">\n        <div v-for=\"(log, index) in syncLogs\" :key=\"index\" class=\"log-entry\" :class=\"{'log-success': log.success, 'log-error': !log.success}\">\n          <div class=\"log-timestamp\">{{ formatTimestamp(log.timestamp) }}</div>\n          <div class=\"log-message\">{{ log.message }}</div>\n        </div>\n        <div v-if=\"syncLogs.length === 0\" class=\"log-empty\">\n          No hay registros de sincronización.\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, onUnmounted, computed } from 'vue';\nimport {\n  runAddInformacionPagoMigration,\n  syncBusinessInfoWithBackend,\n  fetchBusinessInfoFromBackend,\n  startBusinessInfoSyncInterval,\n  stopBusinessInfoSyncInterval,\n  checkForBusinessInfoChanges,\n  invalidateBusinessInfoCache\n} from '../../services/businessInfoService';\nimport { getBusinessInfo } from '../../services/storageService';\nimport eventBus from '../../utils/eventBus';\n\nexport default {\n  name: 'SyncBusinessInfo',\n  \n  setup() {\n    const loading = ref(false);\n    const success = ref(false);\n    const message = ref('');\n    const businessInfo = ref(null);\n    const lastSync = ref(null);\n    const lastUpdate = ref(null);\n    const isAutoSyncEnabled = ref(true);\n    const syncInterval = ref('30000');\n    const syncLogs = ref([]);\n    \n    // Formatear la fecha de última sincronización\n    const lastSyncFormatted = computed(() => {\n      if (!lastSync.value) return 'Nunca';\n      return formatTimestamp(lastSync.value);\n    });\n    \n    // Formatear la fecha de última actualización\n    const lastUpdateFormatted = computed(() => {\n      if (!lastUpdate.value) return '';\n      return `Actualizado: ${formatTimestamp(lastUpdate.value)}`;\n    });\n    \n    // Formatear timestamp en fecha legible\n    const formatTimestamp = (timestamp) => {\n      if (!timestamp) return '';\n      const date = new Date(timestamp);\n      return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n    };\n    \n    // Añadir entrada al registro de sincronización\n    const addSyncLog = (logMessage, isSuccess = true) => {\n      syncLogs.value.unshift({\n        message: logMessage,\n        success: isSuccess,\n        timestamp: Date.now()\n      });\n      \n      // Limitar a 10 entradas\n      if (syncLogs.value.length > 10) {\n        syncLogs.value = syncLogs.value.slice(0, 10);\n      }\n    };\n    \n    // Manejar evento de actualización de información\n    const handleBusinessInfoUpdate = (updatedInfo) => {\n      businessInfo.value = updatedInfo;\n      lastUpdate.value = Date.now();\n      addSyncLog('Información del negocio actualizada');\n    };\n    \n    // Cargar la información del negocio al montar el componente\n    onMounted(async () => {\n      try {\n        // Suscribirse al evento de actualización\n        eventBus.on('business-info-updated', handleBusinessInfoUpdate);\n        \n        // Cargar la información del negocio\n        await loadBusinessInfo();\n        \n        // Iniciar sincronización automática\n        if (isAutoSyncEnabled.value) {\n          startBusinessInfoSyncInterval();\n          addSyncLog('Sincronización automática iniciada');\n        }\n      } catch (error) {\n        console.error('Error al montar el componente:', error);\n        message.value = 'Error al cargar información del negocio';\n        success.value = false;\n        addSyncLog('Error al cargar información del negocio', false);\n      }\n    });\n    \n    onUnmounted(() => {\n      // Cancelar suscripción al evento\n      eventBus.off('business-info-updated', handleBusinessInfoUpdate);\n      \n      // Detener sincronización automática\n      stopBusinessInfoSyncInterval();\n    });\n    \n    // Cargar la información del negocio\n    const loadBusinessInfo = async () => {\n      try {\n        loading.value = true;\n        businessInfo.value = await getBusinessInfo();\n        lastUpdate.value = Date.now();\n      } catch (error) {\n        console.error('Error al cargar información del negocio:', error);\n        message.value = 'Error al cargar información del negocio';\n        success.value = false;\n        addSyncLog('Error al cargar información del negocio', false);\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    // Ejecutar la migración para añadir la columna informacion_pago\n    const runMigration = async () => {\n      try {\n        loading.value = true;\n        message.value = 'Ejecutando migración...';\n        \n        const result = await runAddInformacionPagoMigration();\n        \n        success.value = result.success;\n        message.value = result.message;\n        \n        if (result.success) {\n          addSyncLog('Migración ejecutada con éxito');\n        } else {\n          addSyncLog(`Error en migración: ${result.message}`, false);\n        }\n      } catch (error) {\n        console.error('Error al ejecutar migración:', error);\n        success.value = false;\n        message.value = error.message || 'Error al ejecutar migración';\n        addSyncLog(`Error en migración: ${error.message}`, false);\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    // Sincronizar la información del negocio con el backend\n    const syncBusinessInfo = async () => {\n      try {\n        loading.value = true;\n        message.value = 'Sincronizando información...';\n        \n        const result = await syncBusinessInfoWithBackend();\n        \n        success.value = result.success;\n        message.value = result.message;\n        \n        if (result.success) {\n          lastSync.value = result.timestamp || Date.now();\n          await loadBusinessInfo();\n          addSyncLog('Sincronización completada con éxito');\n        } else {\n          addSyncLog(`Error en sincronización: ${result.message}`, false);\n        }\n      } catch (error) {\n        console.error('Error al sincronizar información:', error);\n        success.value = false;\n        message.value = error.message || 'Error al sincronizar información';\n        addSyncLog(`Error en sincronización: ${error.message}`, false);\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    // Obtener la información del negocio desde el backend\n    const fetchFromBackend = async () => {\n      try {\n        loading.value = true;\n        message.value = 'Obteniendo información desde el servidor...';\n        \n        // Invalidar la caché primero\n        invalidateBusinessInfoCache();\n        \n        // Forzar la actualización desde el backend\n        businessInfo.value = await fetchBusinessInfoFromBackend(true);\n        \n        success.value = true;\n        message.value = 'Información actualizada desde el servidor';\n        lastUpdate.value = Date.now();\n        addSyncLog('Información actualizada desde el servidor');\n      } catch (error) {\n        console.error('Error al obtener información desde el servidor:', error);\n        success.value = false;\n        message.value = error.message || 'Error al obtener información desde el servidor';\n        addSyncLog(`Error al obtener información: ${error.message}`, false);\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    // Sincronizar y verificar cambios\n    const syncAndRefresh = async () => {\n      try {\n        loading.value = true;\n        message.value = 'Sincronizando y verificando cambios...';\n        \n        // Sincronizar la información actual con el backend\n        await syncBusinessInfoWithBackend();\n        \n        // Verificar si hay cambios\n        const hasChanges = await checkForBusinessInfoChanges();\n        \n        if (hasChanges) {\n          success.value = true;\n          message.value = 'Se detectaron y aplicaron cambios en la información';\n          addSyncLog('Se detectaron y aplicaron cambios');\n        } else {\n          success.value = true;\n          message.value = 'No se detectaron cambios en la información';\n          addSyncLog('No se detectaron cambios');\n        }\n        \n        // Actualizar la información\n        await loadBusinessInfo();\n        lastSync.value = Date.now();\n      } catch (error) {\n        console.error('Error al sincronizar y verificar cambios:', error);\n        success.value = false;\n        message.value = error.message || 'Error al sincronizar y verificar cambios';\n        addSyncLog(`Error al sincronizar: ${error.message}`, false);\n      } finally {\n        loading.value = false;\n      }\n    };\n    \n    // Alternar sincronización automática\n    const toggleAutoSync = () => {\n      if (isAutoSyncEnabled.value) {\n        startBusinessInfoSyncInterval();\n        addSyncLog('Sincronización automática activada');\n      } else {\n        stopBusinessInfoSyncInterval();\n        addSyncLog('Sincronización automática desactivada');\n      }\n    };\n    \n    // Actualizar intervalo de sincronización\n    const updateSyncInterval = () => {\n      // Detener el intervalo actual\n      stopBusinessInfoSyncInterval();\n      \n      // Actualizar SYNC_INTERVAL en businessInfoService.js\n      // Esto es solo visual, ya que no podemos modificar directamente la constante\n      addSyncLog(`Intervalo de sincronización actualizado a ${parseInt(syncInterval.value) / 1000} segundos`);\n      \n      // Reiniciar si está habilitado\n      if (isAutoSyncEnabled.value) {\n        startBusinessInfoSyncInterval();\n      }\n    };\n    \n    return {\n      loading,\n      success,\n      message,\n      businessInfo,\n      lastSync,\n      lastSyncFormatted,\n      lastUpdateFormatted,\n      isAutoSyncEnabled,\n      syncInterval,\n      syncLogs,\n      runMigration,\n      syncBusinessInfo,\n      fetchFromBackend,\n      syncAndRefresh,\n      toggleAutoSync,\n      updateSyncInterval,\n      formatTimestamp\n    };\n  }\n};\n</script>\n\n<style scoped>\n.sync-business-info {\n  padding: 20px;\n  background-color: #f8f9fa;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n}\n\n.sync-business-info h2 {\n  color: #333;\n  margin-bottom: 20px;\n  padding-bottom: 10px;\n  border-bottom: 1px solid #dee2e6;\n}\n\n.alert {\n  padding: 12px;\n  margin: 15px 0;\n  border-radius: 6px;\n}\n\n.alert-success {\n  background-color: #d4edda;\n  color: #155724;\n  border: 1px solid #c3e6cb;\n}\n\n.alert-danger {\n  background-color: #f8d7da;\n  color: #721c24;\n  border: 1px solid #f5c6cb;\n}\n\n.status-info {\n  background: #fff;\n  padding: 15px;\n  border-radius: 6px;\n  margin-bottom: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  border: 1px solid #e9ecef;\n}\n\n.status-item {\n  padding: 8px 0;\n}\n\n.status-active {\n  color: #28a745;\n  font-weight: bold;\n}\n\n.status-inactive {\n  color: #dc3545;\n  font-weight: bold;\n}\n\n.settings-section {\n  background: #fff;\n  padding: 15px;\n  border-radius: 6px;\n  margin-bottom: 20px;\n  border: 1px solid #e9ecef;\n}\n\n.settings-section h3 {\n  font-size: 1.2rem;\n  margin-bottom: 15px;\n  color: #495057;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\n.form-group label {\n  display: block;\n  margin-bottom: 5px;\n  font-weight: 500;\n}\n\n.form-group select {\n  width: 100%;\n  max-width: 300px;\n  padding: 8px;\n  border-radius: 4px;\n  border: 1px solid #ced4da;\n}\n\n.toggle-switch {\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  cursor: pointer;\n}\n\n.toggle-switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n.slider {\n  position: relative;\n  cursor: pointer;\n  width: 50px;\n  height: 24px;\n  background-color: #ccc;\n  transition: .4s;\n  border-radius: 24px;\n  margin-right: 10px;\n}\n\n.slider:before {\n  position: absolute;\n  content: \"\";\n  height: 16px;\n  width: 16px;\n  left: 4px;\n  bottom: 4px;\n  background-color: white;\n  transition: .4s;\n  border-radius: 50%;\n}\n\ninput:checked + .slider {\n  background-color: #28a745;\n}\n\ninput:checked + .slider:before {\n  transform: translateX(26px);\n}\n\n.toggle-label {\n  font-weight: 500;\n}\n\n.actions {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  margin: 20px 0;\n}\n\n.current-info {\n  margin-top: 30px;\n}\n\n.info-card {\n  background-color: #fff;\n  border-radius: 6px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  overflow: hidden;\n}\n\n.info-header {\n  background-color: #f8f9fa;\n  padding: 15px;\n  border-bottom: 1px solid #dee2e6;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.info-header h4 {\n  margin: 0;\n  color: #343a40;\n  font-size: 1.2rem;\n}\n\n.info-badge {\n  font-size: 0.85rem;\n  color: #6c757d;\n}\n\n.info-content {\n  padding: 15px;\n}\n\n.info-row {\n  margin-bottom: 12px;\n  border-bottom: 1px solid #f0f0f0;\n  padding-bottom: 12px;\n}\n\n.info-row strong {\n  color: #495057;\n  margin-right: 5px;\n}\n\n.logo-thumbnail {\n  max-width: 100px;\n  max-height: 60px;\n  margin-top: 5px;\n  border-radius: 4px;\n  display: block;\n}\n\n.payment-info {\n  margin-top: 5px;\n  padding-left: 15px;\n  border-left: 2px solid #e9ecef;\n}\n\n.sync-log {\n  margin-top: 30px;\n}\n\n.sync-log h3 {\n  color: #333;\n  margin-bottom: 15px;\n}\n\n.log-container {\n  background-color: #fff;\n  border-radius: 6px;\n  border: 1px solid #dee2e6;\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.log-entry {\n  padding: 10px 15px;\n  border-bottom: 1px solid #f0f0f0;\n  display: flex;\n  align-items: center;\n}\n\n.log-success {\n  border-left: 4px solid #28a745;\n}\n\n.log-error {\n  border-left: 4px solid #dc3545;\n}\n\n.log-timestamp {\n  font-size: 0.85rem;\n  color: #6c757d;\n  width: 180px;\n  flex-shrink: 0;\n}\n\n.log-message {\n  flex-grow: 1;\n}\n\n.log-empty {\n  padding: 15px;\n  color: #6c757d;\n  text-align: center;\n  font-style: italic;\n}\n\n.btn {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 120px;\n}\n\n.btn-primary {\n  background-color: #007bff;\n  color: white;\n}\n\n.btn-success {\n  background-color: #28a745;\n  color: white;\n}\n\n.btn-info {\n  background-color: #17a2b8;\n  color: white;\n}\n\n.btn-warning {\n  background-color: #ffc107;\n  color: #212529;\n}\n\n.btn:disabled {\n  opacity: 0.65;\n  cursor: not-allowed;\n}\n\n.spinner-border-sm {\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  border: 0.2em solid currentColor;\n  border-right-color: transparent;\n  border-radius: 50%;\n  animation: spinner-border .75s linear infinite;\n  margin-right: 5px;\n}\n\n@keyframes spinner-border {\n  to { transform: rotate(360deg); }\n}\n\n@media (max-width: 768px) {\n  .actions {\n    flex-direction: column;\n  }\n  \n  .btn {\n    width: 100%;\n  }\n  \n  .status-info {\n    flex-direction: column;\n    gap: 10px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}