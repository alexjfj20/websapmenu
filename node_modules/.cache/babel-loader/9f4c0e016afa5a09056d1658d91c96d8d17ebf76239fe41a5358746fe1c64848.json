{"ast":null,"code":"// src/utils/syncPaymentInfo.js\n\nimport apiService from '../services/apiService';\nimport { getBusinessInfo } from '../services/storageService';\n\n/**\n * Ejecuta la migración para añadir la columna informacion_pago a la tabla restaurantes\n * @returns {Promise<Object>} - Resultado de la migración\n */\nexport async function runAddInformacionPagoMigration() {\n  try {\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    console.log('Ejecutando migración para añadir columna informacion_pago...');\n    const response = await apiService.get('/restaurantes/migrate/add-informacion-pago');\n    if (response && response.success) {\n      console.log('Migración ejecutada con éxito:', response.message);\n      return {\n        success: true,\n        message: response.message || 'Migración ejecutada con éxito'\n      };\n    } else {\n      console.warn('Error al ejecutar migración:', response);\n      return {\n        success: false,\n        message: response.message || 'Error al ejecutar migración'\n      };\n    }\n  } catch (error) {\n    console.error('Error al ejecutar migración:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al ejecutar migración'\n    };\n  }\n}\n\n/**\n * Sincroniza la información del negocio guardada en IndexedDB con el backend\n * @returns {Promise<Object>} - Resultado de la sincronización\n */\nexport async function syncBusinessInfoWithBackend() {\n  try {\n    // Obtener la información del negocio desde IndexedDB\n    const businessInfo = await getBusinessInfo();\n    if (!businessInfo || Object.keys(businessInfo).length === 0) {\n      console.log('No hay información del negocio para sincronizar');\n      return {\n        success: false,\n        message: 'No hay información del negocio para sincronizar'\n      };\n    }\n    console.log('Sincronizando información del negocio con el backend:', businessInfo);\n\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n\n    // Obtener el ID del restaurante del usuario actual\n    const userResponse = await apiService.get('/auth/me');\n    if (!userResponse || !userResponse.success || !userResponse.user || !userResponse.user.restaurante_id) {\n      console.warn('No se pudo obtener el restaurante del usuario actual');\n      return {\n        success: false,\n        message: 'No se pudo obtener el restaurante del usuario actual'\n      };\n    }\n    const restauranteId = userResponse.user.restaurante_id;\n\n    // Preparar los datos para actualizar el restaurante\n    const restauranteData = {\n      nombre: businessInfo.name,\n      descripcion: businessInfo.description,\n      direccion: businessInfo.address,\n      telefono: businessInfo.contact,\n      logo: businessInfo.logo,\n      // Guardar la información de pago como un campo JSON\n      informacion_pago: JSON.stringify(businessInfo.paymentInfo || {})\n    };\n    console.log('Datos a enviar al backend:', restauranteData);\n\n    // Actualizar el restaurante en el backend\n    const response = await apiService.put(`/restaurantes/${restauranteId}`, restauranteData);\n    if (response && response.success) {\n      console.log('Información del negocio sincronizada con éxito');\n      return {\n        success: true,\n        message: 'Información del negocio sincronizada con éxito'\n      };\n    } else {\n      console.warn('Error al sincronizar información del negocio:', response);\n      return {\n        success: false,\n        message: response.message || 'Error al sincronizar información del negocio'\n      };\n    }\n  } catch (error) {\n    console.error('Error al sincronizar información del negocio:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al sincronizar información del negocio'\n    };\n  }\n}\n\n// Ejecutar la migración y sincronizar la información del negocio\nexport async function syncAllBusinessInfo() {\n  try {\n    console.log('Iniciando proceso de sincronización completa...');\n\n    // Primero ejecutar la migración\n    const migrationResult = await runAddInformacionPagoMigration();\n    console.log('Resultado de la migración:', migrationResult);\n\n    // Luego sincronizar la información del negocio\n    const syncResult = await syncBusinessInfoWithBackend();\n    console.log('Resultado de la sincronización:', syncResult);\n    return {\n      success: migrationResult.success && syncResult.success,\n      message: `Migración: ${migrationResult.message}. Sincronización: ${syncResult.message}`\n    };\n  } catch (error) {\n    console.error('Error en el proceso de sincronización completa:', error);\n    return {\n      success: false,\n      message: error.message || 'Error en el proceso de sincronización completa'\n    };\n  }\n}\nexport default {\n  runAddInformacionPagoMigration,\n  syncBusinessInfoWithBackend,\n  syncAllBusinessInfo\n};","map":{"version":3,"names":["apiService","getBusinessInfo","runAddInformacionPagoMigration","token","localStorage","getItem","setToken","console","log","response","get","success","message","warn","error","syncBusinessInfoWithBackend","businessInfo","Object","keys","length","userResponse","user","restaurante_id","restauranteId","restauranteData","nombre","name","descripcion","description","direccion","address","telefono","contact","logo","informacion_pago","JSON","stringify","paymentInfo","put","syncAllBusinessInfo","migrationResult","syncResult"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/utils/syncPaymentInfo.js"],"sourcesContent":["// src/utils/syncPaymentInfo.js\n\nimport apiService from '../services/apiService';\nimport { getBusinessInfo } from '../services/storageService';\n\n/**\n * Ejecuta la migración para añadir la columna informacion_pago a la tabla restaurantes\n * @returns {Promise<Object>} - Resultado de la migración\n */\nexport async function runAddInformacionPagoMigration() {\n  try {\n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    \n    console.log('Ejecutando migración para añadir columna informacion_pago...');\n    const response = await apiService.get('/restaurantes/migrate/add-informacion-pago');\n    \n    if (response && response.success) {\n      console.log('Migración ejecutada con éxito:', response.message);\n      return {\n        success: true,\n        message: response.message || 'Migración ejecutada con éxito'\n      };\n    } else {\n      console.warn('Error al ejecutar migración:', response);\n      return {\n        success: false,\n        message: response.message || 'Error al ejecutar migración'\n      };\n    }\n  } catch (error) {\n    console.error('Error al ejecutar migración:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al ejecutar migración'\n    };\n  }\n}\n\n/**\n * Sincroniza la información del negocio guardada en IndexedDB con el backend\n * @returns {Promise<Object>} - Resultado de la sincronización\n */\nexport async function syncBusinessInfoWithBackend() {\n  try {\n    // Obtener la información del negocio desde IndexedDB\n    const businessInfo = await getBusinessInfo();\n    \n    if (!businessInfo || Object.keys(businessInfo).length === 0) {\n      console.log('No hay información del negocio para sincronizar');\n      return {\n        success: false,\n        message: 'No hay información del negocio para sincronizar'\n      };\n    }\n    \n    console.log('Sincronizando información del negocio con el backend:', businessInfo);\n    \n    // Asegurarse de que el token esté configurado en apiService\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n    }\n    \n    // Obtener el ID del restaurante del usuario actual\n    const userResponse = await apiService.get('/auth/me');\n    if (!userResponse || !userResponse.success || !userResponse.user || !userResponse.user.restaurante_id) {\n      console.warn('No se pudo obtener el restaurante del usuario actual');\n      return {\n        success: false,\n        message: 'No se pudo obtener el restaurante del usuario actual'\n      };\n    }\n    \n    const restauranteId = userResponse.user.restaurante_id;\n    \n    // Preparar los datos para actualizar el restaurante\n    const restauranteData = {\n      nombre: businessInfo.name,\n      descripcion: businessInfo.description,\n      direccion: businessInfo.address,\n      telefono: businessInfo.contact,\n      logo: businessInfo.logo,\n      // Guardar la información de pago como un campo JSON\n      informacion_pago: JSON.stringify(businessInfo.paymentInfo || {})\n    };\n    \n    console.log('Datos a enviar al backend:', restauranteData);\n    \n    // Actualizar el restaurante en el backend\n    const response = await apiService.put(`/restaurantes/${restauranteId}`, restauranteData);\n    \n    if (response && response.success) {\n      console.log('Información del negocio sincronizada con éxito');\n      return {\n        success: true,\n        message: 'Información del negocio sincronizada con éxito'\n      };\n    } else {\n      console.warn('Error al sincronizar información del negocio:', response);\n      return {\n        success: false,\n        message: response.message || 'Error al sincronizar información del negocio'\n      };\n    }\n  } catch (error) {\n    console.error('Error al sincronizar información del negocio:', error);\n    return {\n      success: false,\n      message: error.message || 'Error al sincronizar información del negocio'\n    };\n  }\n}\n\n// Ejecutar la migración y sincronizar la información del negocio\nexport async function syncAllBusinessInfo() {\n  try {\n    console.log('Iniciando proceso de sincronización completa...');\n    \n    // Primero ejecutar la migración\n    const migrationResult = await runAddInformacionPagoMigration();\n    console.log('Resultado de la migración:', migrationResult);\n    \n    // Luego sincronizar la información del negocio\n    const syncResult = await syncBusinessInfoWithBackend();\n    console.log('Resultado de la sincronización:', syncResult);\n    \n    return {\n      success: migrationResult.success && syncResult.success,\n      message: `Migración: ${migrationResult.message}. Sincronización: ${syncResult.message}`\n    };\n  } catch (error) {\n    console.error('Error en el proceso de sincronización completa:', error);\n    return {\n      success: false,\n      message: error.message || 'Error en el proceso de sincronización completa'\n    };\n  }\n}\n\nexport default {\n  runAddInformacionPagoMigration,\n  syncBusinessInfoWithBackend,\n  syncAllBusinessInfo\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}