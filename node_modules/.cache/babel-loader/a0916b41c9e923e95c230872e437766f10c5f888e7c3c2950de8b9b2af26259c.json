{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { getSharedMenu } from '../services/menuService';\nexport default {\n  name: 'SharedMenuView',\n  setup() {\n    const route = useRoute();\n    const menuData = ref({\n      items: [],\n      businessInfo: {}\n    });\n    const isLoading = ref(true);\n    const error = ref(null);\n    const cartItems = ref([]);\n    const orderRef = ref(null);\n    const isProcessingOrder = ref(false);\n    console.log(\"SharedMenuView montado, ID del menú:\", route.params.id);\n\n    // Sistema de notificaciones toast\n    const toast = ref({\n      visible: false,\n      message: '',\n      type: 'success',\n      // 'success', 'warning', 'error'\n      timeoutId: null\n    });\n\n    // Cargar menú cuando el componente se monte\n    onMounted(() => {\n      loadMenu();\n    });\n\n    // Cargar el menú desde la API\n    async function loadMenu() {\n      try {\n        isLoading.value = true;\n        console.log(\"Cargando menú con ID:\", route.params.id);\n        if (!route.params.id) {\n          error.value = 'ID de menú no especificado';\n          isLoading.value = false;\n          return;\n        }\n\n        // Intenta cargar desde localStorage primero (por si hay un carrito guardado)\n        const savedCart = localStorage.getItem(`cart_${route.params.id}`);\n        if (savedCart) {\n          try {\n            cartItems.value = JSON.parse(savedCart);\n            console.log(\"Carrito recuperado de localStorage:\", cartItems.value);\n          } catch (e) {\n            console.error(\"Error al parsear carrito de localStorage:\", e);\n          }\n        }\n        const data = await getSharedMenu(route.params.id);\n        if (data) {\n          menuData.value = data;\n          console.log(\"Menú cargado con éxito:\", menuData.value);\n\n          // Inicializar disponibilidad para cada ítem\n          if (menuData.value.items) {\n            menuData.value.items.forEach(item => {\n              // Si la disponibilidad es explícitamente 0, mantenerla así\n              // Si es undefined o null, usar 0 en lugar de un valor predeterminado de 10\n              item.availableQuantity = item.availableQuantity !== undefined ? Number(item.availableQuantity) : 0;\n              item.realAvailability = item.availableQuantity;\n            });\n          }\n\n          // Actualizar disponibilidad real considerando el carrito\n          updateAvailabilityInMenu();\n\n          // Mostrar toast al cargar el menú correctamente\n          setTimeout(() => {\n            showToast('Menú cargado correctamente', 'success', 5000);\n          }, 1000);\n        } else {\n          error.value = \"No se encontró el menú solicitado\";\n        }\n      } catch (err) {\n        console.error(\"Error al cargar el menú:\", err);\n        error.value = `Error al cargar el menú: ${err.message || 'Error desconocido'}`;\n      } finally {\n        isLoading.value = false;\n      }\n    }\n\n    // Verificar si hay información de pago\n    const hasPaymentInfo = computed(() => {\n      return menuData.value?.businessInfo?.paymentInfo && (menuData.value.businessInfo.paymentInfo.qrImage || menuData.value.businessInfo.paymentInfo.nequiNumber || menuData.value.businessInfo.paymentInfo.nequiImage);\n    });\n\n    // Contador total de items\n    const totalItems = computed(() => {\n      return cartItems.value.reduce((total, item) => total + item.quantity, 0);\n    });\n\n    // Total del carrito\n    const cartTotal = computed(() => {\n      return cartItems.value.reduce((total, item) => {\n        return total + item.price * item.quantity;\n      }, 0);\n    });\n\n    // Formatear precio\n    function formatPrice(price) {\n      if (isNaN(Number(price))) return '0,00';\n\n      // Convertir a número y formatear con 2 decimales fijos\n      const numero = Number(price).toFixed(2);\n\n      // Separar parte entera y decimal\n      const [parteEntera, parteDecimal] = numero.split('.');\n\n      // Formatear parte entera con puntos como separadores de miles\n      const parteEnteraFormateada = parteEntera.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n\n      // Unir con coma como separador decimal\n      return `${parteEnteraFormateada},${parteDecimal}`;\n    }\n\n    // Agregar al carrito con verificación de disponibilidad\n    async function addToCart(item) {\n      // Verificación directa antes de hacer la comprobación completa\n      if (Number(item.availableQuantity) <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return;\n      }\n      const isAvailable = await checkAvailability(item);\n      if (!isAvailable) return;\n      const existingItem = cartItems.value.find(i => {\n        // Asegurar que ambos items tienen ID y compararlos, o comparar por nombre si no hay ID\n        if (item.id && i.id) {\n          return i.id === item.id;\n        }\n        return i.name === item.name;\n      });\n      if (existingItem) {\n        existingItem.quantity++;\n      } else {\n        cartItems.value.push({\n          id: item.id || Date.now().toString(),\n          name: item.name,\n          price: item.price,\n          quantity: 1,\n          availableQuantity: item.availableQuantity || 0 // Usar 0 como valor por defecto\n        });\n      }\n\n      // Guardar carrito en localStorage\n      saveCartToLocalStorage();\n\n      // Actualizar la disponibilidad en tiempo real\n      updateAvailabilityInMenu();\n\n      // Mostrar notificación de éxito\n      showToast(`${item.name} añadido al carrito`, 'success');\n    }\n\n    // Mostrar notificaciones toast\n    function showToast(message, type = 'success', duration = 5000) {\n      // Aumentar a 5 segundos\n      console.log(`[Toast] Mostrando notificación: ${message} (${type})`);\n\n      // Si ya hay un toast visible, limpiamos su timeout\n      if (toast.value.timeoutId) {\n        clearTimeout(toast.value.timeoutId);\n      }\n\n      // Configurar el nuevo toast\n      toast.value.message = message;\n      toast.value.type = type;\n      toast.value.visible = true;\n\n      // Debug: verificar que el estado del toast cambió\n      console.log(`[Toast] Estado: visible=${toast.value.visible}, message=${toast.value.message}`);\n\n      // Configurar timeout para ocultar después de la duración\n      toast.value.timeoutId = setTimeout(() => {\n        console.log(`[Toast] Ocultando notificación después de ${duration}ms`);\n        toast.value.visible = false;\n      }, duration);\n    }\n\n    // Guardar carrito en localStorage\n    function saveCartToLocalStorage() {\n      try {\n        localStorage.setItem(`cart_${route.params.id}`, JSON.stringify(cartItems.value));\n      } catch (e) {\n        console.error(\"Error al guardar carrito en localStorage:\", e);\n      }\n    }\n\n    // Incrementar cantidad\n    function increaseQuantity(index) {\n      const item = cartItems.value[index];\n\n      // Buscar el ítem en el menú\n      const menuItem = menuData.value.items?.find(i => i.id === item.id);\n      if (menuItem) {\n        // Verificar disponibilidad\n        const availableQuantity = menuItem.availableQuantity || 0;\n        if (item.quantity >= availableQuantity) {\n          showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n          return;\n        }\n      }\n\n      // Incrementar cantidad\n      item.quantity++;\n\n      // Guardar carrito y actualizar disponibilidad\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu();\n    }\n\n    // Reemplazar la función decreaseQuantity (líneas 409-416)\n    function decreaseQuantity(index) {\n      if (cartItems.value[index].quantity > 1) {\n        cartItems.value[index].quantity--;\n        saveCartToLocalStorage();\n        updateAvailabilityInMenu(); // Actualizar disponibilidad\n      } else {\n        removeFromCart(index);\n      }\n    }\n\n    // Reemplazar la función removeFromCart (líneas 419-422)\n    function removeFromCart(index) {\n      cartItems.value.splice(index, 1);\n      saveCartToLocalStorage();\n      updateAvailabilityInMenu(); // Actualizar disponibilidad\n    }\n\n    // Completar pedido con actualización de inventario\n    async function completeOrder() {\n      try {\n        // Validaciones básicas\n        if (cartItems.value.length === 0) {\n          showToast('No hay ítems en el pedido', 'error');\n          return;\n        }\n        if (!customerInfo.value.name || !customerInfo.value.phone) {\n          showToast('Por favor complete su nombre y teléfono', 'error');\n          return;\n        }\n\n        // Indicar que está procesando\n        isProcessingOrder.value = true;\n\n        // Actualizar inventario\n        await updateInventory();\n\n        // Compartir en WhatsApp\n        openWhatsAppShare();\n        showToast('¡Pedido completado! Gracias por tu compra.', 'success');\n\n        // Limpiar carrito y datos del cliente después de completar\n        setTimeout(() => {\n          cartItems.value = [];\n          customerInfo.value = {\n            name: '',\n            phone: '',\n            email: '',\n            address: ''\n          };\n          additionalMessage.value = '';\n          isProcessingOrder.value = false;\n        }, 2000);\n      } catch (error) {\n        console.error('Error al completar el pedido:', error);\n        showToast('Error al procesar el pedido', 'error');\n        isProcessingOrder.value = false;\n      }\n    }\n\n    // Compartir pedido por WhatsApp sin actualizar inventario\n    function shareOrderByWhatsApp() {\n      // Validaciones básicas\n      if (cartItems.value.length === 0) {\n        showToast('No hay ítems en el pedido', 'error');\n        return;\n      }\n      if (!customerInfo.value.name || !customerInfo.value.phone) {\n        showToast('Por favor complete su nombre y teléfono', 'error');\n        return;\n      }\n\n      // Compartir directamente en WhatsApp sin actualizar inventario\n      openWhatsAppShare();\n      showToast('Pedido compartido por WhatsApp', 'success');\n    }\n    function openWhatsAppShare() {\n      // Construir mensaje de pedido para WhatsApp\n      let whatsappMessage = `*Pedido de ${customerInfo.value.name}*\\n\\n`;\n      whatsappMessage += '*Productos:*\\n';\n      cartItems.value.forEach(item => {\n        const subtotal = (item.price * item.quantity).toFixed(2);\n        whatsappMessage += `- ${item.quantity}x ${item.name}: $${formatPrice(item.price)} c/u = $${formatPrice(subtotal)}\\n`;\n      });\n      whatsappMessage += `\\n*Total: $${formatPrice(cartTotal.value)}*\\n\\n`;\n      if (customerInfo.value.phone) {\n        whatsappMessage += `*Teléfono:* ${customerInfo.value.phone}\\n`;\n      }\n      if (customerInfo.value.email) {\n        whatsappMessage += `*Email:* ${customerInfo.value.email}\\n`;\n      }\n      if (customerInfo.value.address) {\n        whatsappMessage += `*Dirección:* ${customerInfo.value.address}\\n`;\n      }\n      if (additionalMessage.value) {\n        whatsappMessage += `\\n*Notas adicionales:*\\n${additionalMessage.value}\\n`;\n      }\n\n      // Añadir método de pago seleccionado\n      whatsappMessage += `\\n*Forma de pago:* ${selectedPaymentMethod.value === 'qr' ? 'Código QR' : selectedPaymentMethod.value === 'nequi' ? 'Nequi' : 'Contra entrega'}\\n`;\n\n      // Formato para URL de WhatsApp\n      const encodedMessage = encodeURIComponent(whatsappMessage);\n      const whatsappUrl = `https://wa.me/?text=${encodedMessage}`;\n\n      // Abrir WhatsApp en una nueva ventana\n      window.open(whatsappUrl, '_blank');\n    }\n\n    // Desplazarse a la sección del pedido\n    function scrollToOrder() {\n      const orderSection = document.querySelector('.order-section');\n      if (orderSection) {\n        orderSection.scrollIntoView({\n          behavior: 'smooth'\n        });\n      }\n    }\n\n    // Verificar disponibilidad de inventario\n    async function checkAvailability(item) {\n      // Obtener la disponibilidad base (valor original del inventario)\n      // Importante: asegurarse que sea un número\n      const baseAvailability = Number(item.availableQuantity) || 0;\n\n      // Verificación directa: si no hay stock, mostrar mensaje de error\n      if (baseAvailability <= 0) {\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\n        return false;\n      }\n\n      // Obtener la cantidad actual en el carrito\n      const cartItem = cartItems.value.find(i => i.id === item.id);\n      const cartQuantity = cartItem ? cartItem.quantity : 0;\n\n      // Calcular disponibilidad real\n      const realAvailability = baseAvailability - cartQuantity;\n\n      // Verificar la disponibilidad considerando lo que ya está en el carrito\n      if (realAvailability <= 0) {\n        showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\n        return false;\n      } else if (realAvailability <= 5) {\n        showToast(`¡Solo quedan ${realAvailability} unidades de \"${item.name}\"!`, 'warning');\n      }\n      return true;\n    }\n\n    // Actualizar inventario al completar pedido\n    async function updateInventory() {\n      try {\n        console.log('Actualizando inventario para los siguientes productos:');\n\n        // Usamos Promise.all para ejecutar todas las actualizaciones en paralelo\n        const updatePromises = cartItems.value.map(async item => {\n          if (!item.id) {\n            console.warn(`El producto ${item.name} no tiene ID, no se puede actualizar el inventario`);\n            return;\n          }\n          try {\n            // Obtener la disponibilidad actual\n            const storageService = await import('../services/storageService');\n            const availability = await storageService.checkItemAvailability(item.id);\n\n            // Validar que hay suficiente stock\n            if (availability.quantity < item.quantity) {\n              console.warn(`No hay suficiente stock para ${item.name}: disponible=${availability.quantity}, solicitado=${item.quantity}`);\n              return false;\n            }\n\n            // Calcular nueva cantidad\n            const newQuantity = Math.max(0, availability.quantity - item.quantity);\n\n            // Actualizar en la base de datos\n            await storageService.updateItemAvailability(item.id, newQuantity);\n            console.log(`- ${item.name}: ${item.quantity} unidades. Nuevo stock: ${newQuantity}`);\n\n            // Crear registro para el historial\n            const historyRecord = {\n              date: new Date().toISOString(),\n              type: 'decrease',\n              change: item.quantity,\n              previousQuantity: availability.quantity,\n              newQuantity: newQuantity,\n              reason: 'Pedido compartido por WhatsApp',\n              userId: null,\n              userName: 'Sistema'\n            };\n\n            // Añadir al historial (usando adminService para actualizaciones completas)\n            const adminService = await import('../services/adminService');\n            await adminService.updateItemStock(item.id, newQuantity, historyRecord);\n            return true;\n          } catch (error) {\n            console.error(`Error al actualizar el producto ${item.name}:`, error);\n            return false;\n          }\n        });\n\n        // Esperar a que todas las actualizaciones se completen\n        const results = await Promise.all(updatePromises);\n\n        // Verificar si todas las actualizaciones fueron exitosas\n        const allSuccessful = results.every(result => result !== false);\n\n        // Mostrar mensaje apropiado\n        if (allSuccessful) {\n          showToast('Inventario actualizado correctamente', 'success');\n        } else {\n          showToast('Algunos productos no pudieron ser actualizados', 'warning');\n        }\n        return allSuccessful;\n      } catch (error) {\n        console.error('Error al actualizar inventario:', error);\n        return false; // Error\n      }\n    }\n\n    // Añadir después de la función checkAvailability (línea 585)\n    // Función para actualizar la disponibilidad en tiempo real\n    function updateAvailabilityInMenu() {\n      if (!menuData.value?.items) return;\n\n      // Actualizar la disponibilidad de todos los ítems\n      menuData.value.items.forEach(menuItem => {\n        // Encontrar si este ítem está en el carrito\n        const cartItem = cartItems.value.find(i => i.id === menuItem.id);\n        const cartQuantity = cartItem ? cartItem.quantity : 0;\n\n        // Asegurarse de que availableQuantity sea un número exacto, no undefined o null\n        const baseAvailability = Number(menuItem.availableQuantity) || 0;\n\n        // Calcular disponibilidad real\n        menuItem.realAvailability = baseAvailability - cartQuantity;\n        console.log(`Disponibilidad actualizada para ${menuItem.name}: ${menuItem.realAvailability} unidades (base: ${baseAvailability}, carrito: ${cartQuantity})`);\n      });\n    }\n\n    // Datos del cliente\n    const customerInfo = ref({\n      name: '',\n      phone: '',\n      email: '',\n      address: ''\n    });\n\n    // Método de pago seleccionado\n    const selectedPaymentMethod = ref('cash'); // Por defecto contra entrega\n\n    // Mensaje adicional\n    const additionalMessage = ref('');\n\n    // Filtrar items regulares y especiales\n    const regularItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      const filtered = menuData.value.items.filter(item => !item.isSpecial);\n      console.log('Platos regulares:', filtered.length, filtered.map(i => i.name));\n      return filtered;\n    });\n    const specialItems = computed(() => {\n      if (!menuData.value || !menuData.value.items) return [];\n      const filtered = menuData.value.items.filter(item => item.isSpecial === true);\n      console.log('Platos especiales:', filtered.length, filtered.map(i => i.name));\n      return filtered;\n    });\n    return {\n      menuData,\n      isLoading,\n      error,\n      cartItems,\n      cartTotal,\n      totalItems,\n      hasPaymentInfo,\n      regularItems,\n      specialItems,\n      formatPrice,\n      addToCart,\n      increaseQuantity,\n      decreaseQuantity,\n      removeFromCart,\n      completeOrder,\n      scrollToOrder,\n      shareOrderByWhatsApp,\n      orderRef,\n      customerInfo,\n      selectedPaymentMethod,\n      additionalMessage,\n      toast // Añadir el toast al objeto return\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useRoute","getSharedMenu","name","setup","route","menuData","items","businessInfo","isLoading","error","cartItems","orderRef","isProcessingOrder","console","log","params","id","toast","visible","message","type","timeoutId","loadMenu","value","savedCart","localStorage","getItem","JSON","parse","e","data","forEach","item","availableQuantity","undefined","Number","realAvailability","updateAvailabilityInMenu","setTimeout","showToast","err","hasPaymentInfo","paymentInfo","qrImage","nequiNumber","nequiImage","totalItems","reduce","total","quantity","cartTotal","price","formatPrice","isNaN","numero","toFixed","parteEntera","parteDecimal","split","parteEnteraFormateada","replace","addToCart","isAvailable","checkAvailability","existingItem","find","i","push","Date","now","toString","saveCartToLocalStorage","duration","clearTimeout","setItem","stringify","increaseQuantity","index","menuItem","decreaseQuantity","removeFromCart","splice","completeOrder","length","customerInfo","phone","updateInventory","openWhatsAppShare","email","address","additionalMessage","shareOrderByWhatsApp","whatsappMessage","subtotal","selectedPaymentMethod","encodedMessage","encodeURIComponent","whatsappUrl","window","open","scrollToOrder","orderSection","document","querySelector","scrollIntoView","behavior","baseAvailability","cartItem","cartQuantity","updatePromises","map","warn","storageService","availability","checkItemAvailability","newQuantity","Math","max","updateItemAvailability","historyRecord","date","toISOString","change","previousQuantity","reason","userId","userName","adminService","updateItemStock","results","Promise","all","allSuccessful","every","result","regularItems","filtered","filter","isSpecial","specialItems"],"sources":["F:\\Driver google\\VUE.JS-2\\temp\\websap\\src\\views\\SharedMenuView.vue"],"sourcesContent":["<template>\r\n  <div class=\"shared-menu-container\">\r\n    <div v-if=\"isLoading\" class=\"loading\">\r\n      <div class=\"spinner\"></div>\r\n      <p>Cargando menú...</p>\r\n    </div>\r\n    \r\n    <div v-else-if=\"error\" class=\"error\">\r\n      <p>{{ error }}</p>\r\n    </div>\r\n    \r\n    <div v-else class=\"menu-content\">\r\n      <!-- Información del negocio -->\r\n      <div v-if=\"menuData.businessInfo\" class=\"business-info\">\r\n        <img v-if=\"menuData.businessInfo.logo\" :src=\"menuData.businessInfo.logo\" alt=\"Logo\" class=\"business-logo\">\r\n        <h1>{{ menuData.businessInfo.name }}</h1>\r\n        <p class=\"description\">{{ menuData.businessInfo.description }}</p>\r\n        <div class=\"contact-info\" v-if=\"menuData.businessInfo.contact || menuData.businessInfo.address\">\r\n          <p v-if=\"menuData.businessInfo.contact\"><strong>Contacto:</strong> {{ menuData.businessInfo.contact }}</p>\r\n          <p v-if=\"menuData.businessInfo.address\"><strong>Dirección:</strong> {{ menuData.businessInfo.address }}</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Lista de productos -->\r\n      <div>\r\n        <!-- Platos regulares -->\r\n        <div class=\"menu-list\">\r\n          <h2>Nuestro Menú</h2>\r\n          <div class=\"menu-items\">\r\n            <div v-for=\"(item, index) in regularItems\" :key=\"index\" class=\"menu-item\">\r\n              <div class=\"item-image-container\">\r\n                <img v-if=\"item.image\" :src=\"item.image\" alt=\"Imagen del producto\" class=\"item-image\">\r\n                <div v-else class=\"no-image\">Sin imagen</div>\r\n              </div>\r\n              <div class=\"item-details\">\r\n                <h3>{{ item.name }}</h3>\r\n                <p class=\"item-description\">{{ item.description }}</p>\r\n                <p class=\"item-price\">${{ formatPrice(item.price) }}</p>\r\n                <p class=\"includes-drink\" v-if=\"item.includesDrink\">Incluye refresco</p>\r\n                <button \r\n                  @click=\"addToCart(item)\" \r\n                  class=\"add-to-cart-btn\"\r\n                  :disabled=\"!item.realAvailability || item.realAvailability <= 0\"\r\n                  :class=\"{ 'disabled-btn': !item.realAvailability || item.realAvailability <= 0 }\"\r\n                >\r\n                  <span v-if=\"!item.realAvailability || item.realAvailability <= 0\" class=\"btn-icon\">❌</span>\r\n                  <span v-else class=\"btn-icon\">🛒</span>\r\n                  {{ !item.realAvailability || item.realAvailability <= 0 ? 'No disponible' : 'Añadir al pedido' }}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Platos especiales (solo se muestra si hay platos especiales) -->\r\n        <div v-if=\"specialItems.length > 0\" class=\"menu-list special-menu-list\">\r\n          <h2>Platos Especiales</h2>\r\n          <div class=\"menu-items\">\r\n            <div v-for=\"(item, index) in specialItems\" :key=\"index\" class=\"menu-item special-item\">\r\n              <div class=\"item-image-container\">\r\n                <img v-if=\"item.image\" :src=\"item.image\" alt=\"Imagen del producto\" class=\"item-image\">\r\n                <div v-else class=\"no-image\">Sin imagen</div>\r\n              </div>\r\n              <div class=\"item-details\">\r\n                <h3>{{ item.name }}</h3>\r\n                <p class=\"item-description\">{{ item.description }}</p>\r\n                <p class=\"item-price\">${{ formatPrice(item.price) }}</p>\r\n                <p class=\"includes-drink\" v-if=\"item.includesDrink\">Incluye refresco</p>\r\n                <button \r\n                  @click=\"addToCart(item)\" \r\n                  class=\"add-to-cart-btn special-button\"\r\n                  :disabled=\"!item.realAvailability || item.realAvailability <= 0\"\r\n                  :class=\"{ 'disabled-btn': !item.realAvailability || item.realAvailability <= 0 }\"\r\n                >\r\n                  <span v-if=\"!item.realAvailability || item.realAvailability <= 0\" class=\"btn-icon\">❌</span>\r\n                  <span v-else class=\"btn-icon\">🛒</span>\r\n                  {{ !item.realAvailability || item.realAvailability <= 0 ? 'No disponible' : 'Añadir al pedido' }}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Sección de \"Tu Pedido\" - Siempre visible aunque vacía -->\r\n      <div class=\"order-section\" ref=\"orderSection\">\r\n        <h2>Tu Pedido</h2>\r\n        \r\n        <div v-if=\"cartItems.length === 0\" class=\"empty-cart\">\r\n          <p>Tu pedido está vacío</p>\r\n          <p class=\"empty-cart-message\">Añade productos del menú para comenzar tu pedido</p>\r\n        </div>\r\n        \r\n        <div v-else class=\"cart-items\">\r\n          <div v-for=\"(item, index) in cartItems\" :key=\"index\" class=\"cart-item\">\r\n            <div class=\"cart-item-details\">\r\n              <h3>{{ item.name }}</h3>\r\n              <p>${{ formatPrice(item.price) }} x {{ item.quantity }}</p>\r\n            </div>\r\n            <div class=\"cart-item-actions\">\r\n              <button @click=\"decreaseQuantity(index)\" class=\"quantity-btn\">-</button>\r\n              <span class=\"quantity-display\">{{ item.quantity }}</span>\r\n              <button @click=\"increaseQuantity(index)\" class=\"quantity-btn\">+</button>\r\n              <button @click=\"removeFromCart(index)\" class=\"remove-btn\">\r\n                <span class=\"btn-icon\">🗑️</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"cart-total\">\r\n            <h3>Total: ${{ formatPrice(cartTotal) }}</h3>\r\n            \r\n            <!-- Formulario de datos del cliente -->\r\n            <div class=\"customer-form\">\r\n              <h4>Datos del Cliente</h4>\r\n              <div class=\"form-row\">\r\n                <input type=\"text\" v-model=\"customerInfo.name\" placeholder=\"Nombres completos\" class=\"form-input\">\r\n              </div>\r\n              <div class=\"form-row\">\r\n                <input type=\"tel\" v-model=\"customerInfo.phone\" placeholder=\"Teléfono\" class=\"form-input\">\r\n              </div>\r\n              <div class=\"form-row\">\r\n                <input type=\"email\" v-model=\"customerInfo.email\" placeholder=\"Correo electrónico\" class=\"form-input\">\r\n              </div>\r\n              <div class=\"form-row\">\r\n                <input type=\"text\" v-model=\"customerInfo.address\" placeholder=\"Dirección de entrega\" class=\"form-input\">\r\n              </div>\r\n              \r\n              <!-- Lista horizontal de métodos de pago -->\r\n              <div class=\"payment-methods-selection\">\r\n                <h4>Forma de Pago</h4>\r\n                <div class=\"payment-options\">\r\n                  <label class=\"payment-option\">\r\n                    <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"qr\" name=\"paymentMethod\">\r\n                    <span class=\"payment-option-text\">QR</span>\r\n                  </label>\r\n                  <label class=\"payment-option\">\r\n                    <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"nequi\" name=\"paymentMethod\">\r\n                    <span class=\"payment-option-text\">Nequi</span>\r\n                  </label>\r\n                  <label class=\"payment-option\">\r\n                    <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"cash\" name=\"paymentMethod\">\r\n                    <span class=\"payment-option-text\">Contra entrega</span>\r\n                  </label>\r\n                </div>\r\n              </div>\r\n              \r\n              <!-- Campo de mensaje adicional -->\r\n              <div class=\"form-row\">\r\n                <textarea v-model=\"additionalMessage\" placeholder=\"Mensaje o instrucciones adicionales\" class=\"form-textarea\"></textarea>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"order-actions\">\r\n              <button @click=\"completeOrder\" class=\"complete-order-btn\">\r\n                <span class=\"btn-icon\">✓</span> Completar Pedido\r\n              </button>\r\n              <button @click=\"shareOrderByWhatsApp\" class=\"whatsapp-order-btn\">\r\n                <span class=\"btn-icon\">📱</span> Enviar por WhatsApp\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Botón flotante para ver pedido (visible cuando hay items y se hace scroll) -->\r\n      <div v-if=\"cartItems.length > 0\" class=\"floating-cart-button\" @click=\"scrollToOrder\">\r\n        <span class=\"cart-items-count\">{{ totalItems }}</span>\r\n        <span>Ver Pedido</span>\r\n      </div>\r\n      \r\n      <!-- Nueva sección: Forma de Pago -->\r\n      <div v-if=\"hasPaymentInfo\" class=\"payment-section\">\r\n        <h2>Forma de Pago</h2>\r\n        <div class=\"payment-methods\">\r\n          <div v-if=\"menuData.businessInfo?.paymentInfo?.qrImage\" class=\"payment-method\">\r\n            <h3>{{ menuData.businessInfo.paymentInfo.qrTitle || 'Código QR de Pago' }}</h3>\r\n            <img \r\n              :src=\"menuData.businessInfo.paymentInfo.qrImage\" \r\n              alt=\"QR de Pago\" \r\n              class=\"payment-image\"\r\n            >\r\n          </div>\r\n          \r\n          <div v-if=\"menuData.businessInfo?.paymentInfo?.nequiNumber || menuData.businessInfo?.paymentInfo?.nequiImage\" class=\"payment-method\">\r\n            <h3>Pago con Nequi</h3>\r\n            <img \r\n              v-if=\"menuData.businessInfo.paymentInfo.nequiImage\" \r\n              :src=\"menuData.businessInfo.paymentInfo.nequiImage\" \r\n              alt=\"Nequi\" \r\n              class=\"payment-image\"\r\n            >\r\n            <p v-if=\"menuData.businessInfo.paymentInfo.nequiNumber\" class=\"payment-detail\">\r\n              <strong>Número:</strong> {{ menuData.businessInfo.paymentInfo.nequiNumber }}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Sistema de notificaciones toast -->\r\n      <div v-if=\"toast.visible\" \r\n           class=\"toast-notification\" \r\n           :class=\"toast.type\">\r\n        {{ toast.message }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted } from 'vue';\r\nimport { useRoute } from 'vue-router';\r\nimport { getSharedMenu } from '../services/menuService';\r\n\r\nexport default {\r\n  name: 'SharedMenuView',\r\n  setup() {\r\n    const route = useRoute();\r\n    const menuData = ref({ items: [], businessInfo: {} });\r\n    const isLoading = ref(true);\r\n    const error = ref(null);\r\n    const cartItems = ref([]);\r\n    const orderRef = ref(null);\r\n    const isProcessingOrder = ref(false);\r\n    \r\n    console.log(\"SharedMenuView montado, ID del menú:\", route.params.id);\r\n\r\n    // Sistema de notificaciones toast\r\n    const toast = ref({\r\n      visible: false,\r\n      message: '',\r\n      type: 'success', // 'success', 'warning', 'error'\r\n      timeoutId: null\r\n    });\r\n\r\n    // Cargar menú cuando el componente se monte\r\n    onMounted(() => {\r\n      loadMenu();\r\n    });\r\n\r\n    // Cargar el menú desde la API\r\n    async function loadMenu() {\r\n      try {\r\n        isLoading.value = true;\r\n        console.log(\"Cargando menú con ID:\", route.params.id);\r\n        \r\n        if (!route.params.id) {\r\n          error.value = 'ID de menú no especificado';\r\n          isLoading.value = false;\r\n          return;\r\n        }\r\n        \r\n        // Intenta cargar desde localStorage primero (por si hay un carrito guardado)\r\n        const savedCart = localStorage.getItem(`cart_${route.params.id}`);\r\n        if (savedCart) {\r\n          try {\r\n            cartItems.value = JSON.parse(savedCart);\r\n            console.log(\"Carrito recuperado de localStorage:\", cartItems.value);\r\n          } catch (e) {\r\n            console.error(\"Error al parsear carrito de localStorage:\", e);\r\n          }\r\n        }\r\n        \r\n        const data = await getSharedMenu(route.params.id);\r\n        \r\n        if (data) {\r\n          menuData.value = data;\r\n          console.log(\"Menú cargado con éxito:\", menuData.value);\r\n          \r\n          // Inicializar disponibilidad para cada ítem\r\n          if (menuData.value.items) {\r\n            menuData.value.items.forEach(item => {\r\n              // Si la disponibilidad es explícitamente 0, mantenerla así\r\n              // Si es undefined o null, usar 0 en lugar de un valor predeterminado de 10\r\n              item.availableQuantity = item.availableQuantity !== undefined ? \r\n                Number(item.availableQuantity) : 0;\r\n              item.realAvailability = item.availableQuantity;\r\n            });\r\n          }\r\n          \r\n          // Actualizar disponibilidad real considerando el carrito\r\n          updateAvailabilityInMenu();\r\n          \r\n          // Mostrar toast al cargar el menú correctamente\r\n          setTimeout(() => {\r\n            showToast('Menú cargado correctamente', 'success', 5000);\r\n          }, 1000);\r\n        } else {\r\n          error.value = \"No se encontró el menú solicitado\";\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error al cargar el menú:\", err);\r\n        error.value = `Error al cargar el menú: ${err.message || 'Error desconocido'}`;\r\n      } finally {\r\n        isLoading.value = false;\r\n      }\r\n    }\r\n\r\n    // Verificar si hay información de pago\r\n    const hasPaymentInfo = computed(() => {\r\n      return menuData.value?.businessInfo?.paymentInfo && (\r\n        menuData.value.businessInfo.paymentInfo.qrImage ||\r\n        menuData.value.businessInfo.paymentInfo.nequiNumber ||\r\n        menuData.value.businessInfo.paymentInfo.nequiImage\r\n      );\r\n    });\r\n    \r\n    // Contador total de items\r\n    const totalItems = computed(() => {\r\n      return cartItems.value.reduce((total, item) => total + item.quantity, 0);\r\n    });\r\n\r\n    // Total del carrito\r\n    const cartTotal = computed(() => {\r\n      return cartItems.value.reduce((total, item) => {\r\n        return total + (item.price * item.quantity);\r\n      }, 0);\r\n    });\r\n\r\n    // Formatear precio\r\n    function formatPrice(price) {\r\n      if (isNaN(Number(price))) return '0,00';\r\n      \r\n      // Convertir a número y formatear con 2 decimales fijos\r\n      const numero = Number(price).toFixed(2);\r\n      \r\n      // Separar parte entera y decimal\r\n      const [parteEntera, parteDecimal] = numero.split('.');\r\n      \r\n      // Formatear parte entera con puntos como separadores de miles\r\n      const parteEnteraFormateada = parteEntera.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\r\n      \r\n      // Unir con coma como separador decimal\r\n      return `${parteEnteraFormateada},${parteDecimal}`;\r\n    }\r\n\r\n    // Agregar al carrito con verificación de disponibilidad\r\n    async function addToCart(item) {\r\n      // Verificación directa antes de hacer la comprobación completa\r\n      if (Number(item.availableQuantity) <= 0) {\r\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\r\n        return;\r\n      }\r\n      \r\n      const isAvailable = await checkAvailability(item);\r\n      if (!isAvailable) return;\r\n      \r\n      const existingItem = cartItems.value.find(i => {\r\n        // Asegurar que ambos items tienen ID y compararlos, o comparar por nombre si no hay ID\r\n        if (item.id && i.id) {\r\n          return i.id === item.id;\r\n        }\r\n        return i.name === item.name;\r\n      });\r\n      \r\n      if (existingItem) {\r\n        existingItem.quantity++;\r\n      } else {\r\n        cartItems.value.push({\r\n          id: item.id || Date.now().toString(),\r\n          name: item.name,\r\n          price: item.price,\r\n          quantity: 1,\r\n          availableQuantity: item.availableQuantity || 0 // Usar 0 como valor por defecto\r\n        });\r\n      }\r\n      \r\n      // Guardar carrito en localStorage\r\n      saveCartToLocalStorage();\r\n      \r\n      // Actualizar la disponibilidad en tiempo real\r\n      updateAvailabilityInMenu();\r\n      \r\n      // Mostrar notificación de éxito\r\n      showToast(`${item.name} añadido al carrito`, 'success');\r\n    }\r\n    \r\n    // Mostrar notificaciones toast\r\n    function showToast(message, type = 'success', duration = 5000) { // Aumentar a 5 segundos\r\n      console.log(`[Toast] Mostrando notificación: ${message} (${type})`);\r\n      \r\n      // Si ya hay un toast visible, limpiamos su timeout\r\n      if (toast.value.timeoutId) {\r\n        clearTimeout(toast.value.timeoutId);\r\n      }\r\n      \r\n      // Configurar el nuevo toast\r\n      toast.value.message = message;\r\n      toast.value.type = type;\r\n      toast.value.visible = true;\r\n      \r\n      // Debug: verificar que el estado del toast cambió\r\n      console.log(`[Toast] Estado: visible=${toast.value.visible}, message=${toast.value.message}`);\r\n      \r\n      // Configurar timeout para ocultar después de la duración\r\n      toast.value.timeoutId = setTimeout(() => {\r\n        console.log(`[Toast] Ocultando notificación después de ${duration}ms`);\r\n        toast.value.visible = false;\r\n      }, duration);\r\n    }\r\n\r\n    // Guardar carrito en localStorage\r\n    function saveCartToLocalStorage() {\r\n      try {\r\n        localStorage.setItem(`cart_${route.params.id}`, JSON.stringify(cartItems.value));\r\n      } catch (e) {\r\n        console.error(\"Error al guardar carrito en localStorage:\", e);\r\n      }\r\n    }\r\n\r\n    // Incrementar cantidad\r\n    function increaseQuantity(index) {\r\n      const item = cartItems.value[index];\r\n      \r\n      // Buscar el ítem en el menú\r\n      const menuItem = menuData.value.items?.find(i => i.id === item.id);\r\n      if (menuItem) {\r\n        // Verificar disponibilidad\r\n        const availableQuantity = menuItem.availableQuantity || 0;\r\n        if (item.quantity >= availableQuantity) {\r\n          showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\r\n          return;\r\n        }\r\n      }\r\n      \r\n      // Incrementar cantidad\r\n      item.quantity++;\r\n      \r\n      // Guardar carrito y actualizar disponibilidad\r\n      saveCartToLocalStorage();\r\n      updateAvailabilityInMenu();\r\n    }\r\n\r\n    // Reemplazar la función decreaseQuantity (líneas 409-416)\r\n    function decreaseQuantity(index) {\r\n      if (cartItems.value[index].quantity > 1) {\r\n        cartItems.value[index].quantity--;\r\n        saveCartToLocalStorage();\r\n        updateAvailabilityInMenu(); // Actualizar disponibilidad\r\n      } else {\r\n        removeFromCart(index);\r\n      }\r\n    }\r\n\r\n    // Reemplazar la función removeFromCart (líneas 419-422)\r\n    function removeFromCart(index) {\r\n      cartItems.value.splice(index, 1);\r\n      saveCartToLocalStorage();\r\n      updateAvailabilityInMenu(); // Actualizar disponibilidad\r\n    }\r\n    \r\n    // Completar pedido con actualización de inventario\r\n    async function completeOrder() {\r\n      try {\r\n        // Validaciones básicas\r\n        if (cartItems.value.length === 0) {\r\n          showToast('No hay ítems en el pedido', 'error');\r\n          return;\r\n        }\r\n        \r\n        if (!customerInfo.value.name || !customerInfo.value.phone) {\r\n          showToast('Por favor complete su nombre y teléfono', 'error');\r\n          return;\r\n        }\r\n        \r\n        // Indicar que está procesando\r\n        isProcessingOrder.value = true;\r\n        \r\n        // Actualizar inventario\r\n        await updateInventory();\r\n        \r\n        // Compartir en WhatsApp\r\n        openWhatsAppShare();\r\n        \r\n        showToast('¡Pedido completado! Gracias por tu compra.', 'success');\r\n        \r\n        // Limpiar carrito y datos del cliente después de completar\r\n        setTimeout(() => {\r\n          cartItems.value = [];\r\n          customerInfo.value = {\r\n            name: '',\r\n            phone: '',\r\n            email: '',\r\n            address: ''\r\n          };\r\n          additionalMessage.value = '';\r\n          isProcessingOrder.value = false;\r\n        }, 2000);\r\n      } catch (error) {\r\n        console.error('Error al completar el pedido:', error);\r\n        showToast('Error al procesar el pedido', 'error');\r\n        isProcessingOrder.value = false;\r\n      }\r\n    }\r\n\r\n    // Compartir pedido por WhatsApp sin actualizar inventario\r\n    function shareOrderByWhatsApp() {\r\n      // Validaciones básicas\r\n      if (cartItems.value.length === 0) {\r\n        showToast('No hay ítems en el pedido', 'error');\r\n        return;\r\n      }\r\n      \r\n      if (!customerInfo.value.name || !customerInfo.value.phone) {\r\n        showToast('Por favor complete su nombre y teléfono', 'error');\r\n        return;\r\n      }\r\n      \r\n      // Compartir directamente en WhatsApp sin actualizar inventario\r\n      openWhatsAppShare();\r\n      \r\n      showToast('Pedido compartido por WhatsApp', 'success');\r\n    }\r\n\r\n    function openWhatsAppShare() {\r\n      // Construir mensaje de pedido para WhatsApp\r\n      let whatsappMessage = `*Pedido de ${customerInfo.value.name}*\\n\\n`;\r\n      whatsappMessage += '*Productos:*\\n';\r\n      \r\n      cartItems.value.forEach(item => {\r\n        const subtotal = (item.price * item.quantity).toFixed(2);\r\n        whatsappMessage += `- ${item.quantity}x ${item.name}: $${formatPrice(item.price)} c/u = $${formatPrice(subtotal)}\\n`;\r\n      });\r\n      \r\n      whatsappMessage += `\\n*Total: $${formatPrice(cartTotal.value)}*\\n\\n`;\r\n      \r\n      if (customerInfo.value.phone) {\r\n        whatsappMessage += `*Teléfono:* ${customerInfo.value.phone}\\n`;\r\n      }\r\n      \r\n      if (customerInfo.value.email) {\r\n        whatsappMessage += `*Email:* ${customerInfo.value.email}\\n`;\r\n      }\r\n      \r\n      if (customerInfo.value.address) {\r\n        whatsappMessage += `*Dirección:* ${customerInfo.value.address}\\n`;\r\n      }\r\n      \r\n      if (additionalMessage.value) {\r\n        whatsappMessage += `\\n*Notas adicionales:*\\n${additionalMessage.value}\\n`;\r\n      }\r\n      \r\n      // Añadir método de pago seleccionado\r\n      whatsappMessage += `\\n*Forma de pago:* ${selectedPaymentMethod.value === 'qr' ? 'Código QR' : \r\n                           (selectedPaymentMethod.value === 'nequi' ? 'Nequi' : 'Contra entrega')}\\n`;\r\n      \r\n      // Formato para URL de WhatsApp\r\n      const encodedMessage = encodeURIComponent(whatsappMessage);\r\n      const whatsappUrl = `https://wa.me/?text=${encodedMessage}`;\r\n      \r\n      // Abrir WhatsApp en una nueva ventana\r\n      window.open(whatsappUrl, '_blank');\r\n    }\r\n\r\n    // Desplazarse a la sección del pedido\r\n    function scrollToOrder() {\r\n      const orderSection = document.querySelector('.order-section');\r\n      if (orderSection) {\r\n        orderSection.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    }\r\n\r\n    // Verificar disponibilidad de inventario\r\n    async function checkAvailability(item) {\r\n      // Obtener la disponibilidad base (valor original del inventario)\r\n      // Importante: asegurarse que sea un número\r\n      const baseAvailability = Number(item.availableQuantity) || 0;\r\n      \r\n      // Verificación directa: si no hay stock, mostrar mensaje de error\r\n      if (baseAvailability <= 0) {\r\n        showToast(`Lo sentimos, \"${item.name}\" no está disponible actualmente. Intente más tarde por favor.`, 'error');\r\n        return false;\r\n      }\r\n      \r\n      // Obtener la cantidad actual en el carrito\r\n      const cartItem = cartItems.value.find(i => i.id === item.id);\r\n      const cartQuantity = cartItem ? cartItem.quantity : 0;\r\n      \r\n      // Calcular disponibilidad real\r\n      const realAvailability = baseAvailability - cartQuantity;\r\n      \r\n      // Verificar la disponibilidad considerando lo que ya está en el carrito\r\n      if (realAvailability <= 0) {\r\n        showToast(`No hay más unidades disponibles de \"${item.name}\"`, 'warning');\r\n        return false;\r\n      } else if (realAvailability <= 5) {\r\n        showToast(`¡Solo quedan ${realAvailability} unidades de \"${item.name}\"!`, 'warning');\r\n      }\r\n      \r\n      return true;\r\n    }\r\n\r\n    // Actualizar inventario al completar pedido\r\n    async function updateInventory() {\r\n      try {\r\n        console.log('Actualizando inventario para los siguientes productos:');\r\n        \r\n        // Usamos Promise.all para ejecutar todas las actualizaciones en paralelo\r\n        const updatePromises = cartItems.value.map(async (item) => {\r\n          if (!item.id) {\r\n            console.warn(`El producto ${item.name} no tiene ID, no se puede actualizar el inventario`);\r\n            return;\r\n          }\r\n          \r\n          try {\r\n            // Obtener la disponibilidad actual\r\n            const storageService = await import('../services/storageService');\r\n            const availability = await storageService.checkItemAvailability(item.id);\r\n            \r\n            // Validar que hay suficiente stock\r\n            if (availability.quantity < item.quantity) {\r\n              console.warn(`No hay suficiente stock para ${item.name}: disponible=${availability.quantity}, solicitado=${item.quantity}`);\r\n              return false;\r\n            }\r\n            \r\n            // Calcular nueva cantidad\r\n            const newQuantity = Math.max(0, availability.quantity - item.quantity);\r\n            \r\n            // Actualizar en la base de datos\r\n            await storageService.updateItemAvailability(item.id, newQuantity);\r\n            \r\n            console.log(`- ${item.name}: ${item.quantity} unidades. Nuevo stock: ${newQuantity}`);\r\n            \r\n            // Crear registro para el historial\r\n            const historyRecord = {\r\n              date: new Date().toISOString(),\r\n              type: 'decrease',\r\n              change: item.quantity,\r\n              previousQuantity: availability.quantity,\r\n              newQuantity: newQuantity,\r\n              reason: 'Pedido compartido por WhatsApp',\r\n              userId: null,\r\n              userName: 'Sistema'\r\n            };\r\n            \r\n            // Añadir al historial (usando adminService para actualizaciones completas)\r\n            const adminService = await import('../services/adminService');\r\n            await adminService.updateItemStock(item.id, newQuantity, historyRecord);\r\n            \r\n            return true;\r\n          } catch (error) {\r\n            console.error(`Error al actualizar el producto ${item.name}:`, error);\r\n            return false;\r\n          }\r\n        });\r\n        \r\n        // Esperar a que todas las actualizaciones se completen\r\n        const results = await Promise.all(updatePromises);\r\n        \r\n        // Verificar si todas las actualizaciones fueron exitosas\r\n        const allSuccessful = results.every(result => result !== false);\r\n        \r\n        // Mostrar mensaje apropiado\r\n        if (allSuccessful) {\r\n          showToast('Inventario actualizado correctamente', 'success');\r\n        } else {\r\n          showToast('Algunos productos no pudieron ser actualizados', 'warning');\r\n        }\r\n        \r\n        return allSuccessful;\r\n      } catch (error) {\r\n        console.error('Error al actualizar inventario:', error);\r\n        return false; // Error\r\n      }\r\n    }\r\n\r\n    // Añadir después de la función checkAvailability (línea 585)\r\n    // Función para actualizar la disponibilidad en tiempo real\r\n    function updateAvailabilityInMenu() {\r\n      if (!menuData.value?.items) return;\r\n      \r\n      // Actualizar la disponibilidad de todos los ítems\r\n      menuData.value.items.forEach(menuItem => {\r\n        // Encontrar si este ítem está en el carrito\r\n        const cartItem = cartItems.value.find(i => i.id === menuItem.id);\r\n        const cartQuantity = cartItem ? cartItem.quantity : 0;\r\n        \r\n        // Asegurarse de que availableQuantity sea un número exacto, no undefined o null\r\n        const baseAvailability = Number(menuItem.availableQuantity) || 0;\r\n        \r\n        // Calcular disponibilidad real\r\n        menuItem.realAvailability = baseAvailability - cartQuantity;\r\n        \r\n        console.log(`Disponibilidad actualizada para ${menuItem.name}: ${menuItem.realAvailability} unidades (base: ${baseAvailability}, carrito: ${cartQuantity})`);\r\n      });\r\n    }\r\n\r\n    // Datos del cliente\r\n    const customerInfo = ref({\r\n      name: '',\r\n      phone: '',\r\n      email: '',\r\n      address: ''\r\n    });\r\n\r\n    // Método de pago seleccionado\r\n    const selectedPaymentMethod = ref('cash'); // Por defecto contra entrega\r\n\r\n    // Mensaje adicional\r\n    const additionalMessage = ref('');\r\n\r\n    // Filtrar items regulares y especiales\r\n    const regularItems = computed(() => {\r\n      if (!menuData.value || !menuData.value.items) return [];\r\n      const filtered = menuData.value.items.filter(item => !item.isSpecial);\r\n      console.log('Platos regulares:', filtered.length, filtered.map(i => i.name));\r\n      return filtered;\r\n    });\r\n\r\n    const specialItems = computed(() => {\r\n      if (!menuData.value || !menuData.value.items) return [];\r\n      const filtered = menuData.value.items.filter(item => item.isSpecial === true);\r\n      console.log('Platos especiales:', filtered.length, filtered.map(i => i.name));\r\n      return filtered;\r\n    });\r\n\r\n    return {\r\n      menuData,\r\n      isLoading,\r\n      error,\r\n      cartItems,\r\n      cartTotal,\r\n      totalItems,\r\n      hasPaymentInfo,\r\n      regularItems,\r\n      specialItems,\r\n      formatPrice,\r\n      addToCart,\r\n      increaseQuantity,\r\n      decreaseQuantity,\r\n      removeFromCart,\r\n      completeOrder,\r\n      scrollToOrder,\r\n      shareOrderByWhatsApp,\r\n      orderRef,\r\n      customerInfo,\r\n      selectedPaymentMethod,\r\n      additionalMessage,\r\n      toast  // Añadir el toast al objeto return\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n\r\n<style scoped>\r\n.shared-menu-container {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  font-family: 'Arial', sans-serif;\r\n}\r\n\r\n.loading, .error {\r\n  text-align: center;\r\n  padding: 50px;\r\n  font-size: 18px;\r\n}\r\n\r\n.error {\r\n  color: #d9534f;\r\n}\r\n\r\n.business-info {\r\n  text-align: center;\r\n  margin-bottom: 40px;\r\n  padding: 20px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.business-logo {\r\n  max-width: 100%;\r\n  max-height: 150px;\r\n  object-fit: contain;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.business-info h1 {\r\n  color: #343a40;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.description {\r\n  font-style: italic;\r\n  color: #6c757d;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.contact-info {\r\n  font-size: 14px;\r\n  color: #495057;\r\n}\r\n\r\n.menu-list {\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.menu-list h2 {\r\n  color: #28a745;\r\n  font-size: 24px;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  padding-bottom: 10px;\r\n  border-bottom: 2px solid #28a745;\r\n}\r\n\r\n.menu-items {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.menu-item {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.menu-item:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 5px 15px rgba(0,0,0,0.2);\r\n}\r\n\r\n.item-image-container {\r\n  width: 100%;\r\n  height: 200px;\r\n  overflow: hidden;\r\n}\r\n\r\n.item-image {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.no-image {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #f8f9fa;\r\n  color: #6c757d;\r\n  font-style: italic;\r\n}\r\n\r\n.item-details {\r\n  padding: 15px;\r\n}\r\n\r\n.item-details h3 {\r\n  margin-top: 0;\r\n  color: #343a40;\r\n  font-size: 18px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.item-description {\r\n  color: #6c757d;\r\n  font-size: 14px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.item-price {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  color: #28a745;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.includes-drink {\r\n  font-size: 14px;\r\n  color: #6c757d;\r\n  font-style: italic;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.add-to-cart-btn {\r\n  width: 100%;\r\n  padding: 8px 15px;\r\n  background-color: #28a745;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  font-weight: bold;\r\n}\r\n\r\n.add-to-cart-btn:hover {\r\n  background-color: #218838;\r\n}\r\n\r\n/* Estilos mejorados para la sección de \"Tu Pedido\" */\r\n.order-section {\r\n  margin: 30px auto;\r\n  padding: 20px;\r\n  background-color: #f8f9fa;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  max-width: 800px;\r\n  border: 2px solid #28a745;\r\n  position: relative;\r\n}\r\n\r\n.order-section::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: -10px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  width: 0;\r\n  height: 0;\r\n  border-left: 10px solid transparent;\r\n  border-right: 10px solid transparent;\r\n  border-bottom: 10px solid #28a745;\r\n}\r\n\r\n.order-section h2 {\r\n  color: #343a40;\r\n  font-size: 24px;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  padding-bottom: 10px;\r\n  border-bottom: 2px solid #28a745;\r\n}\r\n\r\n.cart-items {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.cart-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 15px;\r\n  border-bottom: 1px solid #dee2e6;\r\n  animation: fadeIn 0.3s ease;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; transform: translateY(-10px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n\r\n.cart-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.cart-item-details h3 {\r\n  margin: 0 0 5px 0;\r\n  font-size: 16px;\r\n}\r\n\r\n.cart-item-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.quantity-btn {\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 50%;\r\n  background-color: #f8f9fa;\r\n  border: 1px solid #28a745;\r\n  color: #28a745;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.quantity-btn:hover {\r\n  background-color: #28a745;\r\n  color: white;\r\n}\r\n\r\n.remove-btn {\r\n  padding: 5px 10px;\r\n  background-color: #dc3545;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.remove-btn:hover {\r\n  background-color: #c82333;\r\n}\r\n\r\n.cart-total {\r\n  text-align: right;\r\n  padding-top: 15px;\r\n  border-top: 2px solid #28a745;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n  gap: 10px;\r\n}\r\n\r\n.cart-total h3 {\r\n  color: #343a40;\r\n  margin: 0;\r\n}\r\n\r\n/* Botón flotante para ver pedido */\r\n.floating-cart-button {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  background-color: #28a745;\r\n  color: white;\r\n  border-radius: 50px;\r\n  padding: 10px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.2);\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  z-index: 98; /* Mantener por debajo del toast (9999) */\r\n  font-weight: bold;\r\n}\r\n\r\n.floating-cart-button:hover {\r\n  transform: translateY(-3px);\r\n  box-shadow: 0 6px 15px rgba(0,0,0,0.25);\r\n}\r\n\r\n.cart-items-count {\r\n  background-color: white;\r\n  color: #28a745;\r\n  border-radius: 50%;\r\n  width: 24px;\r\n  height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-weight: bold;\r\n}\r\n\r\n/* Estilos para la sección de forma de pago */\r\n.payment-section {\r\n  margin: 30px auto;\r\n  padding: 20px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n  max-width: 800px;\r\n}\r\n\r\n.payment-section h2 {\r\n  color: #333;\r\n  font-size: 1.5rem;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n  border-bottom: 2px solid #4CAF50;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n.payment-methods {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  justify-content: center;\r\n}\r\n\r\n.payment-method {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n  padding: 15px;\r\n  width: 280px;\r\n  text-align: center;\r\n}\r\n\r\n.payment-method h3 {\r\n  margin-top: 0;\r\n  color: #333;\r\n  font-size: 1.2rem;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.payment-image {\r\n  width: 200px;\r\n  height: 200px;\r\n  object-fit: contain;\r\n  margin: 0 auto;\r\n  display: block;\r\n}\r\n\r\n.payment-detail {\r\n  margin-top: 15px;\r\n  font-size: 1rem;\r\n}\r\n\r\n@media (max-width: 640px) {\r\n  .payment-methods {\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n  \r\n  .payment-method {\r\n    width: 100%;\r\n  }\r\n  \r\n  .floating-cart-button {\r\n    bottom: 10px;\r\n    right: 10px;\r\n    padding: 8px 16px;\r\n    font-size: 14px;\r\n  }\r\n}\r\n\r\n/* Spinner de carga mejorado */\r\n.loading {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 80px 20px;\r\n  text-align: center;\r\n}\r\n\r\n.spinner {\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 5px solid #f3f3f3;\r\n  border-top: 5px solid #28a745;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n/* Mejoras en la sección de Tu Pedido */\r\n.empty-cart {\r\n  padding: 40px 0;\r\n  text-align: center;\r\n  color: #6c757d;\r\n}\r\n\r\n.empty-cart p {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.empty-cart-message {\r\n  font-style: italic;\r\n  font-size: 14px;\r\n}\r\n\r\n/* Notificación de producto añadido */\r\n.add-to-cart-notification {\r\n  position: fixed;\r\n  bottom: -60px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  background-color: #28a745;\r\n  color: white;\r\n  padding: 12px 25px;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.2);\r\n  transition: bottom 0.5s ease;\r\n  z-index: 1000;\r\n}\r\n\r\n.add-to-cart-notification.show {\r\n  bottom: 30px;\r\n}\r\n\r\n/* Mejoras en botones */\r\n.btn-icon {\r\n  margin-right: 5px;\r\n}\r\n\r\n.add-to-cart-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  padding: 10px 15px;\r\n  background-color: #28a745;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  font-weight: bold;\r\n}\r\n\r\n.add-to-cart-btn:hover {\r\n  background-color: #218838;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.quantity-display {\r\n  min-width: 30px;\r\n  text-align: center;\r\n  font-weight: bold;\r\n}\r\n\r\n/* Estilos para acciones de pedido */\r\n.order-actions {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  margin-top: 15px;\r\n  gap: 10px;\r\n}\r\n\r\n.complete-order-btn,\r\n.whatsapp-order-btn {\r\n  border: none;\r\n  padding: 12px 20px;\r\n  border-radius: 4px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.3s ease;\r\n  gap: 8px;\r\n  height: 48px;\r\n  font-size: 16px;\r\n  width: 100%;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n}\r\n\r\n.complete-order-btn {\r\n  background-color: #28a745;\r\n  color: white;\r\n  margin: 0;\r\n}\r\n\r\ncomplete-order-btn:hover {\r\n  background-color: #218838;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n}\r\n\r\n.whatsapp-order-btn {\r\n  background-color: #25D366;\r\n  color: white;\r\n  margin: 0;\r\n}\r\n\r\n.whatsapp-order-btn:hover {\r\n  background-color: #128C7E;\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n}\r\n\r\n.btn-icon {\r\n  font-size: 18px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .order-actions {\r\n    flex-direction: row;\r\n    gap: 15px;\r\n  }\r\n  \r\n  .complete-order-btn,\r\n  .whatsapp-order-btn {\r\n    flex: 1;\r\n  }\r\n}\r\n\r\n/* Estilos para el formulario de cliente */\r\n.customer-form {\r\n  width: 100%;\r\n  margin: 20px 0;\r\n  padding: 15px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 8px;\r\n  border: 1px solid #e0e0e0;\r\n}\r\n\r\n.customer-form h4 {\r\n  margin: 0 0 15px 0;\r\n  color: #333;\r\n  font-size: 16px;\r\n  border-bottom: 1px solid #ddd;\r\n  padding-bottom: 8px;\r\n}\r\n\r\n.form-row {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.form-input, .form-textarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  transition: border-color 0.3s;\r\n}\r\n\r\n.form-input:focus, .form-textarea:focus {\r\n  border-color: #28a745;\r\n  outline: none;\r\n}\r\n\r\n.form-textarea {\r\n  min-height: 80px;\r\n  resize: vertical;\r\n}\r\n\r\n/* Estilos para las opciones de pago */\r\n.payment-methods-selection {\r\n  margin: 15px 0;\r\n}\r\n\r\n.payment-methods-selection h4 {\r\n  margin: 0 0 15px 0;\r\n  color: #333;\r\n  font-size: 16px;\r\n  border-bottom: 1px solid #ddd;\r\n  padding-bottom: 8px;\r\n}\r\n\r\n.payment-options {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 15px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.payment-option {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n  border: 1px solid #ddd;\r\n  padding: 8px 15px;\r\n  border-radius: 20px;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.payment-option:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n.payment-option input[type=\"radio\"] {\r\n  margin: 0;\r\n}\r\n\r\n.payment-option input[type=\"radio\"]:checked + .payment-option-text {\r\n  font-weight: bold;\r\n  color: #28a745;\r\n}\r\n\r\n.payment-option:has(input[type=\"radio\"]:checked) {\r\n  border-color: #28a745;\r\n  background-color: rgba(40, 167, 69, 0.1);\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .payment-options {\r\n    flex-direction: column;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .payment-option {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n/* Agregar al final del <style> */\r\n.special-menu-list h2 {\r\n  color: #d4af37; /* Color dorado para el título de platos especiales */\r\n  border-bottom-color: #d4af37;\r\n}\r\n\r\n.special-item {\r\n  border: 2px solid #d4af37;\r\n  position: relative;\r\n}\r\n\r\n.special-item::before {\r\n  content: '★ Especial';\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  background-color: #d4af37;\r\n  color: white;\r\n  padding: 5px 10px;\r\n  border-radius: 20px;\r\n  z-index: 2;\r\n}\r\n\r\n.special-button {\r\n  background-color: #d4af37;\r\n}\r\n\r\n.special-button:hover {\r\n  background-color: #c6a22c;\r\n}\r\n\r\n/* Estilos para la notificación toast */\r\n.toast-notification {\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 20px;\r\n  padding: 15px 25px;\r\n  border-radius: 5px;\r\n  z-index: 9999 !important; /* Asegurar que esté por encima de todo */\r\n  color: white;\r\n  font-weight: bold;\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.3);\r\n  animation: slideIn 0.5s;\r\n  max-width: 300px;\r\n  font-size: 16px !important;\r\n  opacity: 0.95 !important;\r\n  transform: scale(1.05); /* Ligeramente más grande */\r\n  border: 2px solid rgba(255,255,255,0.2);\r\n}\r\n\r\n.toast-notification.success {\r\n  background-color: #28a745 !important;\r\n}\r\n\r\n.toast-notification.warning {\r\n  background-color: #ffc107 !important;\r\n  color: #333 !important;\r\n  border-color: #333 !important;\r\n}\r\n\r\n.toast-notification.error {\r\n  background-color: #dc3545 !important;\r\n}\r\n\r\n@keyframes slideIn {\r\n  from { \r\n    transform: translateY(-50px) scale(0.8); \r\n    opacity: 0; \r\n  }\r\n  to { \r\n    transform: translateY(0) scale(1.05); \r\n    opacity: 0.95 !important; \r\n  }\r\n}\r\n\r\n.menu-content {\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n/* Estilos de depuración - para remover después */\r\n.toast-notification::before {\r\n  content: '✓';\r\n  position: absolute;\r\n  left: 10px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  font-size: 20px;\r\n}\r\n\r\n.toast-notification.success::before {\r\n  content: '✓';\r\n}\r\n\r\n.toast-notification.warning::before {\r\n  content: '⚠️';\r\n}\r\n\r\n.toast-notification.error::before {\r\n  content: '✗';\r\n}\r\n\r\n/* Añadir al final del CSS (línea 1391) */\r\n.add-to-cart-btn.disabled-btn {\r\n  background-color: #6c757d !important;\r\n  cursor: not-allowed !important;\r\n  opacity: 0.7 !important;\r\n  pointer-events: none;\r\n}\r\n\r\n.add-to-cart-btn.disabled-btn:hover {\r\n  background-color: #6c757d !important;\r\n  transform: none !important;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;\r\n}\r\n\r\n.special-button.disabled-btn {\r\n  background-color: #a08734 !important;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}