{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nconst DB_NAME = 'websapDatabase';\nconst DB_VERSION = 3;\n\n// Definir todos los almacenes necesarios\nconst REQUIRED_STORES = [{\n  name: 'menuItems',\n  keyPath: 'id'\n}, {\n  name: 'menuImages',\n  keyPath: 'id'\n}, {\n  name: 'soldItems',\n  keyPath: 'id'\n}, {\n  name: 'businessInfo',\n  keyPath: 'id'\n}, {\n  name: 'users',\n  keyPath: 'id'\n}, {\n  name: 'sharedMenus',\n  keyPath: 'id'\n}];\nexport async function initializeDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        console.error('Error al abrir la base de datos:', event.target.error);\n        reject(event.target.error);\n      };\n      request.onsuccess = event => {\n        const db = event.target.result;\n        console.log('Base de datos abierta correctamente, versión:', db.version);\n\n        // Verificar que todos los almacenes existen\n        const existingStores = Array.from(db.objectStoreNames);\n        let allStoresExist = true;\n        const missingStores = REQUIRED_STORES.filter(store => !existingStores.includes(store.name));\n        if (missingStores.length > 0) {\n          console.error('Faltan los siguientes almacenes:', missingStores.map(s => s.name).join(', '));\n          allStoresExist = false;\n\n          // Cerrar la conexión antes de intentar aumentar la versión\n          db.close();\n\n          // Incrementar la versión para forzar la creación de los almacenes faltantes\n          const newVersion = DB_VERSION + 1;\n          console.log(`Intentando actualizar a versión ${newVersion} para crear almacenes faltantes`);\n          const updateRequest = indexedDB.open(DB_NAME, newVersion);\n          updateRequest.onupgradeneeded = event => {\n            const db = event.target.result;\n            for (const store of missingStores) {\n              if (!db.objectStoreNames.contains(store.name)) {\n                db.createObjectStore(store.name, {\n                  keyPath: store.keyPath\n                });\n                console.log(`Almacén creado: ${store.name}`);\n              }\n            }\n          };\n          updateRequest.onerror = err => {\n            console.error('Error al actualizar la base de datos:', err.target.error);\n            reject(err.target.error);\n          };\n          updateRequest.onsuccess = () => {\n            console.log('Base de datos actualizada correctamente con los nuevos almacenes');\n            resolve();\n          };\n        } else {\n          console.log('Todos los almacenes existen en la base de datos');\n          resolve();\n        }\n      };\n      request.onupgradeneeded = event => {\n        const db = event.target.result;\n        for (const store of REQUIRED_STORES) {\n          if (!db.objectStoreNames.contains(store.name)) {\n            db.createObjectStore(store.name, {\n              keyPath: store.keyPath\n            });\n            console.log(`Almacén creado: ${store.name}`);\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error crítico al inicializar la base de datos:', error);\n      reject(error);\n    }\n  });\n}","map":{"version":3,"names":["DB_NAME","DB_VERSION","REQUIRED_STORES","name","keyPath","initializeDatabase","Promise","resolve","reject","request","indexedDB","open","onerror","event","console","error","target","onsuccess","db","result","log","version","existingStores","Array","from","objectStoreNames","allStoresExist","missingStores","filter","store","includes","length","map","s","join","close","newVersion","updateRequest","onupgradeneeded","contains","createObjectStore","err"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/dbInitializer.js"],"sourcesContent":["const DB_NAME = 'websapDatabase';\r\nconst DB_VERSION = 3;\r\n\r\n// Definir todos los almacenes necesarios\r\nconst REQUIRED_STORES = [\r\n  { name: 'menuItems', keyPath: 'id' },\r\n  { name: 'menuImages', keyPath: 'id' },\r\n  { name: 'soldItems', keyPath: 'id' },\r\n  { name: 'businessInfo', keyPath: 'id' },\r\n  { name: 'users', keyPath: 'id' },\r\n  { name: 'sharedMenus', keyPath: 'id' }\r\n];\r\n\r\nexport async function initializeDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n      \r\n      request.onerror = (event) => {\r\n        console.error('Error al abrir la base de datos:', event.target.error);\r\n        reject(event.target.error);\r\n      };\r\n      \r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        console.log('Base de datos abierta correctamente, versión:', db.version);\r\n        \r\n        // Verificar que todos los almacenes existen\r\n        const existingStores = Array.from(db.objectStoreNames);\r\n        let allStoresExist = true;\r\n        \r\n        const missingStores = REQUIRED_STORES.filter(store => !existingStores.includes(store.name));\r\n        \r\n        if (missingStores.length > 0) {\r\n          console.error('Faltan los siguientes almacenes:', missingStores.map(s => s.name).join(', '));\r\n          allStoresExist = false;\r\n          \r\n          // Cerrar la conexión antes de intentar aumentar la versión\r\n          db.close();\r\n          \r\n          // Incrementar la versión para forzar la creación de los almacenes faltantes\r\n          const newVersion = DB_VERSION + 1;\r\n          console.log(`Intentando actualizar a versión ${newVersion} para crear almacenes faltantes`);\r\n          \r\n          const updateRequest = indexedDB.open(DB_NAME, newVersion);\r\n          \r\n          updateRequest.onupgradeneeded = (event) => {\r\n            const db = event.target.result;\r\n            for (const store of missingStores) {\r\n              if (!db.objectStoreNames.contains(store.name)) {\r\n                db.createObjectStore(store.name, { keyPath: store.keyPath });\r\n                console.log(`Almacén creado: ${store.name}`);\r\n              }\r\n            }\r\n          };\r\n          \r\n          updateRequest.onerror = (err) => {\r\n            console.error('Error al actualizar la base de datos:', err.target.error);\r\n            reject(err.target.error);\r\n          };\r\n          \r\n          updateRequest.onsuccess = () => {\r\n            console.log('Base de datos actualizada correctamente con los nuevos almacenes');\r\n            resolve();\r\n          };\r\n        } else {\r\n          console.log('Todos los almacenes existen en la base de datos');\r\n          resolve();\r\n        }\r\n      };\r\n      \r\n      request.onupgradeneeded = (event) => {\r\n        const db = event.target.result;\r\n        \r\n        for (const store of REQUIRED_STORES) {\r\n          if (!db.objectStoreNames.contains(store.name)) {\r\n            db.createObjectStore(store.name, { keyPath: store.keyPath });\r\n            console.log(`Almacén creado: ${store.name}`);\r\n          }\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error crítico al inicializar la base de datos:', error);\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n"],"mappings":";;AAAA,MAAMA,OAAO,GAAG,gBAAgB;AAChC,MAAMC,UAAU,GAAG,CAAC;;AAEpB;AACA,MAAMC,eAAe,GAAG,CACtB;EAAEC,IAAI,EAAE,WAAW;EAAEC,OAAO,EAAE;AAAK,CAAC,EACpC;EAAED,IAAI,EAAE,YAAY;EAAEC,OAAO,EAAE;AAAK,CAAC,EACrC;EAAED,IAAI,EAAE,WAAW;EAAEC,OAAO,EAAE;AAAK,CAAC,EACpC;EAAED,IAAI,EAAE,cAAc;EAAEC,OAAO,EAAE;AAAK,CAAC,EACvC;EAAED,IAAI,EAAE,OAAO;EAAEC,OAAO,EAAE;AAAK,CAAC,EAChC;EAAED,IAAI,EAAE,aAAa;EAAEC,OAAO,EAAE;AAAK,CAAC,CACvC;AAED,OAAO,eAAeC,kBAAkBA,CAAA,EAAG;EACzC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI;MACF,MAAMC,OAAO,GAAGC,SAAS,CAACC,IAAI,CAACX,OAAO,EAAEC,UAAU,CAAC;MAEnDQ,OAAO,CAACG,OAAO,GAAIC,KAAK,IAAK;QAC3BC,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEF,KAAK,CAACG,MAAM,CAACD,KAAK,CAAC;QACrEP,MAAM,CAACK,KAAK,CAACG,MAAM,CAACD,KAAK,CAAC;MAC5B,CAAC;MAEDN,OAAO,CAACQ,SAAS,GAAIJ,KAAK,IAAK;QAC7B,MAAMK,EAAE,GAAGL,KAAK,CAACG,MAAM,CAACG,MAAM;QAC9BL,OAAO,CAACM,GAAG,CAAC,+CAA+C,EAAEF,EAAE,CAACG,OAAO,CAAC;;QAExE;QACA,MAAMC,cAAc,GAAGC,KAAK,CAACC,IAAI,CAACN,EAAE,CAACO,gBAAgB,CAAC;QACtD,IAAIC,cAAc,GAAG,IAAI;QAEzB,MAAMC,aAAa,GAAGzB,eAAe,CAAC0B,MAAM,CAACC,KAAK,IAAI,CAACP,cAAc,CAACQ,QAAQ,CAACD,KAAK,CAAC1B,IAAI,CAAC,CAAC;QAE3F,IAAIwB,aAAa,CAACI,MAAM,GAAG,CAAC,EAAE;UAC5BjB,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEY,aAAa,CAACK,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC9B,IAAI,CAAC,CAAC+B,IAAI,CAAC,IAAI,CAAC,CAAC;UAC5FR,cAAc,GAAG,KAAK;;UAEtB;UACAR,EAAE,CAACiB,KAAK,CAAC,CAAC;;UAEV;UACA,MAAMC,UAAU,GAAGnC,UAAU,GAAG,CAAC;UACjCa,OAAO,CAACM,GAAG,CAAC,mCAAmCgB,UAAU,iCAAiC,CAAC;UAE3F,MAAMC,aAAa,GAAG3B,SAAS,CAACC,IAAI,CAACX,OAAO,EAAEoC,UAAU,CAAC;UAEzDC,aAAa,CAACC,eAAe,GAAIzB,KAAK,IAAK;YACzC,MAAMK,EAAE,GAAGL,KAAK,CAACG,MAAM,CAACG,MAAM;YAC9B,KAAK,MAAMU,KAAK,IAAIF,aAAa,EAAE;cACjC,IAAI,CAACT,EAAE,CAACO,gBAAgB,CAACc,QAAQ,CAACV,KAAK,CAAC1B,IAAI,CAAC,EAAE;gBAC7Ce,EAAE,CAACsB,iBAAiB,CAACX,KAAK,CAAC1B,IAAI,EAAE;kBAAEC,OAAO,EAAEyB,KAAK,CAACzB;gBAAQ,CAAC,CAAC;gBAC5DU,OAAO,CAACM,GAAG,CAAC,mBAAmBS,KAAK,CAAC1B,IAAI,EAAE,CAAC;cAC9C;YACF;UACF,CAAC;UAEDkC,aAAa,CAACzB,OAAO,GAAI6B,GAAG,IAAK;YAC/B3B,OAAO,CAACC,KAAK,CAAC,uCAAuC,EAAE0B,GAAG,CAACzB,MAAM,CAACD,KAAK,CAAC;YACxEP,MAAM,CAACiC,GAAG,CAACzB,MAAM,CAACD,KAAK,CAAC;UAC1B,CAAC;UAEDsB,aAAa,CAACpB,SAAS,GAAG,MAAM;YAC9BH,OAAO,CAACM,GAAG,CAAC,kEAAkE,CAAC;YAC/Eb,OAAO,CAAC,CAAC;UACX,CAAC;QACH,CAAC,MAAM;UACLO,OAAO,CAACM,GAAG,CAAC,iDAAiD,CAAC;UAC9Db,OAAO,CAAC,CAAC;QACX;MACF,CAAC;MAEDE,OAAO,CAAC6B,eAAe,GAAIzB,KAAK,IAAK;QACnC,MAAMK,EAAE,GAAGL,KAAK,CAACG,MAAM,CAACG,MAAM;QAE9B,KAAK,MAAMU,KAAK,IAAI3B,eAAe,EAAE;UACnC,IAAI,CAACgB,EAAE,CAACO,gBAAgB,CAACc,QAAQ,CAACV,KAAK,CAAC1B,IAAI,CAAC,EAAE;YAC7Ce,EAAE,CAACsB,iBAAiB,CAACX,KAAK,CAAC1B,IAAI,EAAE;cAAEC,OAAO,EAAEyB,KAAK,CAACzB;YAAQ,CAAC,CAAC;YAC5DU,OAAO,CAACM,GAAG,CAAC,mBAAmBS,KAAK,CAAC1B,IAAI,EAAE,CAAC;UAC9C;QACF;MACF,CAAC;IACH,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;MACtEP,MAAM,CAACO,KAAK,CAAC;IACf;EACF,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}