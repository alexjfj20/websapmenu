{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Este componente no tiene representaci√≥n visual, solo maneja la l√≥gica \"), _cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    style: {\n      \"display\": \"none\"\n    }\n  }, [_createElementVNode(\"p\", null, \"Manejador de reservas de WhatsApp activo\")], -1 /* HOISTED */))], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createCommentVNode","_createElementVNode","style"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\components\\WhatsAppReservationHandler.vue"],"sourcesContent":["<template>\n  <!-- Este componente no tiene representaci√≥n visual, solo maneja la l√≥gica -->\n  <div style=\"display: none;\">\n    <p>Manejador de reservas de WhatsApp activo</p>\n  </div>\n</template>\n\n<script setup>\nimport { onMounted, onUnmounted, ref } from 'vue';\nimport { saveWhatsAppReservation } from '../services/reservaService';\nimport eventBus from '../utils/eventBus';\n\nconst isListening = ref(false);\nconst lastProcessedMessageId = ref(null);\n\n// Funci√≥n para procesar mensajes de WhatsApp\nconst processWhatsAppMessage = async (event) => {\n  // Solo procesamos mensajes que vengan de la ventana principal o del mismo origen\n  if (event.source !== window && event.source !== window.parent) return;\n  \n  try {\n    // Verificar que el mensaje sea de tipo reserva de WhatsApp\n    if (event.data && event.data.type === 'whatsapp_reservation') {\n      console.log('üì± Recibido mensaje de reserva desde WhatsApp (window):', event.data);\n      \n      // Evitar procesar el mismo mensaje dos veces\n      if (lastProcessedMessageId.value === JSON.stringify(event.data)) {\n        console.log('‚ö†Ô∏è Mensaje ya procesado, ignorando duplicado');\n        return;\n      }\n      \n      lastProcessedMessageId.value = JSON.stringify(event.data);\n      \n      // Guardar la reserva usando el servicio\n      const result = await saveWhatsAppReservation(event.data.reservation);\n      \n      if (result.success) {\n        console.log('‚úÖ Reserva de WhatsApp guardada correctamente:', result.reservation);\n        \n        // Notificar a la ventana que envi√≥ el mensaje\n        if (event.source && event.source.postMessage) {\n          event.source.postMessage({\n            type: 'whatsapp_reservation_response',\n            success: true,\n            message: 'Reserva recibida correctamente'\n          }, '*');\n        }\n      } else {\n        throw new Error(result.error);\n      }\n    }\n  } catch (error) {\n    console.error('‚ùå Error al procesar mensaje de WhatsApp:', error);\n    \n    // Notificar error a la ventana que envi√≥ el mensaje\n    if (event.source && event.source.postMessage) {\n      event.source.postMessage({\n        type: 'whatsapp_reservation_response',\n        success: false,\n        message: 'Error al procesar la reserva: ' + error.message\n      }, '*');\n    }\n  }\n};\n\n// Funci√≥n para procesar mensajes del eventBus\nconst processEventBusMessage = async (message) => {\n  try {\n    console.log('üì± Recibido mensaje de reserva desde eventBus:', message);\n    \n    // Verificar que el mensaje sea de tipo reserva de WhatsApp\n    if (message && message.type === 'whatsapp_reservation') {\n      // Usar el ID del mensaje para evitar duplicados\n      const messageId = message.id || JSON.stringify(message);\n      \n      // Evitar procesar el mismo mensaje dos veces\n      if (lastProcessedMessageId.value === messageId) {\n        console.log('‚ö†Ô∏è Mensaje ya procesado, ignorando duplicado');\n        return;\n      }\n      \n      lastProcessedMessageId.value = messageId;\n      \n      // Guardar la reserva usando el servicio\n      const result = await saveWhatsAppReservation(message.reservation);\n      \n      if (result.success) {\n        console.log('‚úÖ Reserva de WhatsApp (eventBus) guardada correctamente:', result.reservation);\n        \n        // Emitir evento de respuesta\n        eventBus.emit('whatsapp_reservation_response', {\n          success: true,\n          message: 'Reserva recibida correctamente'\n        });\n      } else {\n        throw new Error(result.error);\n      }\n    }\n  } catch (error) {\n    console.error('‚ùå Error al procesar mensaje de WhatsApp desde eventBus:', error);\n    \n    // Emitir evento de error\n    eventBus.emit('whatsapp_reservation_response', {\n      success: false,\n      message: 'Error al procesar la reserva: ' + error.message\n    });\n  }\n};\n\n// Configurar el listener de mensajes al montar el componente\nonMounted(() => {\n  if (!isListening.value) {\n    // Escuchar mensajes de window\n    window.addEventListener('message', processWhatsAppMessage);\n    \n    // Escuchar mensajes del eventBus\n    eventBus.on('whatsapp_message', processEventBusMessage);\n    \n    isListening.value = true;\n    console.log('üîÑ WhatsAppReservationHandler montado y escuchando mensajes');\n    \n    // Exponer la funci√≥n de simulaci√≥n en window para pruebas\n    window.testWhatsAppReservation = simulateWhatsAppReservation;\n  }\n});\n\n// Limpiar el listener al desmontar el componente\nonUnmounted(() => {\n  if (isListening.value) {\n    // Eliminar listener de window\n    window.removeEventListener('message', processWhatsAppMessage);\n    \n    // Eliminar listener del eventBus\n    eventBus.off('whatsapp_message', processEventBusMessage);\n    \n    isListening.value = false;\n    console.log('üõë WhatsAppReservationHandler desmontado');\n    \n    // Eliminar la funci√≥n de simulaci√≥n\n    if (window.testWhatsAppReservation) {\n      delete window.testWhatsAppReservation;\n    }\n  }\n});\n\n// Funci√≥n para simular una reserva de WhatsApp (para pruebas)\nconst simulateWhatsAppReservation = async (customData = {}) => {\n  try {\n    console.log(' Simulando reserva de WhatsApp con datos:', customData);\n    \n    // Datos por defecto para la reserva\n    const defaultData = {\n      nombre: 'Cliente de Prueba WhatsApp',\n      telefono: '612345678',\n      email: 'whatsapp@example.com',\n      fecha: new Date().toISOString().split('T')[0], // Hoy\n      hora: '20:00',\n      personas: 3,\n      notas: 'Reserva de prueba desde WhatsApp'\n    };\n    \n    // Combinar datos por defecto con datos personalizados\n    const whatsappData = { ...defaultData, ...customData };\n    \n    // Crear un evento similar al que enviar√≠a WhatsApp\n    const whatsappEvent = {\n      data: {\n        type: 'whatsapp_reservation',\n        reservation: whatsappData,\n        timestamp: Date.now()\n      },\n      source: window\n    };\n    \n    // Procesar el evento simulado\n    await processWhatsAppMessage(whatsappEvent);\n    \n    return true;\n  } catch (error) {\n    console.error(' Error al simular reserva de WhatsApp:', error);\n    return false;\n  }\n};\n\n// Exponer la funci√≥n de simulaci√≥n para pruebas\ndefineExpose({ simulateWhatsAppReservation });\n</script>\n"],"mappings":";;uBAAAA,mBAAA,CAAAC,SAAA,SACEC,mBAAA,2EAA8E,E,0BAC9EC,mBAAA,CAEM;IAFDC,KAAsB,EAAtB;MAAA;IAAA;EAAsB,IACzBD,mBAAA,CAA+C,WAA5C,0CAAwC,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}