{"ast":null,"code":"import { ref, onMounted, reactive, onUnmounted } from 'vue';\nimport { getReservations, updateReservationStatus } from '../../services/reservaService';\nimport eventBus from '../../utils/eventBus';\n\n// Props\n\nexport default {\n  __name: 'AdminReservas',\n  props: {\n    readOnly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    const props = __props;\n    const reservations = ref([]);\n    const isLoading = ref(true);\n    const selectedReservation = ref(null);\n    const toast = reactive({\n      visible: false,\n      message: '',\n      type: 'info'\n    });\n    const showToast = (message, type = 'info') => {\n      toast.message = message;\n      toast.type = type;\n      toast.visible = true;\n      setTimeout(() => {\n        toast.visible = false;\n      }, 5000);\n    };\n\n    // Funci√≥n para cargar las reservas\n    const loadReservations = async () => {\n      isLoading.value = true;\n      try {\n        console.log('üîÑ Cargando reservas...');\n        // Utilizamos el servicio de reservas para obtener los datos\n        const result = await getReservations();\n        if (result.success) {\n          reservations.value = result.reservations;\n          console.log('‚úÖ Reservas cargadas correctamente:', reservations.value.length);\n        } else {\n          throw new Error(result.error || 'Error al cargar las reservas');\n        }\n      } catch (error) {\n        console.error('‚ùå Error al cargar reservas:', error);\n        showToast('Error al cargar las reservas', 'error');\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    // Funci√≥n para manejar nuevas reservas recibidas a trav√©s del eventBus\n    const handleNuevaReserva = reservation => {\n      console.log('üîî Nueva reserva recibida:', reservation);\n\n      // Verificamos si la reserva ya existe en la lista (para evitar duplicados)\n      const existingIndex = reservations.value.findIndex(r => r.id === reservation.id);\n      if (existingIndex !== -1) {\n        console.log('‚ö†Ô∏è La reserva ya existe en la lista, actualizando');\n        reservations.value[existingIndex] = reservation;\n      } else {\n        // A√±adimos la nueva reserva al inicio de la lista\n        reservations.value.unshift(reservation);\n      }\n\n      // Mostramos una notificaci√≥n\n      showToast(`Nueva reserva recibida de ${reservation.fullName}`, 'success');\n    };\n\n    // Funci√≥n para manejar actualizaciones de reservas\n    const handleReservaActualizada = data => {\n      console.log('üîÑ Actualizaci√≥n de reserva recibida:', data);\n\n      // Buscamos la reserva en la lista y actualizamos su estado\n      const index = reservations.value.findIndex(res => res.id === data.id);\n      if (index !== -1) {\n        reservations.value[index].status = data.status;\n      }\n    };\n\n    // Funci√≥n para actualizar la lista de reservas (llamada cuando hay una nueva)\n    const refreshReservations = async () => {\n      isLoading.value = true;\n      try {\n        console.log('üîÑ Actualizando lista de reservas...');\n        const result = await getReservations();\n        if (result.success) {\n          reservations.value = result.reservations;\n          console.log('‚úÖ Lista de reservas actualizada:', reservations.value.length);\n        } else {\n          throw new Error(result.error || 'Error al actualizar las reservas');\n        }\n      } catch (error) {\n        console.error('‚ùå Error al actualizar reservas:', error);\n        showToast('Error al actualizar las reservas', 'error');\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    // Cargar las reservas al montar el componente\n    onMounted(() => {\n      // Cargar las reservas iniciales\n      loadReservations();\n\n      // Escuchar eventos de nuevas reservas\n      eventBus.on('nueva-reserva', handleNuevaReserva);\n\n      // Escuchar eventos de actualizaci√≥n de reservas\n      eventBus.on('reserva-actualizada', handleReservaActualizada);\n\n      // Escuchar eventos para refrescar reservas\n      eventBus.on('refresh-reservations', refreshReservations);\n      console.log('‚úÖ AdminReservas montado y escuchando eventos');\n    });\n\n    // Limpiar los listeners al desmontar el componente\n    onUnmounted(() => {\n      eventBus.off('nueva-reserva', handleNuevaReserva);\n      eventBus.off('reserva-actualizada', handleReservaActualizada);\n      eventBus.off('refresh-reservations', refreshReservations);\n      console.log('üõë AdminReservas desmontado');\n    });\n\n    // Ahora defineExpose funcionar√° correctamente\n    __expose({\n      refreshReservations\n    });\n\n    // Formatear fecha (YYYY-MM-DD a DD/MM/YYYY)\n    const formatDate = dateString => {\n      if (!dateString) return '';\n      const parts = dateString.split('-');\n      if (parts.length !== 3) return dateString;\n      return `${parts[2]}/${parts[1]}/${parts[0]}`;\n    };\n\n    // Obtener etiqueta del estado\n    const getStatusLabel = status => {\n      switch (status) {\n        case 'confirmed':\n          return 'Confirmada';\n        case 'pending':\n          return 'Pendiente';\n        case 'cancelled':\n          return 'Cancelada';\n        default:\n          return status;\n      }\n    };\n\n    // Ver detalles de la reserva\n    const viewReservation = reservation => {\n      selectedReservation.value = reservation;\n    };\n\n    // Confirmar reserva\n    const confirmReservation = async reservation => {\n      try {\n        // Utilizamos el servicio para actualizar el estado\n        const result = await updateReservationStatus(reservation.id, 'confirmed');\n        if (result.success) {\n          // Actualizamos el estado localmente\n          reservation.status = 'confirmed';\n          showToast('Reserva confirmada correctamente', 'success');\n        } else {\n          throw new Error(result.error || 'Error al confirmar la reserva');\n        }\n      } catch (error) {\n        console.error('Error al confirmar reserva:', error);\n        showToast('Error al confirmar la reserva', 'error');\n      }\n    };\n\n    // Cancelar reserva\n    const cancelReservation = async reservation => {\n      try {\n        // Utilizamos el servicio para actualizar el estado\n        const result = await updateReservationStatus(reservation.id, 'cancelled');\n        if (result.success) {\n          // Actualizamos el estado localmente\n          reservation.status = 'cancelled';\n          showToast('Reserva cancelada correctamente', 'success');\n        } else {\n          throw new Error(result.error || 'Error al cancelar la reserva');\n        }\n      } catch (error) {\n        console.error('Error al cancelar reserva:', error);\n        showToast('Error al cancelar la reserva', 'error');\n      }\n    };\n\n    // Contactar al cliente\n    const contactCustomer = reservation => {\n      if (reservation.mobilePhone) {\n        window.location.href = `tel:${reservation.mobilePhone}`;\n      } else {\n        showToast('No hay n√∫mero de tel√©fono disponible', 'warning');\n      }\n    };\n    const __returned__ = {\n      props,\n      reservations,\n      isLoading,\n      selectedReservation,\n      toast,\n      showToast,\n      loadReservations,\n      handleNuevaReserva,\n      handleReservaActualizada,\n      refreshReservations,\n      formatDate,\n      getStatusLabel,\n      viewReservation,\n      confirmReservation,\n      cancelReservation,\n      contactCustomer,\n      ref,\n      onMounted,\n      reactive,\n      onUnmounted,\n      get getReservations() {\n        return getReservations;\n      },\n      get updateReservationStatus() {\n        return updateReservationStatus;\n      },\n      get eventBus() {\n        return eventBus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","reactive","onUnmounted","getReservations","updateReservationStatus","eventBus","props","__props","reservations","isLoading","selectedReservation","toast","visible","message","type","showToast","setTimeout","loadReservations","value","console","log","result","success","length","Error","error","handleNuevaReserva","reservation","existingIndex","findIndex","r","id","unshift","fullName","handleReservaActualizada","data","index","res","status","refreshReservations","on","off","__expose","formatDate","dateString","parts","split","getStatusLabel","viewReservation","confirmReservation","cancelReservation","contactCustomer","mobilePhone","window","location","href"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/components/admin/AdminReservas.vue"],"sourcesContent":["<template>\n  <div class=\"admin-reservas\">\n    <div class=\"reservas-header\">\n      <h2 class=\"admin-section-title\">Gesti√≥n de Reservas</h2>\n      <button \n        class=\"refresh-btn\" \n        @click=\"refreshReservations\" \n        :disabled=\"isLoading\"\n        title=\"Actualizar reservas\"\n      >\n        <span v-if=\"isLoading\">Actualizando...</span>\n        <span v-else>üîÑ Actualizar</span>\n      </button>\n    </div>\n    \n    <div class=\"reservas-container\">\n      <div v-if=\"isLoading\" class=\"loading-spinner\">\n        <div class=\"spinner\"></div>\n        <p>Cargando reservas...</p>\n      </div>\n      \n      <div v-else-if=\"reservations.length === 0\" class=\"no-reservations\">\n        <p>A√∫n no hay reservas registradas</p>\n      </div>\n      \n      <div v-else class=\"reservations-list\">\n        <div class=\"table-responsive\">\n          <table class=\"reservation-table\">\n            <thead>\n              <tr>\n                <th>Fecha</th>\n                <th>Hora</th>\n                <th>Cliente</th>\n                <th>Tel√©fono</th>\n                <th>Personas</th>\n                <th>Estado</th>\n                <th>Acciones</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"(reservation, index) in reservations\" :key=\"index\" :class=\"{ 'confirmed': reservation.status === 'confirmed', 'pending': reservation.status === 'pending', 'cancelled': reservation.status === 'cancelled' }\">\n                <td>{{ formatDate(reservation.date) }}</td>\n                <td>{{ reservation.time }}</td>\n                <td>{{ reservation.fullName }}</td>\n                <td>\n                  <a :href=\"`tel:${reservation.mobilePhone}`\">{{ reservation.mobilePhone }}</a>\n                </td>\n                <td>{{ reservation.peopleCount }}</td>\n                <td>\n                  <span class=\"status-badge\" :class=\"reservation.status\">\n                    {{ getStatusLabel(reservation.status) }}\n                  </span>\n                </td>\n                <td class=\"actions-cell\">\n                  <button @click=\"viewReservation(reservation)\" class=\"action-btn view-btn\" title=\"Ver detalles\">\n                    üëÅÔ∏è\n                  </button>\n                  <button \n                    v-if=\"!readOnly\" \n                    @click=\"confirmReservation(reservation)\" \n                    class=\"action-btn confirm-btn\" \n                    title=\"Confirmar reserva\" \n                    :disabled=\"reservation.status === 'confirmed'\"\n                  >\n                    ‚úÖ\n                  </button>\n                  <button \n                    v-if=\"!readOnly\" \n                    @click=\"cancelReservation(reservation)\" \n                    class=\"action-btn cancel-btn\" \n                    title=\"Cancelar reserva\" \n                    :disabled=\"reservation.status === 'cancelled'\"\n                  >\n                    ‚ùå\n                  </button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Modal para ver detalles de la reserva -->\n    <div v-if=\"selectedReservation\" class=\"reservation-modal\">\n      <div class=\"modal-content\">\n        <span class=\"close-modal\" @click=\"selectedReservation = null\">&times;</span>\n        <h3>Detalles de la Reserva</h3>\n        \n        <div class=\"reservation-details\">\n          <p><strong>Cliente:</strong> {{ selectedReservation.fullName }}</p>\n          <p><strong>Tel√©fono M√≥vil:</strong> {{ selectedReservation.mobilePhone }}</p>\n          <p v-if=\"selectedReservation.landlinePhone\"><strong>Tel√©fono Fijo:</strong> {{ selectedReservation.landlinePhone }}</p>\n          <p v-if=\"selectedReservation.email\"><strong>Email:</strong> {{ selectedReservation.email }}</p>\n          <p v-if=\"selectedReservation.address\"><strong>Direcci√≥n:</strong> {{ selectedReservation.address }}</p>\n          <p><strong>Fecha:</strong> {{ formatDate(selectedReservation.date) }}</p>\n          <p><strong>Hora:</strong> {{ selectedReservation.time }}</p>\n          <p><strong>N√∫mero de Personas:</strong> {{ selectedReservation.peopleCount }}</p>\n          <p v-if=\"selectedReservation.notes\"><strong>Notas Adicionales:</strong> {{ selectedReservation.notes }}</p>\n          <p><strong>Estado:</strong> <span class=\"status-badge\" :class=\"selectedReservation.status\">{{ getStatusLabel(selectedReservation.status) }}</span></p>\n        </div>\n        \n        <div class=\"modal-actions\">\n          <button @click=\"confirmReservation(selectedReservation)\" class=\"action-btn confirm-btn\" :disabled=\"selectedReservation.status === 'confirmed'\">\n            Confirmar Reserva\n          </button>\n          <button @click=\"cancelReservation(selectedReservation)\" class=\"action-btn cancel-btn\" :disabled=\"selectedReservation.status === 'cancelled'\">\n            Cancelar Reserva\n          </button>\n          <button @click=\"contactCustomer(selectedReservation)\" class=\"action-btn contact-btn\">\n            Contactar Cliente\n          </button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- A√±adir notificaci√≥n toast -->\n    <div v-if=\"toast.visible\" class=\"toast-notification\" :class=\"toast.type\">\n      {{ toast.message }}\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, reactive, onUnmounted } from 'vue';\nimport { getReservations, updateReservationStatus } from '../../services/reservaService';\nimport eventBus from '../../utils/eventBus';\n\n// Props\nconst props = defineProps({\n  readOnly: {\n    type: Boolean,\n    default: false\n  }\n});\n\nconst reservations = ref([]);\nconst isLoading = ref(true);\nconst selectedReservation = ref(null);\n\nconst toast = reactive({\n  visible: false,\n  message: '',\n  type: 'info'\n});\n\nconst showToast = (message, type = 'info') => {\n  toast.message = message;\n  toast.type = type;\n  toast.visible = true;\n  \n  setTimeout(() => {\n    toast.visible = false;\n  }, 5000);\n};\n\n// Funci√≥n para cargar las reservas\nconst loadReservations = async () => {\n  isLoading.value = true;\n  try {\n    console.log('üîÑ Cargando reservas...');\n    // Utilizamos el servicio de reservas para obtener los datos\n    const result = await getReservations();\n    \n    if (result.success) {\n      reservations.value = result.reservations;\n      console.log('‚úÖ Reservas cargadas correctamente:', reservations.value.length);\n    } else {\n      throw new Error(result.error || 'Error al cargar las reservas');\n    }\n  } catch (error) {\n    console.error('‚ùå Error al cargar reservas:', error);\n    showToast('Error al cargar las reservas', 'error');\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Funci√≥n para manejar nuevas reservas recibidas a trav√©s del eventBus\nconst handleNuevaReserva = (reservation) => {\n  console.log('üîî Nueva reserva recibida:', reservation);\n  \n  // Verificamos si la reserva ya existe en la lista (para evitar duplicados)\n  const existingIndex = reservations.value.findIndex(r => r.id === reservation.id);\n  \n  if (existingIndex !== -1) {\n    console.log('‚ö†Ô∏è La reserva ya existe en la lista, actualizando');\n    reservations.value[existingIndex] = reservation;\n  } else {\n    // A√±adimos la nueva reserva al inicio de la lista\n    reservations.value.unshift(reservation);\n  }\n  \n  // Mostramos una notificaci√≥n\n  showToast(`Nueva reserva recibida de ${reservation.fullName}`, 'success');\n};\n\n// Funci√≥n para manejar actualizaciones de reservas\nconst handleReservaActualizada = (data) => {\n  console.log('üîÑ Actualizaci√≥n de reserva recibida:', data);\n  \n  // Buscamos la reserva en la lista y actualizamos su estado\n  const index = reservations.value.findIndex(res => res.id === data.id);\n  if (index !== -1) {\n    reservations.value[index].status = data.status;\n  }\n};\n\n// Funci√≥n para actualizar la lista de reservas (llamada cuando hay una nueva)\nconst refreshReservations = async () => {\n  isLoading.value = true;\n  try {\n    console.log('üîÑ Actualizando lista de reservas...');\n    const result = await getReservations();\n    \n    if (result.success) {\n      reservations.value = result.reservations;\n      console.log('‚úÖ Lista de reservas actualizada:', reservations.value.length);\n    } else {\n      throw new Error(result.error || 'Error al actualizar las reservas');\n    }\n  } catch (error) {\n    console.error('‚ùå Error al actualizar reservas:', error);\n    showToast('Error al actualizar las reservas', 'error');\n  } finally {\n    isLoading.value = false;\n  }\n};\n\n// Cargar las reservas al montar el componente\nonMounted(() => {\n  // Cargar las reservas iniciales\n  loadReservations();\n  \n  // Escuchar eventos de nuevas reservas\n  eventBus.on('nueva-reserva', handleNuevaReserva);\n  \n  // Escuchar eventos de actualizaci√≥n de reservas\n  eventBus.on('reserva-actualizada', handleReservaActualizada);\n  \n  // Escuchar eventos para refrescar reservas\n  eventBus.on('refresh-reservations', refreshReservations);\n  \n  console.log('‚úÖ AdminReservas montado y escuchando eventos');\n});\n\n// Limpiar los listeners al desmontar el componente\nonUnmounted(() => {\n  eventBus.off('nueva-reserva', handleNuevaReserva);\n  eventBus.off('reserva-actualizada', handleReservaActualizada);\n  eventBus.off('refresh-reservations', refreshReservations);\n  console.log('üõë AdminReservas desmontado');\n});\n\n// Ahora defineExpose funcionar√° correctamente\ndefineExpose({ refreshReservations });\n\n// Formatear fecha (YYYY-MM-DD a DD/MM/YYYY)\nconst formatDate = (dateString) => {\n  if (!dateString) return '';\n  const parts = dateString.split('-');\n  if (parts.length !== 3) return dateString;\n  return `${parts[2]}/${parts[1]}/${parts[0]}`;\n};\n\n// Obtener etiqueta del estado\nconst getStatusLabel = (status) => {\n  switch (status) {\n    case 'confirmed':\n      return 'Confirmada';\n    case 'pending':\n      return 'Pendiente';\n    case 'cancelled':\n      return 'Cancelada';\n    default:\n      return status;\n  }\n};\n\n// Ver detalles de la reserva\nconst viewReservation = (reservation) => {\n  selectedReservation.value = reservation;\n};\n\n// Confirmar reserva\nconst confirmReservation = async (reservation) => {\n  try {\n    // Utilizamos el servicio para actualizar el estado\n    const result = await updateReservationStatus(reservation.id, 'confirmed');\n    \n    if (result.success) {\n      // Actualizamos el estado localmente\n      reservation.status = 'confirmed';\n      showToast('Reserva confirmada correctamente', 'success');\n    } else {\n      throw new Error(result.error || 'Error al confirmar la reserva');\n    }\n  } catch (error) {\n    console.error('Error al confirmar reserva:', error);\n    showToast('Error al confirmar la reserva', 'error');\n  }\n};\n\n// Cancelar reserva\nconst cancelReservation = async (reservation) => {\n  try {\n    // Utilizamos el servicio para actualizar el estado\n    const result = await updateReservationStatus(reservation.id, 'cancelled');\n    \n    if (result.success) {\n      // Actualizamos el estado localmente\n      reservation.status = 'cancelled';\n      showToast('Reserva cancelada correctamente', 'success');\n    } else {\n      throw new Error(result.error || 'Error al cancelar la reserva');\n    }\n  } catch (error) {\n    console.error('Error al cancelar reserva:', error);\n    showToast('Error al cancelar la reserva', 'error');\n  }\n};\n\n// Contactar al cliente\nconst contactCustomer = (reservation) => {\n  if (reservation.mobilePhone) {\n    window.location.href = `tel:${reservation.mobilePhone}`;\n  } else {\n    showToast('No hay n√∫mero de tel√©fono disponible', 'warning');\n  }\n};\n</script>\n\n<style scoped>\n.admin-reservas {\n  padding: 20px;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n}\n\n.admin-section-title {\n  color: #333;\n  font-size: 1.5rem;\n  margin-bottom: 20px;\n  padding-bottom: 10px;\n  border-bottom: 2px solid #4CAF50;\n}\n\n.loading-spinner {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 40px;\n}\n\n.spinner {\n  width: 40px;\n  height: 40px;\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #4CAF50;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n  margin-bottom: 15px;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.no-reservations {\n  text-align: center;\n  padding: 40px;\n  color: #666;\n  font-style: italic;\n}\n\n.table-responsive {\n  overflow-x: auto;\n}\n\n.reservation-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\n.reservation-table th, \n.reservation-table td {\n  padding: 12px 15px;\n  text-align: left;\n  border-bottom: 1px solid #ddd;\n}\n\n.reservation-table th {\n  background-color: #f5f5f5;\n  font-weight: bold;\n  color: #333;\n}\n\n.reservation-table tr:hover {\n  background-color: #f9f9f9;\n}\n\n.reservation-table tr.confirmed {\n  background-color: rgba(76, 175, 80, 0.1);\n}\n\n.reservation-table tr.pending {\n  background-color: rgba(255, 193, 7, 0.1);\n}\n\n.reservation-table tr.cancelled {\n  background-color: rgba(244, 67, 54, 0.1);\n}\n\n.status-badge {\n  display: inline-block;\n  padding: 4px 8px;\n  border-radius: 12px;\n  font-size: 0.8rem;\n  font-weight: bold;\n}\n\n.status-badge.confirmed {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.status-badge.pending {\n  background-color: #FFC107;\n  color: #333;\n}\n\n.status-badge.cancelled {\n  background-color: #F44336;\n  color: white;\n}\n\n.actions-cell {\n  white-space: nowrap;\n}\n\n.action-btn {\n  background: none;\n  border: none;\n  font-size: 1.2rem;\n  cursor: pointer;\n  margin: 0 3px;\n  padding: 5px;\n  border-radius: 4px;\n  transition: background-color 0.3s;\n}\n\n.action-btn:hover {\n  background-color: #f0f0f0;\n}\n\n.action-btn:disabled {\n  opacity: 0.3;\n  cursor: not-allowed;\n}\n\n.view-btn:hover {\n  background-color: #e3f2fd;\n}\n\n.confirm-btn:hover {\n  background-color: #e8f5e9;\n}\n\n.cancel-btn:hover {\n  background-color: #ffebee;\n}\n\n/* Estilos para el modal */\n.reservation-modal {\n  position: fixed;\n  z-index: 1000;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0,0,0,0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.modal-content {\n  background-color: #fff;\n  border-radius: 8px;\n  padding: 20px;\n  width: 90%;\n  max-width: 500px;\n  max-height: 80vh;\n  overflow-y: auto;\n  position: relative;\n  box-shadow: 0 4px 20px rgba(0,0,0,0.2);\n}\n\n.close-modal {\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  font-size: 24px;\n  cursor: pointer;\n  color: #666;\n}\n\n.close-modal:hover {\n  color: #000;\n}\n\n.modal-content h3 {\n  margin-top: 0;\n  margin-bottom: 20px;\n  padding-bottom: 10px;\n  border-bottom: 1px solid #eee;\n  color: #333;\n}\n\n.reservation-details p {\n  margin: 8px 0;\n  line-height: 1.5;\n}\n\n.modal-actions {\n  margin-top: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.modal-actions .action-btn {\n  flex: 1;\n  padding: 10px;\n  font-size: 0.9rem;\n  border-radius: 4px;\n  text-align: center;\n  min-width: 120px;\n}\n\n.modal-actions .confirm-btn {\n  background-color: #4CAF50;\n  color: white;\n}\n\n.modal-actions .cancel-btn {\n  background-color: #F44336;\n  color: white;\n}\n\n.modal-actions .contact-btn {\n  background-color: #2196F3;\n  color: white;\n}\n\n.modal-actions .action-btn:hover {\n  opacity: 0.9;\n}\n\n.modal-actions .action-btn:disabled {\n  background-color: #ccc;\n  color: #666;\n}\n\n@media (max-width: 768px) {\n  .reservation-table th, \n  .reservation-table td {\n    padding: 8px 10px;\n    font-size: 0.9rem;\n  }\n  \n  .actions-cell {\n    display: flex;\n  }\n  \n  .modal-actions {\n    flex-direction: column;\n  }\n  \n  .modal-content {\n    width: 95%;\n    padding: 15px;\n  }\n}\n\n.reservas-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.refresh-btn {\n  background-color: #f0f0f0;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 8px 15px;\n  cursor: pointer;\n  transition: all 0.3s;\n}\n\n.refresh-btn:hover {\n  background-color: #e0e0e0;\n}\n\n.refresh-btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}