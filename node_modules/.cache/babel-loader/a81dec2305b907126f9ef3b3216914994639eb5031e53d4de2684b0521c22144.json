{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport { extractIndexedDBImages } from '@/scripts/extractIndexedDBImages';\n\n// Clave para almacenar la configuración en localStorage\nconst STORAGE_KEY = 'websap_sync_settings';\nexport default {\n  name: 'SyncSettings',\n  setup() {\n    // Estado de sincronización\n    const isSyncing = ref(false);\n    const message = ref('');\n    const messageType = ref('info');\n\n    // Configuración por defecto\n    const defaultSettings = {\n      autoSyncImages: true,\n      compressImages: true,\n      maxImageSize: 500 // KB\n    };\n\n    // Cargar configuración desde localStorage o usar valores por defecto\n    const settings = reactive(loadSettings());\n\n    // Función para cargar la configuración\n    function loadSettings() {\n      try {\n        const savedSettings = localStorage.getItem(STORAGE_KEY);\n        if (savedSettings) {\n          return JSON.parse(savedSettings);\n        }\n      } catch (error) {\n        console.error('Error al cargar configuración de sincronización:', error);\n      }\n      return {\n        ...defaultSettings\n      };\n    }\n\n    // Función para guardar la configuración\n    function saveSettings() {\n      try {\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(settings));\n        showMessage('Configuración guardada', 'success');\n      } catch (error) {\n        console.error('Error al guardar configuración de sincronización:', error);\n        showMessage('Error al guardar configuración', 'error');\n      }\n    }\n\n    // Función para sincronizar todas las imágenes\n    async function syncAllImages() {\n      try {\n        isSyncing.value = true;\n        showMessage('Sincronizando imágenes...', 'info');\n        const result = await extractIndexedDBImages();\n        if (result.success) {\n          showMessage(result.message, 'success');\n        } else {\n          showMessage(result.message, 'error');\n        }\n      } catch (error) {\n        console.error('Error al sincronizar imágenes:', error);\n        showMessage('Error al sincronizar imágenes: ' + error.message, 'error');\n      } finally {\n        isSyncing.value = false;\n      }\n    }\n\n    // Función para mostrar mensajes\n    function showMessage(text, type = 'info') {\n      message.value = text;\n      messageType.value = type;\n\n      // Limpiar el mensaje después de 5 segundos\n      setTimeout(() => {\n        message.value = '';\n      }, 5000);\n    }\n\n    // Cargar configuración al montar el componente\n    onMounted(() => {\n      // Si no hay configuración guardada, guardar la configuración por defecto\n      if (!localStorage.getItem(STORAGE_KEY)) {\n        saveSettings();\n      }\n    });\n    return {\n      settings,\n      isSyncing,\n      message,\n      messageType,\n      saveSettings,\n      syncAllImages\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","extractIndexedDBImages","STORAGE_KEY","name","setup","isSyncing","message","messageType","defaultSettings","autoSyncImages","compressImages","maxImageSize","settings","loadSettings","savedSettings","localStorage","getItem","JSON","parse","error","console","saveSettings","setItem","stringify","showMessage","syncAllImages","value","result","success","text","type","setTimeout"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\components\\utils\\SyncSettings.vue"],"sourcesContent":["// src/components/utils/SyncSettings.vue\n\n<template>\n  <div class=\"sync-settings\">\n    <h3>Configuración de Sincronización</h3>\n    \n    <div class=\"settings-form\">\n      <div class=\"form-group\">\n        <label for=\"autoSyncImages\">\n          <input \n            type=\"checkbox\" \n            id=\"autoSyncImages\" \n            v-model=\"settings.autoSyncImages\"\n            @change=\"saveSettings\"\n          />\n          Sincronizar imágenes automáticamente\n        </label>\n        <div class=\"help-text\">\n          Cuando está activado, las imágenes se sincronizarán automáticamente con el servidor\n        </div>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"compressImages\">\n          <input \n            type=\"checkbox\" \n            id=\"compressImages\" \n            v-model=\"settings.compressImages\"\n            @change=\"saveSettings\"\n          />\n          Comprimir imágenes antes de sincronizar\n        </label>\n        <div class=\"help-text\">\n          Reduce el tamaño de las imágenes para mejorar la velocidad de sincronización\n        </div>\n      </div>\n      \n      <div class=\"form-group\">\n        <label for=\"maxImageSize\">Tamaño máximo de imagen (KB):</label>\n        <input \n          type=\"number\" \n          id=\"maxImageSize\" \n          v-model.number=\"settings.maxImageSize\"\n          min=\"100\" \n          max=\"2000\"\n          @change=\"saveSettings\"\n        />\n        <div class=\"help-text\">\n          Las imágenes más grandes que este valor serán comprimidas automáticamente\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"sync-actions\">\n      <button \n        @click=\"syncAllImages\" \n        class=\"sync-button\"\n        :disabled=\"isSyncing\"\n      >\n        {{ isSyncing ? 'Sincronizando...' : 'Sincronizar todas las imágenes ahora' }}\n      </button>\n      \n      <div v-if=\"message\" :class=\"['sync-message', messageType]\">\n        {{ message }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, onMounted } from 'vue';\nimport { extractIndexedDBImages } from '@/scripts/extractIndexedDBImages';\n\n// Clave para almacenar la configuración en localStorage\nconst STORAGE_KEY = 'websap_sync_settings';\n\nexport default {\n  name: 'SyncSettings',\n  setup() {\n    // Estado de sincronización\n    const isSyncing = ref(false);\n    const message = ref('');\n    const messageType = ref('info');\n    \n    // Configuración por defecto\n    const defaultSettings = {\n      autoSyncImages: true,\n      compressImages: true,\n      maxImageSize: 500 // KB\n    };\n    \n    // Cargar configuración desde localStorage o usar valores por defecto\n    const settings = reactive(loadSettings());\n    \n    // Función para cargar la configuración\n    function loadSettings() {\n      try {\n        const savedSettings = localStorage.getItem(STORAGE_KEY);\n        if (savedSettings) {\n          return JSON.parse(savedSettings);\n        }\n      } catch (error) {\n        console.error('Error al cargar configuración de sincronización:', error);\n      }\n      return { ...defaultSettings };\n    }\n    \n    // Función para guardar la configuración\n    function saveSettings() {\n      try {\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(settings));\n        showMessage('Configuración guardada', 'success');\n      } catch (error) {\n        console.error('Error al guardar configuración de sincronización:', error);\n        showMessage('Error al guardar configuración', 'error');\n      }\n    }\n    \n    // Función para sincronizar todas las imágenes\n    async function syncAllImages() {\n      try {\n        isSyncing.value = true;\n        showMessage('Sincronizando imágenes...', 'info');\n        \n        const result = await extractIndexedDBImages();\n        \n        if (result.success) {\n          showMessage(result.message, 'success');\n        } else {\n          showMessage(result.message, 'error');\n        }\n      } catch (error) {\n        console.error('Error al sincronizar imágenes:', error);\n        showMessage('Error al sincronizar imágenes: ' + error.message, 'error');\n      } finally {\n        isSyncing.value = false;\n      }\n    }\n    \n    // Función para mostrar mensajes\n    function showMessage(text, type = 'info') {\n      message.value = text;\n      messageType.value = type;\n      \n      // Limpiar el mensaje después de 5 segundos\n      setTimeout(() => {\n        message.value = '';\n      }, 5000);\n    }\n    \n    // Cargar configuración al montar el componente\n    onMounted(() => {\n      // Si no hay configuración guardada, guardar la configuración por defecto\n      if (!localStorage.getItem(STORAGE_KEY)) {\n        saveSettings();\n      }\n    });\n    \n    return {\n      settings,\n      isSyncing,\n      message,\n      messageType,\n      saveSettings,\n      syncAllImages\n    };\n  }\n};\n</script>\n\n<style scoped>\n.sync-settings {\n  margin: 20px 0;\n  padding: 15px;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n}\n\nh3 {\n  margin-top: 0;\n  margin-bottom: 15px;\n  color: #333;\n}\n\n.settings-form {\n  margin-bottom: 20px;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\nlabel {\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  margin-bottom: 5px;\n}\n\ninput[type=\"checkbox\"] {\n  margin-right: 8px;\n}\n\ninput[type=\"number\"] {\n  width: 100px;\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.help-text {\n  font-size: 12px;\n  color: #666;\n  margin-top: 3px;\n  margin-left: 24px;\n}\n\n.sync-actions {\n  margin-top: 20px;\n}\n\n.sync-button {\n  padding: 10px 15px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 14px;\n  transition: background-color 0.3s;\n}\n\n.sync-button:hover {\n  background-color: #45a049;\n}\n\n.sync-button:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.sync-message {\n  margin-top: 10px;\n  padding: 8px 12px;\n  border-radius: 4px;\n  font-size: 14px;\n}\n\n.sync-message.info {\n  background-color: #e7f3fe;\n  border: 1px solid #b6d4fe;\n  color: #084298;\n}\n\n.sync-message.success {\n  background-color: #d1e7dd;\n  border: 1px solid #badbcc;\n  color: #0f5132;\n}\n\n.sync-message.warning {\n  background-color: #fff3cd;\n  border: 1px solid #ffecb5;\n  color: #664d03;\n}\n\n.sync-message.error {\n  background-color: #f8d7da;\n  border: 1px solid #f5c2c7;\n  color: #842029;\n}\n</style>\n"],"mappings":"AAsEA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAQ,QAAS,KAAK;AAC9C,SAASC,sBAAqB,QAAS,kCAAkC;;AAEzE;AACA,MAAMC,WAAU,GAAI,sBAAsB;AAE1C,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,KAAKA,CAAA,EAAG;IACN;IACA,MAAMC,SAAQ,GAAIP,GAAG,CAAC,KAAK,CAAC;IAC5B,MAAMQ,OAAM,GAAIR,GAAG,CAAC,EAAE,CAAC;IACvB,MAAMS,WAAU,GAAIT,GAAG,CAAC,MAAM,CAAC;;IAE/B;IACA,MAAMU,eAAc,GAAI;MACtBC,cAAc,EAAE,IAAI;MACpBC,cAAc,EAAE,IAAI;MACpBC,YAAY,EAAE,GAAE,CAAE;IACpB,CAAC;;IAED;IACA,MAAMC,QAAO,GAAIb,QAAQ,CAACc,YAAY,CAAC,CAAC,CAAC;;IAEzC;IACA,SAASA,YAAYA,CAAA,EAAG;MACtB,IAAI;QACF,MAAMC,aAAY,GAAIC,YAAY,CAACC,OAAO,CAACd,WAAW,CAAC;QACvD,IAAIY,aAAa,EAAE;UACjB,OAAOG,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC;QAClC;MACF,EAAE,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kDAAkD,EAAEA,KAAK,CAAC;MAC1E;MACA,OAAO;QAAE,GAAGX;MAAgB,CAAC;IAC/B;;IAEA;IACA,SAASa,YAAYA,CAAA,EAAG;MACtB,IAAI;QACFN,YAAY,CAACO,OAAO,CAACpB,WAAW,EAAEe,IAAI,CAACM,SAAS,CAACX,QAAQ,CAAC,CAAC;QAC3DY,WAAW,CAAC,wBAAwB,EAAE,SAAS,CAAC;MAClD,EAAE,OAAOL,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;QACzEK,WAAW,CAAC,gCAAgC,EAAE,OAAO,CAAC;MACxD;IACF;;IAEA;IACA,eAAeC,aAAaA,CAAA,EAAG;MAC7B,IAAI;QACFpB,SAAS,CAACqB,KAAI,GAAI,IAAI;QACtBF,WAAW,CAAC,2BAA2B,EAAE,MAAM,CAAC;QAEhD,MAAMG,MAAK,GAAI,MAAM1B,sBAAsB,CAAC,CAAC;QAE7C,IAAI0B,MAAM,CAACC,OAAO,EAAE;UAClBJ,WAAW,CAACG,MAAM,CAACrB,OAAO,EAAE,SAAS,CAAC;QACxC,OAAO;UACLkB,WAAW,CAACG,MAAM,CAACrB,OAAO,EAAE,OAAO,CAAC;QACtC;MACF,EAAE,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtDK,WAAW,CAAC,iCAAgC,GAAIL,KAAK,CAACb,OAAO,EAAE,OAAO,CAAC;MACzE,UAAU;QACRD,SAAS,CAACqB,KAAI,GAAI,KAAK;MACzB;IACF;;IAEA;IACA,SAASF,WAAWA,CAACK,IAAI,EAAEC,IAAG,GAAI,MAAM,EAAE;MACxCxB,OAAO,CAACoB,KAAI,GAAIG,IAAI;MACpBtB,WAAW,CAACmB,KAAI,GAAII,IAAI;;MAExB;MACAC,UAAU,CAAC,MAAM;QACfzB,OAAO,CAACoB,KAAI,GAAI,EAAE;MACpB,CAAC,EAAE,IAAI,CAAC;IACV;;IAEA;IACA1B,SAAS,CAAC,MAAM;MACd;MACA,IAAI,CAACe,YAAY,CAACC,OAAO,CAACd,WAAW,CAAC,EAAE;QACtCmB,YAAY,CAAC,CAAC;MAChB;IACF,CAAC,CAAC;IAEF,OAAO;MACLT,QAAQ;MACRP,SAAS;MACTC,OAAO;MACPC,WAAW;MACXc,YAAY;MACZI;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}