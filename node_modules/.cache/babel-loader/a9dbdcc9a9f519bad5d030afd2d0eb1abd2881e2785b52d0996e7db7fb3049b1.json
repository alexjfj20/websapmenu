{"ast":null,"code":"// Importar fetch (no necesitamos axios)\n// Configuración de la API base\nconst API_URL = 'http://localhost:3000/api';\n\n// Variables para el usuario actual y token\nlet currentUser = null;\nlet authToken = localStorage.getItem('auth_token') || null;\n\n/**\r\n * Configura el token de autorización para las solicitudes API\r\n * @param {string} token - Token JWT\r\n */\nfunction setAuthToken(token) {\n  if (token) {\n    localStorage.setItem('auth_token', token);\n    authToken = token;\n  } else {\n    localStorage.removeItem('auth_token');\n    authToken = null;\n  }\n}\n\n/**\r\n * Función para iniciar sesión con la API\r\n * @param {string} email - Correo electrónico del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\nasync function login(email, password) {\n  console.log(\"Intentando iniciar sesión como:\", email);\n  try {\n    // Intentar conectar con el backend primero\n    try {\n      const response = await fetch(`${API_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        }),\n        mode: 'cors',\n        credentials: 'include'\n      });\n\n      // Si la respuesta es exitosa, procesar normalmente\n      if (response.ok) {\n        const data = await response.json();\n        const {\n          usuario,\n          token\n        } = data;\n\n        // Almacenar datos de autenticación\n        localStorage.setItem('isLoggedIn', 'true');\n        localStorage.setItem('currentUser', JSON.stringify(usuario));\n        localStorage.setItem('authToken', token);\n        return usuario;\n      } else {\n        // Si hay un error en la respuesta, intentar con usuarios locales\n        throw new Error('Error en la respuesta del servidor');\n      }\n    } catch (fetchError) {\n      console.warn(\"Error al conectar con el backend, usando usuarios locales:\", fetchError);\n\n      // Si falla la conexión al backend, usar usuarios locales\n      const localUsers = [{\n        id: 1,\n        email: 'superadmin@gmail.com',\n        password: 'SuperAdmin2023',\n        nombre: 'Super Administrador',\n        roles: ['Superadministrador']\n      }, {\n        id: 2,\n        email: 'admin@example.com',\n        password: 'Admin2023',\n        nombre: 'Administrador',\n        roles: ['Administrador']\n      }, {\n        id: 3,\n        email: 'admin',\n        password: 'admin',\n        nombre: 'Super Admin',\n        roles: ['Superadministrador', 'Administrador']\n      }];\n\n      // Buscar usuario por email y password\n      const user = localUsers.find(u => u.email === email && u.password === password);\n      if (!user) {\n        throw new Error('Credenciales incorrectas');\n      }\n\n      // Simular autenticación exitosa\n      const userData = {\n        ...user\n      };\n      delete userData.password; // No almacenar la contraseña en localStorage\n\n      localStorage.setItem('isLoggedIn', 'true');\n      localStorage.setItem('currentUser', JSON.stringify(userData));\n      return userData;\n    }\n  } catch (error) {\n    console.error(\"Error en login:\", error);\n    throw error;\n  }\n}\n\n/**\r\n * Cierra la sesión del usuario\r\n */\nfunction logout() {\n  localStorage.removeItem('isLoggedIn');\n  localStorage.removeItem('currentUser');\n  localStorage.removeItem('authToken');\n}\n\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} - Verdadero si hay un usuario autenticado\r\n */\nfunction isAuthenticated() {\n  return localStorage.getItem('isLoggedIn') === 'true';\n}\n\n/**\r\n * Obtiene el usuario actual\r\n * @returns {Object|null} - Usuario actual o null\r\n */\nfunction getCurrentUser() {\n  const userStr = localStorage.getItem('currentUser');\n  if (!userStr) return null;\n  try {\n    return JSON.parse(userStr);\n  } catch (e) {\n    console.error('Error al parsear usuario:', e);\n    return null;\n  }\n}\n\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName - Nombre del rol a verificar\r\n * @returns {boolean} - Verdadero si el usuario tiene el rol\r\n */\nfunction hasRole(roleName) {\n  const user = getCurrentUser();\n  if (!user || !user.roles) return false;\n  return Array.isArray(user.roles) ? user.roles.includes(roleName) : user.roles === roleName;\n}\n\n// Exportar funciones\nexport { login, logout, isAuthenticated, getCurrentUser, hasRole };\nexport default {\n  login,\n  logout,\n  isAuthenticated,\n  getCurrentUser,\n  hasRole\n};","map":{"version":3,"names":["API_URL","currentUser","authToken","localStorage","getItem","setAuthToken","token","setItem","removeItem","login","email","password","console","log","response","fetch","method","headers","body","JSON","stringify","mode","credentials","ok","data","json","usuario","Error","fetchError","warn","localUsers","id","nombre","roles","user","find","u","userData","error","logout","isAuthenticated","getCurrentUser","userStr","parse","e","hasRole","roleName","Array","isArray","includes"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/authService.js"],"sourcesContent":["// Importar fetch (no necesitamos axios)\r\n// Configuración de la API base\r\nconst API_URL = 'http://localhost:3000/api';\r\n\r\n// Variables para el usuario actual y token\r\nlet currentUser = null;\r\nlet authToken = localStorage.getItem('auth_token') || null;\r\n\r\n/**\r\n * Configura el token de autorización para las solicitudes API\r\n * @param {string} token - Token JWT\r\n */\r\nfunction setAuthToken(token) {\r\n  if (token) {\r\n    localStorage.setItem('auth_token', token);\r\n    authToken = token;\r\n  } else {\r\n    localStorage.removeItem('auth_token');\r\n    authToken = null;\r\n  }\r\n}\r\n\r\n/**\r\n * Función para iniciar sesión con la API\r\n * @param {string} email - Correo electrónico del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\r\nasync function login(email, password) {\r\n  console.log(\"Intentando iniciar sesión como:\", email);\r\n  \r\n  try {\r\n    // Intentar conectar con el backend primero\r\n    try {\r\n      const response = await fetch(`${API_URL}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n        mode: 'cors',\r\n        credentials: 'include'\r\n      });\r\n      \r\n      // Si la respuesta es exitosa, procesar normalmente\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const { usuario, token } = data;\r\n        \r\n        // Almacenar datos de autenticación\r\n        localStorage.setItem('isLoggedIn', 'true');\r\n        localStorage.setItem('currentUser', JSON.stringify(usuario));\r\n        localStorage.setItem('authToken', token);\r\n        \r\n        return usuario;\r\n      } else {\r\n        // Si hay un error en la respuesta, intentar con usuarios locales\r\n        throw new Error('Error en la respuesta del servidor');\r\n      }\r\n    } catch (fetchError) {\r\n      console.warn(\"Error al conectar con el backend, usando usuarios locales:\", fetchError);\r\n      \r\n      // Si falla la conexión al backend, usar usuarios locales\r\n      const localUsers = [\r\n        {\r\n          id: 1,\r\n          email: 'superadmin@gmail.com',\r\n          password: 'SuperAdmin2023',\r\n          nombre: 'Super Administrador',\r\n          roles: ['Superadministrador']\r\n        },\r\n        {\r\n          id: 2,\r\n          email: 'admin@example.com',\r\n          password: 'Admin2023',\r\n          nombre: 'Administrador',\r\n          roles: ['Administrador']\r\n        },\r\n        {\r\n          id: 3,\r\n          email: 'admin',\r\n          password: 'admin',\r\n          nombre: 'Super Admin',\r\n          roles: ['Superadministrador', 'Administrador']\r\n        }\r\n      ];\r\n      \r\n      // Buscar usuario por email y password\r\n      const user = localUsers.find(u => u.email === email && u.password === password);\r\n      \r\n      if (!user) {\r\n        throw new Error('Credenciales incorrectas');\r\n      }\r\n      \r\n      // Simular autenticación exitosa\r\n      const userData = { ...user };\r\n      delete userData.password; // No almacenar la contraseña en localStorage\r\n      \r\n      localStorage.setItem('isLoggedIn', 'true');\r\n      localStorage.setItem('currentUser', JSON.stringify(userData));\r\n      \r\n      return userData;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error en login:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Cierra la sesión del usuario\r\n */\r\nfunction logout() {\r\n  localStorage.removeItem('isLoggedIn');\r\n  localStorage.removeItem('currentUser');\r\n  localStorage.removeItem('authToken');\r\n}\r\n\r\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} - Verdadero si hay un usuario autenticado\r\n */\r\nfunction isAuthenticated() {\r\n  return localStorage.getItem('isLoggedIn') === 'true';\r\n}\r\n\r\n/**\r\n * Obtiene el usuario actual\r\n * @returns {Object|null} - Usuario actual o null\r\n */\r\nfunction getCurrentUser() {\r\n  const userStr = localStorage.getItem('currentUser');\r\n  if (!userStr) return null;\r\n  \r\n  try {\r\n    return JSON.parse(userStr);\r\n  } catch (e) {\r\n    console.error('Error al parsear usuario:', e);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName - Nombre del rol a verificar\r\n * @returns {boolean} - Verdadero si el usuario tiene el rol\r\n */\r\nfunction hasRole(roleName) {\r\n  const user = getCurrentUser();\r\n  if (!user || !user.roles) return false;\r\n  \r\n  return Array.isArray(user.roles) \r\n    ? user.roles.includes(roleName) \r\n    : user.roles === roleName;\r\n}\r\n\r\n// Exportar funciones\r\nexport {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  getCurrentUser,\r\n  hasRole\r\n};\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  getCurrentUser,\r\n  hasRole\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}