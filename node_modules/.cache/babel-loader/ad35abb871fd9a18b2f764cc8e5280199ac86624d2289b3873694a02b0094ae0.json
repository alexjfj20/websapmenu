{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\n// src/scripts/extractIndexedDBImages.js\n\nimport { getAllPlatos } from '../services/indexedDBService';\nimport apiService from '../services/apiService';\n\n/**\n * Función para extraer las imágenes de los platos desde IndexedDB y enviarlas al servidor\n */\nexport async function extractIndexedDBImages() {\n  try {\n    console.log('Extrayendo imágenes de IndexedDB...');\n\n    // Obtener todos los platos de IndexedDB\n    const platos = await getAllPlatos();\n    if (!platos || platos.length === 0) {\n      console.warn('No hay platos en IndexedDB para extraer imágenes');\n      return {\n        success: false,\n        message: 'No hay platos en IndexedDB para extraer imágenes'\n      };\n    }\n    console.log(`Se encontraron ${platos.length} platos en IndexedDB`);\n\n    // Filtrar solo los platos que tienen imagen\n    const platosConImagen = platos.filter(plato => plato.image && plato.image.length > 0);\n    console.log(`${platosConImagen.length} platos tienen imágenes en IndexedDB`);\n    if (platosConImagen.length === 0) {\n      console.warn('Ninguno de los platos tiene imágenes en IndexedDB');\n      return {\n        success: false,\n        message: 'Ninguno de los platos tiene imágenes en IndexedDB'\n      };\n    }\n\n    // Enviar los platos con imágenes al servidor\n    const response = await apiService.post('/indexeddb/backup', {\n      platos: platosConImagen\n    });\n    if (response && response.success) {\n      console.log('Imágenes extraídas y enviadas al servidor con éxito');\n\n      // Sincronizar las imágenes con MySQL\n      try {\n        const syncResponse = await apiService.post('/indexeddb/sync-images');\n        if (syncResponse && syncResponse.success) {\n          console.log('Imágenes sincronizadas con MySQL con éxito');\n          return {\n            success: true,\n            message: `Imágenes extraídas y sincronizadas con éxito. ${syncResponse.data.actualizados} platos actualizados.`\n          };\n        } else {\n          console.error('Error al sincronizar imágenes con MySQL:', syncResponse?.message || 'Error desconocido');\n          return {\n            success: false,\n            message: 'Error al sincronizar imágenes con MySQL: ' + (syncResponse?.message || 'Error desconocido')\n          };\n        }\n      } catch (syncError) {\n        console.error('Error al sincronizar imágenes con MySQL:', syncError);\n        return {\n          success: false,\n          message: 'Error al sincronizar imágenes con MySQL: ' + syncError.message\n        };\n      }\n    } else {\n      console.error('Error al enviar imágenes al servidor:', response?.message || 'Error desconocido');\n      return {\n        success: false,\n        message: 'Error al enviar imágenes al servidor: ' + (response?.message || 'Error desconocido')\n      };\n    }\n  } catch (error) {\n    console.error('Error al extraer imágenes de IndexedDB:', error);\n    return {\n      success: false,\n      message: 'Error al extraer imágenes de IndexedDB: ' + error.message\n    };\n  }\n}","map":{"version":3,"names":["getAllPlatos","apiService","extractIndexedDBImages","console","log","platos","length","warn","success","message","platosConImagen","filter","plato","image","response","post","syncResponse","data","actualizados","error","syncError"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/scripts/extractIndexedDBImages.js"],"sourcesContent":["// src/scripts/extractIndexedDBImages.js\n\nimport { getAllPlatos } from '../services/indexedDBService';\nimport apiService from '../services/apiService';\n\n/**\n * Función para extraer las imágenes de los platos desde IndexedDB y enviarlas al servidor\n */\nexport async function extractIndexedDBImages() {\n  try {\n    console.log('Extrayendo imágenes de IndexedDB...');\n    \n    // Obtener todos los platos de IndexedDB\n    const platos = await getAllPlatos();\n    \n    if (!platos || platos.length === 0) {\n      console.warn('No hay platos en IndexedDB para extraer imágenes');\n      return {\n        success: false,\n        message: 'No hay platos en IndexedDB para extraer imágenes'\n      };\n    }\n    \n    console.log(`Se encontraron ${platos.length} platos en IndexedDB`);\n    \n    // Filtrar solo los platos que tienen imagen\n    const platosConImagen = platos.filter(plato => plato.image && plato.image.length > 0);\n    \n    console.log(`${platosConImagen.length} platos tienen imágenes en IndexedDB`);\n    \n    if (platosConImagen.length === 0) {\n      console.warn('Ninguno de los platos tiene imágenes en IndexedDB');\n      return {\n        success: false,\n        message: 'Ninguno de los platos tiene imágenes en IndexedDB'\n      };\n    }\n    \n    // Enviar los platos con imágenes al servidor\n    const response = await apiService.post('/indexeddb/backup', { platos: platosConImagen });\n    \n    if (response && response.success) {\n      console.log('Imágenes extraídas y enviadas al servidor con éxito');\n      \n      // Sincronizar las imágenes con MySQL\n      try {\n        const syncResponse = await apiService.post('/indexeddb/sync-images');\n        \n        if (syncResponse && syncResponse.success) {\n          console.log('Imágenes sincronizadas con MySQL con éxito');\n          return {\n            success: true,\n            message: `Imágenes extraídas y sincronizadas con éxito. ${syncResponse.data.actualizados} platos actualizados.`\n          };\n        } else {\n          console.error('Error al sincronizar imágenes con MySQL:', syncResponse?.message || 'Error desconocido');\n          return {\n            success: false,\n            message: 'Error al sincronizar imágenes con MySQL: ' + (syncResponse?.message || 'Error desconocido')\n          };\n        }\n      } catch (syncError) {\n        console.error('Error al sincronizar imágenes con MySQL:', syncError);\n        return {\n          success: false,\n          message: 'Error al sincronizar imágenes con MySQL: ' + syncError.message\n        };\n      }\n    } else {\n      console.error('Error al enviar imágenes al servidor:', response?.message || 'Error desconocido');\n      return {\n        success: false,\n        message: 'Error al enviar imágenes al servidor: ' + (response?.message || 'Error desconocido')\n      };\n    }\n  } catch (error) {\n    console.error('Error al extraer imágenes de IndexedDB:', error);\n    return {\n      success: false,\n      message: 'Error al extraer imágenes de IndexedDB: ' + error.message\n    };\n  }\n}\n"],"mappings":";;AAAA;;AAEA,SAASA,YAAY,QAAQ,8BAA8B;AAC3D,OAAOC,UAAU,MAAM,wBAAwB;;AAE/C;AACA;AACA;AACA,OAAO,eAAeC,sBAAsBA,CAAA,EAAG;EAC7C,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;;IAElD;IACA,MAAMC,MAAM,GAAG,MAAML,YAAY,CAAC,CAAC;IAEnC,IAAI,CAACK,MAAM,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE;MAClCH,OAAO,CAACI,IAAI,CAAC,kDAAkD,CAAC;MAChE,OAAO;QACLC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;IAEAN,OAAO,CAACC,GAAG,CAAC,kBAAkBC,MAAM,CAACC,MAAM,sBAAsB,CAAC;;IAElE;IACA,MAAMI,eAAe,GAAGL,MAAM,CAACM,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,KAAK,IAAID,KAAK,CAACC,KAAK,CAACP,MAAM,GAAG,CAAC,CAAC;IAErFH,OAAO,CAACC,GAAG,CAAC,GAAGM,eAAe,CAACJ,MAAM,sCAAsC,CAAC;IAE5E,IAAII,eAAe,CAACJ,MAAM,KAAK,CAAC,EAAE;MAChCH,OAAO,CAACI,IAAI,CAAC,mDAAmD,CAAC;MACjE,OAAO;QACLC,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE;MACX,CAAC;IACH;;IAEA;IACA,MAAMK,QAAQ,GAAG,MAAMb,UAAU,CAACc,IAAI,CAAC,mBAAmB,EAAE;MAAEV,MAAM,EAAEK;IAAgB,CAAC,CAAC;IAExF,IAAII,QAAQ,IAAIA,QAAQ,CAACN,OAAO,EAAE;MAChCL,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;;MAElE;MACA,IAAI;QACF,MAAMY,YAAY,GAAG,MAAMf,UAAU,CAACc,IAAI,CAAC,wBAAwB,CAAC;QAEpE,IAAIC,YAAY,IAAIA,YAAY,CAACR,OAAO,EAAE;UACxCL,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;UACzD,OAAO;YACLI,OAAO,EAAE,IAAI;YACbC,OAAO,EAAE,iDAAiDO,YAAY,CAACC,IAAI,CAACC,YAAY;UAC1F,CAAC;QACH,CAAC,MAAM;UACLf,OAAO,CAACgB,KAAK,CAAC,0CAA0C,EAAEH,YAAY,EAAEP,OAAO,IAAI,mBAAmB,CAAC;UACvG,OAAO;YACLD,OAAO,EAAE,KAAK;YACdC,OAAO,EAAE,2CAA2C,IAAIO,YAAY,EAAEP,OAAO,IAAI,mBAAmB;UACtG,CAAC;QACH;MACF,CAAC,CAAC,OAAOW,SAAS,EAAE;QAClBjB,OAAO,CAACgB,KAAK,CAAC,0CAA0C,EAAEC,SAAS,CAAC;QACpE,OAAO;UACLZ,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE,2CAA2C,GAAGW,SAAS,CAACX;QACnE,CAAC;MACH;IACF,CAAC,MAAM;MACLN,OAAO,CAACgB,KAAK,CAAC,uCAAuC,EAAEL,QAAQ,EAAEL,OAAO,IAAI,mBAAmB,CAAC;MAChG,OAAO;QACLD,OAAO,EAAE,KAAK;QACdC,OAAO,EAAE,wCAAwC,IAAIK,QAAQ,EAAEL,OAAO,IAAI,mBAAmB;MAC/F,CAAC;IACH;EACF,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdhB,OAAO,CAACgB,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAC/D,OAAO;MACLX,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE,0CAA0C,GAAGU,KAAK,CAACV;IAC9D,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}