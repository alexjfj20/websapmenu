{"ast":null,"code":"// src/services/syncService.js\n\n// Servicio para gestionar la sincronización y el estado de la conexión\nimport { getPendingPlatos, updatePlatoSyncStatus, getSyncQueue, removeFromSyncQueue } from './indexedDBService';\nconst API_URL = 'http://localhost:3000/api';\n\n// Estado de la sincronización\nlet isSyncing = false;\nlet _isOnline = navigator.onLine;\n\n// Función mejorada para verificar la conexión\nconst isOnline = async () => {\n  try {\n    // Primero comprobamos el estado del navegador\n    if (!navigator.onLine) {\n      _isOnline = false;\n      return false;\n    }\n\n    // Luego intentamos hacer una petición real al servidor\n    const response = await fetch(`${API_URL}/status`, {\n      method: 'GET',\n      headers: {\n        'Cache-Control': 'no-cache'\n      },\n      mode: 'cors',\n      cache: 'no-store'\n    });\n    _isOnline = response.ok;\n    return _isOnline;\n  } catch (error) {\n    console.error('Error al verificar conexión:', error);\n    _isOnline = false;\n    return false;\n  }\n};\n\n// Configurar escuchas para eventos de conexión\nconst setupConnectionListeners = () => {\n  window.addEventListener('online', async () => {\n    console.log('Evento online detectado');\n    _isOnline = await isOnline();\n    if (_isOnline) {\n      console.log('Conexión a Internet restablecida');\n      // Sincronizar cuando se recupera la conexión\n      syncData();\n    }\n  });\n  window.addEventListener('offline', () => {\n    console.log('Evento offline detectado');\n    _isOnline = false;\n    console.log('Conexión a Internet perdida');\n  });\n\n  // Verificar estado inicial\n  isOnline().then(online => {\n    console.log(`Estado inicial de conexión: ${online ? 'En línea' : 'Fuera de línea'}`);\n  });\n};\n\n// Sincronizar un plato con el servidor\nconst syncPlatoToServer = async plato => {\n  try {\n    console.log(`Sincronizando plato ${plato.id} con el servidor...`);\n    const response = await fetch(`${API_URL}/platos`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: plato.name,\n        description: plato.description,\n        price: plato.price,\n        category: plato.category,\n        image_url: plato.image_url || null,\n        is_available: plato.is_available || true\n      })\n    });\n    if (!response.ok) {\n      console.error(`Error del servidor: ${response.status}`);\n      throw new Error(`Error del servidor: ${response.status}`);\n    }\n    const serverData = await response.json();\n    console.log('Plato sincronizado con el servidor:', serverData);\n\n    // Actualizar estado de sincronización en IndexedDB\n    await updatePlatoSyncStatus(plato.id, 'synced');\n    return true;\n  } catch (error) {\n    console.error('Error al sincronizar plato con el servidor:', error);\n    return false;\n  }\n};\n\n// Procesar la cola de sincronización\nconst processSyncQueue = async () => {\n  if (!(await isOnline()) || isSyncing) {\n    console.log(`No se puede procesar la cola. En línea: ${_isOnline}, Sincronizando: ${isSyncing}`);\n    return false;\n  }\n  isSyncing = true;\n  console.log('Iniciando procesamiento de cola de sincronización...');\n  try {\n    const syncItems = await getSyncQueue();\n    if (syncItems.length === 0) {\n      console.log('No hay elementos en la cola de sincronización');\n      isSyncing = false;\n      return true;\n    }\n    console.log(`Procesando ${syncItems.length} elementos en la cola de sincronización`);\n\n    // Procesar cada elemento de la cola\n    for (const item of syncItems) {\n      let syncSuccess = false;\n      if (item.type === 'create' && item.entityType === 'plato') {\n        syncSuccess = await syncPlatoToServer(item.data);\n      }\n      // Aquí pueden agregarse más tipos de sincronización según sea necesario\n\n      if (syncSuccess) {\n        // Eliminar de la cola si la sincronización fue exitosa\n        await removeFromSyncQueue(item.id);\n        console.log(`Elemento ${item.id} eliminado de la cola de sincronización`);\n      } else {\n        console.log(`No se pudo sincronizar el elemento ${item.id}, se reintentará más tarde`);\n      }\n    }\n    console.log('Procesamiento de cola de sincronización completado');\n    return true;\n  } catch (error) {\n    console.error('Error al procesar cola de sincronización:', error);\n    return false;\n  } finally {\n    isSyncing = false;\n  }\n};\n\n// Función principal para sincronizar datos\nconst syncData = async () => {\n  if (!(await isOnline())) {\n    console.log('Sin conexión a Internet, la sincronización no es posible');\n    return false;\n  }\n  try {\n    console.log('Iniciando sincronización de datos...');\n\n    // Procesar la cola de sincronización\n    await processSyncQueue();\n\n    // Sincronizar platos pendientes que no estén en la cola\n    const pendingPlatos = await getPendingPlatos();\n    console.log(`Encontrados ${pendingPlatos.length} platos pendientes de sincronización`);\n    for (const plato of pendingPlatos) {\n      await syncPlatoToServer(plato);\n    }\n    console.log('Sincronización completada con éxito');\n    return true;\n  } catch (error) {\n    console.error('Error durante la sincronización:', error);\n    return false;\n  }\n};\n\n// Inicializar el servicio de sincronización\nconst initSyncService = () => {\n  // Configurar escuchas para eventos de conexión\n  setupConnectionListeners();\n\n  // Realizar sincronización inicial si hay conexión\n  isOnline().then(online => {\n    if (online) {\n      syncData();\n    }\n  });\n\n  // Configurar sincronización periódica (cada minuto)\n  setInterval(async () => {\n    if ((await isOnline()) && !isSyncing) {\n      syncData();\n    }\n  }, 60000);\n  console.log('Servicio de sincronización inicializado');\n};\nexport { initSyncService, syncData, isOnline, _isOnline };","map":{"version":3,"names":["getPendingPlatos","updatePlatoSyncStatus","getSyncQueue","removeFromSyncQueue","API_URL","isSyncing","_isOnline","navigator","onLine","isOnline","response","fetch","method","headers","mode","cache","ok","error","console","setupConnectionListeners","window","addEventListener","log","syncData","then","online","syncPlatoToServer","plato","id","body","JSON","stringify","name","description","price","category","image_url","is_available","status","Error","serverData","json","processSyncQueue","syncItems","length","item","syncSuccess","type","entityType","data","pendingPlatos","initSyncService","setInterval"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/syncService.js"],"sourcesContent":["// src/services/syncService.js\r\n\r\n// Servicio para gestionar la sincronización y el estado de la conexión\r\nimport { \r\n  getPendingPlatos, \r\n  updatePlatoSyncStatus, \r\n  getSyncQueue, \r\n  removeFromSyncQueue \r\n} from './indexedDBService';\r\n\r\nconst API_URL = 'http://localhost:3000/api';\r\n\r\n// Estado de la sincronización\r\nlet isSyncing = false;\r\nlet _isOnline = navigator.onLine;\r\n\r\n// Función mejorada para verificar la conexión\r\nconst isOnline = async () => {\r\n  try {\r\n    // Primero comprobamos el estado del navegador\r\n    if (!navigator.onLine) {\r\n      _isOnline = false;\r\n      return false;\r\n    }\r\n    \r\n    // Luego intentamos hacer una petición real al servidor\r\n    const response = await fetch(`${API_URL}/status`, { \r\n      method: 'GET',\r\n      headers: { 'Cache-Control': 'no-cache' },\r\n      mode: 'cors',\r\n      cache: 'no-store'\r\n    });\r\n    \r\n    _isOnline = response.ok;\r\n    return _isOnline;\r\n  } catch (error) {\r\n    console.error('Error al verificar conexión:', error);\r\n    _isOnline = false;\r\n    return false;\r\n  }\r\n};\r\n\r\n// Configurar escuchas para eventos de conexión\r\nconst setupConnectionListeners = () => {\r\n  window.addEventListener('online', async () => {\r\n    console.log('Evento online detectado');\r\n    _isOnline = await isOnline();\r\n    if (_isOnline) {\r\n      console.log('Conexión a Internet restablecida');\r\n      // Sincronizar cuando se recupera la conexión\r\n      syncData();\r\n    }\r\n  });\r\n  \r\n  window.addEventListener('offline', () => {\r\n    console.log('Evento offline detectado');\r\n    _isOnline = false;\r\n    console.log('Conexión a Internet perdida');\r\n  });\r\n  \r\n  // Verificar estado inicial\r\n  isOnline().then(online => {\r\n    console.log(`Estado inicial de conexión: ${online ? 'En línea' : 'Fuera de línea'}`);\r\n  });\r\n};\r\n\r\n// Sincronizar un plato con el servidor\r\nconst syncPlatoToServer = async (plato) => {\r\n  try {\r\n    console.log(`Sincronizando plato ${plato.id} con el servidor...`);\r\n    const response = await fetch(`${API_URL}/platos`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        name: plato.name,\r\n        description: plato.description,\r\n        price: plato.price,\r\n        category: plato.category,\r\n        image_url: plato.image_url || null,\r\n        is_available: plato.is_available || true\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      console.error(`Error del servidor: ${response.status}`);\r\n      throw new Error(`Error del servidor: ${response.status}`);\r\n    }\r\n    \r\n    const serverData = await response.json();\r\n    console.log('Plato sincronizado con el servidor:', serverData);\r\n    \r\n    // Actualizar estado de sincronización en IndexedDB\r\n    await updatePlatoSyncStatus(plato.id, 'synced');\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al sincronizar plato con el servidor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Procesar la cola de sincronización\r\nconst processSyncQueue = async () => {\r\n  if (!await isOnline() || isSyncing) {\r\n    console.log(`No se puede procesar la cola. En línea: ${_isOnline}, Sincronizando: ${isSyncing}`);\r\n    return false;\r\n  }\r\n  \r\n  isSyncing = true;\r\n  console.log('Iniciando procesamiento de cola de sincronización...');\r\n  \r\n  try {\r\n    const syncItems = await getSyncQueue();\r\n    \r\n    if (syncItems.length === 0) {\r\n      console.log('No hay elementos en la cola de sincronización');\r\n      isSyncing = false;\r\n      return true;\r\n    }\r\n    \r\n    console.log(`Procesando ${syncItems.length} elementos en la cola de sincronización`);\r\n    \r\n    // Procesar cada elemento de la cola\r\n    for (const item of syncItems) {\r\n      let syncSuccess = false;\r\n      \r\n      if (item.type === 'create' && item.entityType === 'plato') {\r\n        syncSuccess = await syncPlatoToServer(item.data);\r\n      }\r\n      // Aquí pueden agregarse más tipos de sincronización según sea necesario\r\n      \r\n      if (syncSuccess) {\r\n        // Eliminar de la cola si la sincronización fue exitosa\r\n        await removeFromSyncQueue(item.id);\r\n        console.log(`Elemento ${item.id} eliminado de la cola de sincronización`);\r\n      } else {\r\n        console.log(`No se pudo sincronizar el elemento ${item.id}, se reintentará más tarde`);\r\n      }\r\n    }\r\n    \r\n    console.log('Procesamiento de cola de sincronización completado');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al procesar cola de sincronización:', error);\r\n    return false;\r\n  } finally {\r\n    isSyncing = false;\r\n  }\r\n};\r\n\r\n// Función principal para sincronizar datos\r\nconst syncData = async () => {\r\n  if (!await isOnline()) {\r\n    console.log('Sin conexión a Internet, la sincronización no es posible');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    console.log('Iniciando sincronización de datos...');\r\n    \r\n    // Procesar la cola de sincronización\r\n    await processSyncQueue();\r\n    \r\n    // Sincronizar platos pendientes que no estén en la cola\r\n    const pendingPlatos = await getPendingPlatos();\r\n    console.log(`Encontrados ${pendingPlatos.length} platos pendientes de sincronización`);\r\n    \r\n    for (const plato of pendingPlatos) {\r\n      await syncPlatoToServer(plato);\r\n    }\r\n    \r\n    console.log('Sincronización completada con éxito');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error durante la sincronización:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Inicializar el servicio de sincronización\r\nconst initSyncService = () => {\r\n  // Configurar escuchas para eventos de conexión\r\n  setupConnectionListeners();\r\n  \r\n  // Realizar sincronización inicial si hay conexión\r\n  isOnline().then(online => {\r\n    if (online) {\r\n      syncData();\r\n    }\r\n  });\r\n  \r\n  // Configurar sincronización periódica (cada minuto)\r\n  setInterval(async () => {\r\n    if (await isOnline() && !isSyncing) {\r\n      syncData();\r\n    }\r\n  }, 60000);\r\n  \r\n  console.log('Servicio de sincronización inicializado');\r\n};\r\n\r\nexport {\r\n  initSyncService,\r\n  syncData,\r\n  isOnline,\r\n  _isOnline\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}