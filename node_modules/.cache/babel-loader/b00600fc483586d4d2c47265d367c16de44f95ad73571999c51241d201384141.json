{"ast":null,"code":"import { getPendingPlatos, updatePlatoSyncStatus, getSyncQueue, removeFromSyncQueue } from './indexedDBService';\nconst API_URL = 'http://localhost:8081/api';\n\n// Estado de la sincronización\nlet isSyncing = false;\nlet isOnline = navigator.onLine;\n\n// Verificar la conexión inicial\nconst checkConnection = () => {\n  isOnline = navigator.onLine;\n  console.log(`Estado de conexión: ${isOnline ? 'En línea' : 'Fuera de línea'}`);\n  return isOnline;\n};\n\n// Configurar escuchas para eventos de conexión\nconst setupConnectionListeners = () => {\n  window.addEventListener('online', () => {\n    console.log('Conexión a Internet restablecida');\n    isOnline = true;\n    // Sincronizar cuando se recupera la conexión\n    syncData();\n  });\n  window.addEventListener('offline', () => {\n    console.log('Conexión a Internet perdida');\n    isOnline = false;\n  });\n\n  // Verificar estado inicial\n  checkConnection();\n};\n\n// Sincronizar un plato con el servidor\nconst syncPlatoToServer = async plato => {\n  try {\n    const response = await fetch(`${API_URL}/platos`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n        // Añadir token si es necesario\n        // 'Authorization': `Bearer ${getToken()}`\n      },\n      body: JSON.stringify({\n        name: plato.name,\n        description: plato.description,\n        price: plato.price,\n        category: plato.category,\n        image_url: plato.image_url || null,\n        is_available: plato.is_available || true\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Error del servidor: ${response.status}`);\n    }\n    const serverData = await response.json();\n    console.log('Plato sincronizado con el servidor:', serverData);\n\n    // Actualizar estado de sincronización en IndexedDB\n    await updatePlatoSyncStatus(plato.id, 'synced');\n    return true;\n  } catch (error) {\n    console.error('Error al sincronizar plato con el servidor:', error);\n    return false;\n  }\n};\n\n// Procesar la cola de sincronización\nconst processSyncQueue = async () => {\n  if (!isOnline || isSyncing) {\n    return false;\n  }\n  isSyncing = true;\n  console.log('Iniciando procesamiento de cola de sincronización...');\n  try {\n    const syncItems = await getSyncQueue();\n    if (syncItems.length === 0) {\n      console.log('No hay elementos en la cola de sincronización');\n      isSyncing = false;\n      return true;\n    }\n    console.log(`Procesando ${syncItems.length} elementos en la cola de sincronización`);\n\n    // Procesar cada elemento de la cola\n    for (const item of syncItems) {\n      let syncSuccess = false;\n      if (item.type === 'create' && item.entityType === 'plato') {\n        syncSuccess = await syncPlatoToServer(item.data);\n      }\n      // Aquí pueden agregarse más tipos de sincronización según sea necesario\n\n      if (syncSuccess) {\n        // Eliminar de la cola si la sincronización fue exitosa\n        await removeFromSyncQueue(item.id);\n      } else {\n        console.log(`No se pudo sincronizar el elemento ${item.id}, se reintentará más tarde`);\n      }\n    }\n    console.log('Procesamiento de cola de sincronización completado');\n    return true;\n  } catch (error) {\n    console.error('Error al procesar cola de sincronización:', error);\n    return false;\n  } finally {\n    isSyncing = false;\n  }\n};\n\n// Función principal para sincronizar datos\nconst syncData = async () => {\n  if (!isOnline) {\n    console.log('Sin conexión a Internet, la sincronización no es posible');\n    return false;\n  }\n  try {\n    console.log('Iniciando sincronización de datos...');\n\n    // Procesar la cola de sincronización\n    await processSyncQueue();\n\n    // Sincronizar platos pendientes que no estén en la cola\n    const pendingPlatos = await getPendingPlatos();\n    console.log(`Encontrados ${pendingPlatos.length} platos pendientes de sincronización`);\n    for (const plato of pendingPlatos) {\n      await syncPlatoToServer(plato);\n    }\n    console.log('Sincronización completada con éxito');\n    return true;\n  } catch (error) {\n    console.error('Error durante la sincronización:', error);\n    return false;\n  }\n};\n\n// Inicializar el servicio de sincronización\nconst initSyncService = () => {\n  // Configurar escuchas para eventos de conexión\n  setupConnectionListeners();\n\n  // Realizar sincronización inicial si hay conexión\n  if (isOnline) {\n    syncData();\n  }\n\n  // Configurar sincronización periódica (cada minuto)\n  setInterval(() => {\n    if (isOnline && !isSyncing) {\n      syncData();\n    }\n  }, 60000);\n  console.log('Servicio de sincronización inicializado');\n};\nexport { initSyncService, syncData, checkConnection, isOnline };","map":{"version":3,"names":["getPendingPlatos","updatePlatoSyncStatus","getSyncQueue","removeFromSyncQueue","API_URL","isSyncing","isOnline","navigator","onLine","checkConnection","console","log","setupConnectionListeners","window","addEventListener","syncData","syncPlatoToServer","plato","response","fetch","method","headers","body","JSON","stringify","name","description","price","category","image_url","is_available","ok","Error","status","serverData","json","id","error","processSyncQueue","syncItems","length","item","syncSuccess","type","entityType","data","pendingPlatos","initSyncService","setInterval"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/syncService.js"],"sourcesContent":["import { \r\n  getPendingPlatos, \r\n  updatePlatoSyncStatus, \r\n  getSyncQueue, \r\n  removeFromSyncQueue \r\n} from './indexedDBService';\r\n\r\nconst API_URL = 'http://localhost:8081/api';\r\n\r\n// Estado de la sincronización\r\nlet isSyncing = false;\r\nlet isOnline = navigator.onLine;\r\n\r\n// Verificar la conexión inicial\r\nconst checkConnection = () => {\r\n  isOnline = navigator.onLine;\r\n  console.log(`Estado de conexión: ${isOnline ? 'En línea' : 'Fuera de línea'}`);\r\n  return isOnline;\r\n};\r\n\r\n// Configurar escuchas para eventos de conexión\r\nconst setupConnectionListeners = () => {\r\n  window.addEventListener('online', () => {\r\n    console.log('Conexión a Internet restablecida');\r\n    isOnline = true;\r\n    // Sincronizar cuando se recupera la conexión\r\n    syncData();\r\n  });\r\n  \r\n  window.addEventListener('offline', () => {\r\n    console.log('Conexión a Internet perdida');\r\n    isOnline = false;\r\n  });\r\n  \r\n  // Verificar estado inicial\r\n  checkConnection();\r\n};\r\n\r\n// Sincronizar un plato con el servidor\r\nconst syncPlatoToServer = async (plato) => {\r\n  try {\r\n    const response = await fetch(`${API_URL}/platos`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        // Añadir token si es necesario\r\n        // 'Authorization': `Bearer ${getToken()}`\r\n      },\r\n      body: JSON.stringify({\r\n        name: plato.name,\r\n        description: plato.description,\r\n        price: plato.price,\r\n        category: plato.category,\r\n        image_url: plato.image_url || null,\r\n        is_available: plato.is_available || true\r\n      })\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Error del servidor: ${response.status}`);\r\n    }\r\n    \r\n    const serverData = await response.json();\r\n    console.log('Plato sincronizado con el servidor:', serverData);\r\n    \r\n    // Actualizar estado de sincronización en IndexedDB\r\n    await updatePlatoSyncStatus(plato.id, 'synced');\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al sincronizar plato con el servidor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Procesar la cola de sincronización\r\nconst processSyncQueue = async () => {\r\n  if (!isOnline || isSyncing) {\r\n    return false;\r\n  }\r\n  \r\n  isSyncing = true;\r\n  console.log('Iniciando procesamiento de cola de sincronización...');\r\n  \r\n  try {\r\n    const syncItems = await getSyncQueue();\r\n    \r\n    if (syncItems.length === 0) {\r\n      console.log('No hay elementos en la cola de sincronización');\r\n      isSyncing = false;\r\n      return true;\r\n    }\r\n    \r\n    console.log(`Procesando ${syncItems.length} elementos en la cola de sincronización`);\r\n    \r\n    // Procesar cada elemento de la cola\r\n    for (const item of syncItems) {\r\n      let syncSuccess = false;\r\n      \r\n      if (item.type === 'create' && item.entityType === 'plato') {\r\n        syncSuccess = await syncPlatoToServer(item.data);\r\n      }\r\n      // Aquí pueden agregarse más tipos de sincronización según sea necesario\r\n      \r\n      if (syncSuccess) {\r\n        // Eliminar de la cola si la sincronización fue exitosa\r\n        await removeFromSyncQueue(item.id);\r\n      } else {\r\n        console.log(`No se pudo sincronizar el elemento ${item.id}, se reintentará más tarde`);\r\n      }\r\n    }\r\n    \r\n    console.log('Procesamiento de cola de sincronización completado');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al procesar cola de sincronización:', error);\r\n    return false;\r\n  } finally {\r\n    isSyncing = false;\r\n  }\r\n};\r\n\r\n// Función principal para sincronizar datos\r\nconst syncData = async () => {\r\n  if (!isOnline) {\r\n    console.log('Sin conexión a Internet, la sincronización no es posible');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    console.log('Iniciando sincronización de datos...');\r\n    \r\n    // Procesar la cola de sincronización\r\n    await processSyncQueue();\r\n    \r\n    // Sincronizar platos pendientes que no estén en la cola\r\n    const pendingPlatos = await getPendingPlatos();\r\n    console.log(`Encontrados ${pendingPlatos.length} platos pendientes de sincronización`);\r\n    \r\n    for (const plato of pendingPlatos) {\r\n      await syncPlatoToServer(plato);\r\n    }\r\n    \r\n    console.log('Sincronización completada con éxito');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error durante la sincronización:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Inicializar el servicio de sincronización\r\nconst initSyncService = () => {\r\n  // Configurar escuchas para eventos de conexión\r\n  setupConnectionListeners();\r\n  \r\n  // Realizar sincronización inicial si hay conexión\r\n  if (isOnline) {\r\n    syncData();\r\n  }\r\n  \r\n  // Configurar sincronización periódica (cada minuto)\r\n  setInterval(() => {\r\n    if (isOnline && !isSyncing) {\r\n      syncData();\r\n    }\r\n  }, 60000);\r\n  \r\n  console.log('Servicio de sincronización inicializado');\r\n};\r\n\r\nexport {\r\n  initSyncService,\r\n  syncData,\r\n  checkConnection,\r\n  isOnline\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}