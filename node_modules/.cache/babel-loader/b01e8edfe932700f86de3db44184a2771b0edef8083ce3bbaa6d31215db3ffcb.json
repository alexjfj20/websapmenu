{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { ref, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { getUsersFromDB, saveUserToDB } from '../services/userService';\nexport default {\n  name: 'RegisterComponent',\n  setup() {\n    const registerForm = ref({\n      name: '',\n      email: '',\n      password: ''\n    });\n    const users = ref([]);\n    const registerError = ref('');\n    const router = useRouter();\n    onMounted(async () => {\n      try {\n        const usersFromDB = await getUsersFromDB();\n        users.value = usersFromDB || [];\n        console.log(`Cargados ${users.value.length} usuarios de IndexedDB`);\n      } catch (error) {\n        console.error('Error al cargar usuarios:', error);\n        users.value = [];\n        registerError.value = 'Error al cargar usuarios: ' + error.message;\n      }\n    });\n    const register = async () => {\n      try {\n        registerError.value = '';\n\n        // Asegurarse de que users es un array antes de usar some\n        if (!Array.isArray(users.value)) {\n          users.value = [];\n        }\n\n        // Verificar si el email ya existe\n        if (users.value.some(user => user.email === registerForm.value.email)) {\n          registerError.value = 'Este correo electrónico ya está registrado. Por favor, use otro.';\n          return;\n        }\n        console.log(\"Iniciando registro de usuario...\");\n\n        // Crear un objeto simple del usuario para evitar problemas de serialización\n        const newUser = {\n          id: String(Date.now()),\n          // Convertir a string para evitar problemas\n          name: String(registerForm.value.name),\n          email: String(registerForm.value.email),\n          password: String(registerForm.value.password)\n        };\n        console.log(\"Guardando usuario en la base de datos:\", newUser.email);\n\n        // Guardar el nuevo usuario\n        const result = await saveUserToDB(newUser);\n        if (result) {\n          console.log(\"Usuario guardado exitosamente\");\n          // Actualizar la lista local solo después de confirmar que se guardó exitosamente\n          users.value.push(newUser);\n          alert('Registro exitoso. Por favor, inicie sesión.');\n          router.push('/login');\n        } else {\n          registerError.value = 'Error al guardar usuario: resultado no válido';\n        }\n      } catch (error) {\n        console.error('Error durante el registro:', error);\n        registerError.value = `Error al registrar usuario: ${error.message || 'Error desconocido'}`;\n      }\n    };\n    return {\n      registerForm,\n      users,\n      register,\n      registerError\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRouter","getUsersFromDB","saveUserToDB","name","setup","registerForm","email","password","users","registerError","router","usersFromDB","value","console","log","length","error","message","register","Array","isArray","some","user","newUser","id","String","Date","now","result","push","alert"],"sources":["F:\\Driver google\\VUE.JS-2\\temp\\websap\\src\\components\\RegisterComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"auth-container\">\r\n    <div class=\"auth-form-card\">\r\n      <h2 class=\"auth-title\">Crear Cuenta</h2>\r\n      \r\n      <!-- Mensaje de error -->\r\n      <div v-if=\"registerError\" class=\"error-message\">\r\n        {{ registerError }}\r\n      </div>\r\n      \r\n      <form @submit.prevent=\"register\" class=\"auth-form\">\r\n        <div class=\"form-group\">\r\n          <label for=\"register-name\">Nombre:</label>\r\n          <input \r\n            type=\"text\" \r\n            id=\"register-name\" \r\n            v-model=\"registerForm.name\" \r\n            class=\"auth-input\"\r\n            required\r\n            placeholder=\"Ingresa tu nombre completo\"\r\n          >\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"register-email\">Email:</label>\r\n          <input \r\n            type=\"email\" \r\n            id=\"register-email\" \r\n            v-model=\"registerForm.email\"\r\n            class=\"auth-input\" \r\n            required\r\n            placeholder=\"Ingresa tu correo electrónico\"\r\n          >\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"register-password\">Contraseña:</label>\r\n          <input \r\n            type=\"password\" \r\n            id=\"register-password\" \r\n            v-model=\"registerForm.password\" \r\n            class=\"auth-input\"\r\n            required\r\n            placeholder=\"Crea una contraseña segura\"\r\n          >\r\n        </div>\r\n        <button type=\"submit\" class=\"auth-button\">Registrarse</button>\r\n      </form>\r\n      <div class=\"auth-links\">\r\n        <p>¿Ya tienes una cuenta? <router-link to=\"/login\" class=\"auth-link\">Iniciar sesión</router-link></p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { getUsersFromDB, saveUserToDB } from '../services/userService';\r\n\r\nexport default {\r\n  name: 'RegisterComponent',\r\n  setup() {\r\n    const registerForm = ref({\r\n      name: '',\r\n      email: '',\r\n      password: ''\r\n    });\r\n    \r\n    const users = ref([]);\r\n    const registerError = ref('');\r\n    const router = useRouter();\r\n    \r\n    onMounted(async () => {\r\n      try {\r\n        const usersFromDB = await getUsersFromDB();\r\n        users.value = usersFromDB || [];\r\n        console.log(`Cargados ${users.value.length} usuarios de IndexedDB`);\r\n      } catch (error) {\r\n        console.error('Error al cargar usuarios:', error);\r\n        users.value = [];\r\n        registerError.value = 'Error al cargar usuarios: ' + error.message;\r\n      }\r\n    });\r\n    \r\n    const register = async () => {\r\n      try {\r\n        registerError.value = '';\r\n        \r\n        // Asegurarse de que users es un array antes de usar some\r\n        if (!Array.isArray(users.value)) {\r\n          users.value = [];\r\n        }\r\n        \r\n        // Verificar si el email ya existe\r\n        if (users.value.some(user => user.email === registerForm.value.email)) {\r\n          registerError.value = 'Este correo electrónico ya está registrado. Por favor, use otro.';\r\n          return;\r\n        }\r\n        \r\n        console.log(\"Iniciando registro de usuario...\");\r\n        \r\n        // Crear un objeto simple del usuario para evitar problemas de serialización\r\n        const newUser = {\r\n          id: String(Date.now()), // Convertir a string para evitar problemas\r\n          name: String(registerForm.value.name),\r\n          email: String(registerForm.value.email),\r\n          password: String(registerForm.value.password)\r\n        };\r\n        \r\n        console.log(\"Guardando usuario en la base de datos:\", newUser.email);\r\n        \r\n        // Guardar el nuevo usuario\r\n        const result = await saveUserToDB(newUser);\r\n        \r\n        if (result) {\r\n          console.log(\"Usuario guardado exitosamente\");\r\n          // Actualizar la lista local solo después de confirmar que se guardó exitosamente\r\n          users.value.push(newUser);\r\n          \r\n          alert('Registro exitoso. Por favor, inicie sesión.');\r\n          router.push('/login');\r\n        } else {\r\n          registerError.value = 'Error al guardar usuario: resultado no válido';\r\n        }\r\n      } catch (error) {\r\n        console.error('Error durante el registro:', error);\r\n        registerError.value = `Error al registrar usuario: ${error.message || 'Error desconocido'}`;\r\n      }\r\n    };\r\n    \r\n    return {\r\n      registerForm,\r\n      users,\r\n      register,\r\n      registerError\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.auth-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 80vh;\r\n  padding: 20px;\r\n}\r\n\r\n.auth-form-card {\r\n  width: 100%;\r\n  max-width: 450px;\r\n  background-color: white;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n  padding: 30px;\r\n}\r\n\r\n.auth-title {\r\n  text-align: center;\r\n  color: #4CAF50;\r\n  font-size: 28px;\r\n  margin-bottom: 30px;\r\n  font-weight: 600;\r\n}\r\n\r\n.auth-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.form-group label {\r\n  font-weight: 600;\r\n  color: #333;\r\n  font-size: 16px;\r\n}\r\n\r\n.auth-input {\r\n  padding: 14px;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 8px;\r\n  font-size: 16px;\r\n  transition: border-color 0.3s ease;\r\n}\r\n\r\n.auth-input:focus {\r\n  outline: none;\r\n  border-color: #4CAF50;\r\n  box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);\r\n}\r\n\r\n.auth-button {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  padding: 14px;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n  margin-top: 10px;\r\n}\r\n\r\n.auth-button:hover {\r\n  background-color: #388E3C;\r\n}\r\n\r\n.auth-links {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  color: #666;\r\n}\r\n\r\n.auth-link {\r\n  color: #4CAF50;\r\n  text-decoration: none;\r\n  font-weight: 600;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.auth-link:hover {\r\n  color: #388E3C;\r\n  text-decoration: underline;\r\n}\r\n\r\n.error-message {\r\n  background-color: #ffebee;\r\n  color: #b71c1c;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  margin-bottom: 20px;\r\n  text-align: center;\r\n}\r\n\r\n@media (max-width: 500px) {\r\n  .auth-form-card {\r\n    padding: 20px;\r\n  }\r\n  \r\n  .auth-title {\r\n    font-size: 24px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;;AAsDA,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,SAASC,SAAQ,QAAS,YAAY;AACtC,SAASC,cAAc,EAAEC,YAAW,QAAS,yBAAyB;AAEtE,eAAe;EACbC,IAAI,EAAE,mBAAmB;EACzBC,KAAKA,CAAA,EAAG;IACN,MAAMC,YAAW,GAAIP,GAAG,CAAC;MACvBK,IAAI,EAAE,EAAE;MACRG,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,MAAMC,KAAI,GAAIV,GAAG,CAAC,EAAE,CAAC;IACrB,MAAMW,aAAY,GAAIX,GAAG,CAAC,EAAE,CAAC;IAC7B,MAAMY,MAAK,GAAIV,SAAS,CAAC,CAAC;IAE1BD,SAAS,CAAC,YAAY;MACpB,IAAI;QACF,MAAMY,WAAU,GAAI,MAAMV,cAAc,CAAC,CAAC;QAC1CO,KAAK,CAACI,KAAI,GAAID,WAAU,IAAK,EAAE;QAC/BE,OAAO,CAACC,GAAG,CAAC,YAAYN,KAAK,CAACI,KAAK,CAACG,MAAM,wBAAwB,CAAC;MACrE,EAAE,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDR,KAAK,CAACI,KAAI,GAAI,EAAE;QAChBH,aAAa,CAACG,KAAI,GAAI,4BAA2B,GAAII,KAAK,CAACC,OAAO;MACpE;IACF,CAAC,CAAC;IAEF,MAAMC,QAAO,GAAI,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACFT,aAAa,CAACG,KAAI,GAAI,EAAE;;QAExB;QACA,IAAI,CAACO,KAAK,CAACC,OAAO,CAACZ,KAAK,CAACI,KAAK,CAAC,EAAE;UAC/BJ,KAAK,CAACI,KAAI,GAAI,EAAE;QAClB;;QAEA;QACA,IAAIJ,KAAK,CAACI,KAAK,CAACS,IAAI,CAACC,IAAG,IAAKA,IAAI,CAAChB,KAAI,KAAMD,YAAY,CAACO,KAAK,CAACN,KAAK,CAAC,EAAE;UACrEG,aAAa,CAACG,KAAI,GAAI,kEAAkE;UACxF;QACF;QAEAC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;;QAE/C;QACA,MAAMS,OAAM,GAAI;UACdC,EAAE,EAAEC,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;UAAE;UACxBxB,IAAI,EAAEsB,MAAM,CAACpB,YAAY,CAACO,KAAK,CAACT,IAAI,CAAC;UACrCG,KAAK,EAAEmB,MAAM,CAACpB,YAAY,CAACO,KAAK,CAACN,KAAK,CAAC;UACvCC,QAAQ,EAAEkB,MAAM,CAACpB,YAAY,CAACO,KAAK,CAACL,QAAQ;QAC9C,CAAC;QAEDM,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAES,OAAO,CAACjB,KAAK,CAAC;;QAEpE;QACA,MAAMsB,MAAK,GAAI,MAAM1B,YAAY,CAACqB,OAAO,CAAC;QAE1C,IAAIK,MAAM,EAAE;UACVf,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;UAC5C;UACAN,KAAK,CAACI,KAAK,CAACiB,IAAI,CAACN,OAAO,CAAC;UAEzBO,KAAK,CAAC,6CAA6C,CAAC;UACpDpB,MAAM,CAACmB,IAAI,CAAC,QAAQ,CAAC;QACvB,OAAO;UACLpB,aAAa,CAACG,KAAI,GAAI,+CAA+C;QACvE;MACF,EAAE,OAAOI,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDP,aAAa,CAACG,KAAI,GAAI,+BAA+BI,KAAK,CAACC,OAAM,IAAK,mBAAmB,EAAE;MAC7F;IACF,CAAC;IAED,OAAO;MACLZ,YAAY;MACZG,KAAK;MACLU,QAAQ;MACRT;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}