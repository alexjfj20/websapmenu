{"ast":null,"code":"// Servicio para la gestión de reservas\nimport apiService from './apiService';\nimport eventBus from '../utils/eventBus';\n\n// Función para guardar una nueva reserva\nexport async function saveReservation(reservationData) {\n  try {\n    // En una implementación real, aquí se haría una llamada a la API\n    // Por ahora, simulamos una respuesta exitosa\n\n    // Simulamos un retraso para imitar una llamada a la API\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Generamos un ID único para la reserva\n    const reservationId = 'res_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n\n    // Creamos el objeto de reserva con los datos recibidos\n    const reservation = {\n      id: reservationId,\n      fullName: reservationData.fullName,\n      mobilePhone: reservationData.mobilePhone,\n      landlinePhone: reservationData.landlinePhone || '',\n      email: reservationData.email || '',\n      address: reservationData.address || '',\n      date: reservationData.reservationDate,\n      time: reservationData.reservationTime,\n      peopleCount: reservationData.peopleCount,\n      notes: reservationData.additionalNotes || '',\n      status: 'pending',\n      // Estado inicial: pendiente\n      createdAt: new Date().toISOString()\n    };\n\n    // En una implementación real, aquí guardaríamos la reserva en la base de datos\n    // Por ejemplo: await apiService.post('/reservations', reservation);\n\n    // Emitimos un evento para notificar a otros componentes sobre la nueva reserva\n    eventBus.emit('nueva-reserva', reservation);\n    console.log('Reserva guardada correctamente:', reservation);\n    return {\n      success: true,\n      reservation\n    };\n  } catch (error) {\n    console.error('Error al guardar la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar la reserva'\n    };\n  }\n}\n\n// Función para obtener todas las reservas\nexport async function getReservations() {\n  try {\n    // En una implementación real, aquí se haría una llamada a la API\n    // Por ahora, devolvemos datos de ejemplo\n\n    // Simulamos un retraso para imitar una llamada a la API\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Datos de ejemplo (los mismos que están en AdminReservas.vue)\n    const reservations = [{\n      id: '1',\n      fullName: 'Juan Pérez',\n      mobilePhone: '612345678',\n      email: 'juan@example.com',\n      date: '2023-07-15',\n      time: '20:30',\n      peopleCount: 4,\n      status: 'confirmed',\n      notes: 'Mesa cerca de la ventana si es posible'\n    }, {\n      id: '2',\n      fullName: 'María López',\n      mobilePhone: '698765432',\n      landlinePhone: '912345678',\n      date: '2023-07-16',\n      time: '21:00',\n      peopleCount: 2,\n      status: 'pending'\n    }, {\n      id: '3',\n      fullName: 'Carlos Ruiz',\n      mobilePhone: '654321987',\n      email: 'carlos@example.com',\n      date: '2023-07-14',\n      time: '14:30',\n      peopleCount: 6,\n      status: 'cancelled',\n      notes: 'Celebración de cumpleaños'\n    }];\n    return {\n      success: true,\n      reservations\n    };\n  } catch (error) {\n    console.error('Error al obtener las reservas:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener las reservas'\n    };\n  }\n}\n\n// Función para actualizar el estado de una reserva\nexport async function updateReservationStatus(reservationId, status) {\n  try {\n    // En una implementación real, aquí se haría una llamada a la API\n    // Por ahora, simulamos una respuesta exitosa\n\n    // Simulamos un retraso para imitar una llamada a la API\n    await new Promise(resolve => setTimeout(resolve, 500));\n    console.log(`Reserva ${reservationId} actualizada a estado: ${status}`);\n\n    // Emitimos un evento para notificar a otros componentes sobre la actualización\n    eventBus.emit('reserva-actualizada', {\n      id: reservationId,\n      status\n    });\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Error al actualizar el estado de la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al actualizar el estado de la reserva'\n    };\n  }\n}","map":{"version":3,"names":["apiService","eventBus","saveReservation","reservationData","Promise","resolve","setTimeout","reservationId","Date","now","Math","random","toString","substr","reservation","id","fullName","mobilePhone","landlinePhone","email","address","date","reservationDate","time","reservationTime","peopleCount","notes","additionalNotes","status","createdAt","toISOString","emit","console","log","success","error","message","getReservations","reservations","updateReservationStatus"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/reservaService.js"],"sourcesContent":["// Servicio para la gestión de reservas\nimport apiService from './apiService';\nimport eventBus from '../utils/eventBus';\n\n// Función para guardar una nueva reserva\nexport async function saveReservation(reservationData) {\n  try {\n    // En una implementación real, aquí se haría una llamada a la API\n    // Por ahora, simulamos una respuesta exitosa\n    \n    // Simulamos un retraso para imitar una llamada a la API\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Generamos un ID único para la reserva\n    const reservationId = 'res_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    \n    // Creamos el objeto de reserva con los datos recibidos\n    const reservation = {\n      id: reservationId,\n      fullName: reservationData.fullName,\n      mobilePhone: reservationData.mobilePhone,\n      landlinePhone: reservationData.landlinePhone || '',\n      email: reservationData.email || '',\n      address: reservationData.address || '',\n      date: reservationData.reservationDate,\n      time: reservationData.reservationTime,\n      peopleCount: reservationData.peopleCount,\n      notes: reservationData.additionalNotes || '',\n      status: 'pending', // Estado inicial: pendiente\n      createdAt: new Date().toISOString()\n    };\n    \n    // En una implementación real, aquí guardaríamos la reserva en la base de datos\n    // Por ejemplo: await apiService.post('/reservations', reservation);\n    \n    // Emitimos un evento para notificar a otros componentes sobre la nueva reserva\n    eventBus.emit('nueva-reserva', reservation);\n    \n    console.log('Reserva guardada correctamente:', reservation);\n    \n    return {\n      success: true,\n      reservation\n    };\n  } catch (error) {\n    console.error('Error al guardar la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar la reserva'\n    };\n  }\n}\n\n// Función para obtener todas las reservas\nexport async function getReservations() {\n  try {\n    // En una implementación real, aquí se haría una llamada a la API\n    // Por ahora, devolvemos datos de ejemplo\n    \n    // Simulamos un retraso para imitar una llamada a la API\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Datos de ejemplo (los mismos que están en AdminReservas.vue)\n    const reservations = [\n      {\n        id: '1',\n        fullName: 'Juan Pérez',\n        mobilePhone: '612345678',\n        email: 'juan@example.com',\n        date: '2023-07-15',\n        time: '20:30',\n        peopleCount: 4,\n        status: 'confirmed',\n        notes: 'Mesa cerca de la ventana si es posible'\n      },\n      {\n        id: '2',\n        fullName: 'María López',\n        mobilePhone: '698765432',\n        landlinePhone: '912345678',\n        date: '2023-07-16',\n        time: '21:00',\n        peopleCount: 2,\n        status: 'pending'\n      },\n      {\n        id: '3',\n        fullName: 'Carlos Ruiz',\n        mobilePhone: '654321987',\n        email: 'carlos@example.com',\n        date: '2023-07-14',\n        time: '14:30',\n        peopleCount: 6,\n        status: 'cancelled',\n        notes: 'Celebración de cumpleaños'\n      }\n    ];\n    \n    return {\n      success: true,\n      reservations\n    };\n  } catch (error) {\n    console.error('Error al obtener las reservas:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener las reservas'\n    };\n  }\n}\n\n// Función para actualizar el estado de una reserva\nexport async function updateReservationStatus(reservationId, status) {\n  try {\n    // En una implementación real, aquí se haría una llamada a la API\n    // Por ahora, simulamos una respuesta exitosa\n    \n    // Simulamos un retraso para imitar una llamada a la API\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    console.log(`Reserva ${reservationId} actualizada a estado: ${status}`);\n    \n    // Emitimos un evento para notificar a otros componentes sobre la actualización\n    eventBus.emit('reserva-actualizada', { id: reservationId, status });\n    \n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Error al actualizar el estado de la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al actualizar el estado de la reserva'\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}