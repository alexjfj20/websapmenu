{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { getDashboardStats } from '../../services/adminService';\nexport default {\n  name: 'AdminDashboard',\n  setup() {\n    const stats = ref({\n      totalUsers: 0,\n      activeUsers: 0,\n      inactiveUsers: 0,\n      activePayments: 0,\n      pendingPayments: 0,\n      overduePayments: 0,\n      totalIncome: 0,\n      status: 'Normal',\n      lastBackup: null,\n      recentActivity: []\n    });\n    const loading = ref(true);\n    const error = ref(null);\n\n    // Cargar estad√≠sticas del dashboard\n    const loadStats = async () => {\n      loading.value = true;\n      error.value = null;\n      try {\n        console.log('Cargando estad√≠sticas del dashboard...');\n\n        // Intentar obtener los datos del servicio\n        const response = await getDashboardStats();\n        if (response && response.success && response.data) {\n          console.log('Estad√≠sticas cargadas correctamente:', response.data);\n          stats.value = response.data;\n        } else {\n          // Si hay un error en la respuesta, usar datos de respaldo\n          console.warn('Error en la respuesta del servicio, usando datos de respaldo');\n          error.value = response.error || 'Error al cargar las estad√≠sticas';\n\n          // Mantener los datos actuales si ya ten√≠amos algunos\n          if (stats.value.totalUsers === 0) {\n            // Si no ten√≠amos datos, usar valores por defecto\n            stats.value = {\n              totalUsers: 4,\n              activeUsers: 3,\n              inactiveUsers: 1,\n              activePayments: 28,\n              pendingPayments: 8,\n              overduePayments: 3,\n              totalIncome: 15750000,\n              status: 'Normal',\n              lastBackup: new Date().toISOString(),\n              recentActivity: [{\n                tipo: 'user_login',\n                usuario_nombre: 'Admin',\n                accion: 'inici√≥ sesi√≥n en el sistema',\n                fecha: new Date().toISOString()\n              }, {\n                tipo: 'system',\n                usuario_nombre: 'Sistema',\n                accion: 'realiz√≥ una sincronizaci√≥n de datos',\n                fecha: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n              }]\n            };\n          }\n        }\n      } catch (e) {\n        console.error('Error al cargar estad√≠sticas:', e);\n        error.value = e.message || 'Error al cargar las estad√≠sticas';\n\n        // Usar datos de respaldo en caso de error\n        if (stats.value.totalUsers === 0) {\n          stats.value = {\n            totalUsers: 4,\n            activeUsers: 3,\n            inactiveUsers: 1,\n            activePayments: 28,\n            pendingPayments: 8,\n            overduePayments: 3,\n            totalIncome: 15750000,\n            status: 'Normal',\n            lastBackup: new Date().toISOString(),\n            recentActivity: [{\n              tipo: 'system',\n              usuario_nombre: 'Sistema',\n              accion: 'inici√≥ en modo de respaldo',\n              fecha: new Date().toISOString()\n            }]\n          };\n        }\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Formatear fecha\n    const formatDate = dateString => {\n      if (!dateString) return 'No disponible';\n      try {\n        const date = new Date(dateString);\n        return date.toLocaleString('es-ES', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      } catch (e) {\n        console.error('Error al formatear fecha:', e);\n        return dateString;\n      }\n    };\n\n    // Formatear moneda\n    const formatCurrency = value => {\n      return new Intl.NumberFormat('es-CO', {\n        style: 'currency',\n        currency: 'COP',\n        minimumFractionDigits: 0\n      }).format(value);\n    };\n\n    // Cargar datos al montar el componente\n    onMounted(() => {\n      loadStats();\n    });\n    return {\n      stats,\n      loading,\n      error,\n      loadStats,\n      formatDate,\n      formatCurrency\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","getDashboardStats","name","setup","stats","totalUsers","activeUsers","inactiveUsers","activePayments","pendingPayments","overduePayments","totalIncome","status","lastBackup","recentActivity","loading","error","loadStats","value","console","log","response","success","data","warn","Date","toISOString","tipo","usuario_nombre","accion","fecha","now","e","message","formatDate","dateString","date","toLocaleString","day","month","year","hour","minute","formatCurrency","Intl","NumberFormat","style","currency","minimumFractionDigits","format"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\components\\admin\\AdminDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard-container\">\n    <h2 class=\"section-title\">Dashboard</h2>\n    \n    <div v-if=\"loading\" class=\"loading-spinner-container\">\n      <div class=\"spinner\"></div>\n      <p>Cargando datos...</p>\n    </div>\n    \n    <div v-else-if=\"error\" class=\"error-container\">\n      <p class=\"error-message\">{{ error }}</p>\n      <button @click=\"loadStats\" class=\"retry-button\">Reintentar</button>\n    </div>\n    \n    <div v-else class=\"dashboard-content\">\n      <!-- Tarjetas de estad√≠sticas -->\n      <div class=\"stats-cards\">\n        <div class=\"stat-card users\">\n          <div class=\"stat-icon\">üë•</div>\n          <div class=\"stat-info\">\n            <h3>{{ stats.totalUsers }}</h3>\n            <p>Usuarios Registrados</p>\n          </div>\n        </div>\n        \n        <div class=\"stat-card menu\">\n          <div class=\"stat-icon\">üçΩÔ∏è</div>\n          <div class=\"stat-info\">\n            <h3>{{ stats.activePayments }}</h3>\n            <p>Pagos Activos</p>\n          </div>\n        </div>\n        \n        <div class=\"stat-card sales\">\n          <div class=\"stat-icon\">üí∞</div>\n          <div class=\"stat-info\">\n            <h3>{{ formatCurrency(stats.totalIncome) }}</h3>\n            <p>Ingresos Totales</p>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Actividad Reciente -->\n      <div class=\"recent-activity\">\n        <h3>Actividad Reciente</h3>\n        <div v-if=\"stats.recentActivity && stats.recentActivity.length > 0\" class=\"activity-list\">\n          <div v-for=\"(activity, index) in stats.recentActivity\" :key=\"index\" class=\"activity-item\">\n            <div class=\"activity-icon\" :class=\"activity.tipo\">\n              <span v-if=\"activity.tipo === 'user_login'\">üë§</span>\n              <span v-else-if=\"activity.tipo === 'system'\">üìù</span>\n              <span v-else>üìù</span>\n            </div>\n            <div class=\"activity-content\">\n              <p><strong>{{ activity.usuario_nombre }}</strong> {{ activity.accion }}</p>\n              <span class=\"activity-time\">{{ formatDate(activity.fecha) }}</span>\n            </div>\n          </div>\n        </div>\n        <p v-else class=\"no-activity\">No hay actividad reciente registrada</p>\n      </div>\n      \n      <!-- Estado del Sistema -->\n      <div class=\"system-status\">\n        <h3>Estado del Sistema</h3>\n        <div class=\"status-info\">\n          <p><strong>Estado:</strong> <span :class=\"'status-' + stats.status.toLowerCase()\">{{ stats.status }}</span></p>\n          <p><strong>√öltimo respaldo:</strong> {{ formatDate(stats.lastBackup) }}</p>\n          <p><strong>Usuarios activos:</strong> {{ stats.activeUsers }}</p>\n          <p><strong>Usuarios inactivos:</strong> {{ stats.inactiveUsers }}</p>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Bot√≥n para refrescar -->\n    <button @click=\"loadStats\" class=\"refresh-button\">\n      <span class=\"refresh-icon\">üîÑ</span> Actualizar Datos\n    </button>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport { getDashboardStats } from '../../services/adminService';\n\nexport default {\n  name: 'AdminDashboard',\n  setup() {\n    const stats = ref({\n      totalUsers: 0,\n      activeUsers: 0,\n      inactiveUsers: 0,\n      activePayments: 0,\n      pendingPayments: 0,\n      overduePayments: 0,\n      totalIncome: 0,\n      status: 'Normal',\n      lastBackup: null,\n      recentActivity: []\n    });\n    const loading = ref(true);\n    const error = ref(null);\n\n    // Cargar estad√≠sticas del dashboard\n    const loadStats = async () => {\n      loading.value = true;\n      error.value = null;\n      \n      try {\n        console.log('Cargando estad√≠sticas del dashboard...');\n        \n        // Intentar obtener los datos del servicio\n        const response = await getDashboardStats();\n        \n        if (response && response.success && response.data) {\n          console.log('Estad√≠sticas cargadas correctamente:', response.data);\n          stats.value = response.data;\n        } else {\n          // Si hay un error en la respuesta, usar datos de respaldo\n          console.warn('Error en la respuesta del servicio, usando datos de respaldo');\n          error.value = response.error || 'Error al cargar las estad√≠sticas';\n          \n          // Mantener los datos actuales si ya ten√≠amos algunos\n          if (stats.value.totalUsers === 0) {\n            // Si no ten√≠amos datos, usar valores por defecto\n            stats.value = {\n              totalUsers: 4,\n              activeUsers: 3,\n              inactiveUsers: 1,\n              activePayments: 28,\n              pendingPayments: 8,\n              overduePayments: 3,\n              totalIncome: 15750000,\n              status: 'Normal',\n              lastBackup: new Date().toISOString(),\n              recentActivity: [\n                {\n                  tipo: 'user_login',\n                  usuario_nombre: 'Admin',\n                  accion: 'inici√≥ sesi√≥n en el sistema',\n                  fecha: new Date().toISOString()\n                },\n                {\n                  tipo: 'system',\n                  usuario_nombre: 'Sistema',\n                  accion: 'realiz√≥ una sincronizaci√≥n de datos',\n                  fecha: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n                }\n              ]\n            };\n          }\n        }\n      } catch (e) {\n        console.error('Error al cargar estad√≠sticas:', e);\n        error.value = e.message || 'Error al cargar las estad√≠sticas';\n        \n        // Usar datos de respaldo en caso de error\n        if (stats.value.totalUsers === 0) {\n          stats.value = {\n            totalUsers: 4,\n            activeUsers: 3,\n            inactiveUsers: 1,\n            activePayments: 28,\n            pendingPayments: 8,\n            overduePayments: 3,\n            totalIncome: 15750000,\n            status: 'Normal',\n            lastBackup: new Date().toISOString(),\n            recentActivity: [\n              {\n                tipo: 'system',\n                usuario_nombre: 'Sistema',\n                accion: 'inici√≥ en modo de respaldo',\n                fecha: new Date().toISOString()\n              }\n            ]\n          };\n        }\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Formatear fecha\n    const formatDate = (dateString) => {\n      if (!dateString) return 'No disponible';\n      \n      try {\n        const date = new Date(dateString);\n        return date.toLocaleString('es-ES', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      } catch (e) {\n        console.error('Error al formatear fecha:', e);\n        return dateString;\n      }\n    };\n\n    // Formatear moneda\n    const formatCurrency = (value) => {\n      return new Intl.NumberFormat('es-CO', {\n        style: 'currency',\n        currency: 'COP',\n        minimumFractionDigits: 0\n      }).format(value);\n    };\n\n    // Cargar datos al montar el componente\n    onMounted(() => {\n      loadStats();\n    });\n\n    return {\n      stats,\n      loading,\n      error,\n      loadStats,\n      formatDate,\n      formatCurrency\n    };\n  }\n};\n</script>\n\n<style scoped>\n.dashboard-container {\n  padding: 0;\n}\n\n.section-title {\n  font-size: 24px;\n  margin-bottom: 30px;\n  color: #333;\n  border-bottom: 2px solid #4CAF50;\n  padding-bottom: 10px;\n}\n\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.stat-card {\n  background-color: white;\n  border-radius: 12px;\n  padding: 20px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.stat-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 6px 15px rgba(0,0,0,0.15);\n}\n\n.stat-icon {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 24px;\n}\n\n.stat-icon.users {\n  background-color: #e3f2fd;\n  color: #1976d2;\n}\n\n.stat-icon.menus {\n  background-color: #e8f5e9;\n  color: #388e3c;\n}\n\n.stat-icon.sales {\n  background-color: #fff8e1;\n  color: #ffa000;\n}\n\n.stat-icon.system {\n  background-color: #f3e5f5;\n  color: #7b1fa2;\n}\n\n.stat-content h3 {\n  font-size: 24px;\n  margin: 0 0 5px 0;\n  color: #333;\n}\n\n.stat-content p {\n  margin: 0;\n  color: #666;\n  font-size: 14px;\n}\n\n.dashboard-actions {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 15px;\n  margin-top: 30px;\n}\n\n.action-button {\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 15px 20px;\n  cursor: pointer;\n  font-weight: bold;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n  transition: all 0.3s ease;\n}\n\n.action-button:hover {\n  background-color: #45a049;\n  transform: translateY(-3px);\n  box-shadow: 0 4px 10px rgba(0,0,0,0.2);\n}\n\n.action-icon {\n  font-size: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}