{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { ref, onMounted, computed } from 'vue';\n// Importar todas las funciones que necesitamos\nimport * as adminService from '../../services/adminService';\nimport { alert, confirm } from '../../services/dialogService';\nimport { hasRole } from '../../services/authService';\nexport default {\n  name: 'AdminUsers',\n  emits: ['user-created'],\n  // Declarar los eventos que emite el componente\n  setup(props, {\n    emit\n  }) {\n    // Obtener emit desde el contexto\n    const allUsers = ref([]); // Almacena todos los usuarios sin filtrar\n    const users = ref([]); // Usuarios filtrados para mostrar\n    const roles = ref([]);\n    const loading = ref(true);\n    const error = ref(null);\n\n    // Filtros\n    const searchTerm = ref('');\n    const roleFilter = ref('');\n    const statusFilter = ref('');\n\n    // Formulario\n    const showModal = ref(false);\n    const isEditing = ref(false);\n    const formData = ref({\n      id: null,\n      nombre: '',\n      email: '',\n      telefono: '',\n      password: '',\n      roles: [],\n      estado: 'activo'\n    });\n\n    // Obtener referencias a las funciones del servicio admin\n    const {\n      getUsers,\n      getRoles,\n      createUser,\n      updateUser,\n      cambiarEstadoUsuario,\n      deleteUser: removeUser\n    } = adminService;\n\n    // Búsqueda con debounce\n    let searchTimeout = null;\n\n    // Obtener si el usuario actual es Administrador (no Superadministrador)\n    const isOnlyAdmin = computed(() => {\n      return hasRole('Administrador') && !hasRole('Superadministrador');\n    });\n\n    // Filtrar roles disponibles según el rol del usuario actual\n    const availableRoles = computed(() => {\n      if (isOnlyAdmin.value) {\n        // Si es solo Administrador, mostrar solo el rol de Empleado\n        return roles.value.filter(role => role.nombre === 'Empleado');\n      }\n      // Si es Superadministrador, mostrar todos los roles\n      return roles.value;\n    });\n\n    // Filtrar usuarios según el rol del usuario actual\n    const filteredUsers = computed(() => {\n      if (isOnlyAdmin.value) {\n        // Si es solo Administrador, ocultar usuarios con rol de Superadministrador\n        return allUsers.value.filter(user => {\n          // Verificar si el usuario tiene roles y si no incluye el rol de Superadministrador\n          return !user.roles || !Array.isArray(user.roles) || !user.roles.includes('Superadministrador');\n        });\n      }\n      return allUsers.value;\n    });\n    onMounted(async () => {\n      try {\n        console.log(\"AdminUsers componente montado - inicializando...\");\n        // Inicializar la lista de usuarios vacía\n        allUsers.value = [];\n        users.value = [];\n        // Cargar datos\n        await Promise.all([fetchUsers(), fetchRoles()]);\n        console.log(\"Inicialización completa, usuarios cargados:\", users.value.length);\n      } catch (initError) {\n        console.error(\"Error durante la inicialización:\", initError);\n        error.value = `Error durante la inicialización: ${initError.message}`;\n      }\n    });\n\n    // Obtener usuarios con filtros aplicados\n    const fetchUsers = async () => {\n      try {\n        loading.value = true;\n        error.value = null;\n        const options = {\n          searchTerm: searchTerm.value,\n          role: roleFilter.value,\n          status: statusFilter.value\n        };\n        console.log(\"Solicitando usuarios con opciones:\", options);\n        const response = await getUsers(options);\n        if (response && response.success) {\n          // Asegurarnos que la respuesta contiene datos\n          if (Array.isArray(response.data)) {\n            console.log(`Actualizando lista de usuarios: recibidos ${response.data.length} usuarios`);\n            allUsers.value = response.data;\n\n            // Aplicar filtro para ocultar superadministradores si el usuario actual es solo Administrador\n            users.value = filteredUsers.value;\n          } else {\n            console.warn(\"La respuesta de getUsers no contiene un array:\", response.data);\n          }\n        } else {\n          console.warn(\"Respuesta no exitosa de la API:\", response);\n          throw new Error(response?.message || 'Error al cargar usuarios');\n        }\n      } catch (err) {\n        console.error('Error al cargar usuarios:', err);\n        error.value = `Error al cargar usuarios: ${err.message || 'Error desconocido'}`;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Obtener roles disponibles\n    const fetchRoles = async () => {\n      try {\n        const response = await getRoles();\n        if (response && response.success) {\n          roles.value = Array.isArray(response.data) ? response.data : [];\n        } else {\n          console.warn(\"Error al cargar roles:\", response?.message);\n        }\n      } catch (err) {\n        console.error('Error al cargar roles:', err);\n      }\n    };\n\n    // Manejar cambios en el campo de búsqueda con debounce\n    const handleSearchInput = () => {\n      clearTimeout(searchTimeout);\n      searchTimeout = setTimeout(() => {\n        fetchUsers();\n      }, 300);\n    };\n\n    // Resetear filtros\n    const resetFilters = () => {\n      searchTerm.value = '';\n      roleFilter.value = '';\n      statusFilter.value = '';\n      fetchUsers();\n    };\n\n    // Mostrar formulario de creación\n    const showCreateForm = () => {\n      isEditing.value = false;\n      formData.value = {\n        id: null,\n        nombre: '',\n        email: '',\n        telefono: '',\n        password: '',\n        roles: ['Empleado'],\n        // Rol por defecto\n        estado: 'activo'\n      };\n      showModal.value = true;\n    };\n\n    // Editar usuario\n    const editUser = user => {\n      isEditing.value = true;\n      formData.value = {\n        id: user.id,\n        nombre: user.nombre,\n        email: user.email,\n        telefono: user.telefono || '',\n        password: '',\n        // Dejamos vacío para mantener la contraseña actual\n        roles: [...user.roles],\n        estado: user.estado\n      };\n      showModal.value = true;\n    };\n\n    // Guardar usuario (crear o actualizar)\n    const saveUser = async () => {\n      try {\n        loading.value = true;\n\n        // Validar que al menos se seleccionó un rol\n        if (!formData.value.roles.length) {\n          await alert('Debe seleccionar al menos un rol para el usuario');\n          loading.value = false;\n          return;\n        }\n\n        // Validar que un Administrador no asigne roles superiores\n        if (isOnlyAdmin.value) {\n          // Filtrar los roles para mantener solo el de Empleado\n          formData.value.roles = formData.value.roles.filter(role => role === 'Empleado');\n\n          // Si después del filtro no queda ningún rol, añadimos Empleado\n          if (formData.value.roles.length === 0) {\n            formData.value.roles = ['Empleado'];\n          }\n        }\n        if (isEditing.value) {\n          // Filtrar para enviar solo los campos necesarios\n          const userData = {\n            nombre: formData.value.nombre,\n            telefono: formData.value.telefono,\n            roles: formData.value.roles,\n            estado: formData.value.estado\n          };\n\n          // Si se proporciona una contraseña, incluirla\n          if (formData.value.password) {\n            userData.password = formData.value.password;\n          }\n          const response = await updateUser(formData.value.id, userData);\n          if (response && response.success) {\n            await alert(response.message || 'Usuario actualizado exitosamente');\n            // Refrescar lista de usuarios con los nuevos datos\n            await fetchUsers();\n          } else {\n            throw new Error(response?.message || 'Error al actualizar usuario');\n          }\n        } else {\n          // Crear nuevo usuario\n          const userData = {\n            nombre: formData.value.nombre,\n            email: formData.value.email,\n            password: formData.value.password,\n            telefono: formData.value.telefono,\n            roles: formData.value.roles\n          };\n          console.log(\"Llamando a createUser con:\", userData);\n          const response = await createUser(userData);\n          if (response && response.success) {\n            await alert(response.message || 'Usuario creado exitosamente');\n\n            // Añadir directamente el usuario creado a la lista local\n            if (response.data) {\n              users.value = [response.data, ...users.value];\n            }\n\n            // Emitir evento para refrescar estadísticas en el dashboard\n            emit('user-created');\n\n            // También hacer un fetchUsers completo por si acaso\n            await fetchUsers();\n          } else {\n            throw new Error(response?.message || 'Error al crear usuario');\n          }\n        }\n        closeModal();\n      } catch (err) {\n        console.error('Error al guardar el usuario:', err);\n        await alert(`Error al guardar el usuario: ${err.message || 'Error desconocido'}`);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Activar usuario\n    const activateUser = async user => {\n      try {\n        const confirmed = await confirm(`¿Estás seguro de que deseas activar el usuario ${user.nombre}?`);\n        if (confirmed) {\n          loading.value = true;\n          console.log(`Activando usuario con ID: ${user.id}`);\n          const response = await cambiarEstadoUsuario(user.id, 'activo');\n          if (response && response.success) {\n            await alert(response.message || 'Usuario activado exitosamente');\n\n            // Actualizar estado del usuario localmente en la lista\n            const index = users.value.findIndex(u => u.id === user.id);\n            if (index !== -1) {\n              users.value[index].estado = 'activo';\n            }\n          } else {\n            throw new Error(response?.message || 'Error al activar usuario');\n          }\n        }\n      } catch (err) {\n        console.error('Error al activar usuario:', err);\n        await alert(`Error al activar usuario: ${err.message || 'Error desconocido'}`);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Desactivar usuario\n    const deactivateUser = async user => {\n      try {\n        const confirmed = await confirm(`¿Estás seguro de que deseas desactivar el usuario ${user.nombre}? No podrá acceder al sistema mientras esté inactivo.`, {\n          title: 'Confirmar desactivación'\n        });\n        if (confirmed) {\n          loading.value = true;\n          console.log(`Desactivando usuario con ID: ${user.id}`);\n          const response = await cambiarEstadoUsuario(user.id, 'inactivo');\n          if (response && response.success) {\n            await alert(response.message || 'Usuario desactivado exitosamente');\n\n            // Actualizar estado del usuario localmente en la lista\n            const index = users.value.findIndex(u => u.id === user.id);\n            if (index !== -1) {\n              users.value[index].estado = 'inactivo';\n            }\n          } else {\n            throw new Error(response?.message || 'Error al desactivar usuario');\n          }\n        }\n      } catch (err) {\n        console.error('Error al desactivar usuario:', err);\n        await alert(`Error al desactivar usuario: ${err.message || 'Error desconocido'}`);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Eliminar usuario\n    const deleteUser = async user => {\n      try {\n        const confirmed = await confirm(`¿Estás seguro de que deseas eliminar permanentemente el usuario ${user.nombre}? Esta acción no se puede deshacer.`, {\n          title: 'Confirmar eliminación',\n          confirmText: 'Eliminar',\n          cancelText: 'Cancelar'\n        });\n        if (confirmed) {\n          loading.value = true;\n          console.log(`Eliminando usuario con ID: ${user.id}`);\n          const response = await removeUser(user.id);\n          if (response && response.success) {\n            await alert(response.message || 'Usuario eliminado exitosamente');\n\n            // Eliminar usuario de la lista local\n            users.value = users.value.filter(u => u.id !== user.id);\n          } else {\n            throw new Error(response?.message || 'Error al eliminar usuario');\n          }\n        }\n      } catch (err) {\n        console.error('Error al eliminar usuario:', err);\n        await alert(`Error al eliminar usuario: ${err.message || 'Error desconocido'}`);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Cerrar modal\n    const closeModal = () => {\n      showModal.value = false;\n    };\n\n    // Formatear fecha\n    const formatDate = dateStr => {\n      if (!dateStr) return 'N/A';\n      try {\n        const date = new Date(dateStr);\n        if (isNaN(date.getTime())) return 'Fecha inválida';\n        return new Intl.DateTimeFormat('es-ES', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        }).format(date);\n      } catch (e) {\n        return 'Fecha inválida';\n      }\n    };\n    return {\n      users,\n      roles,\n      loading,\n      error,\n      searchTerm,\n      roleFilter,\n      statusFilter,\n      showModal,\n      isEditing,\n      formData,\n      fetchUsers,\n      handleSearchInput,\n      resetFilters,\n      showCreateForm,\n      editUser,\n      saveUser,\n      activateUser,\n      deactivateUser,\n      deleteUser,\n      closeModal,\n      formatDate,\n      availableRoles,\n      isOnlyAdmin,\n      filteredUsers\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","adminService","alert","confirm","hasRole","name","emits","setup","props","emit","allUsers","users","roles","loading","error","searchTerm","roleFilter","statusFilter","showModal","isEditing","formData","id","nombre","email","telefono","password","estado","getUsers","getRoles","createUser","updateUser","cambiarEstadoUsuario","deleteUser","removeUser","searchTimeout","isOnlyAdmin","availableRoles","value","filter","role","filteredUsers","user","Array","isArray","includes","console","log","Promise","all","fetchUsers","fetchRoles","length","initError","message","options","status","response","success","data","warn","Error","err","handleSearchInput","clearTimeout","setTimeout","resetFilters","showCreateForm","editUser","saveUser","userData","closeModal","activateUser","confirmed","index","findIndex","u","deactivateUser","title","confirmText","cancelText","formatDate","dateStr","date","Date","isNaN","getTime","Intl","DateTimeFormat","day","month","year","hour","minute","format","e"],"sources":["F:\\Driver google\\VUE.JS-2\\temp\\websap\\src\\components\\admin\\AdminUsers.vue"],"sourcesContent":["<template>\r\n  <div class=\"users-container\">\r\n    <h2 class=\"section-title\">Gestión de Usuarios</h2>\r\n    \r\n    <!-- Controles de búsqueda y filtros -->\r\n    <div class=\"users-controls\">\r\n      <div class=\"search-container\">\r\n        <input \r\n          v-model=\"searchTerm\" \r\n          placeholder=\"Buscar usuario...\" \r\n          class=\"search-input\"\r\n          @input=\"handleSearchInput\"\r\n        />\r\n      </div>\r\n      \r\n      <div class=\"filters\">\r\n        <select v-model=\"roleFilter\" @change=\"fetchUsers\" class=\"filter-select\">\r\n          <option value=\"\">Todos los roles</option>\r\n          <option \r\n            v-for=\"role in roles\" \r\n            :key=\"role.id\" \r\n            :value=\"role.nombre\"\r\n          >\r\n            {{ role.nombre }}\r\n          </option>\r\n        </select>\r\n        \r\n        <select v-model=\"statusFilter\" @change=\"fetchUsers\" class=\"filter-select\">\r\n          <option value=\"\">Todos los estados</option>\r\n          <option value=\"activo\">Activos</option>\r\n          <option value=\"inactivo\">Inactivos</option>\r\n        </select>\r\n      </div>\r\n      \r\n      <div class=\"actions\">\r\n        <button @click=\"showCreateForm\" class=\"create-user-btn\">\r\n          <span class=\"btn-icon\">➕</span> Nuevo Usuario\r\n        </button>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Tabla de usuarios -->\r\n    <div v-if=\"loading\" class=\"loading-container\">\r\n      <div class=\"spinner\"></div>\r\n      <p>Cargando usuarios...</p>\r\n    </div>\r\n    \r\n    <div v-else-if=\"error\" class=\"error-container\">\r\n      <p class=\"error-message\">{{ error }}</p>\r\n      <button @click=\"fetchUsers\" class=\"retry-btn\">Reintentar</button>\r\n    </div>\r\n    \r\n    <div v-else-if=\"users.length === 0\" class=\"empty-state\">\r\n      <div class=\"empty-icon\">👥</div>\r\n      <p class=\"empty-title\">No se encontraron usuarios</p>\r\n      <p class=\"empty-description\">No hay usuarios que coincidan con los criterios de búsqueda</p>\r\n      <button @click=\"resetFilters\" class=\"reset-filters-btn\">Limpiar filtros</button>\r\n    </div>\r\n    \r\n    <div v-else class=\"users-table-container\">\r\n      <table class=\"users-table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Nombre</th>\r\n            <th>Email</th>\r\n            <th>Teléfono</th>\r\n            <th>Rol</th>\r\n            <th>Estado</th>\r\n            <th>Fecha de registro</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"user in users\" :key=\"user.id\" :class=\"{'inactive-user': user.estado === 'inactivo'}\">\r\n            <td>{{ user.nombre }}</td>\r\n            <td>{{ user.email }}</td>\r\n            <td>{{ user.telefono || '-' }}</td>\r\n            <td>\r\n              <div class=\"roles-list\">\r\n                <span \r\n                  v-for=\"(role, index) in user.roles\" \r\n                  :key=\"index\" \r\n                  class=\"role-badge\"\r\n                  :class=\"{'admin-role': role === 'Administrador', 'superadmin-role': role === 'Superadministrador'}\"\r\n                >\r\n                  {{ role }}\r\n                </span>\r\n              </div>\r\n            </td>\r\n            <td>\r\n              <span \r\n                class=\"status-badge\" \r\n                :class=\"user.estado === 'activo' ? 'active-status' : 'inactive-status'\"\r\n              >\r\n                {{ user.estado === 'activo' ? 'Activo' : 'Inactivo' }}\r\n              </span>\r\n            </td>\r\n            <td>{{ formatDate(user.fecha_creacion) }}</td>\r\n            <td>\r\n              <div class=\"action-buttons\">\r\n                <button @click=\"editUser(user)\" class=\"edit-btn\" title=\"Editar\">\r\n                  <span class=\"btn-icon\">✏️</span>\r\n                </button>\r\n                <button \r\n                  v-if=\"user.estado === 'activo'\" \r\n                  @click=\"deactivateUser(user)\" \r\n                  class=\"deactivate-btn\" \r\n                  title=\"Desactivar\"\r\n                >\r\n                  <span class=\"btn-icon\">🔴</span>\r\n                </button>\r\n                <button \r\n                  v-else \r\n                  @click=\"activateUser(user)\" \r\n                  class=\"activate-btn\" \r\n                  title=\"Activar\"\r\n                >\r\n                  <span class=\"btn-icon\">🟢</span>\r\n                </button>\r\n                <button @click=\"deleteUser(user)\" class=\"delete-btn\" title=\"Eliminar\">\r\n                  <span class=\"btn-icon\">❌</span>\r\n                </button>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    \r\n    <!-- Form Modal -->\r\n    <div v-if=\"showModal\" class=\"modal-overlay\" @click.self=\"closeModal\">\r\n      <div class=\"modal-container\">\r\n        <div class=\"modal-header\">\r\n          <h3>{{ isEditing ? 'Editar Usuario' : 'Crear Nuevo Usuario' }}</h3>\r\n          <button @click=\"closeModal\" class=\"close-btn\">&times;</button>\r\n        </div>\r\n        \r\n        <div class=\"modal-body\">\r\n          <form @submit.prevent=\"saveUser\" class=\"user-form\">\r\n            <div class=\"form-group\">\r\n              <label for=\"nombre\">Nombre completo</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"nombre\"\r\n                v-model=\"formData.nombre\"\r\n                required\r\n                placeholder=\"Ej: Juan Pérez\"\r\n              >\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label for=\"email\">Correo electrónico</label>\r\n              <input\r\n                type=\"email\"\r\n                id=\"email\"\r\n                v-model=\"formData.email\"\r\n                required\r\n                placeholder=\"ejemplo@correo.com\"\r\n                :disabled=\"isEditing\"\r\n              >\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label for=\"telefono\">Teléfono</label>\r\n              <input\r\n                type=\"tel\"\r\n                id=\"telefono\"\r\n                v-model=\"formData.telefono\"\r\n                placeholder=\"Ej: 3001234567\"\r\n              >\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label for=\"password\">Contraseña {{ isEditing ? '(dejar en blanco para mantener actual)' : '' }}</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"password\"\r\n                v-model=\"formData.password\"\r\n                :required=\"!isEditing\"\r\n                placeholder=\"Contraseña segura\"\r\n                autocomplete=\"new-password\"\r\n              >\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label>Roles</label>\r\n              <div class=\"roles-checkboxes\">\r\n                <div \r\n                  v-for=\"role in availableRoles\" \r\n                  :key=\"role.id\" \r\n                  class=\"role-checkbox\"\r\n                >\r\n                  <input \r\n                    type=\"checkbox\" \r\n                    :id=\"'role-' + role.id\" \r\n                    :value=\"role.nombre\" \r\n                    v-model=\"formData.roles\"\r\n                  >\r\n                  <label :for=\"'role-' + role.id\">{{ role.nombre }}</label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div v-if=\"isEditing\" class=\"form-group\">\r\n              <label for=\"estado\">Estado</label>\r\n              <select id=\"estado\" v-model=\"formData.estado\">\r\n                <option value=\"activo\">Activo</option>\r\n                <option value=\"inactivo\">Inactivo</option>\r\n              </select>\r\n            </div>\r\n            \r\n            <div class=\"form-buttons\">\r\n              <button type=\"button\" @click=\"closeModal\" class=\"cancel-btn\">Cancelar</button>\r\n              <button type=\"submit\" class=\"save-btn\">{{ isEditing ? 'Actualizar' : 'Crear' }}</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed } from 'vue';\r\n// Importar todas las funciones que necesitamos\r\nimport * as adminService from '../../services/adminService';\r\nimport { alert, confirm } from '../../services/dialogService';\r\nimport { hasRole } from '../../services/authService';\r\n\r\nexport default {\r\n  name: 'AdminUsers',\r\n  emits: ['user-created'], // Declarar los eventos que emite el componente\r\n  setup(props, { emit }) { // Obtener emit desde el contexto\r\n    const allUsers = ref([]); // Almacena todos los usuarios sin filtrar\r\n    const users = ref([]); // Usuarios filtrados para mostrar\r\n    const roles = ref([]);\r\n    const loading = ref(true);\r\n    const error = ref(null);\r\n    \r\n    // Filtros\r\n    const searchTerm = ref('');\r\n    const roleFilter = ref('');\r\n    const statusFilter = ref('');\r\n    \r\n    // Formulario\r\n    const showModal = ref(false);\r\n    const isEditing = ref(false);\r\n    const formData = ref({\r\n      id: null,\r\n      nombre: '',\r\n      email: '',\r\n      telefono: '',\r\n      password: '',\r\n      roles: [],\r\n      estado: 'activo'\r\n    });\r\n    \r\n    // Obtener referencias a las funciones del servicio admin\r\n    const { \r\n      getUsers, \r\n      getRoles, \r\n      createUser, \r\n      updateUser, \r\n      cambiarEstadoUsuario, \r\n      deleteUser: removeUser \r\n    } = adminService;\r\n    \r\n    // Búsqueda con debounce\r\n    let searchTimeout = null;\r\n    \r\n    // Obtener si el usuario actual es Administrador (no Superadministrador)\r\n    const isOnlyAdmin = computed(() => {\r\n      return hasRole('Administrador') && !hasRole('Superadministrador');\r\n    });\r\n\r\n    // Filtrar roles disponibles según el rol del usuario actual\r\n    const availableRoles = computed(() => {\r\n      if (isOnlyAdmin.value) {\r\n        // Si es solo Administrador, mostrar solo el rol de Empleado\r\n        return roles.value.filter(role => role.nombre === 'Empleado');\r\n      }\r\n      // Si es Superadministrador, mostrar todos los roles\r\n      return roles.value;\r\n    });\r\n\r\n    // Filtrar usuarios según el rol del usuario actual\r\n    const filteredUsers = computed(() => {\r\n      if (isOnlyAdmin.value) {\r\n        // Si es solo Administrador, ocultar usuarios con rol de Superadministrador\r\n        return allUsers.value.filter(user => {\r\n          // Verificar si el usuario tiene roles y si no incluye el rol de Superadministrador\r\n          return !user.roles || !Array.isArray(user.roles) || !user.roles.includes('Superadministrador');\r\n        });\r\n      }\r\n      return allUsers.value;\r\n    });\r\n    \r\n    onMounted(async () => {\r\n      try {\r\n        console.log(\"AdminUsers componente montado - inicializando...\");\r\n        // Inicializar la lista de usuarios vacía\r\n        allUsers.value = [];\r\n        users.value = [];\r\n        // Cargar datos\r\n        await Promise.all([\r\n          fetchUsers(),\r\n          fetchRoles()\r\n        ]);\r\n        console.log(\"Inicialización completa, usuarios cargados:\", users.value.length);\r\n      } catch (initError) {\r\n        console.error(\"Error durante la inicialización:\", initError);\r\n        error.value = `Error durante la inicialización: ${initError.message}`;\r\n      }\r\n    });\r\n    \r\n    // Obtener usuarios con filtros aplicados\r\n    const fetchUsers = async () => {\r\n      try {\r\n        loading.value = true;\r\n        error.value = null;\r\n        \r\n        const options = {\r\n          searchTerm: searchTerm.value,\r\n          role: roleFilter.value,\r\n          status: statusFilter.value\r\n        };\r\n        \r\n        console.log(\"Solicitando usuarios con opciones:\", options);\r\n        const response = await getUsers(options);\r\n        \r\n        if (response && response.success) {\r\n          // Asegurarnos que la respuesta contiene datos\r\n          if (Array.isArray(response.data)) {\r\n            console.log(`Actualizando lista de usuarios: recibidos ${response.data.length} usuarios`);\r\n            allUsers.value = response.data;\r\n            \r\n            // Aplicar filtro para ocultar superadministradores si el usuario actual es solo Administrador\r\n            users.value = filteredUsers.value;\r\n          } else {\r\n            console.warn(\"La respuesta de getUsers no contiene un array:\", response.data);\r\n          }\r\n        } else {\r\n          console.warn(\"Respuesta no exitosa de la API:\", response);\r\n          throw new Error(response?.message || 'Error al cargar usuarios');\r\n        }\r\n      } catch (err) {\r\n        console.error('Error al cargar usuarios:', err);\r\n        error.value = `Error al cargar usuarios: ${err.message || 'Error desconocido'}`;\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n    \r\n    // Obtener roles disponibles\r\n    const fetchRoles = async () => {\r\n      try {\r\n        const response = await getRoles();\r\n        \r\n        if (response && response.success) {\r\n          roles.value = Array.isArray(response.data) ? response.data : [];\r\n        } else {\r\n          console.warn(\"Error al cargar roles:\", response?.message);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error al cargar roles:', err);\r\n      }\r\n    };\r\n    \r\n    // Manejar cambios en el campo de búsqueda con debounce\r\n    const handleSearchInput = () => {\r\n      clearTimeout(searchTimeout);\r\n      searchTimeout = setTimeout(() => {\r\n        fetchUsers();\r\n      }, 300);\r\n    };\r\n    \r\n    // Resetear filtros\r\n    const resetFilters = () => {\r\n      searchTerm.value = '';\r\n      roleFilter.value = '';\r\n      statusFilter.value = '';\r\n      fetchUsers();\r\n    };\r\n    \r\n    // Mostrar formulario de creación\r\n    const showCreateForm = () => {\r\n      isEditing.value = false;\r\n      formData.value = {\r\n        id: null,\r\n        nombre: '',\r\n        email: '',\r\n        telefono: '',\r\n        password: '',\r\n        roles: ['Empleado'], // Rol por defecto\r\n        estado: 'activo'\r\n      };\r\n      showModal.value = true;\r\n    };\r\n    \r\n    // Editar usuario\r\n    const editUser = (user) => {\r\n      isEditing.value = true;\r\n      formData.value = {\r\n        id: user.id,\r\n        nombre: user.nombre,\r\n        email: user.email,\r\n        telefono: user.telefono || '',\r\n        password: '', // Dejamos vacío para mantener la contraseña actual\r\n        roles: [...user.roles],\r\n        estado: user.estado\r\n      };\r\n      showModal.value = true;\r\n    };\r\n    \r\n    // Guardar usuario (crear o actualizar)\r\n    const saveUser = async () => {\r\n      try {\r\n        loading.value = true;\r\n        \r\n        // Validar que al menos se seleccionó un rol\r\n        if (!formData.value.roles.length) {\r\n          await alert('Debe seleccionar al menos un rol para el usuario');\r\n          loading.value = false;\r\n          return;\r\n        }\r\n\r\n        // Validar que un Administrador no asigne roles superiores\r\n        if (isOnlyAdmin.value) {\r\n          // Filtrar los roles para mantener solo el de Empleado\r\n          formData.value.roles = formData.value.roles.filter(role => role === 'Empleado');\r\n          \r\n          // Si después del filtro no queda ningún rol, añadimos Empleado\r\n          if (formData.value.roles.length === 0) {\r\n            formData.value.roles = ['Empleado'];\r\n          }\r\n        }\r\n        \r\n        if (isEditing.value) {\r\n          // Filtrar para enviar solo los campos necesarios\r\n          const userData = {\r\n            nombre: formData.value.nombre,\r\n            telefono: formData.value.telefono,\r\n            roles: formData.value.roles,\r\n            estado: formData.value.estado\r\n          };\r\n          \r\n          // Si se proporciona una contraseña, incluirla\r\n          if (formData.value.password) {\r\n            userData.password = formData.value.password;\r\n          }\r\n          \r\n          const response = await updateUser(formData.value.id, userData);\r\n          \r\n          if (response && response.success) {\r\n            await alert(response.message || 'Usuario actualizado exitosamente');\r\n            // Refrescar lista de usuarios con los nuevos datos\r\n            await fetchUsers();\r\n          } else {\r\n            throw new Error(response?.message || 'Error al actualizar usuario');\r\n          }\r\n        } else {\r\n          // Crear nuevo usuario\r\n          const userData = {\r\n            nombre: formData.value.nombre,\r\n            email: formData.value.email,\r\n            password: formData.value.password,\r\n            telefono: formData.value.telefono,\r\n            roles: formData.value.roles\r\n          };\r\n          \r\n          console.log(\"Llamando a createUser con:\", userData);\r\n          const response = await createUser(userData);\r\n          \r\n          if (response && response.success) {\r\n            await alert(response.message || 'Usuario creado exitosamente');\r\n            \r\n            // Añadir directamente el usuario creado a la lista local\r\n            if (response.data) {\r\n              users.value = [response.data, ...users.value];\r\n            }\r\n            \r\n            // Emitir evento para refrescar estadísticas en el dashboard\r\n            emit('user-created');\r\n            \r\n            // También hacer un fetchUsers completo por si acaso\r\n            await fetchUsers();\r\n          } else {\r\n            throw new Error(response?.message || 'Error al crear usuario');\r\n          }\r\n        }\r\n        \r\n        closeModal();\r\n      } catch (err) {\r\n        console.error('Error al guardar el usuario:', err);\r\n        await alert(`Error al guardar el usuario: ${err.message || 'Error desconocido'}`);\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n    \r\n    // Activar usuario\r\n    const activateUser = async (user) => {\r\n      try {\r\n        const confirmed = await confirm(`¿Estás seguro de que deseas activar el usuario ${user.nombre}?`);\r\n        \r\n        if (confirmed) {\r\n          loading.value = true;\r\n          \r\n          console.log(`Activando usuario con ID: ${user.id}`);\r\n          const response = await cambiarEstadoUsuario(user.id, 'activo');\r\n          \r\n          if (response && response.success) {\r\n            await alert(response.message || 'Usuario activado exitosamente');\r\n            \r\n            // Actualizar estado del usuario localmente en la lista\r\n            const index = users.value.findIndex(u => u.id === user.id);\r\n            if (index !== -1) {\r\n              users.value[index].estado = 'activo';\r\n            }\r\n          } else {\r\n            throw new Error(response?.message || 'Error al activar usuario');\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('Error al activar usuario:', err);\r\n        await alert(`Error al activar usuario: ${err.message || 'Error desconocido'}`);\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n    \r\n    // Desactivar usuario\r\n    const deactivateUser = async (user) => {\r\n      try {\r\n        const confirmed = await confirm(\r\n          `¿Estás seguro de que deseas desactivar el usuario ${user.nombre}? No podrá acceder al sistema mientras esté inactivo.`,\r\n          { title: 'Confirmar desactivación' }\r\n        );\r\n        \r\n        if (confirmed) {\r\n          loading.value = true;\r\n          \r\n          console.log(`Desactivando usuario con ID: ${user.id}`);\r\n          const response = await cambiarEstadoUsuario(user.id, 'inactivo');\r\n          \r\n          if (response && response.success) {\r\n            await alert(response.message || 'Usuario desactivado exitosamente');\r\n            \r\n            // Actualizar estado del usuario localmente en la lista\r\n            const index = users.value.findIndex(u => u.id === user.id);\r\n            if (index !== -1) {\r\n              users.value[index].estado = 'inactivo';\r\n            }\r\n          } else {\r\n            throw new Error(response?.message || 'Error al desactivar usuario');\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('Error al desactivar usuario:', err);\r\n        await alert(`Error al desactivar usuario: ${err.message || 'Error desconocido'}`);\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n    \r\n    // Eliminar usuario\r\n    const deleteUser = async (user) => {\r\n      try {\r\n        const confirmed = await confirm(\r\n          `¿Estás seguro de que deseas eliminar permanentemente el usuario ${user.nombre}? Esta acción no se puede deshacer.`,\r\n          { \r\n            title: 'Confirmar eliminación',\r\n            confirmText: 'Eliminar',\r\n            cancelText: 'Cancelar' \r\n          }\r\n        );\r\n        \r\n        if (confirmed) {\r\n          loading.value = true;\r\n          \r\n          console.log(`Eliminando usuario con ID: ${user.id}`);\r\n          const response = await removeUser(user.id);\r\n          \r\n          if (response && response.success) {\r\n            await alert(response.message || 'Usuario eliminado exitosamente');\r\n            \r\n            // Eliminar usuario de la lista local\r\n            users.value = users.value.filter(u => u.id !== user.id);\r\n          } else {\r\n            throw new Error(response?.message || 'Error al eliminar usuario');\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('Error al eliminar usuario:', err);\r\n        await alert(`Error al eliminar usuario: ${err.message || 'Error desconocido'}`);\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n    \r\n    // Cerrar modal\r\n    const closeModal = () => {\r\n      showModal.value = false;\r\n    };\r\n    \r\n    // Formatear fecha\r\n    const formatDate = (dateStr) => {\r\n      if (!dateStr) return 'N/A';\r\n      \r\n      try {\r\n        const date = new Date(dateStr);\r\n        if (isNaN(date.getTime())) return 'Fecha inválida';\r\n        \r\n        return new Intl.DateTimeFormat('es-ES', {\r\n          day: '2-digit',\r\n          month: '2-digit',\r\n          year: 'numeric',\r\n          hour: '2-digit',\r\n          minute: '2-digit'\r\n        }).format(date);\r\n      } catch (e) {\r\n        return 'Fecha inválida';\r\n      }\r\n    };\r\n    \r\n    return {\r\n      users,\r\n      roles,\r\n      loading,\r\n      error,\r\n      searchTerm,\r\n      roleFilter,\r\n      statusFilter,\r\n      showModal,\r\n      isEditing,\r\n      formData,\r\n      fetchUsers,\r\n      handleSearchInput,\r\n      resetFilters,\r\n      showCreateForm,\r\n      editUser,\r\n      saveUser,\r\n      activateUser,\r\n      deactivateUser,\r\n      deleteUser,\r\n      closeModal,\r\n      formatDate,\r\n      availableRoles,\r\n      isOnlyAdmin,\r\n      filteredUsers\r\n    };\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.users-container {\r\n  padding: 0;\r\n}\r\n\r\n.section-title {\r\n  font-size: 24px;\r\n  margin-bottom: 30px;\r\n  color: #333;\r\n  border-bottom: 2px solid #4CAF50;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n/* Controles y filtros */\r\n.users-controls {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 15px;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.search-container {\r\n  flex-grow: 1;\r\n  min-width: 250px;\r\n}\r\n\r\n.search-input {\r\n  width: 100%;\r\n  padding: 10px 15px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n}\r\n\r\n.filters {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.filter-select {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  background-color: white;\r\n}\r\n\r\n.actions {\r\n  margin-left: auto;\r\n}\r\n\r\n.create-user-btn {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 10px 15px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.create-user-btn:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.btn-icon {\r\n  font-size: 16px;\r\n}\r\n\r\n/* Estados de carga y error */\r\n.loading-container, .error-container, .empty-state {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 50px 20px;\r\n  text-align: center;\r\n  background-color: #f9f9f9;\r\n  border-radius: 8px;\r\n  margin: 20px 0;\r\n}\r\n\r\n.spinner {\r\n  border: 4px solid rgba(0, 0, 0, 0.1);\r\n  width: 36px;\r\n  height: 36px;\r\n  border-radius: 50%;\r\n  border-left-color: #4CAF50;\r\n  animation: spin 1s linear infinite;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n.error-message {\r\n  color: #f44336;\r\n  font-weight: bold;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.retry-btn {\r\n  background-color: #2196F3;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 10px 15px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n}\r\n\r\n.retry-btn:hover {\r\n  background-color: #0b7dda;\r\n}\r\n\r\n.empty-icon {\r\n  font-size: 48px;\r\n  color: #ccc;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.empty-title {\r\n  font-size: 20px;\r\n  color: #666;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.empty-description {\r\n  color: #888;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.reset-filters-btn {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  padding: 10px 15px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n}\r\n\r\n.reset-filters-btn:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n/* Tabla de usuarios */\r\n.users-table-container {\r\n  overflow-x: auto;\r\n  margin-top: 20px;\r\n}\r\n\r\n.users-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n}\r\n\r\n.users-table th, .users-table td {\r\n  padding: 15px;\r\n  text-align: left;\r\n}\r\n\r\n.users-table th {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  font-weight: normal;\r\n}\r\n\r\n.users-table tr:nth-child(even) {\r\n  background-color: #f9f9f9;\r\n}\r\n\r\n.users-table tr:hover {\r\n  background-color: #f1f1f1;\r\n}\r\n\r\n.inactive-user {\r\n  opacity: 0.7;\r\n  background-color: #f5f5f5 !important;\r\n}\r\n\r\n/* Badges */\r\n.roles-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 5px;\r\n}\r\n\r\n.role-badge {\r\n  padding: 3px 8px;\r\n  border-radius: 20px;\r\n  font-size: 12px;\r\n  background-color: #e0e0e0;\r\n  color: #333;\r\n}\r\n\r\n.admin-role {\r\n  background-color: #2196F3;\r\n  color: white;\r\n}\r\n\r\n.superadmin-role {\r\n  background-color: #673AB7;\r\n  color: white;\r\n}\r\n\r\n.status-badge {\r\n  padding: 3px 8px;\r\n  border-radius: 20px;\r\n  font-size: 12px;\r\n}\r\n\r\n.active-status {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n}\r\n\r\n.inactive-status {\r\n  background-color: #f44336;\r\n  color: white;\r\n}\r\n\r\n/* Botones de acción */\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 5px;\r\n}\r\n\r\n.edit-btn, .activate-btn, .deactivate-btn, .delete-btn {\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  border: none;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.edit-btn {\r\n  background-color: #2196F3;\r\n  color: white;\r\n}\r\n\r\n.edit-btn:hover {\r\n  background-color: #0b7dda;\r\n}\r\n\r\n.activate-btn {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n}\r\n\r\n.activate-btn:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n.deactivate-btn {\r\n  background-color: #FF9800;\r\n  color: white;\r\n}\r\n\r\n.deactivate-btn:hover {\r\n  background-color: #e68a00;\r\n}\r\n\r\n.delete-btn {\r\n  background-color: #f44336;\r\n  color: white;\r\n}\r\n\r\n.delete-btn:hover {\r\n  background-color: #d32f2f;\r\n}\r\n\r\n/* Modal */\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.modal-container {\r\n  background-color: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\r\n  width: 90%;\r\n  max-width: 500px;\r\n  max-height: 90vh;\r\n  overflow-y: auto;\r\n  animation: modalFadeIn 0.3s;\r\n}\r\n\r\n@keyframes modalFadeIn {\r\n  from { opacity: 0; transform: translateY(-20px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n\r\n.modal-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 15px 20px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.modal-header h3 {\r\n  margin: 0;\r\n  color: #333;\r\n}\r\n\r\n.close-btn {\r\n  background: none;\r\n  border: none;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  color: #999;\r\n}\r\n\r\n.close-btn:hover {\r\n  color: #666;\r\n}\r\n\r\n.modal-body {\r\n  padding: 20px;\r\n}\r\n\r\n/* Formulario */\r\n.user-form {\r\n  display: grid;\r\n  gap: 15px;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n}\r\n\r\n.form-group label {\r\n  color: #666;\r\n  font-weight: 600;\r\n}\r\n\r\n.form-group input, .form-group select {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n}\r\n\r\n.form-group input:focus, .form-group select:focus {\r\n  outline: none;\r\n  border-color: #4CAF50;\r\n}\r\n\r\n.form-group input:disabled {\r\n  background-color: #f5f5f5;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.roles-checkboxes {\r\n  display: grid;\r\n  gap: 10px;\r\n}\r\n\r\n.role-checkbox {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.role-checkbox input[type=\"checkbox\"] {\r\n  width: auto;\r\n  margin: 0;\r\n}\r\n\r\n.form-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.cancel-btn, .save-btn {\r\n  padding: 10px 15px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  flex: 1;\r\n}\r\n\r\n.cancel-btn {\r\n  background-color: #f1f1f1;\r\n  color: #333;\r\n}\r\n\r\n.cancel-btn:hover {\r\n  background-color: #e1e1e1;\r\n}\r\n\r\n.save-btn {\r\n  background-color: #4CAF50;\r\n  color: white;\r\n}\r\n\r\n.save-btn:hover {\r\n  background-color: #45a049;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .users-controls {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .actions {\r\n    margin-left: 0;\r\n    width: 100%;\r\n  }\r\n  \r\n  .create-user-btn {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}