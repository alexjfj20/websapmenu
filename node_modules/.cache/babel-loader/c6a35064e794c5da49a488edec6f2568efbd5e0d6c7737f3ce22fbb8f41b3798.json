{"ast":null,"code":"/**\n * Servicio para manejar las peticiones API al backend\n */\n\n// URL base de la API\nconst API_URL = process.env.NODE_ENV === 'development' ? 'http://localhost:3000/api' : '/api';\n\n// Token de autenticación\nlet token = localStorage.getItem('token') || '';\n\n/**\n * Configura el token de autenticación\n * @param {string} newToken \n */\nconst setToken = newToken => {\n  token = newToken;\n  if (newToken) {\n    localStorage.setItem('token', newToken);\n  } else {\n    localStorage.removeItem('token');\n  }\n};\n\n/**\n * Realiza una petición GET a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst get = async (endpoint, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      }),\n      ...(options.headers || {})\n    };\n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'GET',\n      headers,\n      ...options\n    });\n    if (options.responseType === 'blob') {\n      return response.blob();\n    }\n\n    // Si la respuesta no es JSON, devolver el texto\n    const contentType = response.headers.get('content-type');\n    if (!contentType || !contentType.includes('application/json')) {\n      const text = await response.text();\n      return {\n        success: response.ok,\n        data: text,\n        status: response.status\n      };\n    }\n    const data = await response.json();\n\n    // Si la respuesta tiene un código 401 o 403, podría ser un problema de autenticación\n    if (response.status === 401 || response.status === 403) {\n      console.warn(`Error de autenticación en ${endpoint}:`, data);\n\n      // Si estamos en desarrollo, permitir continuar con una respuesta simulada\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Modo desarrollo: devolviendo respuesta simulada para', endpoint);\n        return {\n          success: false,\n          error: data.message || 'Error de autenticación',\n          status: response.status,\n          simulatedResponse: true\n        };\n      }\n    }\n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    return data;\n  } catch (error) {\n    console.error(`Error en GET ${endpoint}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Realiza una petición POST a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} body - Cuerpo de la petición\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst post = async (endpoint, body = {}, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      }),\n      ...(options.headers || {})\n    };\n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(body),\n      ...options\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    return data;\n  } catch (error) {\n    console.error(`Error en POST ${endpoint}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Realiza una petición PUT a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} body - Cuerpo de la petición\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst put = async (endpoint, body = {}, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      }),\n      ...(options.headers || {})\n    };\n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(body),\n      ...options\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    return data;\n  } catch (error) {\n    console.error(`Error en PUT ${endpoint}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Realiza una petición DELETE a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst del = async (endpoint, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      }),\n      ...(options.headers || {})\n    };\n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'DELETE',\n      headers,\n      ...options\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    return data;\n  } catch (error) {\n    console.error(`Error en DELETE ${endpoint}:`, error);\n    throw error;\n  }\n};\nexport default {\n  setToken,\n  get,\n  post,\n  put,\n  delete: del\n};","map":{"version":3,"names":["API_URL","process","env","NODE_ENV","token","localStorage","getItem","setToken","newToken","setItem","removeItem","get","endpoint","options","headers","response","fetch","method","responseType","blob","contentType","includes","text","success","ok","data","status","json","console","warn","log","error","message","simulatedResponse","Error","post","body","JSON","stringify","put","del","delete"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/apiService.js"],"sourcesContent":["/**\n * Servicio para manejar las peticiones API al backend\n */\n\n// URL base de la API\nconst API_URL = process.env.NODE_ENV === 'development' \n  ? 'http://localhost:3000/api' \n  : '/api';\n\n// Token de autenticación\nlet token = localStorage.getItem('token') || '';\n\n/**\n * Configura el token de autenticación\n * @param {string} newToken \n */\nconst setToken = (newToken) => {\n  token = newToken;\n  if (newToken) {\n    localStorage.setItem('token', newToken);\n  } else {\n    localStorage.removeItem('token');\n  }\n};\n\n/**\n * Realiza una petición GET a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst get = async (endpoint, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && { 'Authorization': `Bearer ${token}` }),\n      ...(options.headers || {})\n    };\n    \n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'GET',\n      headers,\n      ...options\n    });\n    \n    if (options.responseType === 'blob') {\n      return response.blob();\n    }\n    \n    // Si la respuesta no es JSON, devolver el texto\n    const contentType = response.headers.get('content-type');\n    if (!contentType || !contentType.includes('application/json')) {\n      const text = await response.text();\n      return {\n        success: response.ok,\n        data: text,\n        status: response.status\n      };\n    }\n    \n    const data = await response.json();\n    \n    // Si la respuesta tiene un código 401 o 403, podría ser un problema de autenticación\n    if (response.status === 401 || response.status === 403) {\n      console.warn(`Error de autenticación en ${endpoint}:`, data);\n      \n      // Si estamos en desarrollo, permitir continuar con una respuesta simulada\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Modo desarrollo: devolviendo respuesta simulada para', endpoint);\n        return {\n          success: false,\n          error: data.message || 'Error de autenticación',\n          status: response.status,\n          simulatedResponse: true\n        };\n      }\n    }\n    \n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(`Error en GET ${endpoint}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Realiza una petición POST a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} body - Cuerpo de la petición\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst post = async (endpoint, body = {}, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && { 'Authorization': `Bearer ${token}` }),\n      ...(options.headers || {})\n    };\n    \n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(body),\n      ...options\n    });\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(`Error en POST ${endpoint}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Realiza una petición PUT a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} body - Cuerpo de la petición\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst put = async (endpoint, body = {}, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && { 'Authorization': `Bearer ${token}` }),\n      ...(options.headers || {})\n    };\n    \n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(body),\n      ...options\n    });\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(`Error en PUT ${endpoint}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Realiza una petición DELETE a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst del = async (endpoint, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && { 'Authorization': `Bearer ${token}` }),\n      ...(options.headers || {})\n    };\n    \n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'DELETE',\n      headers,\n      ...options\n    });\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(`Error en DELETE ${endpoint}:`, error);\n    throw error;\n  }\n};\n\nexport default {\n  setToken,\n  get,\n  post,\n  put,\n  delete: del\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}