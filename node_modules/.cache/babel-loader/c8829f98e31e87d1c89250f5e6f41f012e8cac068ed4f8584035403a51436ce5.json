{"ast":null,"code":"// src/services/syncService.js\n\n// Servicio para gestionar la sincronizaci√≥n y el estado de la conexi√≥n\nimport { getPendingPlatos, updatePlatoSyncStatus, getSyncQueue, removeFromSyncQueue, preparePlatoForSync, openDB } from './indexedDBService';\n\n// Constantes desde el servicio IndexedDB\nconst PLATOS_STORE = 'platos';\nconst API_URL = 'http://localhost:3000/api';\n\n// Configuraci√≥n espec√≠fica para mejorar la sincronizaci√≥n\nconst SYNC_CONFIG = {\n  // Desactivar verificaci√≥n de disponibilidad del servidor si causa problemas\n  skipServerAvailabilityCheck: true,\n  // Limitar a√∫n m√°s el tama√±o m√°ximo de los platos para sincronizaci√≥n\n  maxPlatoSize: 30000,\n  // 30KB m√°ximo\n  // Intervalos de reintento m√°s largos\n  retryIntervals: [5000, 15000, 30000],\n  // M√°ximo n√∫mero de reintentos\n  maxRetries: 2,\n  // URL del endpoint principal para platos\n  platoUrl: `${API_URL}/platos`,\n  // URL alternativa para sincronizaci√≥n de emergencia (m√°s b√°sica)\n  emergencyPlatoUrl: `${API_URL}/platos/minimal`,\n  // Usar endpoint de sincronizaci√≥n de emergencia\n  useEmergencyEndpoint: true\n};\n\n// Estado de la sincronizaci√≥n\nlet isSyncing = false;\nlet _isOnline = navigator.onLine;\n\n// Alternativa m√°s simple para verificar la conexi√≥n\nconst isOnline = async () => {\n  // Primero comprobamos el estado de navigator.onLine\n  if (!navigator.onLine) {\n    return false;\n  }\n\n  // Intentamos hacer un fetch a un recurso peque√±o (como un favicon)\n  try {\n    const response = await fetch(`${API_URL}/favicon.ico`, {\n      method: 'HEAD',\n      // Solo pedimos las cabeceras, no el contenido\n      mode: 'no-cors',\n      // Modo no-cors para evitar problemas de CORS\n      cache: 'no-store',\n      credentials: 'omit'\n    });\n    return true; // Si no hay excepci√≥n, asumimos que estamos en l√≠nea\n  } catch (error) {\n    console.error('Error al verificar estado de conexi√≥n:', error);\n    return false;\n  }\n};\n\n// Configurar escuchas para eventos de conexi√≥n\nconst setupConnectionListeners = () => {\n  window.addEventListener('online', async () => {\n    console.log('Evento online detectado');\n    _isOnline = await isOnline();\n    if (_isOnline) {\n      console.log('Conexi√≥n a Internet restablecida');\n      // Sincronizar cuando se recupera la conexi√≥n\n      syncData();\n    }\n  });\n  window.addEventListener('offline', () => {\n    console.log('Evento offline detectado');\n    _isOnline = false;\n    console.log('Conexi√≥n a Internet perdida');\n  });\n\n  // Verificar estado inicial\n  isOnline().then(online => {\n    console.log(`Estado inicial de conexi√≥n: ${online ? 'En l√≠nea' : 'Fuera de l√≠nea'}`);\n  });\n};\n\n// Crear versi√≥n minimalista de un plato para sincronizaci√≥n de emergencia\nconst createMinimalPlato = plato => {\n  return {\n    id: plato.id,\n    name: plato.name?.substring(0, 50) || 'Plato sin nombre',\n    price: Number(plato.price) || 0,\n    description: (plato.description?.substring(0, 100) || '') + '...',\n    includesDrink: Boolean(plato.includesDrink),\n    availableQuantity: Number(plato.availableQuantity) || 0,\n    is_available: true,\n    createdAt: plato.createdAt || new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    minimal_sync: true // Marca para indicar que es una versi√≥n minimalista\n  };\n};\n\n// Verificar si el servidor est√° realmente disponible\nconst checkServerAvailability = async () => {\n  // Si la verificaci√≥n est√° desactivada, asumir que el servidor est√° disponible\n  if (SYNC_CONFIG.skipServerAvailabilityCheck) {\n    console.log('üîÑ Omitiendo verificaci√≥n de disponibilidad del servidor (desactivada en configuraci√≥n)');\n    return true;\n  }\n  try {\n    // Usar una petici√≥n minimalista sin headers adicionales\n    const xhr = new XMLHttpRequest();\n\n    // Configurar un timeout corto para la verificaci√≥n\n    return new Promise(resolve => {\n      const timeoutId = setTimeout(() => {\n        console.warn('‚è±Ô∏è Timeout en verificaci√≥n de servidor');\n        xhr.abort();\n        resolve(false);\n      }, 3000);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          resolve(xhr.status >= 200 && xhr.status < 300);\n        }\n      };\n      xhr.onerror = function () {\n        clearTimeout(timeoutId);\n        console.warn('‚ùå Error en verificaci√≥n de servidor');\n        resolve(false);\n      };\n\n      // Usar m√©todo simple GET sin headers complejos\n      xhr.open('GET', `${API_URL}/ping`, true);\n      xhr.send();\n    });\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Error al verificar disponibilidad del servidor:', error);\n    return false;\n  }\n};\n\n// Marcar un plato como problem√°tico para evitar intentos continuos\nconst markPlatoAsSyncProblematic = async platoId => {\n  try {\n    // Actualizar el estado del plato en IndexedDB\n    const db = await openDB();\n    const transaction = db.transaction([PLATOS_STORE], 'readwrite');\n    const store = transaction.objectStore(PLATOS_STORE);\n\n    // Obtener el plato\n    const getRequest = store.get(platoId);\n    return new Promise((resolve, reject) => {\n      getRequest.onsuccess = event => {\n        const plato = event.target.result;\n        if (!plato) {\n          reject(new Error(`Plato ID ${platoId} no encontrado`));\n          return;\n        }\n\n        // Marcar como problem√°tico y cambiar estado de sincronizaci√≥n\n        plato.sync_problematic = true;\n        plato.syncStatus = 'sync_error';\n        plato.lastSyncAttempt = new Date().toISOString();\n\n        // Guardar los cambios\n        const updateRequest = store.put(plato);\n        updateRequest.onsuccess = () => {\n          console.log(`‚úÖ Plato ID ${platoId} marcado como problem√°tico para sincronizaci√≥n`);\n          resolve(true);\n        };\n        updateRequest.onerror = event => {\n          reject(new Error(`Error al actualizar plato: ${event.target.error}`));\n        };\n      };\n      getRequest.onerror = event => {\n        reject(new Error(`Error al obtener plato: ${event.target.error}`));\n      };\n    });\n  } catch (error) {\n    console.error('‚ùå Error al marcar plato como problem√°tico:', error);\n    throw error;\n  }\n};\n\n// M√©todo alternativo de sincronizaci√≥n con opciones m√°s resilientes\nconst syncPlatoUsingAlternativeMethod = async (preparedPlato, platoId, retryCount = 0) => {\n  const maxRetries = 3;\n  try {\n    console.log('üì° Usando m√©todo alternativo de sincronizaci√≥n...');\n\n    // Usar XMLHttpRequest para mayor control sobre la conexi√≥n\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      // Configurar timeout largo\n      xhr.timeout = 60000; // 60 segundos\n\n      xhr.onreadystatechange = async function () {\n        if (xhr.readyState === 4) {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            console.log('‚úÖ Sincronizaci√≥n exitosa usando m√©todo alternativo');\n            try {\n              // Actualizar estado en la base de datos\n              await updatePlatoSyncStatus(platoId, 'synced');\n            } catch (dbError) {\n              console.error('‚ö†Ô∏è Error al actualizar estado en BD:', dbError);\n            }\n            resolve(true);\n          } else {\n            console.error(`‚ùå Error en sincronizaci√≥n alternativa: ${xhr.status}`);\n\n            // Si hay error 500 y a√∫n tenemos reintentos\n            if (xhr.status === 500 && retryCount < maxRetries) {\n              console.warn(`‚ö†Ô∏è Reintentando (${retryCount + 1}/${maxRetries})...`);\n\n              // Espera exponencial entre reintentos\n              setTimeout(async () => {\n                try {\n                  const result = await syncPlatoUsingAlternativeMethod(preparedPlato, platoId, retryCount + 1);\n                  resolve(result);\n                } catch (retryError) {\n                  reject(retryError);\n                }\n              }, 5000 * Math.pow(2, retryCount));\n            } else {\n              reject(new Error(`Error HTTP: ${xhr.status}`));\n            }\n          }\n        }\n      };\n      xhr.ontimeout = function () {\n        console.error('‚ùå Timeout en la solicitud alternativa');\n        reject(new Error('Timeout en la solicitud'));\n      };\n      xhr.onerror = function () {\n        console.error('‚ùå Error de red en solicitud alternativa');\n\n        // Reintento con backoff si todav√≠a hay intentos disponibles\n        if (retryCount < maxRetries) {\n          console.warn(`‚ö†Ô∏è Error de red, reintentando (${retryCount + 1}/${maxRetries})...`);\n          setTimeout(async () => {\n            try {\n              const result = await syncPlatoUsingAlternativeMethod(preparedPlato, platoId, retryCount + 1);\n              resolve(result);\n            } catch (retryError) {\n              reject(retryError);\n            }\n          }, 5000 * Math.pow(2, retryCount));\n        } else {\n          reject(new Error('Error de red persistente'));\n        }\n      };\n\n      // Abrir conexi√≥n con m√©todo POST\n      xhr.open('POST', `${API_URL}/platos`, true);\n\n      // Establecer headers\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n      // Enviar los datos\n      xhr.send(JSON.stringify(preparedPlato));\n    });\n  } catch (error) {\n    console.error('‚ùå Error en m√©todo alternativo de sincronizaci√≥n:', error);\n    throw error;\n  }\n};\n\n// Sincronizar un plato con el servidor\nconst syncPlatoToServer = async (plato, retryCount = 0) => {\n  const maxRetries = SYNC_CONFIG.maxRetries;\n\n  // Si el plato est√° marcado como problem√°tico, omitirlo\n  if (plato.sync_problematic) {\n    console.warn(`‚ö†Ô∏è Omitiendo plato ${plato.id} marcado como problem√°tico para sincronizaci√≥n`);\n    return false;\n  }\n  console.log(`Sincronizando plato ${plato.id} con el servidor (intento ${retryCount + 1}/${maxRetries + 1})...`);\n  try {\n    // Omitir verificaci√≥n si est√° desactivada\n    if (!SYNC_CONFIG.skipServerAvailabilityCheck) {\n      // Verificar si el servidor est√° disponible\n      const serverAvailable = await checkServerAvailability();\n      if (!serverAvailable) {\n        console.error('‚ùå El servidor no est√° disponible. Posponiendo sincronizaci√≥n.');\n        return false;\n      }\n    }\n\n    // Preparar datos ultra-minimalistas para sincronizaci√≥n\n    let syncData;\n    try {\n      // Intentar usar la funci√≥n de preparaci√≥n normal\n      const preparedPlato = preparePlatoForSync(plato);\n\n      // Verificar tama√±o y aplicar l√≠mites estrictos\n      const dataSize = JSON.stringify(preparedPlato).length;\n      if (dataSize > SYNC_CONFIG.maxPlatoSize) {\n        console.warn(`‚ö†Ô∏è Plato demasiado grande (${dataSize} bytes). Usando versi√≥n ultra-minimalista.`);\n        syncData = createUltraMinimalPlato(plato);\n      } else {\n        syncData = preparedPlato;\n      }\n    } catch (prepError) {\n      console.error('‚ùå Error al preparar datos:', prepError);\n      syncData = createUltraMinimalPlato(plato);\n    }\n\n    // Usar el m√©todo m√°s confiable para sincronizaci√≥n\n    return await syncMinimalDataOnly(syncData, plato.id, retryCount);\n  } catch (error) {\n    console.error('‚ùå Error en sincronizaci√≥n:', error);\n    if (retryCount >= maxRetries) {\n      try {\n        await markPlatoAsSyncProblematic(plato.id);\n      } catch (markError) {\n        console.error('Error al marcar plato como problem√°tico:', markError);\n      }\n    }\n    return false;\n  }\n};\n\n// Versi√≥n ultra-minimalista para casos extremos\nconst createUltraMinimalPlato = plato => {\n  return {\n    id: plato.id,\n    name: plato.name?.substring(0, 30) || 'Plato sin nombre',\n    price: Number(plato.price) || 0,\n    // Omitir todo lo que no sea absolutamente esencial\n    is_ultra_minimal: true\n  };\n};\n\n// Modificar syncMinimalDataOnly para eliminar headers problem√°ticos\nconst syncMinimalDataOnly = async (data, platoId, retryCount = 0) => {\n  const maxRetries = SYNC_CONFIG.maxRetries;\n\n  // Asegurar que los datos son realmente minimalistas\n  const ultraMinimalData = {\n    id: data.id,\n    name: typeof data.name === 'string' ? data.name.length > 20 ? data.name.substring(0, 20) + '...' : data.name : 'Plato sin nombre',\n    price: Number(data.price) || 0\n  };\n  return new Promise(resolve => {\n    // Establecer timeout para toda la operaci√≥n\n    const operationTimeoutId = setTimeout(() => {\n      console.warn('‚è±Ô∏è Timeout global de la operaci√≥n de sincronizaci√≥n');\n      resolve(false);\n    }, 30000);\n    const xhr = new XMLHttpRequest();\n\n    // Configurar timeouts m√°s estrictos\n    xhr.timeout = 15000;\n    xhr.onreadystatechange = async function () {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          clearTimeout(operationTimeoutId);\n          try {\n            await updatePlatoSyncStatus(platoId, 'synced');\n            console.log(`‚úÖ Sincronizaci√≥n exitosa para plato ${platoId}`);\n          } catch (error) {\n            console.error('Error al actualizar estado:', error);\n          }\n          resolve(true);\n        } else if (xhr.status === 0) {\n          // Conexi√≥n abortada o no establecida\n          console.warn('‚ö†Ô∏è Conexi√≥n interrumpida');\n          handleRetry();\n        } else if (xhr.status === 431) {\n          console.error(`‚ùå Error 431 (Request Header Fields Too Large) - Intentando m√©todo alternativo`);\n          // Intentar con una solicitud a√∫n m√°s b√°sica sin headers extra\n          tryDirectFetch(ultraMinimalData).then(success => {\n            if (success) {\n              try {\n                updatePlatoSyncStatus(platoId, 'synced').then(() => {\n                  console.log(`‚úÖ Sincronizaci√≥n exitosa (m√©todo de emergencia) para plato ${platoId}`);\n                  resolve(true);\n                });\n              } catch (error) {\n                console.error('Error al actualizar estado despu√©s de m√©todo alternativo:', error);\n                resolve(true); // Asumimos √©xito de todos modos\n              }\n            } else {\n              handleRetry();\n            }\n          });\n        } else {\n          console.error(`‚ùå Error HTTP ${xhr.status} en sincronizaci√≥n`);\n          handleRetry();\n        }\n      }\n    };\n    xhr.ontimeout = function () {\n      console.warn('‚è±Ô∏è Timeout de la petici√≥n HTTP');\n      handleRetry();\n    };\n    xhr.onerror = function () {\n      console.error('‚ùå Error de red en sincronizaci√≥n');\n      handleRetry();\n    };\n\n    // Funci√≥n para manejar reintentos\n    const handleRetry = () => {\n      if (retryCount < maxRetries) {\n        const delay = SYNC_CONFIG.retryIntervals[retryCount] || 5000;\n        console.log(`üîÑ Reintentando en ${delay}ms... (${retryCount + 1}/${maxRetries})`);\n        setTimeout(() => {\n          clearTimeout(operationTimeoutId);\n          syncMinimalDataOnly(data, platoId, retryCount + 1).then(success => resolve(success));\n        }, delay);\n      } else {\n        clearTimeout(operationTimeoutId);\n        console.warn('‚ùå Agotados todos los reintentos de sincronizaci√≥n');\n        resolve(false);\n      }\n    };\n    try {\n      // Usar m√©todo POST con headers absolutamente m√≠nimos\n      xhr.open('POST', `${API_URL}/platos`, true);\n      xhr.setRequestHeader('Content-Type', 'application/json');\n\n      // NO A√ëADIR OTROS HEADERS - Esto es cr√≠tico para evitar el error 431\n\n      // Enviar los datos ultra-minimalistas en lugar de los originales\n      xhr.send(JSON.stringify(ultraMinimalData));\n    } catch (error) {\n      console.error('‚ùå Error al iniciar la petici√≥n:', error);\n      handleRetry();\n    }\n  });\n};\n\n// Funci√≥n alternativa de emergencia que usa fetch con opciones m√≠nimas\nconst tryDirectFetch = async minimalData => {\n  try {\n    console.log('üö® Intentando sincronizaci√≥n de emergencia con fetch m√≠nimo');\n\n    // Usar fetch con opciones absolutamente m√≠nimas\n    const response = await fetch(`${API_URL}/platos/minimal`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n        // NO A√ëADIR M√ÅS HEADERS\n      },\n      body: JSON.stringify(minimalData)\n    });\n    return response.ok;\n  } catch (error) {\n    console.error('Error en m√©todo de emergencia:', error);\n    return false;\n  }\n};\n\n// Funci√≥n para probar la conexi√≥n con el servidor\nconst testServerConnection = async () => {\n  console.log('üîÑ Probando conexi√≥n con el servidor...');\n  try {\n    // Intentar con el endpoint m√°s simple posible\n    const response = await fetch(`${API_URL}/test/minimal`, {\n      method: 'GET',\n      cache: 'no-store',\n      // NO enviar headers adicionales\n      headers: {}\n    });\n    if (response.ok) {\n      console.log('‚úÖ Conexi√≥n b√°sica al servidor establecida');\n      return true;\n    } else if (response.status === 431) {\n      console.error('‚ùå Error 431: Request Header Fields Too Large');\n      console.log('üëâ Necesitas reducir el tama√±o de las cookies o headers');\n      return false;\n    } else {\n      console.error(`‚ùå Error al conectar con el servidor: ${response.status}`);\n      return false;\n    }\n  } catch (error) {\n    console.error('‚ùå Error de red al probar la conexi√≥n:', error);\n    return false;\n  }\n};\n\n// Funci√≥n para probar la conexi√≥n a MySQL\nconst testMySQLConnection = async () => {\n  console.log('üîÑ Probando conexi√≥n a MySQL...');\n  try {\n    const response = await fetch(`${API_URL}/test/db`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log('‚úÖ Conexi√≥n a MySQL establecida:', data);\n\n      // Mostrar informaci√≥n clara sobre la base de datos\n      if (data.data && data.data.database) {\n        console.log(`üìä Base de datos MySQL: ${data.data.database}`);\n        console.log(`üìä Tablas disponibles: ${data.data.tables.join(', ')}`);\n      }\n      return true;\n    } else {\n      console.error('‚ùå Error al conectar con MySQL:', await response.text());\n      return false;\n    }\n  } catch (error) {\n    console.error('‚ùå Error de red al probar la conexi√≥n MySQL:', error);\n    return false;\n  }\n};\n\n// Definir la funci√≥n syncData que falta\nconst syncData = async () => {\n  if (!(await isOnline())) {\n    console.log('Sin conexi√≥n a Internet, la sincronizaci√≥n no es posible');\n    return false;\n  }\n  try {\n    console.log('Iniciando sincronizaci√≥n de datos...');\n\n    // Procesar la cola de sincronizaci√≥n\n    await processSyncQueue();\n\n    // Sincronizar platos pendientes que no est√©n en la cola\n    const pendingPlatos = await getPendingPlatos();\n    console.log(`Encontrados ${pendingPlatos.length} platos pendientes de sincronizaci√≥n`);\n    for (const plato of pendingPlatos) {\n      await syncPlatoToServer(plato);\n    }\n    console.log('Sincronizaci√≥n completada con √©xito');\n    return true;\n  } catch (error) {\n    console.error('Error durante la sincronizaci√≥n:', error);\n    return false;\n  }\n};\n\n// Modificar initSyncService para probar tambi√©n la conexi√≥n MySQL\nconst initSyncService = () => {\n  console.log('üîÑ Inicializando servicio de sincronizaci√≥n...');\n\n  // Probar solo la conexi√≥n al API ya que la funci√≥n para MySQL puede no estar disponible todav√≠a\n  testServerConnection().then(isApiConnected => {\n    console.log(`‚úÖ Estado de conexi√≥n API: ${isApiConnected}`);\n    if (isApiConnected) {\n      // Configurar sincronizaci√≥n como antes\n      setupConnectionListeners();\n      syncData();\n      setInterval(async () => {\n        if ((await isOnline()) && !isSyncing) {\n          syncData();\n        }\n      }, 60000);\n    } else {\n      console.error('‚ùå No se pudo establecer conexi√≥n con el servidor API.');\n    }\n  });\n  console.log('‚öôÔ∏è Servicio de sincronizaci√≥n inicializado');\n};\n\n// Exportar solo las funciones que est√°n definidas\nexport { initSyncService, syncData, isOnline, _isOnline, testServerConnection, testMySQLConnection };","map":{"version":3,"names":["getPendingPlatos","updatePlatoSyncStatus","getSyncQueue","removeFromSyncQueue","preparePlatoForSync","openDB","PLATOS_STORE","API_URL","SYNC_CONFIG","skipServerAvailabilityCheck","maxPlatoSize","retryIntervals","maxRetries","platoUrl","emergencyPlatoUrl","useEmergencyEndpoint","isSyncing","_isOnline","navigator","onLine","isOnline","response","fetch","method","mode","cache","credentials","error","console","setupConnectionListeners","window","addEventListener","log","syncData","then","online","createMinimalPlato","plato","id","name","substring","price","Number","description","includesDrink","Boolean","availableQuantity","is_available","createdAt","Date","toISOString","updatedAt","minimal_sync","checkServerAvailability","xhr","XMLHttpRequest","Promise","resolve","timeoutId","setTimeout","warn","abort","onreadystatechange","readyState","clearTimeout","status","onerror","open","send","markPlatoAsSyncProblematic","platoId","db","transaction","store","objectStore","getRequest","get","reject","onsuccess","event","target","result","Error","sync_problematic","syncStatus","lastSyncAttempt","updateRequest","put","syncPlatoUsingAlternativeMethod","preparedPlato","retryCount","timeout","dbError","retryError","Math","pow","ontimeout","setRequestHeader","JSON","stringify","syncPlatoToServer","serverAvailable","dataSize","length","createUltraMinimalPlato","prepError","syncMinimalDataOnly","markError","is_ultra_minimal","data","ultraMinimalData","operationTimeoutId","handleRetry","tryDirectFetch","success","delay","minimalData","headers","body","ok","testServerConnection","testMySQLConnection","json","database","tables","join","text","processSyncQueue","pendingPlatos","initSyncService","isApiConnected","setInterval"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/syncService.js"],"sourcesContent":["// src/services/syncService.js\r\n\r\n// Servicio para gestionar la sincronizaci√≥n y el estado de la conexi√≥n\r\nimport { \r\n  getPendingPlatos, \r\n  updatePlatoSyncStatus, \r\n  getSyncQueue, \r\n  removeFromSyncQueue,\r\n  preparePlatoForSync,\r\n  openDB\r\n} from './indexedDBService';\r\n\r\n// Constantes desde el servicio IndexedDB\r\nconst PLATOS_STORE = 'platos';\r\nconst API_URL = 'http://localhost:3000/api';\r\n\r\n// Configuraci√≥n espec√≠fica para mejorar la sincronizaci√≥n\r\nconst SYNC_CONFIG = {\r\n  // Desactivar verificaci√≥n de disponibilidad del servidor si causa problemas\r\n  skipServerAvailabilityCheck: true,\r\n  // Limitar a√∫n m√°s el tama√±o m√°ximo de los platos para sincronizaci√≥n\r\n  maxPlatoSize: 30000, // 30KB m√°ximo\r\n  // Intervalos de reintento m√°s largos\r\n  retryIntervals: [5000, 15000, 30000],\r\n  // M√°ximo n√∫mero de reintentos\r\n  maxRetries: 2,\r\n  // URL del endpoint principal para platos\r\n  platoUrl: `${API_URL}/platos`,\r\n  // URL alternativa para sincronizaci√≥n de emergencia (m√°s b√°sica)\r\n  emergencyPlatoUrl: `${API_URL}/platos/minimal`,\r\n  // Usar endpoint de sincronizaci√≥n de emergencia\r\n  useEmergencyEndpoint: true\r\n};\r\n\r\n// Estado de la sincronizaci√≥n\r\nlet isSyncing = false;\r\nlet _isOnline = navigator.onLine;\r\n\r\n// Alternativa m√°s simple para verificar la conexi√≥n\r\nconst isOnline = async () => {\r\n  // Primero comprobamos el estado de navigator.onLine\r\n  if (!navigator.onLine) {\r\n    return false;\r\n  }\r\n  \r\n  // Intentamos hacer un fetch a un recurso peque√±o (como un favicon)\r\n  try {\r\n    const response = await fetch(`${API_URL}/favicon.ico`, {\r\n      method: 'HEAD', // Solo pedimos las cabeceras, no el contenido\r\n      mode: 'no-cors', // Modo no-cors para evitar problemas de CORS\r\n      cache: 'no-store',\r\n      credentials: 'omit'\r\n    });\r\n    \r\n    return true; // Si no hay excepci√≥n, asumimos que estamos en l√≠nea\r\n  } catch (error) {\r\n    console.error('Error al verificar estado de conexi√≥n:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Configurar escuchas para eventos de conexi√≥n\r\nconst setupConnectionListeners = () => {\r\n  window.addEventListener('online', async () => {\r\n    console.log('Evento online detectado');\r\n    _isOnline = await isOnline();\r\n    if (_isOnline) {\r\n      console.log('Conexi√≥n a Internet restablecida');\r\n      // Sincronizar cuando se recupera la conexi√≥n\r\n      syncData();\r\n    }\r\n  });\r\n  \r\n  window.addEventListener('offline', () => {\r\n    console.log('Evento offline detectado');\r\n    _isOnline = false;\r\n    console.log('Conexi√≥n a Internet perdida');\r\n  });\r\n  \r\n  // Verificar estado inicial\r\n  isOnline().then(online => {\r\n    console.log(`Estado inicial de conexi√≥n: ${online ? 'En l√≠nea' : 'Fuera de l√≠nea'}`);\r\n  });\r\n};\r\n\r\n// Crear versi√≥n minimalista de un plato para sincronizaci√≥n de emergencia\r\nconst createMinimalPlato = (plato) => {\r\n  return {\r\n    id: plato.id,\r\n    name: plato.name?.substring(0, 50) || 'Plato sin nombre',\r\n    price: Number(plato.price) || 0,\r\n    description: (plato.description?.substring(0, 100) || '') + '...',\r\n    includesDrink: Boolean(plato.includesDrink),\r\n    availableQuantity: Number(plato.availableQuantity) || 0,\r\n    is_available: true,\r\n    createdAt: plato.createdAt || new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    minimal_sync: true  // Marca para indicar que es una versi√≥n minimalista\r\n  };\r\n};\r\n\r\n// Verificar si el servidor est√° realmente disponible\r\nconst checkServerAvailability = async () => {\r\n  // Si la verificaci√≥n est√° desactivada, asumir que el servidor est√° disponible\r\n  if (SYNC_CONFIG.skipServerAvailabilityCheck) {\r\n    console.log('üîÑ Omitiendo verificaci√≥n de disponibilidad del servidor (desactivada en configuraci√≥n)');\r\n    return true;\r\n  }\r\n  \r\n  try {\r\n    // Usar una petici√≥n minimalista sin headers adicionales\r\n    const xhr = new XMLHttpRequest();\r\n    \r\n    // Configurar un timeout corto para la verificaci√≥n\r\n    return new Promise((resolve) => {\r\n      const timeoutId = setTimeout(() => {\r\n        console.warn('‚è±Ô∏è Timeout en verificaci√≥n de servidor');\r\n        xhr.abort();\r\n        resolve(false);\r\n      }, 3000);\r\n      \r\n      xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4) {\r\n          clearTimeout(timeoutId);\r\n          resolve(xhr.status >= 200 && xhr.status < 300);\r\n        }\r\n      };\r\n      \r\n      xhr.onerror = function() {\r\n        clearTimeout(timeoutId);\r\n        console.warn('‚ùå Error en verificaci√≥n de servidor');\r\n        resolve(false);\r\n      };\r\n      \r\n      // Usar m√©todo simple GET sin headers complejos\r\n      xhr.open('GET', `${API_URL}/ping`, true);\r\n      xhr.send();\r\n    });\r\n  } catch (error) {\r\n    console.warn('‚ö†Ô∏è Error al verificar disponibilidad del servidor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Marcar un plato como problem√°tico para evitar intentos continuos\r\nconst markPlatoAsSyncProblematic = async (platoId) => {\r\n  try {\r\n    // Actualizar el estado del plato en IndexedDB\r\n    const db = await openDB();\r\n    const transaction = db.transaction([PLATOS_STORE], 'readwrite');\r\n    const store = transaction.objectStore(PLATOS_STORE);\r\n    \r\n    // Obtener el plato\r\n    const getRequest = store.get(platoId);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      getRequest.onsuccess = (event) => {\r\n        const plato = event.target.result;\r\n        \r\n        if (!plato) {\r\n          reject(new Error(`Plato ID ${platoId} no encontrado`));\r\n          return;\r\n        }\r\n        \r\n        // Marcar como problem√°tico y cambiar estado de sincronizaci√≥n\r\n        plato.sync_problematic = true;\r\n        plato.syncStatus = 'sync_error';\r\n        plato.lastSyncAttempt = new Date().toISOString();\r\n        \r\n        // Guardar los cambios\r\n        const updateRequest = store.put(plato);\r\n        \r\n        updateRequest.onsuccess = () => {\r\n          console.log(`‚úÖ Plato ID ${platoId} marcado como problem√°tico para sincronizaci√≥n`);\r\n          resolve(true);\r\n        };\r\n        \r\n        updateRequest.onerror = (event) => {\r\n          reject(new Error(`Error al actualizar plato: ${event.target.error}`));\r\n        };\r\n      };\r\n      \r\n      getRequest.onerror = (event) => {\r\n        reject(new Error(`Error al obtener plato: ${event.target.error}`));\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('‚ùå Error al marcar plato como problem√°tico:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// M√©todo alternativo de sincronizaci√≥n con opciones m√°s resilientes\r\nconst syncPlatoUsingAlternativeMethod = async (preparedPlato, platoId, retryCount = 0) => {\r\n  const maxRetries = 3;\r\n  \r\n  try {\r\n    console.log('üì° Usando m√©todo alternativo de sincronizaci√≥n...');\r\n    \r\n    // Usar XMLHttpRequest para mayor control sobre la conexi√≥n\r\n    return new Promise((resolve, reject) => {\r\n      const xhr = new XMLHttpRequest();\r\n      \r\n      // Configurar timeout largo\r\n      xhr.timeout = 60000; // 60 segundos\r\n      \r\n      xhr.onreadystatechange = async function() {\r\n        if (xhr.readyState === 4) {\r\n          if (xhr.status >= 200 && xhr.status < 300) {\r\n            console.log('‚úÖ Sincronizaci√≥n exitosa usando m√©todo alternativo');\r\n            \r\n            try {\r\n              // Actualizar estado en la base de datos\r\n              await updatePlatoSyncStatus(platoId, 'synced');\r\n            } catch (dbError) {\r\n              console.error('‚ö†Ô∏è Error al actualizar estado en BD:', dbError);\r\n            }\r\n            \r\n            resolve(true);\r\n          } else {\r\n            console.error(`‚ùå Error en sincronizaci√≥n alternativa: ${xhr.status}`);\r\n            \r\n            // Si hay error 500 y a√∫n tenemos reintentos\r\n            if (xhr.status === 500 && retryCount < maxRetries) {\r\n              console.warn(`‚ö†Ô∏è Reintentando (${retryCount+1}/${maxRetries})...`);\r\n              \r\n              // Espera exponencial entre reintentos\r\n              setTimeout(async () => {\r\n                try {\r\n                  const result = await syncPlatoUsingAlternativeMethod(\r\n                    preparedPlato, platoId, retryCount + 1\r\n                  );\r\n                  resolve(result);\r\n                } catch (retryError) {\r\n                  reject(retryError);\r\n                }\r\n              }, 5000 * Math.pow(2, retryCount));\r\n            } else {\r\n              reject(new Error(`Error HTTP: ${xhr.status}`));\r\n            }\r\n          }\r\n        }\r\n      };\r\n      \r\n      xhr.ontimeout = function() {\r\n        console.error('‚ùå Timeout en la solicitud alternativa');\r\n        reject(new Error('Timeout en la solicitud'));\r\n      };\r\n      \r\n      xhr.onerror = function() {\r\n        console.error('‚ùå Error de red en solicitud alternativa');\r\n        \r\n        // Reintento con backoff si todav√≠a hay intentos disponibles\r\n        if (retryCount < maxRetries) {\r\n          console.warn(`‚ö†Ô∏è Error de red, reintentando (${retryCount+1}/${maxRetries})...`);\r\n          \r\n          setTimeout(async () => {\r\n            try {\r\n              const result = await syncPlatoUsingAlternativeMethod(\r\n                preparedPlato, platoId, retryCount + 1\r\n              );\r\n              resolve(result);\r\n            } catch (retryError) {\r\n              reject(retryError);\r\n            }\r\n          }, 5000 * Math.pow(2, retryCount));\r\n        } else {\r\n          reject(new Error('Error de red persistente'));\r\n        }\r\n      };\r\n      \r\n      // Abrir conexi√≥n con m√©todo POST\r\n      xhr.open('POST', `${API_URL}/platos`, true);\r\n      \r\n      // Establecer headers\r\n      xhr.setRequestHeader('Content-Type', 'application/json');\r\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n      \r\n      // Enviar los datos\r\n      xhr.send(JSON.stringify(preparedPlato));\r\n    });\r\n  } catch (error) {\r\n    console.error('‚ùå Error en m√©todo alternativo de sincronizaci√≥n:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Sincronizar un plato con el servidor\r\nconst syncPlatoToServer = async (plato, retryCount = 0) => {\r\n  const maxRetries = SYNC_CONFIG.maxRetries;\r\n  \r\n  // Si el plato est√° marcado como problem√°tico, omitirlo\r\n  if (plato.sync_problematic) {\r\n    console.warn(`‚ö†Ô∏è Omitiendo plato ${plato.id} marcado como problem√°tico para sincronizaci√≥n`);\r\n    return false;\r\n  }\r\n  \r\n  console.log(`Sincronizando plato ${plato.id} con el servidor (intento ${retryCount + 1}/${maxRetries + 1})...`);\r\n  \r\n  try {\r\n    // Omitir verificaci√≥n si est√° desactivada\r\n    if (!SYNC_CONFIG.skipServerAvailabilityCheck) {\r\n      // Verificar si el servidor est√° disponible\r\n      const serverAvailable = await checkServerAvailability();\r\n      if (!serverAvailable) {\r\n        console.error('‚ùå El servidor no est√° disponible. Posponiendo sincronizaci√≥n.');\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    // Preparar datos ultra-minimalistas para sincronizaci√≥n\r\n    let syncData;\r\n    \r\n    try {\r\n      // Intentar usar la funci√≥n de preparaci√≥n normal\r\n      const preparedPlato = preparePlatoForSync(plato);\r\n      \r\n      // Verificar tama√±o y aplicar l√≠mites estrictos\r\n      const dataSize = JSON.stringify(preparedPlato).length;\r\n      if (dataSize > SYNC_CONFIG.maxPlatoSize) {\r\n        console.warn(`‚ö†Ô∏è Plato demasiado grande (${dataSize} bytes). Usando versi√≥n ultra-minimalista.`);\r\n        syncData = createUltraMinimalPlato(plato);\r\n      } else {\r\n        syncData = preparedPlato;\r\n      }\r\n    } catch (prepError) {\r\n      console.error('‚ùå Error al preparar datos:', prepError);\r\n      syncData = createUltraMinimalPlato(plato);\r\n    }\r\n    \r\n    // Usar el m√©todo m√°s confiable para sincronizaci√≥n\r\n    return await syncMinimalDataOnly(syncData, plato.id, retryCount);\r\n  } catch (error) {\r\n    console.error('‚ùå Error en sincronizaci√≥n:', error);\r\n    \r\n    if (retryCount >= maxRetries) {\r\n      try {\r\n        await markPlatoAsSyncProblematic(plato.id);\r\n      } catch (markError) {\r\n        console.error('Error al marcar plato como problem√°tico:', markError);\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n};\r\n\r\n// Versi√≥n ultra-minimalista para casos extremos\r\nconst createUltraMinimalPlato = (plato) => {\r\n  return {\r\n    id: plato.id,\r\n    name: plato.name?.substring(0, 30) || 'Plato sin nombre',\r\n    price: Number(plato.price) || 0,\r\n    // Omitir todo lo que no sea absolutamente esencial\r\n    is_ultra_minimal: true\r\n  };\r\n};\r\n\r\n// Modificar syncMinimalDataOnly para eliminar headers problem√°ticos\r\nconst syncMinimalDataOnly = async (data, platoId, retryCount = 0) => {\r\n  const maxRetries = SYNC_CONFIG.maxRetries;\r\n  \r\n  // Asegurar que los datos son realmente minimalistas\r\n  const ultraMinimalData = {\r\n    id: data.id,\r\n    name: typeof data.name === 'string' ? \r\n      (data.name.length > 20 ? data.name.substring(0, 20) + '...' : data.name) : \r\n      'Plato sin nombre',\r\n    price: Number(data.price) || 0\r\n  };\r\n  \r\n  return new Promise((resolve) => {\r\n    // Establecer timeout para toda la operaci√≥n\r\n    const operationTimeoutId = setTimeout(() => {\r\n      console.warn('‚è±Ô∏è Timeout global de la operaci√≥n de sincronizaci√≥n');\r\n      resolve(false);\r\n    }, 30000);\r\n    \r\n    const xhr = new XMLHttpRequest();\r\n    \r\n    // Configurar timeouts m√°s estrictos\r\n    xhr.timeout = 15000;\r\n    \r\n    xhr.onreadystatechange = async function() {\r\n      if (xhr.readyState === 4) {\r\n        if (xhr.status >= 200 && xhr.status < 300) {\r\n          clearTimeout(operationTimeoutId);\r\n          try {\r\n            await updatePlatoSyncStatus(platoId, 'synced');\r\n            console.log(`‚úÖ Sincronizaci√≥n exitosa para plato ${platoId}`);\r\n          } catch (error) {\r\n            console.error('Error al actualizar estado:', error);\r\n          }\r\n          resolve(true);\r\n        } else if (xhr.status === 0) {\r\n          // Conexi√≥n abortada o no establecida\r\n          console.warn('‚ö†Ô∏è Conexi√≥n interrumpida');\r\n          handleRetry();\r\n        } else if (xhr.status === 431) {\r\n          console.error(`‚ùå Error 431 (Request Header Fields Too Large) - Intentando m√©todo alternativo`);\r\n          // Intentar con una solicitud a√∫n m√°s b√°sica sin headers extra\r\n          tryDirectFetch(ultraMinimalData).then(success => {\r\n            if (success) {\r\n              try {\r\n                updatePlatoSyncStatus(platoId, 'synced').then(() => {\r\n                  console.log(`‚úÖ Sincronizaci√≥n exitosa (m√©todo de emergencia) para plato ${platoId}`);\r\n                  resolve(true);\r\n                });\r\n              } catch (error) {\r\n                console.error('Error al actualizar estado despu√©s de m√©todo alternativo:', error);\r\n                resolve(true); // Asumimos √©xito de todos modos\r\n              }\r\n            } else {\r\n              handleRetry();\r\n            }\r\n          });\r\n        } else {\r\n          console.error(`‚ùå Error HTTP ${xhr.status} en sincronizaci√≥n`);\r\n          handleRetry();\r\n        }\r\n      }\r\n    };\r\n    \r\n    xhr.ontimeout = function() {\r\n      console.warn('‚è±Ô∏è Timeout de la petici√≥n HTTP');\r\n      handleRetry();\r\n    };\r\n    \r\n    xhr.onerror = function() {\r\n      console.error('‚ùå Error de red en sincronizaci√≥n');\r\n      handleRetry();\r\n    };\r\n    \r\n    // Funci√≥n para manejar reintentos\r\n    const handleRetry = () => {\r\n      if (retryCount < maxRetries) {\r\n        const delay = SYNC_CONFIG.retryIntervals[retryCount] || 5000;\r\n        console.log(`üîÑ Reintentando en ${delay}ms... (${retryCount + 1}/${maxRetries})`);\r\n        \r\n        setTimeout(() => {\r\n          clearTimeout(operationTimeoutId);\r\n          syncMinimalDataOnly(data, platoId, retryCount + 1)\r\n            .then(success => resolve(success));\r\n        }, delay);\r\n      } else {\r\n        clearTimeout(operationTimeoutId);\r\n        console.warn('‚ùå Agotados todos los reintentos de sincronizaci√≥n');\r\n        resolve(false);\r\n      }\r\n    };\r\n    \r\n    try {\r\n      // Usar m√©todo POST con headers absolutamente m√≠nimos\r\n      xhr.open('POST', `${API_URL}/platos`, true);\r\n      xhr.setRequestHeader('Content-Type', 'application/json');\r\n      \r\n      // NO A√ëADIR OTROS HEADERS - Esto es cr√≠tico para evitar el error 431\r\n      \r\n      // Enviar los datos ultra-minimalistas en lugar de los originales\r\n      xhr.send(JSON.stringify(ultraMinimalData));\r\n    } catch (error) {\r\n      console.error('‚ùå Error al iniciar la petici√≥n:', error);\r\n      handleRetry();\r\n    }\r\n  });\r\n};\r\n\r\n// Funci√≥n alternativa de emergencia que usa fetch con opciones m√≠nimas\r\nconst tryDirectFetch = async (minimalData) => {\r\n  try {\r\n    console.log('üö® Intentando sincronizaci√≥n de emergencia con fetch m√≠nimo');\r\n    \r\n    // Usar fetch con opciones absolutamente m√≠nimas\r\n    const response = await fetch(`${API_URL}/platos/minimal`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n        // NO A√ëADIR M√ÅS HEADERS\r\n      },\r\n      body: JSON.stringify(minimalData)\r\n    });\r\n    \r\n    return response.ok;\r\n  } catch (error) {\r\n    console.error('Error en m√©todo de emergencia:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Funci√≥n para probar la conexi√≥n con el servidor\r\nconst testServerConnection = async () => {\r\n  console.log('üîÑ Probando conexi√≥n con el servidor...');\r\n  \r\n  try {\r\n    // Intentar con el endpoint m√°s simple posible\r\n    const response = await fetch(`${API_URL}/test/minimal`, { \r\n      method: 'GET',\r\n      cache: 'no-store',\r\n      // NO enviar headers adicionales\r\n      headers: {}\r\n    });\r\n    \r\n    if (response.ok) {\r\n      console.log('‚úÖ Conexi√≥n b√°sica al servidor establecida');\r\n      return true;\r\n    } else if (response.status === 431) {\r\n      console.error('‚ùå Error 431: Request Header Fields Too Large');\r\n      console.log('üëâ Necesitas reducir el tama√±o de las cookies o headers');\r\n      return false;\r\n    } else {\r\n      console.error(`‚ùå Error al conectar con el servidor: ${response.status}`);\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('‚ùå Error de red al probar la conexi√≥n:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Funci√≥n para probar la conexi√≥n a MySQL\r\nconst testMySQLConnection = async () => {\r\n  console.log('üîÑ Probando conexi√≥n a MySQL...');\r\n  \r\n  try {\r\n    const response = await fetch(`${API_URL}/test/db`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      console.log('‚úÖ Conexi√≥n a MySQL establecida:', data);\r\n      \r\n      // Mostrar informaci√≥n clara sobre la base de datos\r\n      if (data.data && data.data.database) {\r\n        console.log(`üìä Base de datos MySQL: ${data.data.database}`);\r\n        console.log(`üìä Tablas disponibles: ${data.data.tables.join(', ')}`);\r\n      }\r\n      \r\n      return true;\r\n    } else {\r\n      console.error('‚ùå Error al conectar con MySQL:', await response.text());\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('‚ùå Error de red al probar la conexi√≥n MySQL:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Definir la funci√≥n syncData que falta\r\nconst syncData = async () => {\r\n  if (!await isOnline()) {\r\n    console.log('Sin conexi√≥n a Internet, la sincronizaci√≥n no es posible');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    console.log('Iniciando sincronizaci√≥n de datos...');\r\n    \r\n    // Procesar la cola de sincronizaci√≥n\r\n    await processSyncQueue();\r\n    \r\n    // Sincronizar platos pendientes que no est√©n en la cola\r\n    const pendingPlatos = await getPendingPlatos();\r\n    console.log(`Encontrados ${pendingPlatos.length} platos pendientes de sincronizaci√≥n`);\r\n    \r\n    for (const plato of pendingPlatos) {\r\n      await syncPlatoToServer(plato);\r\n    }\r\n    \r\n    console.log('Sincronizaci√≥n completada con √©xito');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error durante la sincronizaci√≥n:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Modificar initSyncService para probar tambi√©n la conexi√≥n MySQL\r\nconst initSyncService = () => {\r\n  console.log('üîÑ Inicializando servicio de sincronizaci√≥n...');\r\n  \r\n  // Probar solo la conexi√≥n al API ya que la funci√≥n para MySQL puede no estar disponible todav√≠a\r\n  testServerConnection().then(isApiConnected => {\r\n    console.log(`‚úÖ Estado de conexi√≥n API: ${isApiConnected}`);\r\n    \r\n    if (isApiConnected) {\r\n      // Configurar sincronizaci√≥n como antes\r\n      setupConnectionListeners();\r\n      syncData();\r\n      \r\n      setInterval(async () => {\r\n        if (await isOnline() && !isSyncing) {\r\n          syncData();\r\n        }\r\n      }, 60000);\r\n    } else {\r\n      console.error('‚ùå No se pudo establecer conexi√≥n con el servidor API.');\r\n    }\r\n  });\r\n  \r\n  console.log('‚öôÔ∏è Servicio de sincronizaci√≥n inicializado');\r\n};\r\n\r\n// Exportar solo las funciones que est√°n definidas\r\nexport {\r\n  initSyncService,\r\n  syncData,\r\n  isOnline,\r\n  _isOnline,\r\n  testServerConnection,\r\n  testMySQLConnection\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}