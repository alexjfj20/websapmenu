{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nconst DB_NAME = 'websapDatabase';\n// Incrementar versión de la base de datos para forzar la actualización\nconst DB_VERSION = 2;\nconst MENU_STORE = 'menuItems';\nconst IMAGE_STORE = 'menuImages';\nconst SOLD_ITEMS_STORE = 'soldItems';\nconst BUSINESS_INFO_STORE = 'businessInfo';\nconst USERS_STORE = 'users';\n\n// Abrir la conexión a la base de datos con manejo mejorado de errores\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    // Intentar eliminar la base de datos anterior si existe un error\n    const deleteRequest = indexedDB.deleteDatabase(DB_NAME);\n    deleteRequest.onsuccess = () => {\n      console.log(\"Base de datos anterior eliminada con éxito\");\n      createNewDatabase(resolve, reject);\n    };\n    deleteRequest.onerror = () => {\n      console.log(\"No se pudo eliminar la base de datos anterior, creando nueva\");\n      createNewDatabase(resolve, reject);\n    };\n  });\n}\nfunction createNewDatabase(resolve, reject) {\n  const request = indexedDB.open(DB_NAME, DB_VERSION);\n  request.onerror = event => {\n    console.error(\"Error al abrir la base de datos:\", event.target.error);\n    reject('Error al abrir la base de datos: ' + event.target.errorCode);\n  };\n  request.onsuccess = event => {\n    const db = event.target.result;\n    console.log(\"Base de datos abierta con éxito, versión:\", db.version);\n\n    // Verificar que todos los almacenes existen\n    const storeNames = Array.from(db.objectStoreNames);\n    console.log(\"Almacenes disponibles:\", storeNames);\n    resolve(db);\n  };\n  request.onupgradeneeded = event => {\n    console.log(\"Actualizando estructura de la base de datos a versión:\", DB_VERSION);\n    const db = event.target.result;\n\n    // Crear todos los almacenes necesarios\n\n    // Crear almacén para usuarios\n    if (!db.objectStoreNames.contains(USERS_STORE)) {\n      console.log(\"Creando almacén:\", USERS_STORE);\n      db.createObjectStore(USERS_STORE, {\n        keyPath: 'id'\n      });\n    }\n\n    // Crear almacén para elementos del menú\n    if (!db.objectStoreNames.contains(MENU_STORE)) {\n      console.log(\"Creando almacén:\", MENU_STORE);\n      db.createObjectStore(MENU_STORE, {\n        keyPath: 'id'\n      });\n    }\n\n    // Crear almacén para imágenes\n    if (!db.objectStoreNames.contains(IMAGE_STORE)) {\n      console.log(\"Creando almacén:\", IMAGE_STORE);\n      db.createObjectStore(IMAGE_STORE, {\n        keyPath: 'id'\n      });\n    }\n\n    // Crear almacén para elementos vendidos\n    if (!db.objectStoreNames.contains(SOLD_ITEMS_STORE)) {\n      console.log(\"Creando almacén:\", SOLD_ITEMS_STORE);\n      db.createObjectStore(SOLD_ITEMS_STORE, {\n        keyPath: 'id'\n      });\n    }\n\n    // Crear almacén para información del negocio\n    if (!db.objectStoreNames.contains(BUSINESS_INFO_STORE)) {\n      console.log(\"Creando almacén:\", BUSINESS_INFO_STORE);\n      db.createObjectStore(BUSINESS_INFO_STORE, {\n        keyPath: 'id'\n      });\n    }\n  };\n}\n\n// Guardar elementos del menú\nexport async function saveMenuItems(items) {\n  try {\n    // Primero procesamos todas las imágenes y creamos copias de los objetos\n    const processedItems = [];\n    for (const item of items) {\n      // Crear una copia del elemento\n      const itemToStore = {\n        ...item\n      };\n\n      // Asegurarse de que el elemento tiene un id\n      if (!itemToStore.id) {\n        itemToStore.id = Date.now() + Math.random().toString(36).substring(2, 10);\n      }\n\n      // Si tiene imagen, guardarla por separado antes de la transacción principal\n      if (itemToStore.image && typeof itemToStore.image === 'string' && itemToStore.image.length > 0) {\n        try {\n          await saveMenuImage(itemToStore.id, itemToStore.image);\n          itemToStore.image = null;\n          itemToStore.hasStoredImage = true;\n        } catch (imageError) {\n          console.warn('Error al guardar imagen, continuando sin imagen:', imageError);\n          // Si hay error al guardar la imagen, continuamos sin ella\n          itemToStore.image = null;\n          itemToStore.hasStoredImage = false;\n        }\n      }\n      processedItems.push(itemToStore);\n    }\n\n    // Ahora guardamos todos los items en una sola transacción\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(MENU_STORE);\n\n    // Usamos Promise.all para manejar todas las operaciones put juntas\n    const putPromises = processedItems.map(item => {\n      return new Promise((resolve, reject) => {\n        const request = store.put(item);\n        request.onsuccess = () => resolve();\n        request.onerror = e => reject(e.target.error);\n      });\n    });\n\n    // Esperamos a que se completen todas las operaciones put\n    await Promise.all(putPromises);\n\n    // Esperamos a que se complete la transacción\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar elementos del menú:', error);\n    throw error;\n  }\n}\n\n// Guardar imagen de un elemento del menú\nexport async function saveMenuImage(itemId, imageData) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([IMAGE_STORE], 'readwrite');\n    const store = transaction.objectStore(IMAGE_STORE);\n    store.put({\n      id: itemId,\n      data: imageData\n    });\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar imagen:', error);\n    throw error;\n  }\n}\n\n// Obtener todos los elementos del menú\nexport async function getMenuItems() {\n  try {\n    const db = await openDatabase();\n\n    // Verificar que el almacén existe\n    if (!Array.from(db.objectStoreNames).includes(MENU_STORE)) {\n      console.error(`El almacén ${MENU_STORE} no existe en la base de datos`);\n      return []; // Devolver array vacío en lugar de fallar\n    }\n    const transaction = db.transaction([MENU_STORE], 'readonly');\n    const store = transaction.objectStore(MENU_STORE);\n    const request = store.getAll();\n    return new Promise((resolve, reject) => {\n      request.onsuccess = async () => {\n        let items = request.result;\n\n        // Verificar que todos los elementos tengan IDs únicos\n        const uniqueItems = [];\n        const seenIds = new Set();\n        for (const item of items) {\n          // Si el elemento no tiene ID o es un ID duplicado, generamos uno nuevo\n          if (!item.id || seenIds.has(item.id)) {\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\n          }\n\n          // Marcar este ID como visto\n          seenIds.add(item.id);\n          uniqueItems.push(item);\n        }\n\n        // Recuperar imágenes para cada elemento\n        for (const item of uniqueItems) {\n          if (item.hasStoredImage) {\n            item.image = await getMenuImage(item.id);\n          }\n        }\n        resolve(uniqueItems);\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener elementos del menú:', error);\n    return []; // Devolver array vacío en caso de error\n  }\n}\n\n// Eliminar un elemento del menú\nexport async function deleteMenuItem(itemId) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE, IMAGE_STORE], 'readwrite');\n    const menuStore = transaction.objectStore(MENU_STORE);\n    const imageStore = transaction.objectStore(IMAGE_STORE);\n\n    // Eliminar el elemento\n    menuStore.delete(itemId);\n    // Eliminar la imagen asociada\n    imageStore.delete(itemId);\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al eliminar elemento del menú:', error);\n    throw error;\n  }\n}\n\n// Obtener imagen de un elemento del menú\nexport async function getMenuImage(itemId) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([IMAGE_STORE], 'readonly');\n    const store = transaction.objectStore(IMAGE_STORE);\n    const request = store.get(itemId);\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        if (request.result) {\n          resolve(request.result.data);\n        } else {\n          resolve(null);\n        }\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener imagen:', error);\n    throw error;\n  }\n}\n\n// Guardar información del negocio\nexport async function saveBusinessInfo(info) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readwrite');\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\n\n    // Usar un ID fijo para la información del negocio\n    const businessInfo = {\n      ...info,\n      id: 'business_info_1'\n    };\n    store.put(businessInfo);\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar información del negocio:', error);\n    throw error;\n  }\n}\n\n// Obtener información del negocio\nexport async function getBusinessInfo() {\n  try {\n    const db = await openDatabase();\n\n    // Verificar que el almacén existe\n    if (!Array.from(db.objectStoreNames).includes(BUSINESS_INFO_STORE)) {\n      console.error(`El almacén ${BUSINESS_INFO_STORE} no existe en la base de datos`);\n      return {}; // Devolver objeto vacío en lugar de fallar\n    }\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readonly');\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\n    const request = store.get('business_info_1');\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        resolve(request.result || {});\n      };\n      request.onerror = event => {\n        console.error('Error en request:', event.target.error);\n        reject(event.target.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error al obtener información del negocio:', error);\n    // Devolvemos un objeto vacío en lugar de fallar\n    return {};\n  }\n}\n\n// Guardar elementos vendidos\nexport async function saveSoldItems(items) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readwrite');\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\n\n    // Usar un ID fijo para los elementos vendidos\n    store.put({\n      id: 'sold_items_1',\n      items\n    });\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar elementos vendidos:', error);\n    throw error;\n  }\n}\n\n// Obtener elementos vendidos\nexport async function getSoldItems() {\n  try {\n    const db = await openDatabase();\n\n    // Verificar que el almacén existe\n    if (!Array.from(db.objectStoreNames).includes(SOLD_ITEMS_STORE)) {\n      console.error(`El almacén ${SOLD_ITEMS_STORE} no existe en la base de datos`);\n      return []; // Devolver array vacío en lugar de fallar\n    }\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readonly');\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\n    const request = store.get('sold_items_1');\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        if (request.result) {\n          resolve(request.result.items);\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener elementos vendidos:', error);\n    return [];\n  }\n}\n\n// Migrar datos de localStorage a IndexedDB\nexport async function migrateFromLocalStorage() {\n  try {\n    console.log(\"Iniciando migración desde localStorage...\");\n    let success = true;\n\n    // Migrar información del negocio\n    const businessInfo = localStorage.getItem('businessInfo');\n    if (businessInfo) {\n      console.log(\"Migrando información del negocio...\");\n      try {\n        await saveBusinessInfo(JSON.parse(businessInfo));\n      } catch (error) {\n        console.error('Error al migrar información de negocio:', error);\n        success = false;\n      }\n    }\n\n    // Migrar elementos del menú\n    const menuItems = localStorage.getItem('menuItems');\n    if (menuItems) {\n      console.log(\"Migrando elementos del menú...\");\n      try {\n        const parsedMenuItems = JSON.parse(menuItems);\n\n        // Asegurarse de que cada elemento tiene un ID\n        const processedMenuItems = parsedMenuItems.map(item => {\n          if (!item.id) {\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\n          }\n          return item;\n        });\n        await saveMenuItems(processedMenuItems);\n        console.log(`Migrados ${processedMenuItems.length} elementos de menú.`);\n      } catch (error) {\n        console.error('Error al migrar elementos del menú:', error);\n        success = false;\n      }\n    }\n\n    // Migrar elementos vendidos\n    const soldItems = localStorage.getItem('soldItems');\n    if (soldItems) {\n      console.log(\"Migrando elementos vendidos...\");\n      try {\n        await saveSoldItems(JSON.parse(soldItems));\n      } catch (error) {\n        console.error('Error al migrar elementos vendidos:', error);\n        success = false;\n      }\n    }\n    console.log(success ? \"Migración completada exitosamente.\" : \"Migración completada con errores.\");\n    return success;\n  } catch (error) {\n    console.error('Error al migrar datos desde localStorage:', error);\n    return false;\n  }\n}\n\n// Comprimir imagen\nexport function compressImage(base64Image, maxWidth = 800, maxHeight = 600, quality = 0.7) {\n  return new Promise(resolve => {\n    const img = new Image();\n    img.onload = () => {\n      // Crear un canvas para comprimir la imagen\n      const canvas = document.createElement('canvas');\n      let width = img.width;\n      let height = img.height;\n\n      // Calcular nuevas dimensiones manteniendo proporción\n      if (width > height) {\n        if (width > maxWidth) {\n          height = Math.round(height * maxWidth / width);\n          width = maxWidth;\n        }\n      } else {\n        if (height > maxHeight) {\n          width = Math.round(width * maxHeight / height);\n          height = maxHeight;\n        }\n      }\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, width, height);\n\n      // Obtener imagen comprimida como JPEG con calidad reducida\n      const compressedImage = canvas.toDataURL('image/jpeg', quality);\n      resolve(compressedImage);\n    };\n    img.src = base64Image;\n  });\n}\n\n// Agregar nueva función para reiniciar la base de datos por completo\nexport async function resetDatabase() {\n  return new Promise((resolve, reject) => {\n    const deleteRequest = indexedDB.deleteDatabase(DB_NAME);\n    deleteRequest.onsuccess = () => {\n      console.log(\"Base de datos eliminada con éxito\");\n      resolve(true);\n    };\n    deleteRequest.onerror = event => {\n      console.error(\"Error al eliminar la base de datos:\", event.target.error);\n      reject(event.target.error);\n    };\n  });\n}","map":{"version":3,"names":["DB_NAME","DB_VERSION","MENU_STORE","IMAGE_STORE","SOLD_ITEMS_STORE","BUSINESS_INFO_STORE","USERS_STORE","openDatabase","Promise","resolve","reject","deleteRequest","indexedDB","deleteDatabase","onsuccess","console","log","createNewDatabase","onerror","request","open","event","error","target","errorCode","db","result","version","storeNames","Array","from","objectStoreNames","onupgradeneeded","contains","createObjectStore","keyPath","saveMenuItems","items","processedItems","item","itemToStore","id","Date","now","Math","random","toString","substring","image","length","saveMenuImage","hasStoredImage","imageError","warn","push","transaction","store","objectStore","putPromises","map","put","e","all","oncomplete","itemId","imageData","data","getMenuItems","includes","getAll","uniqueItems","seenIds","Set","has","add","getMenuImage","deleteMenuItem","menuStore","imageStore","delete","get","saveBusinessInfo","info","businessInfo","getBusinessInfo","saveSoldItems","getSoldItems","migrateFromLocalStorage","success","localStorage","getItem","JSON","parse","menuItems","parsedMenuItems","processedMenuItems","soldItems","compressImage","base64Image","maxWidth","maxHeight","quality","img","Image","onload","canvas","document","createElement","width","height","round","ctx","getContext","drawImage","compressedImage","toDataURL","src","resetDatabase"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/storageService.js"],"sourcesContent":["const DB_NAME = 'websapDatabase';\r\n// Incrementar versión de la base de datos para forzar la actualización\r\nconst DB_VERSION = 2; \r\nconst MENU_STORE = 'menuItems';\r\nconst IMAGE_STORE = 'menuImages';\r\nconst SOLD_ITEMS_STORE = 'soldItems'; \r\nconst BUSINESS_INFO_STORE = 'businessInfo';\r\nconst USERS_STORE = 'users';\r\n\r\n// Abrir la conexión a la base de datos con manejo mejorado de errores\r\nfunction openDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    // Intentar eliminar la base de datos anterior si existe un error\r\n    const deleteRequest = indexedDB.deleteDatabase(DB_NAME);\r\n    \r\n    deleteRequest.onsuccess = () => {\r\n      console.log(\"Base de datos anterior eliminada con éxito\");\r\n      createNewDatabase(resolve, reject);\r\n    };\r\n    \r\n    deleteRequest.onerror = () => {\r\n      console.log(\"No se pudo eliminar la base de datos anterior, creando nueva\");\r\n      createNewDatabase(resolve, reject);\r\n    };\r\n  });\r\n}\r\n\r\nfunction createNewDatabase(resolve, reject) {\r\n  const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n  \r\n  request.onerror = (event) => {\r\n    console.error(\"Error al abrir la base de datos:\", event.target.error);\r\n    reject('Error al abrir la base de datos: ' + event.target.errorCode);\r\n  };\r\n  \r\n  request.onsuccess = (event) => {\r\n    const db = event.target.result;\r\n    console.log(\"Base de datos abierta con éxito, versión:\", db.version);\r\n    \r\n    // Verificar que todos los almacenes existen\r\n    const storeNames = Array.from(db.objectStoreNames);\r\n    console.log(\"Almacenes disponibles:\", storeNames);\r\n    \r\n    resolve(db);\r\n  };\r\n  \r\n  request.onupgradeneeded = (event) => {\r\n    console.log(\"Actualizando estructura de la base de datos a versión:\", DB_VERSION);\r\n    const db = event.target.result;\r\n    \r\n    // Crear todos los almacenes necesarios\r\n    \r\n    // Crear almacén para usuarios\r\n    if (!db.objectStoreNames.contains(USERS_STORE)) {\r\n      console.log(\"Creando almacén:\", USERS_STORE);\r\n      db.createObjectStore(USERS_STORE, { keyPath: 'id' });\r\n    }\r\n    \r\n    // Crear almacén para elementos del menú\r\n    if (!db.objectStoreNames.contains(MENU_STORE)) {\r\n      console.log(\"Creando almacén:\", MENU_STORE);\r\n      db.createObjectStore(MENU_STORE, { keyPath: 'id' });\r\n    }\r\n    \r\n    // Crear almacén para imágenes\r\n    if (!db.objectStoreNames.contains(IMAGE_STORE)) {\r\n      console.log(\"Creando almacén:\", IMAGE_STORE);\r\n      db.createObjectStore(IMAGE_STORE, { keyPath: 'id' });\r\n    }\r\n    \r\n    // Crear almacén para elementos vendidos\r\n    if (!db.objectStoreNames.contains(SOLD_ITEMS_STORE)) {\r\n      console.log(\"Creando almacén:\", SOLD_ITEMS_STORE);\r\n      db.createObjectStore(SOLD_ITEMS_STORE, { keyPath: 'id' });\r\n    }\r\n    \r\n    // Crear almacén para información del negocio\r\n    if (!db.objectStoreNames.contains(BUSINESS_INFO_STORE)) {\r\n      console.log(\"Creando almacén:\", BUSINESS_INFO_STORE);\r\n      db.createObjectStore(BUSINESS_INFO_STORE, { keyPath: 'id' });\r\n    }\r\n  };\r\n}\r\n\r\n// Guardar elementos del menú\r\nexport async function saveMenuItems(items) {\r\n  try {\r\n    // Primero procesamos todas las imágenes y creamos copias de los objetos\r\n    const processedItems = [];\r\n    for (const item of items) {\r\n      // Crear una copia del elemento\r\n      const itemToStore = { ...item };\r\n      \r\n      // Asegurarse de que el elemento tiene un id\r\n      if (!itemToStore.id) {\r\n        itemToStore.id = Date.now() + Math.random().toString(36).substring(2, 10);\r\n      }\r\n      \r\n      // Si tiene imagen, guardarla por separado antes de la transacción principal\r\n      if (itemToStore.image && typeof itemToStore.image === 'string' && itemToStore.image.length > 0) {\r\n        try {\r\n          await saveMenuImage(itemToStore.id, itemToStore.image);\r\n          itemToStore.image = null;\r\n          itemToStore.hasStoredImage = true;\r\n        } catch (imageError) {\r\n          console.warn('Error al guardar imagen, continuando sin imagen:', imageError);\r\n          // Si hay error al guardar la imagen, continuamos sin ella\r\n          itemToStore.image = null;\r\n          itemToStore.hasStoredImage = false;\r\n        }\r\n      }\r\n      \r\n      processedItems.push(itemToStore);\r\n    }\r\n    \r\n    // Ahora guardamos todos los items en una sola transacción\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([MENU_STORE], 'readwrite');\r\n    const store = transaction.objectStore(MENU_STORE);\r\n    \r\n    // Usamos Promise.all para manejar todas las operaciones put juntas\r\n    const putPromises = processedItems.map(item => {\r\n      return new Promise((resolve, reject) => {\r\n        const request = store.put(item);\r\n        request.onsuccess = () => resolve();\r\n        request.onerror = (e) => reject(e.target.error);\r\n      });\r\n    });\r\n    \r\n    // Esperamos a que se completen todas las operaciones put\r\n    await Promise.all(putPromises);\r\n    \r\n    // Esperamos a que se complete la transacción\r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar elementos del menú:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Guardar imagen de un elemento del menú\r\nexport async function saveMenuImage(itemId, imageData) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([IMAGE_STORE], 'readwrite');\r\n    const store = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    store.put({ id: itemId, data: imageData });\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar imagen:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener todos los elementos del menú\r\nexport async function getMenuItems() {\r\n  try {\r\n    const db = await openDatabase();\r\n    \r\n    // Verificar que el almacén existe\r\n    if (!Array.from(db.objectStoreNames).includes(MENU_STORE)) {\r\n      console.error(`El almacén ${MENU_STORE} no existe en la base de datos`);\r\n      return []; // Devolver array vacío en lugar de fallar\r\n    }\r\n    \r\n    const transaction = db.transaction([MENU_STORE], 'readonly');\r\n    const store = transaction.objectStore(MENU_STORE);\r\n    \r\n    const request = store.getAll();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = async () => {\r\n        let items = request.result;\r\n        \r\n        // Verificar que todos los elementos tengan IDs únicos\r\n        const uniqueItems = [];\r\n        const seenIds = new Set();\r\n        \r\n        for (const item of items) {\r\n          // Si el elemento no tiene ID o es un ID duplicado, generamos uno nuevo\r\n          if (!item.id || seenIds.has(item.id)) {\r\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\r\n          }\r\n          \r\n          // Marcar este ID como visto\r\n          seenIds.add(item.id);\r\n          uniqueItems.push(item);\r\n        }\r\n        \r\n        // Recuperar imágenes para cada elemento\r\n        for (const item of uniqueItems) {\r\n          if (item.hasStoredImage) {\r\n            item.image = await getMenuImage(item.id);\r\n          }\r\n        }\r\n        \r\n        resolve(uniqueItems);\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener elementos del menú:', error);\r\n    return []; // Devolver array vacío en caso de error\r\n  }\r\n}\r\n\r\n// Eliminar un elemento del menú\r\nexport async function deleteMenuItem(itemId) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([MENU_STORE, IMAGE_STORE], 'readwrite');\r\n    const menuStore = transaction.objectStore(MENU_STORE);\r\n    const imageStore = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    // Eliminar el elemento\r\n    menuStore.delete(itemId);\r\n    // Eliminar la imagen asociada\r\n    imageStore.delete(itemId);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al eliminar elemento del menú:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener imagen de un elemento del menú\r\nexport async function getMenuImage(itemId) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([IMAGE_STORE], 'readonly');\r\n    const store = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    const request = store.get(itemId);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        if (request.result) {\r\n          resolve(request.result.data);\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener imagen:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Guardar información del negocio\r\nexport async function saveBusinessInfo(info) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readwrite');\r\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\r\n    \r\n    // Usar un ID fijo para la información del negocio\r\n    const businessInfo = { ...info, id: 'business_info_1' };\r\n    store.put(businessInfo);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar información del negocio:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener información del negocio\r\nexport async function getBusinessInfo() {\r\n  try {\r\n    const db = await openDatabase();\r\n    \r\n    // Verificar que el almacén existe\r\n    if (!Array.from(db.objectStoreNames).includes(BUSINESS_INFO_STORE)) {\r\n      console.error(`El almacén ${BUSINESS_INFO_STORE} no existe en la base de datos`);\r\n      return {}; // Devolver objeto vacío en lugar de fallar\r\n    }\r\n    \r\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readonly');\r\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\r\n    \r\n    const request = store.get('business_info_1');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        resolve(request.result || {});\r\n      };\r\n      request.onerror = (event) => {\r\n        console.error('Error en request:', event.target.error);\r\n        reject(event.target.error);\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener información del negocio:', error);\r\n    // Devolvemos un objeto vacío en lugar de fallar\r\n    return {};\r\n  }\r\n}\r\n\r\n// Guardar elementos vendidos\r\nexport async function saveSoldItems(items) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readwrite');\r\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\r\n    \r\n    // Usar un ID fijo para los elementos vendidos\r\n    store.put({ id: 'sold_items_1', items });\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar elementos vendidos:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener elementos vendidos\r\nexport async function getSoldItems() {\r\n  try {\r\n    const db = await openDatabase();\r\n    \r\n    // Verificar que el almacén existe\r\n    if (!Array.from(db.objectStoreNames).includes(SOLD_ITEMS_STORE)) {\r\n      console.error(`El almacén ${SOLD_ITEMS_STORE} no existe en la base de datos`);\r\n      return []; // Devolver array vacío en lugar de fallar\r\n    }\r\n    \r\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readonly');\r\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\r\n    \r\n    const request = store.get('sold_items_1');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        if (request.result) {\r\n          resolve(request.result.items);\r\n        } else {\r\n          resolve([]);\r\n        }\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener elementos vendidos:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Migrar datos de localStorage a IndexedDB\r\nexport async function migrateFromLocalStorage() {\r\n  try {\r\n    console.log(\"Iniciando migración desde localStorage...\");\r\n    \r\n    let success = true;\r\n    \r\n    // Migrar información del negocio\r\n    const businessInfo = localStorage.getItem('businessInfo');\r\n    if (businessInfo) {\r\n      console.log(\"Migrando información del negocio...\");\r\n      try {\r\n        await saveBusinessInfo(JSON.parse(businessInfo));\r\n      } catch (error) {\r\n        console.error('Error al migrar información de negocio:', error);\r\n        success = false;\r\n      }\r\n    }\r\n    \r\n    // Migrar elementos del menú\r\n    const menuItems = localStorage.getItem('menuItems');\r\n    if (menuItems) {\r\n      console.log(\"Migrando elementos del menú...\");\r\n      try {\r\n        const parsedMenuItems = JSON.parse(menuItems);\r\n        \r\n        // Asegurarse de que cada elemento tiene un ID\r\n        const processedMenuItems = parsedMenuItems.map(item => {\r\n          if (!item.id) {\r\n            item.id = Date.now() + '-' + Math.random().toString(36).substring(2, 10);\r\n          }\r\n          return item;\r\n        });\r\n        \r\n        await saveMenuItems(processedMenuItems);\r\n        console.log(`Migrados ${processedMenuItems.length} elementos de menú.`);\r\n      } catch (error) {\r\n        console.error('Error al migrar elementos del menú:', error);\r\n        success = false;\r\n      }\r\n    }\r\n    \r\n    // Migrar elementos vendidos\r\n    const soldItems = localStorage.getItem('soldItems');\r\n    if (soldItems) {\r\n      console.log(\"Migrando elementos vendidos...\");\r\n      try {\r\n        await saveSoldItems(JSON.parse(soldItems));\r\n      } catch (error) {\r\n        console.error('Error al migrar elementos vendidos:', error);\r\n        success = false;\r\n      }\r\n    }\r\n    \r\n    console.log(success ? \"Migración completada exitosamente.\" : \"Migración completada con errores.\");\r\n    return success;\r\n  } catch (error) {\r\n    console.error('Error al migrar datos desde localStorage:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Comprimir imagen\r\nexport function compressImage(base64Image, maxWidth = 800, maxHeight = 600, quality = 0.7) {\r\n  return new Promise((resolve) => {\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      // Crear un canvas para comprimir la imagen\r\n      const canvas = document.createElement('canvas');\r\n      \r\n      let width = img.width;\r\n      let height = img.height;\r\n      \r\n      // Calcular nuevas dimensiones manteniendo proporción\r\n      if (width > height) {\r\n        if (width > maxWidth) {\r\n          height = Math.round((height * maxWidth) / width);\r\n          width = maxWidth;\r\n        }\r\n      } else {\r\n        if (height > maxHeight) {\r\n          width = Math.round((width * maxHeight) / height);\r\n          height = maxHeight;\r\n        }\r\n      }\r\n      \r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      \r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0, width, height);\r\n      \r\n      // Obtener imagen comprimida como JPEG con calidad reducida\r\n      const compressedImage = canvas.toDataURL('image/jpeg', quality);\r\n      resolve(compressedImage);\r\n    };\r\n    img.src = base64Image;\r\n  });\r\n}\r\n\r\n// Agregar nueva función para reiniciar la base de datos por completo\r\nexport async function resetDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    const deleteRequest = indexedDB.deleteDatabase(DB_NAME);\r\n    \r\n    deleteRequest.onsuccess = () => {\r\n      console.log(\"Base de datos eliminada con éxito\");\r\n      resolve(true);\r\n    };\r\n    \r\n    deleteRequest.onerror = (event) => {\r\n      console.error(\"Error al eliminar la base de datos:\", event.target.error);\r\n      reject(event.target.error);\r\n    };\r\n  });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}