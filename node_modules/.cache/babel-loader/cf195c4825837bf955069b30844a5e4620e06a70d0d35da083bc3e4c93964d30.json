{"ast":null,"code":"const DB_NAME = 'websapDatabase';\nconst DB_VERSION = 1;\nconst MENU_STORE = 'menuItems';\nconst IMAGE_STORE = 'menuImages';\nconst SOLD_ITEMS_STORE = 'soldItems';\nconst BUSINESS_INFO_STORE = 'businessInfo';\n\n// Abrir la conexión a la base de datos\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onerror = event => {\n      reject('Error al abrir la base de datos: ' + event.target.errorCode);\n    };\n    request.onsuccess = event => {\n      const db = event.target.result;\n      resolve(db);\n    };\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n\n      // Crear almacén para elementos del menú\n      if (!db.objectStoreNames.contains(MENU_STORE)) {\n        db.createObjectStore(MENU_STORE, {\n          keyPath: 'id'\n        });\n      }\n\n      // Crear almacén para imágenes\n      if (!db.objectStoreNames.contains(IMAGE_STORE)) {\n        db.createObjectStore(IMAGE_STORE, {\n          keyPath: 'id'\n        });\n      }\n\n      // Crear almacén para elementos vendidos\n      if (!db.objectStoreNames.contains(SOLD_ITEMS_STORE)) {\n        db.createObjectStore(SOLD_ITEMS_STORE, {\n          keyPath: 'id'\n        });\n      }\n\n      // Crear almacén para información del negocio\n      if (!db.objectStoreNames.contains(BUSINESS_INFO_STORE)) {\n        db.createObjectStore(BUSINESS_INFO_STORE, {\n          keyPath: 'id'\n        });\n      }\n    };\n  });\n}\n\n// Guardar elementos del menú\nexport async function saveMenuItems(items) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(MENU_STORE);\n\n    // No limpiar el almacén, solo actualizar/agregar elementos\n    for (const item of items) {\n      // Asegurarse de que el elemento tiene un id\n      if (!item.id) {\n        item.id = Date.now() + Math.random().toString(36).substring(2, 10);\n      }\n\n      // No guardar la imagen aquí para evitar problemas de tamaño\n      const itemToStore = {\n        ...item\n      };\n      if (itemToStore.image && typeof itemToStore.image === 'string' && itemToStore.image.length > 0) {\n        await saveMenuImage(itemToStore.id, itemToStore.image);\n        itemToStore.image = null;\n        itemToStore.hasStoredImage = true;\n      }\n      store.put(itemToStore);\n    }\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar elementos del menú:', error);\n    throw error;\n  }\n}\n\n// Guardar imagen de un elemento del menú\nexport async function saveMenuImage(itemId, imageData) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([IMAGE_STORE], 'readwrite');\n    const store = transaction.objectStore(IMAGE_STORE);\n    store.put({\n      id: itemId,\n      data: imageData\n    });\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar imagen:', error);\n    throw error;\n  }\n}\n\n// Obtener todos los elementos del menú\nexport async function getMenuItems() {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE], 'readonly');\n    const store = transaction.objectStore(MENU_STORE);\n    const request = store.getAll();\n    return new Promise((resolve, reject) => {\n      request.onsuccess = async () => {\n        const items = request.result;\n\n        // Recuperar imágenes para cada elemento\n        for (const item of items) {\n          if (item.hasStoredImage) {\n            item.image = await getMenuImage(item.id);\n          }\n        }\n        resolve(items);\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener elementos del menú:', error);\n    throw error;\n  }\n}\n\n// Eliminar un elemento del menú\nexport async function deleteMenuItem(itemId) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([MENU_STORE, IMAGE_STORE], 'readwrite');\n    const menuStore = transaction.objectStore(MENU_STORE);\n    const imageStore = transaction.objectStore(IMAGE_STORE);\n\n    // Eliminar el elemento\n    menuStore.delete(itemId);\n    // Eliminar la imagen asociada\n    imageStore.delete(itemId);\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al eliminar elemento del menú:', error);\n    throw error;\n  }\n}\n\n// Obtener imagen de un elemento del menú\nexport async function getMenuImage(itemId) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([IMAGE_STORE], 'readonly');\n    const store = transaction.objectStore(IMAGE_STORE);\n    const request = store.get(itemId);\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        if (request.result) {\n          resolve(request.result.data);\n        } else {\n          resolve(null);\n        }\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener imagen:', error);\n    throw error;\n  }\n}\n\n// Guardar información del negocio\nexport async function saveBusinessInfo(info) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readwrite');\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\n\n    // Usar un ID fijo para la información del negocio\n    const businessInfo = {\n      ...info,\n      id: 'business_info_1'\n    };\n    store.put(businessInfo);\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar información del negocio:', error);\n    throw error;\n  }\n}\n\n// Obtener información del negocio\nexport async function getBusinessInfo() {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readonly');\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\n    const request = store.get('business_info_1');\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        resolve(request.result || {});\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener información del negocio:', error);\n    return {};\n  }\n}\n\n// Guardar elementos vendidos\nexport async function saveSoldItems(items) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readwrite');\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\n\n    // Usar un ID fijo para los elementos vendidos\n    store.put({\n      id: 'sold_items_1',\n      items\n    });\n    return new Promise((resolve, reject) => {\n      transaction.oncomplete = () => resolve(true);\n      transaction.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al guardar elementos vendidos:', error);\n    throw error;\n  }\n}\n\n// Obtener elementos vendidos\nexport async function getSoldItems() {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readonly');\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\n    const request = store.get('sold_items_1');\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        if (request.result) {\n          resolve(request.result.items);\n        } else {\n          resolve([]);\n        }\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener elementos vendidos:', error);\n    return [];\n  }\n}\n\n// Migrar datos de localStorage a IndexedDB\nexport async function migrateFromLocalStorage() {\n  try {\n    // Migrar información del negocio\n    const businessInfo = localStorage.getItem('businessInfo');\n    if (businessInfo) {\n      await saveBusinessInfo(JSON.parse(businessInfo));\n    }\n\n    // Migrar elementos del menú\n    const menuItems = localStorage.getItem('menuItems');\n    if (menuItems) {\n      await saveMenuItems(JSON.parse(menuItems));\n    }\n\n    // Migrar elementos vendidos\n    const soldItems = localStorage.getItem('soldItems');\n    if (soldItems) {\n      await saveSoldItems(JSON.parse(soldItems));\n    }\n    return true;\n  } catch (error) {\n    console.error('Error al migrar datos desde localStorage:', error);\n    return false;\n  }\n}\n\n// Comprimir imagen\nexport function compressImage(base64Image, maxWidth = 800, maxHeight = 600, quality = 0.7) {\n  return new Promise(resolve => {\n    const img = new Image();\n    img.onload = () => {\n      // Crear un canvas para comprimir la imagen\n      const canvas = document.createElement('canvas');\n      let width = img.width;\n      let height = img.height;\n\n      // Calcular nuevas dimensiones manteniendo proporción\n      if (width > height) {\n        if (width > maxWidth) {\n          height = Math.round(height * maxWidth / width);\n          width = maxWidth;\n        }\n      } else {\n        if (height > maxHeight) {\n          width = Math.round(width * maxHeight / height);\n          height = maxHeight;\n        }\n      }\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, width, height);\n\n      // Obtener imagen comprimida como JPEG con calidad reducida\n      const compressedImage = canvas.toDataURL('image/jpeg', quality);\n      resolve(compressedImage);\n    };\n    img.src = base64Image;\n  });\n}","map":{"version":3,"names":["DB_NAME","DB_VERSION","MENU_STORE","IMAGE_STORE","SOLD_ITEMS_STORE","BUSINESS_INFO_STORE","openDatabase","Promise","resolve","reject","request","indexedDB","open","onerror","event","target","errorCode","onsuccess","db","result","onupgradeneeded","objectStoreNames","contains","createObjectStore","keyPath","saveMenuItems","items","transaction","store","objectStore","item","id","Date","now","Math","random","toString","substring","itemToStore","image","length","saveMenuImage","hasStoredImage","put","oncomplete","error","console","itemId","imageData","data","getMenuItems","getAll","getMenuImage","deleteMenuItem","menuStore","imageStore","delete","get","saveBusinessInfo","info","businessInfo","getBusinessInfo","saveSoldItems","getSoldItems","migrateFromLocalStorage","localStorage","getItem","JSON","parse","menuItems","soldItems","compressImage","base64Image","maxWidth","maxHeight","quality","img","Image","onload","canvas","document","createElement","width","height","round","ctx","getContext","drawImage","compressedImage","toDataURL","src"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/storageService.js"],"sourcesContent":["const DB_NAME = 'websapDatabase';\r\nconst DB_VERSION = 1;\r\nconst MENU_STORE = 'menuItems';\r\nconst IMAGE_STORE = 'menuImages';\r\nconst SOLD_ITEMS_STORE = 'soldItems'; \r\nconst BUSINESS_INFO_STORE = 'businessInfo';\r\n\r\n// Abrir la conexión a la base de datos\r\nfunction openDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n    \r\n    request.onerror = (event) => {\r\n      reject('Error al abrir la base de datos: ' + event.target.errorCode);\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      resolve(db);\r\n    };\r\n    \r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      \r\n      // Crear almacén para elementos del menú\r\n      if (!db.objectStoreNames.contains(MENU_STORE)) {\r\n        db.createObjectStore(MENU_STORE, { keyPath: 'id' });\r\n      }\r\n      \r\n      // Crear almacén para imágenes\r\n      if (!db.objectStoreNames.contains(IMAGE_STORE)) {\r\n        db.createObjectStore(IMAGE_STORE, { keyPath: 'id' });\r\n      }\r\n      \r\n      // Crear almacén para elementos vendidos\r\n      if (!db.objectStoreNames.contains(SOLD_ITEMS_STORE)) {\r\n        db.createObjectStore(SOLD_ITEMS_STORE, { keyPath: 'id' });\r\n      }\r\n      \r\n      // Crear almacén para información del negocio\r\n      if (!db.objectStoreNames.contains(BUSINESS_INFO_STORE)) {\r\n        db.createObjectStore(BUSINESS_INFO_STORE, { keyPath: 'id' });\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\n// Guardar elementos del menú\r\nexport async function saveMenuItems(items) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([MENU_STORE], 'readwrite');\r\n    const store = transaction.objectStore(MENU_STORE);\r\n    \r\n    // No limpiar el almacén, solo actualizar/agregar elementos\r\n    for (const item of items) {\r\n      // Asegurarse de que el elemento tiene un id\r\n      if (!item.id) {\r\n        item.id = Date.now() + Math.random().toString(36).substring(2, 10);\r\n      }\r\n      \r\n      // No guardar la imagen aquí para evitar problemas de tamaño\r\n      const itemToStore = { ...item };\r\n      if (itemToStore.image && typeof itemToStore.image === 'string' && itemToStore.image.length > 0) {\r\n        await saveMenuImage(itemToStore.id, itemToStore.image);\r\n        itemToStore.image = null;\r\n        itemToStore.hasStoredImage = true;\r\n      }\r\n      store.put(itemToStore);\r\n    }\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar elementos del menú:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Guardar imagen de un elemento del menú\r\nexport async function saveMenuImage(itemId, imageData) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([IMAGE_STORE], 'readwrite');\r\n    const store = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    store.put({ id: itemId, data: imageData });\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar imagen:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener todos los elementos del menú\r\nexport async function getMenuItems() {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([MENU_STORE], 'readonly');\r\n    const store = transaction.objectStore(MENU_STORE);\r\n    \r\n    const request = store.getAll();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = async () => {\r\n        const items = request.result;\r\n        \r\n        // Recuperar imágenes para cada elemento\r\n        for (const item of items) {\r\n          if (item.hasStoredImage) {\r\n            item.image = await getMenuImage(item.id);\r\n          }\r\n        }\r\n        \r\n        resolve(items);\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener elementos del menú:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Eliminar un elemento del menú\r\nexport async function deleteMenuItem(itemId) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([MENU_STORE, IMAGE_STORE], 'readwrite');\r\n    const menuStore = transaction.objectStore(MENU_STORE);\r\n    const imageStore = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    // Eliminar el elemento\r\n    menuStore.delete(itemId);\r\n    // Eliminar la imagen asociada\r\n    imageStore.delete(itemId);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al eliminar elemento del menú:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener imagen de un elemento del menú\r\nexport async function getMenuImage(itemId) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([IMAGE_STORE], 'readonly');\r\n    const store = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    const request = store.get(itemId);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        if (request.result) {\r\n          resolve(request.result.data);\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener imagen:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Guardar información del negocio\r\nexport async function saveBusinessInfo(info) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readwrite');\r\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\r\n    \r\n    // Usar un ID fijo para la información del negocio\r\n    const businessInfo = { ...info, id: 'business_info_1' };\r\n    store.put(businessInfo);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar información del negocio:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener información del negocio\r\nexport async function getBusinessInfo() {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([BUSINESS_INFO_STORE], 'readonly');\r\n    const store = transaction.objectStore(BUSINESS_INFO_STORE);\r\n    \r\n    const request = store.get('business_info_1');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        resolve(request.result || {});\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener información del negocio:', error);\r\n    return {};\r\n  }\r\n}\r\n\r\n// Guardar elementos vendidos\r\nexport async function saveSoldItems(items) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readwrite');\r\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\r\n    \r\n    // Usar un ID fijo para los elementos vendidos\r\n    store.put({ id: 'sold_items_1', items });\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      transaction.oncomplete = () => resolve(true);\r\n      transaction.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al guardar elementos vendidos:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Obtener elementos vendidos\r\nexport async function getSoldItems() {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([SOLD_ITEMS_STORE], 'readonly');\r\n    const store = transaction.objectStore(SOLD_ITEMS_STORE);\r\n    \r\n    const request = store.get('sold_items_1');\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        if (request.result) {\r\n          resolve(request.result.items);\r\n        } else {\r\n          resolve([]);\r\n        }\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener elementos vendidos:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Migrar datos de localStorage a IndexedDB\r\nexport async function migrateFromLocalStorage() {\r\n  try {\r\n    // Migrar información del negocio\r\n    const businessInfo = localStorage.getItem('businessInfo');\r\n    if (businessInfo) {\r\n      await saveBusinessInfo(JSON.parse(businessInfo));\r\n    }\r\n    \r\n    // Migrar elementos del menú\r\n    const menuItems = localStorage.getItem('menuItems');\r\n    if (menuItems) {\r\n      await saveMenuItems(JSON.parse(menuItems));\r\n    }\r\n    \r\n    // Migrar elementos vendidos\r\n    const soldItems = localStorage.getItem('soldItems');\r\n    if (soldItems) {\r\n      await saveSoldItems(JSON.parse(soldItems));\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al migrar datos desde localStorage:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Comprimir imagen\r\nexport function compressImage(base64Image, maxWidth = 800, maxHeight = 600, quality = 0.7) {\r\n  return new Promise((resolve) => {\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      // Crear un canvas para comprimir la imagen\r\n      const canvas = document.createElement('canvas');\r\n      \r\n      let width = img.width;\r\n      let height = img.height;\r\n      \r\n      // Calcular nuevas dimensiones manteniendo proporción\r\n      if (width > height) {\r\n        if (width > maxWidth) {\r\n          height = Math.round((height * maxWidth) / width);\r\n          width = maxWidth;\r\n        }\r\n      } else {\r\n        if (height > maxHeight) {\r\n          width = Math.round((width * maxHeight) / height);\r\n          height = maxHeight;\r\n        }\r\n      }\r\n      \r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      \r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0, width, height);\r\n      \r\n      // Obtener imagen comprimida como JPEG con calidad reducida\r\n      const compressedImage = canvas.toDataURL('image/jpeg', quality);\r\n      resolve(compressedImage);\r\n    };\r\n    img.src = base64Image;\r\n  });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}