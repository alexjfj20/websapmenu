{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport { alert } from './dialogService';\n\n// Lista de usuarios predefinidos para pruebas\nconst DEFAULT_USERS = [{\n  id: 1,\n  email: 'superadmin@example.com',\n  password: 'SuperAdmin2023',\n  nombre: 'Superadministrador',\n  roles: ['Superadministrador']\n}, {\n  id: 2,\n  email: 'admin@example.com',\n  password: 'Admin2023',\n  nombre: 'Administrador',\n  roles: ['Administrador']\n}, {\n  id: 3,\n  email: 'empleado@example.com',\n  password: 'Empleado2023',\n  nombre: 'Empleado',\n  roles: ['Empleado']\n}, {\n  id: 4,\n  email: 'test@test.com',\n  password: '123456',\n  nombre: 'Usuario de Prueba',\n  roles: ['Empleado']\n}, {\n  id: 5,\n  email: 'admin',\n  password: 'admin',\n  nombre: 'SuperAdmin',\n  roles: ['Superadministrador', 'Empleado']\n}];\n\n// Usuario actualmente autenticado\nlet currentUser = null;\n\n/**\r\n * Obtiene los usuarios almacenados en IndexedDB (creados desde el panel de administración)\r\n * @returns {Promise<Array>} Lista de usuarios o array vacío si hay error\r\n */\nasync function getStoredUsers() {\n  try {\n    const DB_NAME = 'websapDatabase';\n    const DB_VERSION = 3;\n    const USERS_STORE = 'users';\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\n        // Si hay error, devolver los usuarios predefinidos\n        resolve(DEFAULT_USERS);\n      };\n      request.onsuccess = event => {\n        const db = event.target.result;\n\n        // Verificar que existe el almacén de usuarios\n        if (!db.objectStoreNames.contains(USERS_STORE)) {\n          console.warn(`El almacén ${USERS_STORE} no existe en la base de datos`);\n          resolve(DEFAULT_USERS);\n          return;\n        }\n        const transaction = db.transaction([USERS_STORE], 'readonly');\n        const store = transaction.objectStore(USERS_STORE);\n        const request = store.getAll();\n        request.onsuccess = () => {\n          const storedUsers = request.result || [];\n          console.log(\"Usuarios encontrados en la base de datos:\", storedUsers);\n\n          // Combinar usuarios predefinidos con los almacenados en la BD\n          const allUsers = [...DEFAULT_USERS];\n\n          // Agregar usuarios almacenados que no sean duplicados (por email)\n          for (const user of storedUsers) {\n            if (!user.email) continue; // Ignorar usuarios sin email\n\n            // Verificar si ya existe un usuario con el mismo email en la lista por defecto\n            const existingUserIndex = allUsers.findIndex(u => u.email && u.email.toLowerCase() === user.email.toLowerCase());\n            if (existingUserIndex !== -1) {\n              // Reemplazar el usuario predefinido con el de la BD\n              allUsers[existingUserIndex] = user;\n            } else {\n              // Agregar el nuevo usuario\n              allUsers.push(user);\n            }\n          }\n          console.log(\"Lista completa de usuarios:\", allUsers);\n          resolve(allUsers);\n        };\n        request.onerror = event => {\n          console.error('Error al obtener usuarios:', event.target.error);\n          resolve(DEFAULT_USERS);\n        };\n      };\n    });\n  } catch (error) {\n    console.error('Error al acceder a la base de datos:', error);\n    return DEFAULT_USERS;\n  }\n}\n\n/**\r\n * Función para iniciar sesión\r\n * @param {string} email - Correo electrónico del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\nasync function login(email, password) {\n  console.log(\"Intentando iniciar sesión como:\", email);\n  try {\n    // Intentar obtener usuarios de la base de datos\n    let usuarios = [];\n    try {\n      // Esta parte parece no estar funcionando correctamente\n      usuarios = await Usuario.findAll();\n      console.log(\"Usuarios encontrados en la base de datos:\", usuarios);\n    } catch (error) {\n      console.warn(\"Error al buscar usuarios en la base de datos:\", error.message);\n      // Continuar con usuarios hardcoded si falla la DB\n    }\n\n    // Si no hay usuarios en la DB, usar lista hardcoded\n    if (!usuarios || usuarios.length === 0) {\n      usuarios = [{\n        id: 1,\n        email: 'superadmin@example.com',\n        password: 'SuperAdmin2023',\n        nombre: 'Superadministrador',\n        roles: ['admin']\n      }, {\n        id: 2,\n        email: 'admin@example.com',\n        password: 'Admin2023',\n        nombre: 'Administrador',\n        roles: ['admin']\n      }, {\n        id: 3,\n        email: 'empleado@example.com',\n        password: 'Empleado2023',\n        nombre: 'Empleado',\n        roles: ['user']\n      }, {\n        id: 4,\n        email: 'test@test.com',\n        password: '123456',\n        nombre: 'Usuario de Prueba',\n        roles: ['user']\n      }, {\n        id: 5,\n        email: 'admin',\n        password: 'admin',\n        nombre: 'SuperAdmin',\n        roles: ['admin', 'user']\n      },\n      // Agregar el usuario superadmin@gmail.com a la lista hardcoded\n      {\n        id: 6,\n        email: 'superadmin@gmail.com',\n        password: 'SuperAdmin2023',\n        // Define aquí la contraseña para este usuario\n        nombre: 'Super Administrador Gmail',\n        roles: ['admin']\n      }];\n      console.log(\"Lista completa de usuarios:\", usuarios);\n    }\n    console.log(\"Total de usuarios disponibles:\", usuarios.length);\n\n    // Buscar usuario por email (ignorando mayúsculas/minúsculas)\n    const usuario = usuarios.find(u => u.email.toLowerCase() === email.toLowerCase());\n    if (!usuario) {\n      console.log(\"No se encontró usuario con las credenciales proporcionadas\");\n      throw new Error(\"Credenciales incorrectas\");\n    }\n\n    // Si estamos usando usuarios de la BD con bcrypt\n    if (usuario.password && usuario.password.startsWith('$2')) {\n      // Usar bcrypt para comparar\n      const bcrypt = require('bcrypt');\n      const match = await bcrypt.compare(password, usuario.password);\n      if (!match) {\n        console.log(\"Contraseña incorrecta\");\n        throw new Error(\"Credenciales incorrectas\");\n      }\n    }\n    // Comparación simple para lista hardcoded\n    else if (usuario.password !== password) {\n      console.log(\"Contraseña incorrecta\");\n      throw new Error(\"Credenciales incorrectas\");\n    }\n\n    // Usuario autenticado, crear token\n    const token = generateToken(usuario);\n    return {\n      id: usuario.id,\n      email: usuario.email,\n      nombre: usuario.nombre,\n      roles: usuario.roles,\n      token\n    };\n  } catch (error) {\n    console.log(\"Error en login:\", error);\n    throw error;\n  }\n}\n\n/**\r\n * Cierra la sesión del usuario actual\r\n */\nexport function logout() {\n  currentUser = null;\n  localStorage.removeItem('isLoggedIn');\n  localStorage.removeItem('currentUser');\n}\n\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\nexport function isAuthenticated() {\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser) {\n        currentUser = storedUser;\n      }\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n      return false;\n    }\n  }\n  return !!currentUser;\n}\n\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\nexport function getCurrentUser() {\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser) {\n        currentUser = storedUser;\n      }\n    } catch (e) {\n      console.error('Error al cargar usuario desde localStorage:', e);\n      return null;\n    }\n  }\n  return currentUser;\n}\n\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\nexport function hasRole(roleName) {\n  const user = getCurrentUser();\n  if (!user || !user.roles) {\n    return false;\n  }\n\n  // Si roles es un array, verificar si contiene el rol\n  if (Array.isArray(user.roles)) {\n    return user.roles.includes(roleName);\n  }\n\n  // Si roles es un string, verificar si es igual al rol buscado\n  if (typeof user.roles === 'string') {\n    return user.roles === roleName;\n  }\n  return false;\n}\nexport default {\n  login,\n  logout,\n  isAuthenticated,\n  hasRole,\n  getCurrentUser\n};","map":{"version":3,"names":["alert","DEFAULT_USERS","id","email","password","nombre","roles","currentUser","getStoredUsers","DB_NAME","DB_VERSION","USERS_STORE","Promise","resolve","reject","request","indexedDB","open","onerror","event","console","error","target","onsuccess","db","result","objectStoreNames","contains","warn","transaction","store","objectStore","getAll","storedUsers","log","allUsers","user","existingUserIndex","findIndex","u","toLowerCase","push","login","usuarios","Usuario","findAll","message","length","usuario","find","Error","startsWith","bcrypt","require","match","compare","token","generateToken","logout","localStorage","removeItem","isAuthenticated","getItem","storedUser","JSON","parse","e","getCurrentUser","hasRole","roleName","Array","isArray","includes"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/authService.js"],"sourcesContent":["import { alert } from './dialogService';\r\n\r\n// Lista de usuarios predefinidos para pruebas\r\nconst DEFAULT_USERS = [\r\n  {\r\n    id: 1,\r\n    email: 'superadmin@example.com',\r\n    password: 'SuperAdmin2023',\r\n    nombre: 'Superadministrador',\r\n    roles: ['Superadministrador']\r\n  },\r\n  {\r\n    id: 2,\r\n    email: 'admin@example.com',\r\n    password: 'Admin2023',\r\n    nombre: 'Administrador',\r\n    roles: ['Administrador']\r\n  },\r\n  {\r\n    id: 3,\r\n    email: 'empleado@example.com',\r\n    password: 'Empleado2023',\r\n    nombre: 'Empleado',\r\n    roles: ['Empleado']\r\n  },\r\n  {\r\n    id: 4,\r\n    email: 'test@test.com',\r\n    password: '123456',\r\n    nombre: 'Usuario de Prueba',\r\n    roles: ['Empleado']\r\n  },\r\n  {\r\n    id: 5,\r\n    email: 'admin',\r\n    password: 'admin',\r\n    nombre: 'SuperAdmin',\r\n    roles: ['Superadministrador', 'Empleado']\r\n  }\r\n];\r\n\r\n// Usuario actualmente autenticado\r\nlet currentUser = null;\r\n\r\n/**\r\n * Obtiene los usuarios almacenados en IndexedDB (creados desde el panel de administración)\r\n * @returns {Promise<Array>} Lista de usuarios o array vacío si hay error\r\n */\r\nasync function getStoredUsers() {\r\n  try {\r\n    const DB_NAME = 'websapDatabase';\r\n    const DB_VERSION = 3;\r\n    const USERS_STORE = 'users';\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n      \r\n      request.onerror = (event) => {\r\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\r\n        // Si hay error, devolver los usuarios predefinidos\r\n        resolve(DEFAULT_USERS);\r\n      };\r\n      \r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        \r\n        // Verificar que existe el almacén de usuarios\r\n        if (!db.objectStoreNames.contains(USERS_STORE)) {\r\n          console.warn(`El almacén ${USERS_STORE} no existe en la base de datos`);\r\n          resolve(DEFAULT_USERS);\r\n          return;\r\n        }\r\n        \r\n        const transaction = db.transaction([USERS_STORE], 'readonly');\r\n        const store = transaction.objectStore(USERS_STORE);\r\n        const request = store.getAll();\r\n        \r\n        request.onsuccess = () => {\r\n          const storedUsers = request.result || [];\r\n          console.log(\"Usuarios encontrados en la base de datos:\", storedUsers);\r\n          \r\n          // Combinar usuarios predefinidos con los almacenados en la BD\r\n          const allUsers = [...DEFAULT_USERS];\r\n          \r\n          // Agregar usuarios almacenados que no sean duplicados (por email)\r\n          for (const user of storedUsers) {\r\n            if (!user.email) continue; // Ignorar usuarios sin email\r\n            \r\n            // Verificar si ya existe un usuario con el mismo email en la lista por defecto\r\n            const existingUserIndex = allUsers.findIndex(u => \r\n              u.email && u.email.toLowerCase() === user.email.toLowerCase()\r\n            );\r\n            \r\n            if (existingUserIndex !== -1) {\r\n              // Reemplazar el usuario predefinido con el de la BD\r\n              allUsers[existingUserIndex] = user;\r\n            } else {\r\n              // Agregar el nuevo usuario\r\n              allUsers.push(user);\r\n            }\r\n          }\r\n          \r\n          console.log(\"Lista completa de usuarios:\", allUsers);\r\n          resolve(allUsers);\r\n        };\r\n        \r\n        request.onerror = (event) => {\r\n          console.error('Error al obtener usuarios:', event.target.error);\r\n          resolve(DEFAULT_USERS);\r\n        };\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al acceder a la base de datos:', error);\r\n    return DEFAULT_USERS;\r\n  }\r\n}\r\n\r\n/**\r\n * Función para iniciar sesión\r\n * @param {string} email - Correo electrónico del usuario\r\n * @param {string} password - Contraseña del usuario\r\n * @returns {Promise<Object>} - Datos del usuario autenticado\r\n */\r\nasync function login(email, password) {\r\n  console.log(\"Intentando iniciar sesión como:\", email);\r\n  \r\n  try {\r\n    // Intentar obtener usuarios de la base de datos\r\n    let usuarios = [];\r\n    try {\r\n      // Esta parte parece no estar funcionando correctamente\r\n      usuarios = await Usuario.findAll();\r\n      console.log(\"Usuarios encontrados en la base de datos:\", usuarios);\r\n    } catch (error) {\r\n      console.warn(\"Error al buscar usuarios en la base de datos:\", error.message);\r\n      // Continuar con usuarios hardcoded si falla la DB\r\n    }\r\n    \r\n    // Si no hay usuarios en la DB, usar lista hardcoded\r\n    if (!usuarios || usuarios.length === 0) {\r\n      usuarios = [\r\n        {\r\n          id: 1,\r\n          email: 'superadmin@example.com',\r\n          password: 'SuperAdmin2023',\r\n          nombre: 'Superadministrador',\r\n          roles: ['admin']\r\n        },\r\n        {\r\n          id: 2,\r\n          email: 'admin@example.com',\r\n          password: 'Admin2023',\r\n          nombre: 'Administrador',\r\n          roles: ['admin']\r\n        },\r\n        {\r\n          id: 3,\r\n          email: 'empleado@example.com',\r\n          password: 'Empleado2023',\r\n          nombre: 'Empleado',\r\n          roles: ['user']\r\n        },\r\n        {\r\n          id: 4,\r\n          email: 'test@test.com',\r\n          password: '123456',\r\n          nombre: 'Usuario de Prueba',\r\n          roles: ['user']\r\n        },\r\n        {\r\n          id: 5,\r\n          email: 'admin',\r\n          password: 'admin',\r\n          nombre: 'SuperAdmin',\r\n          roles: ['admin', 'user']\r\n        },\r\n        // Agregar el usuario superadmin@gmail.com a la lista hardcoded\r\n        {\r\n          id: 6,\r\n          email: 'superadmin@gmail.com',\r\n          password: 'SuperAdmin2023', // Define aquí la contraseña para este usuario\r\n          nombre: 'Super Administrador Gmail',\r\n          roles: ['admin']\r\n        }\r\n      ];\r\n      console.log(\"Lista completa de usuarios:\", usuarios);\r\n    }\r\n    \r\n    console.log(\"Total de usuarios disponibles:\", usuarios.length);\r\n    \r\n    // Buscar usuario por email (ignorando mayúsculas/minúsculas)\r\n    const usuario = usuarios.find(u => \r\n      u.email.toLowerCase() === email.toLowerCase()\r\n    );\r\n    \r\n    if (!usuario) {\r\n      console.log(\"No se encontró usuario con las credenciales proporcionadas\");\r\n      throw new Error(\"Credenciales incorrectas\");\r\n    }\r\n    \r\n    // Si estamos usando usuarios de la BD con bcrypt\r\n    if (usuario.password && usuario.password.startsWith('$2')) {\r\n      // Usar bcrypt para comparar\r\n      const bcrypt = require('bcrypt');\r\n      const match = await bcrypt.compare(password, usuario.password);\r\n      \r\n      if (!match) {\r\n        console.log(\"Contraseña incorrecta\");\r\n        throw new Error(\"Credenciales incorrectas\");\r\n      }\r\n    } \r\n    // Comparación simple para lista hardcoded\r\n    else if (usuario.password !== password) {\r\n      console.log(\"Contraseña incorrecta\");\r\n      throw new Error(\"Credenciales incorrectas\");\r\n    }\r\n    \r\n    // Usuario autenticado, crear token\r\n    const token = generateToken(usuario);\r\n    \r\n    return {\r\n      id: usuario.id,\r\n      email: usuario.email,\r\n      nombre: usuario.nombre,\r\n      roles: usuario.roles,\r\n      token\r\n    };\r\n  } catch (error) {\r\n    console.log(\"Error en login:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Cierra la sesión del usuario actual\r\n */\r\nexport function logout() {\r\n  currentUser = null;\r\n  localStorage.removeItem('isLoggedIn');\r\n  localStorage.removeItem('currentUser');\r\n}\r\n\r\n/**\r\n * Verifica si el usuario está autenticado\r\n * @returns {boolean} Verdadero si el usuario está autenticado\r\n */\r\nexport function isAuthenticated() {\r\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\r\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser) {\r\n        currentUser = storedUser;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  return !!currentUser;\r\n}\r\n\r\n/**\r\n * Obtiene el usuario actualmente autenticado\r\n * @returns {Object|null} Usuario actual o null si no hay usuario autenticado\r\n */\r\nexport function getCurrentUser() {\r\n  // Intentar cargar usuario si no está cargado pero hay datos en localStorage\r\n  if (!currentUser && localStorage.getItem('isLoggedIn') === 'true') {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser) {\r\n        currentUser = storedUser;\r\n      }\r\n    } catch (e) {\r\n      console.error('Error al cargar usuario desde localStorage:', e);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  return currentUser;\r\n}\r\n\r\n/**\r\n * Verifica si el usuario tiene un rol específico\r\n * @param {string} roleName Nombre del rol a verificar\r\n * @returns {boolean} true si el usuario tiene el rol, false si no\r\n */\r\nexport function hasRole(roleName) {\r\n  const user = getCurrentUser();\r\n  \r\n  if (!user || !user.roles) {\r\n    return false;\r\n  }\r\n  \r\n  // Si roles es un array, verificar si contiene el rol\r\n  if (Array.isArray(user.roles)) {\r\n    return user.roles.includes(roleName);\r\n  }\r\n  \r\n  // Si roles es un string, verificar si es igual al rol buscado\r\n  if (typeof user.roles === 'string') {\r\n    return user.roles === roleName;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\nexport default {\r\n  login,\r\n  logout,\r\n  isAuthenticated,\r\n  hasRole,\r\n  getCurrentUser\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}