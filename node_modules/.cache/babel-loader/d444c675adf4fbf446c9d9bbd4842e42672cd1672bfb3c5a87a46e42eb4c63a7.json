{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nconst DB_NAME = 'websapDatabase';\nconst DB_VERSION = 3; // Versión centralizada de la base de datos\n\n// Lista de todos los almacenes que deben existir\nconst STORES = [{\n  name: 'users',\n  keyPath: 'id'\n}, {\n  name: 'menuItems',\n  keyPath: 'id'\n}, {\n  name: 'menuImages',\n  keyPath: 'id'\n}, {\n  name: 'soldItems',\n  keyPath: 'id'\n}, {\n  name: 'businessInfo',\n  keyPath: 'id'\n}, {\n  name: 'sharedMenus',\n  keyPath: 'id'\n}];\n\n/**\r\n * Inicializa la base de datos asegurándose de que todos los almacenes existen\r\n * @returns {Promise<IDBDatabase>} Base de datos inicializada\r\n */\nexport function openDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      console.log(\"Inicializando base de datos IndexedDB...\");\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\n        reject(new Error('No se pudo abrir la base de datos: ' + event.target.error.message));\n      };\n      request.onsuccess = event => {\n        const db = event.target.result;\n        console.log(\"Base de datos abierta correctamente, versión:\", db.version);\n\n        // Verificar que todos los almacenes existen\n        const existingStores = Array.from(db.objectStoreNames);\n        const missingStores = STORES.filter(store => !existingStores.includes(store.name));\n        if (missingStores.length > 0) {\n          console.error(\"Faltan almacenes en la base de datos:\", missingStores.map(s => s.name));\n          db.close();\n          // Eliminar la base de datos para recrearla con todos los almacenes\n          const deleteRequest = indexedDB.deleteDatabase(DB_NAME);\n          deleteRequest.onsuccess = () => {\n            console.log(\"Base de datos eliminada para recreación\");\n            // Abrir de nuevo incrementando la versión\n            const reopenRequest = indexedDB.open(DB_NAME, DB_VERSION + 1);\n            reopenRequest.onupgradeneeded = createStores;\n            reopenRequest.onsuccess = e => resolve(e.target.result);\n            reopenRequest.onerror = e => reject(new Error('Error al recrear la base de datos: ' + e.target.error.message));\n          };\n          deleteRequest.onerror = e => reject(new Error('Error al eliminar la base de datos para recreación: ' + e.target.error.message));\n        } else {\n          console.log(\"Todos los almacenes existen en la base de datos\");\n          resolve(db);\n        }\n      };\n      request.onupgradeneeded = createStores;\n\n      // Función para crear almacenes durante onupgradeneeded\n      function createStores(event) {\n        try {\n          const db = event.target.result;\n          console.log(\"Creando estructura de la base de datos, versión:\", event.newVersion);\n\n          // Crear todos los almacenes necesarios\n          STORES.forEach(store => {\n            if (!db.objectStoreNames.contains(store.name)) {\n              console.log(`Creando almacén: ${store.name}`);\n              db.createObjectStore(store.name, {\n                keyPath: store.keyPath\n              });\n            }\n          });\n          console.log(\"Almacenes creados correctamente\");\n        } catch (error) {\n          console.error(\"Error al crear almacenes:\", error);\n          // No podemos rechazar la promesa desde onupgradeneeded\n          // porque interfiere con la transacción interna de IndexedDB\n        }\n      }\n    } catch (error) {\n      console.error(\"Error crítico durante la inicialización de IndexedDB:\", error);\n      reject(error);\n    }\n  });\n}\n\n// Exportar la versión de la base de datos y el nombre para que otros servicios puedan usarlos\nexport const DB_INFO = {\n  name: DB_NAME,\n  version: DB_VERSION,\n  stores: STORES.reduce((acc, store) => {\n    acc[store.name] = store.name;\n    return acc;\n  }, {})\n};","map":{"version":3,"names":["DB_NAME","DB_VERSION","STORES","name","keyPath","openDatabase","Promise","resolve","reject","console","log","request","indexedDB","open","onerror","event","error","target","Error","message","onsuccess","db","result","version","existingStores","Array","from","objectStoreNames","missingStores","filter","store","includes","length","map","s","close","deleteRequest","deleteDatabase","reopenRequest","onupgradeneeded","createStores","e","newVersion","forEach","contains","createObjectStore","DB_INFO","stores","reduce","acc"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/dbInitializer.js"],"sourcesContent":["const DB_NAME = 'websapDatabase';\r\nconst DB_VERSION = 3; // Versión centralizada de la base de datos\r\n\r\n// Lista de todos los almacenes que deben existir\r\nconst STORES = [\r\n  { name: 'users', keyPath: 'id' },\r\n  { name: 'menuItems', keyPath: 'id' },\r\n  { name: 'menuImages', keyPath: 'id' },\r\n  { name: 'soldItems', keyPath: 'id' },\r\n  { name: 'businessInfo', keyPath: 'id' },\r\n  { name: 'sharedMenus', keyPath: 'id' }\r\n];\r\n\r\n/**\r\n * Inicializa la base de datos asegurándose de que todos los almacenes existen\r\n * @returns {Promise<IDBDatabase>} Base de datos inicializada\r\n */\r\nexport function openDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      console.log(\"Inicializando base de datos IndexedDB...\");\r\n      \r\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n      \r\n      request.onerror = (event) => {\r\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\r\n        reject(new Error('No se pudo abrir la base de datos: ' + event.target.error.message));\r\n      };\r\n      \r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        console.log(\"Base de datos abierta correctamente, versión:\", db.version);\r\n        \r\n        // Verificar que todos los almacenes existen\r\n        const existingStores = Array.from(db.objectStoreNames);\r\n        const missingStores = STORES.filter(\r\n          store => !existingStores.includes(store.name)\r\n        );\r\n        \r\n        if (missingStores.length > 0) {\r\n          console.error(\"Faltan almacenes en la base de datos:\", missingStores.map(s => s.name));\r\n          db.close();\r\n          // Eliminar la base de datos para recrearla con todos los almacenes\r\n          const deleteRequest = indexedDB.deleteDatabase(DB_NAME);\r\n          deleteRequest.onsuccess = () => {\r\n            console.log(\"Base de datos eliminada para recreación\");\r\n            // Abrir de nuevo incrementando la versión\r\n            const reopenRequest = indexedDB.open(DB_NAME, DB_VERSION + 1);\r\n            reopenRequest.onupgradeneeded = createStores;\r\n            reopenRequest.onsuccess = (e) => resolve(e.target.result);\r\n            reopenRequest.onerror = (e) => reject(new Error('Error al recrear la base de datos: ' + e.target.error.message));\r\n          };\r\n          deleteRequest.onerror = (e) => reject(new Error('Error al eliminar la base de datos para recreación: ' + e.target.error.message));\r\n        } else {\r\n          console.log(\"Todos los almacenes existen en la base de datos\");\r\n          resolve(db);\r\n        }\r\n      };\r\n      \r\n      request.onupgradeneeded = createStores;\r\n      \r\n      // Función para crear almacenes durante onupgradeneeded\r\n      function createStores(event) {\r\n        try {\r\n          const db = event.target.result;\r\n          console.log(\"Creando estructura de la base de datos, versión:\", event.newVersion);\r\n          \r\n          // Crear todos los almacenes necesarios\r\n          STORES.forEach(store => {\r\n            if (!db.objectStoreNames.contains(store.name)) {\r\n              console.log(`Creando almacén: ${store.name}`);\r\n              db.createObjectStore(store.name, { keyPath: store.keyPath });\r\n            }\r\n          });\r\n          \r\n          console.log(\"Almacenes creados correctamente\");\r\n        } catch (error) {\r\n          console.error(\"Error al crear almacenes:\", error);\r\n          // No podemos rechazar la promesa desde onupgradeneeded\r\n          // porque interfiere con la transacción interna de IndexedDB\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error crítico durante la inicialización de IndexedDB:\", error);\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\n// Exportar la versión de la base de datos y el nombre para que otros servicios puedan usarlos\r\nexport const DB_INFO = {\r\n  name: DB_NAME,\r\n  version: DB_VERSION,\r\n  stores: STORES.reduce((acc, store) => {\r\n    acc[store.name] = store.name;\r\n    return acc;\r\n  }, {})\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}