{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/**\n * Servicio para manejar la recuperación de menús desde diferentes fuentes\n */\nimport { getAllPlatos } from './indexedDBService';\n\n/**\n * Obtiene un menú desde IndexedDB usando su ID\n * @param {string} menuId - ID del menú a recuperar\n * @returns {Promise<Object>} - Datos del menú\n */\nexport const getMenuFromIndexedDB = async menuId => {\n  try {\n    // Primero intentamos obtener todos los platos\n    const allPlatos = await getAllPlatos();\n    if (!allPlatos || allPlatos.length === 0) {\n      console.log('No hay platos en IndexedDB para construir el menú');\n      return null;\n    }\n    console.log(`Construyendo menú con ID ${menuId} a partir de ${allPlatos.length} platos en IndexedDB`);\n\n    // Información del negocio (podría obtenerse de otra fuente)\n    const businessInfo = {\n      name: 'Restaurante WebSAP',\n      description: 'Deliciosa comida para todos los gustos',\n      contact: 'info@websap.com',\n      address: 'Calle Principal #123'\n    };\n\n    // Construir el objeto de menú con todos los platos disponibles\n    const menu = {\n      id: menuId,\n      items: allPlatos.map(plato => ({\n        id: plato.id,\n        name: plato.name,\n        description: plato.description,\n        price: plato.price,\n        image: plato.image,\n        isSpecial: plato.isSpecial || false,\n        includesDrink: plato.includesDrink || false,\n        availableQuantity: plato.availableQuantity || 10\n      })),\n      businessInfo: businessInfo,\n      createdAt: new Date().toISOString()\n    };\n    console.log(`Menú construido con ${menu.items.length} platos desde IndexedDB`);\n    return menu;\n  } catch (error) {\n    console.error('Error al obtener menú desde IndexedDB:', error);\n    return null;\n  }\n};\nexport default {\n  getMenuFromIndexedDB\n};","map":{"version":3,"names":["getAllPlatos","getMenuFromIndexedDB","menuId","allPlatos","length","console","log","businessInfo","name","description","contact","address","menu","id","items","map","plato","price","image","isSpecial","includesDrink","availableQuantity","createdAt","Date","toISOString","error"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/menuUtils.js"],"sourcesContent":["/**\n * Servicio para manejar la recuperación de menús desde diferentes fuentes\n */\nimport { getAllPlatos } from './indexedDBService';\n\n/**\n * Obtiene un menú desde IndexedDB usando su ID\n * @param {string} menuId - ID del menú a recuperar\n * @returns {Promise<Object>} - Datos del menú\n */\nexport const getMenuFromIndexedDB = async (menuId) => {\n  try {\n    // Primero intentamos obtener todos los platos\n    const allPlatos = await getAllPlatos();\n    \n    if (!allPlatos || allPlatos.length === 0) {\n      console.log('No hay platos en IndexedDB para construir el menú');\n      return null;\n    }\n    \n    console.log(`Construyendo menú con ID ${menuId} a partir de ${allPlatos.length} platos en IndexedDB`);\n    \n    // Información del negocio (podría obtenerse de otra fuente)\n    const businessInfo = {\n      name: 'Restaurante WebSAP',\n      description: 'Deliciosa comida para todos los gustos',\n      contact: 'info@websap.com',\n      address: 'Calle Principal #123'\n    };\n    \n    // Construir el objeto de menú con todos los platos disponibles\n    const menu = {\n      id: menuId,\n      items: allPlatos.map(plato => ({\n        id: plato.id,\n        name: plato.name,\n        description: plato.description,\n        price: plato.price,\n        image: plato.image,\n        isSpecial: plato.isSpecial || false,\n        includesDrink: plato.includesDrink || false,\n        availableQuantity: plato.availableQuantity || 10\n      })),\n      businessInfo: businessInfo,\n      createdAt: new Date().toISOString()\n    };\n    \n    console.log(`Menú construido con ${menu.items.length} platos desde IndexedDB`);\n    return menu;\n  } catch (error) {\n    console.error('Error al obtener menú desde IndexedDB:', error);\n    return null;\n  }\n};\n\nexport default {\n  getMenuFromIndexedDB\n};\n"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,oBAAoB;;AAEjD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAG,MAAOC,MAAM,IAAK;EACpD,IAAI;IACF;IACA,MAAMC,SAAS,GAAG,MAAMH,YAAY,CAAC,CAAC;IAEtC,IAAI,CAACG,SAAS,IAAIA,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MACxCC,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;MAChE,OAAO,IAAI;IACb;IAEAD,OAAO,CAACC,GAAG,CAAC,4BAA4BJ,MAAM,gBAAgBC,SAAS,CAACC,MAAM,sBAAsB,CAAC;;IAErG;IACA,MAAMG,YAAY,GAAG;MACnBC,IAAI,EAAE,oBAAoB;MAC1BC,WAAW,EAAE,wCAAwC;MACrDC,OAAO,EAAE,iBAAiB;MAC1BC,OAAO,EAAE;IACX,CAAC;;IAED;IACA,MAAMC,IAAI,GAAG;MACXC,EAAE,EAAEX,MAAM;MACVY,KAAK,EAAEX,SAAS,CAACY,GAAG,CAACC,KAAK,KAAK;QAC7BH,EAAE,EAAEG,KAAK,CAACH,EAAE;QACZL,IAAI,EAAEQ,KAAK,CAACR,IAAI;QAChBC,WAAW,EAAEO,KAAK,CAACP,WAAW;QAC9BQ,KAAK,EAAED,KAAK,CAACC,KAAK;QAClBC,KAAK,EAAEF,KAAK,CAACE,KAAK;QAClBC,SAAS,EAAEH,KAAK,CAACG,SAAS,IAAI,KAAK;QACnCC,aAAa,EAAEJ,KAAK,CAACI,aAAa,IAAI,KAAK;QAC3CC,iBAAiB,EAAEL,KAAK,CAACK,iBAAiB,IAAI;MAChD,CAAC,CAAC,CAAC;MACHd,YAAY,EAAEA,YAAY;MAC1Be,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAEDnB,OAAO,CAACC,GAAG,CAAC,uBAAuBM,IAAI,CAACE,KAAK,CAACV,MAAM,yBAAyB,CAAC;IAC9E,OAAOQ,IAAI;EACb,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdpB,OAAO,CAACoB,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,OAAO,IAAI;EACb;AACF,CAAC;AAED,eAAe;EACbxB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}