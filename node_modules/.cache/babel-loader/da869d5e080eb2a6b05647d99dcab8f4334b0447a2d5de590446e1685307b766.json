{"ast":null,"code":"import { createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _createCommentVNode(\" Este componente no tiene representación visual, solo maneja la lógica \");\n}","map":{"version":3,"names":["_createCommentVNode"],"sources":["F:\\Driver google\\VUE.JS-2\\VUE-JS\\websap\\src\\components\\WhatsAppReservationHandler.vue"],"sourcesContent":["<template>\n  <!-- Este componente no tiene representación visual, solo maneja la lógica -->\n</template>\n\n<script setup>\nimport { onMounted, onUnmounted } from 'vue';\nimport { saveWhatsAppReservation } from '../services/reservaService';\nimport eventBus from '../utils/eventBus';\n\n// Función para procesar mensajes de WhatsApp\nconst processWhatsAppMessage = async (event) => {\n  // Solo procesamos mensajes que vengan de la ventana principal\n  if (event.source !== window.parent) return;\n  \n  try {\n    // Verificar que el mensaje sea de tipo reserva de WhatsApp\n    if (event.data && event.data.type === 'whatsapp_reservation') {\n      console.log('Recibido mensaje de reserva desde WhatsApp:', event.data);\n      \n      // Guardar la reserva usando el servicio\n      const result = await saveWhatsAppReservation(event.data.reservation);\n      \n      if (result.success) {\n        console.log('Reserva de WhatsApp guardada correctamente:', result.reservation);\n        \n        // Notificar a la ventana que envió el mensaje\n        event.source.postMessage({\n          type: 'whatsapp_reservation_response',\n          success: true,\n          message: 'Reserva recibida correctamente'\n        }, '*');\n      } else {\n        throw new Error(result.error);\n      }\n    }\n  } catch (error) {\n    console.error('Error al procesar mensaje de WhatsApp:', error);\n    \n    // Notificar error a la ventana que envió el mensaje\n    if (event.source) {\n      event.source.postMessage({\n        type: 'whatsapp_reservation_response',\n        success: false,\n        message: 'Error al procesar la reserva: ' + error.message\n      }, '*');\n    }\n  }\n};\n\n// Configurar el listener de mensajes al montar el componente\nonMounted(() => {\n  window.addEventListener('message', processWhatsAppMessage);\n  console.log('WhatsAppReservationHandler montado y escuchando mensajes');\n});\n\n// Limpiar el listener al desmontar el componente\nonUnmounted(() => {\n  window.removeEventListener('message', processWhatsAppMessage);\n  console.log('WhatsAppReservationHandler desmontado');\n});\n\n// Función para simular una reserva de WhatsApp (para pruebas)\nconst simulateWhatsAppReservation = async () => {\n  try {\n    const whatsappData = {\n      nombre: 'Cliente de Prueba WhatsApp',\n      telefono: '612345678',\n      email: 'whatsapp@example.com',\n      fecha: new Date().toISOString().split('T')[0], // Hoy\n      hora: '20:00',\n      personas: 3,\n      notas: 'Reserva de prueba desde WhatsApp'\n    };\n    \n    const result = await saveWhatsAppReservation(whatsappData);\n    \n    if (result.success) {\n      console.log('Reserva de prueba de WhatsApp guardada correctamente:', result.reservation);\n    } else {\n      console.error('Error al guardar reserva de prueba:', result.error);\n    }\n  } catch (error) {\n    console.error('Error al simular reserva de WhatsApp:', error);\n  }\n};\n\n// Exponer la función de simulación para pruebas\ndefineExpose({ simulateWhatsAppReservation });\n</script>\n"],"mappings":";;SACEA,mBAAA,2EAA8E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}