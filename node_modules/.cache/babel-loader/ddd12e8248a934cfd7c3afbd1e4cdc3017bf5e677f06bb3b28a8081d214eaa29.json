{"ast":null,"code":"/**\r\n * Servicio para operaciones administrativas\r\n */\n\n/**\r\n * Obtiene las estadísticas del dashboard administrativo\r\n * @returns {Promise<Object>} Estadísticas del sistema\r\n */\nexport async function getDashboardStats() {\n  // En una implementación real, esto haría una llamada a la API\n  // Por ahora, devolvemos datos de ejemplo\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        data: {\n          totalUsers: 45,\n          activeUsers: 32,\n          inactiveUsers: 13,\n          activePayments: 28,\n          pendingPayments: 8,\n          overduePayments: 3,\n          totalIncome: 15750000,\n          status: 'Normal',\n          lastBackup: new Date().toISOString(),\n          recentActivity: [{\n            tipo: 'login',\n            usuario_nombre: 'Laura Méndez',\n            accion: 'inició sesión en el sistema',\n            fecha: new Date().toISOString()\n          }, {\n            tipo: 'payment',\n            usuario_nombre: 'Carlos Gómez',\n            accion: 'realizó un pago de $350.000',\n            fecha: new Date(Date.now() - 3600000).toISOString() // 1 hora atrás\n          }, {\n            tipo: 'user_created',\n            usuario_nombre: 'Admin',\n            accion: 'creó un nuevo usuario',\n            fecha: new Date(Date.now() - 86400000).toISOString() // 1 día atrás\n          }, {\n            tipo: 'backup',\n            usuario_nombre: 'Sistema',\n            accion: 'realizó un respaldo automático',\n            fecha: new Date(Date.now() - 172800000).toISOString() // 2 días atrás\n          }]\n        }\n      });\n    }, 1000);\n  });\n}\n\n/**\r\n * Obtiene la lista de usuarios del sistema\r\n * @returns {Promise<Object>} Lista de usuarios\r\n */\nexport async function getUsers() {\n  // Datos simulados\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        data: [{\n          id: 1,\n          nombre: 'Admin Principal',\n          email: 'admin@ejemplo.com',\n          telefono: '3001234567',\n          roles: ['Superadministrador'],\n          estado: 'activo',\n          fecha_creacion: '2023-05-15T08:30:00Z'\n        }, {\n          id: 2,\n          nombre: 'Juan Pérez',\n          email: 'juan@ejemplo.com',\n          telefono: '3009876543',\n          roles: ['Administrador'],\n          estado: 'activo',\n          fecha_creacion: '2023-06-20T14:45:00Z'\n        }, {\n          id: 3,\n          nombre: 'María López',\n          email: 'maria@ejemplo.com',\n          telefono: '3002223344',\n          roles: ['Empleado'],\n          estado: 'activo',\n          fecha_creacion: '2023-07-05T11:15:00Z'\n        }, {\n          id: 4,\n          nombre: 'Carlos Rodríguez',\n          email: 'carlos@ejemplo.com',\n          telefono: '3005556677',\n          roles: ['Empleado'],\n          estado: 'inactivo',\n          fecha_creacion: '2023-08-10T09:20:00Z'\n        }]\n      });\n    }, 1000);\n  });\n}\n\n/**\r\n * Obtiene los registros del sistema\r\n * @returns {Promise<Object>} Lista de logs\r\n */\nexport async function getLogs() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        data: [{\n          id: 1,\n          timestamp: new Date().toISOString(),\n          type: 'info',\n          user: 'Admin',\n          message: 'Inicio de sesión exitoso',\n          details: {\n            ip: '192.168.1.1',\n            userAgent: 'Chrome/96.0'\n          }\n        }, {\n          id: 2,\n          timestamp: new Date(Date.now() - 3600000).toISOString(),\n          // 1 hora atrás\n          type: 'warning',\n          user: 'Sistema',\n          message: 'Intento de acceso fallido',\n          details: {\n            ip: '203.0.113.1',\n            userAgent: 'Edge/96.0',\n            attempts: 3\n          }\n        }, {\n          id: 3,\n          timestamp: new Date(Date.now() - 7200000).toISOString(),\n          // 2 horas atrás\n          type: 'error',\n          user: 'Sistema',\n          message: 'Error en la creación de backup',\n          details: {\n            error: 'Espacio insuficiente',\n            code: 'E0023'\n          }\n        }, {\n          id: 4,\n          timestamp: new Date(Date.now() - 86400000).toISOString(),\n          // 1 día atrás\n          type: 'success',\n          user: 'Juan Pérez',\n          message: 'Nuevo usuario creado',\n          details: {\n            newUser: 'carlos@ejemplo.com'\n          }\n        }]\n      });\n    }, 1000);\n  });\n}\n\n/**\r\n * Descarga los logs en formato CSV\r\n * @returns {Promise<Object>} Datos CSV de los logs\r\n */\nexport async function downloadLogsCSV() {\n  // Simulamos la generación de un CSV\n  return new Promise(resolve => {\n    setTimeout(() => {\n      // Encabezados y datos de prueba en formato CSV\n      const csvData = 'Fecha,Tipo,Usuario,Mensaje\\n' + '2023-10-15 10:30:00,info,Admin,Inicio de sesión exitoso\\n' + '2023-10-15 09:30:00,warning,Sistema,Intento de acceso fallido\\n' + '2023-10-15 08:30:00,error,Sistema,Error en la creación de backup\\n' + '2023-10-14 15:45:00,success,Juan Pérez,Nuevo usuario creado';\n      resolve({\n        success: true,\n        data: csvData\n      });\n    }, 1000);\n  });\n}\n\n/**\r\n * Obtiene los roles disponibles en el sistema\r\n * @returns {Promise<Object>} Lista de roles\r\n */\nexport async function getRoles() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        success: true,\n        data: [{\n          id: 1,\n          nombre: 'Superadministrador'\n        }, {\n          id: 2,\n          nombre: 'Administrador'\n        }, {\n          id: 3,\n          nombre: 'Empleado'\n        }]\n      });\n    }, 500);\n  });\n}\nexport default {\n  getDashboardStats,\n  getUsers,\n  getRoles,\n  getLogs,\n  downloadLogsCSV\n};","map":{"version":3,"names":["getDashboardStats","Promise","resolve","setTimeout","success","data","totalUsers","activeUsers","inactiveUsers","activePayments","pendingPayments","overduePayments","totalIncome","status","lastBackup","Date","toISOString","recentActivity","tipo","usuario_nombre","accion","fecha","now","getUsers","id","nombre","email","telefono","roles","estado","fecha_creacion","getLogs","timestamp","type","user","message","details","ip","userAgent","attempts","error","code","newUser","downloadLogsCSV","csvData","getRoles"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/adminService.js"],"sourcesContent":["/**\r\n * Servicio para operaciones administrativas\r\n */\r\n\r\n/**\r\n * Obtiene las estadísticas del dashboard administrativo\r\n * @returns {Promise<Object>} Estadísticas del sistema\r\n */\r\nexport async function getDashboardStats() {\r\n  // En una implementación real, esto haría una llamada a la API\r\n  // Por ahora, devolvemos datos de ejemplo\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        success: true,\r\n        data: {\r\n          totalUsers: 45,\r\n          activeUsers: 32,\r\n          inactiveUsers: 13,\r\n          activePayments: 28,\r\n          pendingPayments: 8,\r\n          overduePayments: 3,\r\n          totalIncome: 15750000,\r\n          status: 'Normal',\r\n          lastBackup: new Date().toISOString(),\r\n          recentActivity: [\r\n            {\r\n              tipo: 'login',\r\n              usuario_nombre: 'Laura Méndez',\r\n              accion: 'inició sesión en el sistema',\r\n              fecha: new Date().toISOString()\r\n            },\r\n            {\r\n              tipo: 'payment',\r\n              usuario_nombre: 'Carlos Gómez',\r\n              accion: 'realizó un pago de $350.000',\r\n              fecha: new Date(Date.now() - 3600000).toISOString() // 1 hora atrás\r\n            },\r\n            {\r\n              tipo: 'user_created',\r\n              usuario_nombre: 'Admin',\r\n              accion: 'creó un nuevo usuario',\r\n              fecha: new Date(Date.now() - 86400000).toISOString() // 1 día atrás\r\n            },\r\n            {\r\n              tipo: 'backup',\r\n              usuario_nombre: 'Sistema',\r\n              accion: 'realizó un respaldo automático',\r\n              fecha: new Date(Date.now() - 172800000).toISOString() // 2 días atrás\r\n            }\r\n          ]\r\n        }\r\n      });\r\n    }, 1000);\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene la lista de usuarios del sistema\r\n * @returns {Promise<Object>} Lista de usuarios\r\n */\r\nexport async function getUsers() {\r\n  // Datos simulados\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        success: true,\r\n        data: [\r\n          {\r\n            id: 1,\r\n            nombre: 'Admin Principal',\r\n            email: 'admin@ejemplo.com',\r\n            telefono: '3001234567',\r\n            roles: ['Superadministrador'],\r\n            estado: 'activo',\r\n            fecha_creacion: '2023-05-15T08:30:00Z'\r\n          },\r\n          {\r\n            id: 2,\r\n            nombre: 'Juan Pérez',\r\n            email: 'juan@ejemplo.com',\r\n            telefono: '3009876543',\r\n            roles: ['Administrador'],\r\n            estado: 'activo',\r\n            fecha_creacion: '2023-06-20T14:45:00Z'\r\n          },\r\n          {\r\n            id: 3,\r\n            nombre: 'María López',\r\n            email: 'maria@ejemplo.com',\r\n            telefono: '3002223344',\r\n            roles: ['Empleado'],\r\n            estado: 'activo',\r\n            fecha_creacion: '2023-07-05T11:15:00Z'\r\n          },\r\n          {\r\n            id: 4,\r\n            nombre: 'Carlos Rodríguez',\r\n            email: 'carlos@ejemplo.com',\r\n            telefono: '3005556677',\r\n            roles: ['Empleado'],\r\n            estado: 'inactivo',\r\n            fecha_creacion: '2023-08-10T09:20:00Z'\r\n          }\r\n        ]\r\n      });\r\n    }, 1000);\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene los registros del sistema\r\n * @returns {Promise<Object>} Lista de logs\r\n */\r\nexport async function getLogs() {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        success: true,\r\n        data: [\r\n          {\r\n            id: 1,\r\n            timestamp: new Date().toISOString(),\r\n            type: 'info',\r\n            user: 'Admin',\r\n            message: 'Inicio de sesión exitoso',\r\n            details: { ip: '192.168.1.1', userAgent: 'Chrome/96.0' }\r\n          },\r\n          {\r\n            id: 2,\r\n            timestamp: new Date(Date.now() - 3600000).toISOString(), // 1 hora atrás\r\n            type: 'warning',\r\n            user: 'Sistema',\r\n            message: 'Intento de acceso fallido',\r\n            details: { ip: '203.0.113.1', userAgent: 'Edge/96.0', attempts: 3 }\r\n          },\r\n          {\r\n            id: 3,\r\n            timestamp: new Date(Date.now() - 7200000).toISOString(), // 2 horas atrás\r\n            type: 'error',\r\n            user: 'Sistema',\r\n            message: 'Error en la creación de backup',\r\n            details: { error: 'Espacio insuficiente', code: 'E0023' }\r\n          },\r\n          {\r\n            id: 4,\r\n            timestamp: new Date(Date.now() - 86400000).toISOString(), // 1 día atrás\r\n            type: 'success',\r\n            user: 'Juan Pérez',\r\n            message: 'Nuevo usuario creado',\r\n            details: { newUser: 'carlos@ejemplo.com' }\r\n          }\r\n        ]\r\n      });\r\n    }, 1000);\r\n  });\r\n}\r\n\r\n/**\r\n * Descarga los logs en formato CSV\r\n * @returns {Promise<Object>} Datos CSV de los logs\r\n */\r\nexport async function downloadLogsCSV() {\r\n  // Simulamos la generación de un CSV\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      // Encabezados y datos de prueba en formato CSV\r\n      const csvData = 'Fecha,Tipo,Usuario,Mensaje\\n' +\r\n                     '2023-10-15 10:30:00,info,Admin,Inicio de sesión exitoso\\n' +\r\n                     '2023-10-15 09:30:00,warning,Sistema,Intento de acceso fallido\\n' +\r\n                     '2023-10-15 08:30:00,error,Sistema,Error en la creación de backup\\n' +\r\n                     '2023-10-14 15:45:00,success,Juan Pérez,Nuevo usuario creado';\r\n      \r\n      resolve({\r\n        success: true,\r\n        data: csvData\r\n      });\r\n    }, 1000);\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene los roles disponibles en el sistema\r\n * @returns {Promise<Object>} Lista de roles\r\n */\r\nexport async function getRoles() {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        success: true,\r\n        data: [\r\n          { id: 1, nombre: 'Superadministrador' },\r\n          { id: 2, nombre: 'Administrador' },\r\n          { id: 3, nombre: 'Empleado' }\r\n        ]\r\n      });\r\n    }, 500);\r\n  });\r\n}\r\n\r\nexport default {\r\n  getDashboardStats,\r\n  getUsers,\r\n  getRoles,\r\n  getLogs,\r\n  downloadLogsCSV\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}