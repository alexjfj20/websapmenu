{"ast":null,"code":"// Servicio para la gestión de reservas\nimport apiService from './apiService';\nimport eventBus from '../utils/eventBus';\n\n// Almacenamiento local para las reservas (simulando una base de datos)\nlet reservationsStore = [];\n\n// Intentar cargar reservas guardadas en localStorage al iniciar\ntry {\n  const savedReservations = localStorage.getItem('websap_reservations');\n  if (savedReservations) {\n    reservationsStore = JSON.parse(savedReservations);\n    console.log('Reservas cargadas desde localStorage:', reservationsStore.length);\n  }\n} catch (error) {\n  console.error('Error al cargar reservas desde localStorage:', error);\n}\n\n// Función para guardar las reservas en localStorage\nfunction saveReservationsToStorage() {\n  try {\n    localStorage.setItem('websap_reservations', JSON.stringify(reservationsStore));\n  } catch (error) {\n    console.error('Error al guardar reservas en localStorage:', error);\n  }\n}\n\n// Función para guardar una nueva reserva\nexport async function saveReservation(reservationData) {\n  try {\n    // En una implementación real, aquí se haría una llamada a la API\n    // Por ahora, simulamos una respuesta exitosa\n\n    // Simulamos un retraso para imitar una llamada a la API\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Generamos un ID único para la reserva\n    const reservationId = 'res_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n\n    // Creamos el objeto de reserva con los datos recibidos\n    const reservation = {\n      id: reservationId,\n      fullName: reservationData.fullName,\n      mobilePhone: reservationData.mobilePhone,\n      landlinePhone: reservationData.landlinePhone || '',\n      email: reservationData.email || '',\n      address: reservationData.address || '',\n      date: reservationData.reservationDate,\n      time: reservationData.reservationTime,\n      peopleCount: reservationData.peopleCount,\n      notes: reservationData.additionalNotes || '',\n      status: 'pending',\n      // Estado inicial: pendiente\n      createdAt: new Date().toISOString(),\n      source: reservationData.source || 'web' // Fuente de la reserva: web o whatsapp\n    };\n\n    // Guardar la reserva en nuestro almacenamiento local\n    reservationsStore.unshift(reservation);\n    saveReservationsToStorage();\n\n    // Emitimos un evento para notificar a otros componentes sobre la nueva reserva\n    eventBus.emit('nueva-reserva', reservation);\n    console.log('Reserva guardada correctamente:', reservation);\n    return {\n      success: true,\n      reservation\n    };\n  } catch (error) {\n    console.error('Error al guardar la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar la reserva'\n    };\n  }\n}\n\n// Función para obtener todas las reservas\nexport async function getReservations() {\n  try {\n    // Simulamos un retraso para imitar una llamada a la API\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Si no hay reservas en el almacenamiento, devolvemos algunos datos de ejemplo\n    if (reservationsStore.length === 0) {\n      // Datos de ejemplo (los mismos que están en AdminReservas.vue)\n      reservationsStore = [{\n        id: '1',\n        fullName: 'Juan Pérez',\n        mobilePhone: '612345678',\n        email: 'juan@example.com',\n        date: '2023-07-15',\n        time: '20:30',\n        peopleCount: 4,\n        status: 'confirmed',\n        notes: 'Mesa cerca de la ventana si es posible',\n        createdAt: '2023-07-10T10:30:00.000Z',\n        source: 'web'\n      }, {\n        id: '2',\n        fullName: 'María López',\n        mobilePhone: '698765432',\n        landlinePhone: '912345678',\n        date: '2023-07-16',\n        time: '21:00',\n        peopleCount: 2,\n        status: 'pending',\n        createdAt: '2023-07-11T15:45:00.000Z',\n        source: 'web'\n      }, {\n        id: '3',\n        fullName: 'Carlos Ruiz',\n        mobilePhone: '654321987',\n        email: 'carlos@example.com',\n        date: '2023-07-14',\n        time: '14:30',\n        peopleCount: 6,\n        status: 'cancelled',\n        notes: 'Celebración de cumpleaños',\n        createdAt: '2023-07-09T09:15:00.000Z',\n        source: 'web'\n      }];\n\n      // Guardar los datos de ejemplo en localStorage\n      saveReservationsToStorage();\n    }\n    return {\n      success: true,\n      reservations: reservationsStore\n    };\n  } catch (error) {\n    console.error('Error al obtener las reservas:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener las reservas'\n    };\n  }\n}\n\n// Función para actualizar el estado de una reserva\nexport async function updateReservationStatus(reservationId, status) {\n  try {\n    // Simulamos un retraso para imitar una llamada a la API\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Buscar la reserva en nuestro almacenamiento local\n    const reservationIndex = reservationsStore.findIndex(res => res.id === reservationId);\n    if (reservationIndex === -1) {\n      throw new Error('Reserva no encontrada');\n    }\n\n    // Actualizar el estado\n    reservationsStore[reservationIndex].status = status;\n\n    // Guardar los cambios en localStorage\n    saveReservationsToStorage();\n\n    // Emitir evento de actualización\n    eventBus.emit('reserva-actualizada', {\n      id: reservationId,\n      status\n    });\n    return {\n      success: true,\n      message: 'Estado de reserva actualizado correctamente'\n    };\n  } catch (error) {\n    console.error('Error al actualizar el estado de la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al actualizar el estado de la reserva'\n    };\n  }\n}\n\n// Función para guardar una reserva desde WhatsApp\nexport async function saveWhatsAppReservation(whatsappData) {\n  try {\n    // Convertir los datos de WhatsApp al formato de reserva\n    const reservationData = {\n      fullName: whatsappData.nombre || 'Cliente de WhatsApp',\n      mobilePhone: whatsappData.telefono || '',\n      email: whatsappData.email || '',\n      reservationDate: whatsappData.fecha || new Date().toISOString().split('T')[0],\n      reservationTime: whatsappData.hora || '19:00',\n      peopleCount: whatsappData.personas || 2,\n      additionalNotes: whatsappData.notas || 'Reserva realizada por WhatsApp',\n      source: 'whatsapp'\n    };\n\n    // Usar la función existente para guardar la reserva\n    return await saveReservation(reservationData);\n  } catch (error) {\n    console.error('Error al guardar reserva desde WhatsApp:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar reserva desde WhatsApp'\n    };\n  }\n}","map":{"version":3,"names":["apiService","eventBus","reservationsStore","savedReservations","localStorage","getItem","JSON","parse","console","log","length","error","saveReservationsToStorage","setItem","stringify","saveReservation","reservationData","Promise","resolve","setTimeout","reservationId","Date","now","Math","random","toString","substr","reservation","id","fullName","mobilePhone","landlinePhone","email","address","date","reservationDate","time","reservationTime","peopleCount","notes","additionalNotes","status","createdAt","toISOString","source","unshift","emit","success","message","getReservations","reservations","updateReservationStatus","reservationIndex","findIndex","res","Error","saveWhatsAppReservation","whatsappData","nombre","telefono","fecha","split","hora","personas","notas"],"sources":["F:/Driver google/VUE.JS-2/VUE-JS/websap/src/services/reservaService.js"],"sourcesContent":["// Servicio para la gestión de reservas\nimport apiService from './apiService';\nimport eventBus from '../utils/eventBus';\n\n// Almacenamiento local para las reservas (simulando una base de datos)\nlet reservationsStore = [];\n\n// Intentar cargar reservas guardadas en localStorage al iniciar\ntry {\n  const savedReservations = localStorage.getItem('websap_reservations');\n  if (savedReservations) {\n    reservationsStore = JSON.parse(savedReservations);\n    console.log('Reservas cargadas desde localStorage:', reservationsStore.length);\n  }\n} catch (error) {\n  console.error('Error al cargar reservas desde localStorage:', error);\n}\n\n// Función para guardar las reservas en localStorage\nfunction saveReservationsToStorage() {\n  try {\n    localStorage.setItem('websap_reservations', JSON.stringify(reservationsStore));\n  } catch (error) {\n    console.error('Error al guardar reservas en localStorage:', error);\n  }\n}\n\n// Función para guardar una nueva reserva\nexport async function saveReservation(reservationData) {\n  try {\n    // En una implementación real, aquí se haría una llamada a la API\n    // Por ahora, simulamos una respuesta exitosa\n    \n    // Simulamos un retraso para imitar una llamada a la API\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Generamos un ID único para la reserva\n    const reservationId = 'res_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n    \n    // Creamos el objeto de reserva con los datos recibidos\n    const reservation = {\n      id: reservationId,\n      fullName: reservationData.fullName,\n      mobilePhone: reservationData.mobilePhone,\n      landlinePhone: reservationData.landlinePhone || '',\n      email: reservationData.email || '',\n      address: reservationData.address || '',\n      date: reservationData.reservationDate,\n      time: reservationData.reservationTime,\n      peopleCount: reservationData.peopleCount,\n      notes: reservationData.additionalNotes || '',\n      status: 'pending', // Estado inicial: pendiente\n      createdAt: new Date().toISOString(),\n      source: reservationData.source || 'web' // Fuente de la reserva: web o whatsapp\n    };\n    \n    // Guardar la reserva en nuestro almacenamiento local\n    reservationsStore.unshift(reservation);\n    saveReservationsToStorage();\n    \n    // Emitimos un evento para notificar a otros componentes sobre la nueva reserva\n    eventBus.emit('nueva-reserva', reservation);\n    \n    console.log('Reserva guardada correctamente:', reservation);\n    \n    return {\n      success: true,\n      reservation\n    };\n  } catch (error) {\n    console.error('Error al guardar la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar la reserva'\n    };\n  }\n}\n\n// Función para obtener todas las reservas\nexport async function getReservations() {\n  try {\n    // Simulamos un retraso para imitar una llamada a la API\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Si no hay reservas en el almacenamiento, devolvemos algunos datos de ejemplo\n    if (reservationsStore.length === 0) {\n      // Datos de ejemplo (los mismos que están en AdminReservas.vue)\n      reservationsStore = [\n        {\n          id: '1',\n          fullName: 'Juan Pérez',\n          mobilePhone: '612345678',\n          email: 'juan@example.com',\n          date: '2023-07-15',\n          time: '20:30',\n          peopleCount: 4,\n          status: 'confirmed',\n          notes: 'Mesa cerca de la ventana si es posible',\n          createdAt: '2023-07-10T10:30:00.000Z',\n          source: 'web'\n        },\n        {\n          id: '2',\n          fullName: 'María López',\n          mobilePhone: '698765432',\n          landlinePhone: '912345678',\n          date: '2023-07-16',\n          time: '21:00',\n          peopleCount: 2,\n          status: 'pending',\n          createdAt: '2023-07-11T15:45:00.000Z',\n          source: 'web'\n        },\n        {\n          id: '3',\n          fullName: 'Carlos Ruiz',\n          mobilePhone: '654321987',\n          email: 'carlos@example.com',\n          date: '2023-07-14',\n          time: '14:30',\n          peopleCount: 6,\n          status: 'cancelled',\n          notes: 'Celebración de cumpleaños',\n          createdAt: '2023-07-09T09:15:00.000Z',\n          source: 'web'\n        }\n      ];\n      \n      // Guardar los datos de ejemplo en localStorage\n      saveReservationsToStorage();\n    }\n    \n    return {\n      success: true,\n      reservations: reservationsStore\n    };\n  } catch (error) {\n    console.error('Error al obtener las reservas:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al obtener las reservas'\n    };\n  }\n}\n\n// Función para actualizar el estado de una reserva\nexport async function updateReservationStatus(reservationId, status) {\n  try {\n    // Simulamos un retraso para imitar una llamada a la API\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Buscar la reserva en nuestro almacenamiento local\n    const reservationIndex = reservationsStore.findIndex(res => res.id === reservationId);\n    \n    if (reservationIndex === -1) {\n      throw new Error('Reserva no encontrada');\n    }\n    \n    // Actualizar el estado\n    reservationsStore[reservationIndex].status = status;\n    \n    // Guardar los cambios en localStorage\n    saveReservationsToStorage();\n    \n    // Emitir evento de actualización\n    eventBus.emit('reserva-actualizada', {\n      id: reservationId,\n      status\n    });\n    \n    return {\n      success: true,\n      message: 'Estado de reserva actualizado correctamente'\n    };\n  } catch (error) {\n    console.error('Error al actualizar el estado de la reserva:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al actualizar el estado de la reserva'\n    };\n  }\n}\n\n// Función para guardar una reserva desde WhatsApp\nexport async function saveWhatsAppReservation(whatsappData) {\n  try {\n    // Convertir los datos de WhatsApp al formato de reserva\n    const reservationData = {\n      fullName: whatsappData.nombre || 'Cliente de WhatsApp',\n      mobilePhone: whatsappData.telefono || '',\n      email: whatsappData.email || '',\n      reservationDate: whatsappData.fecha || new Date().toISOString().split('T')[0],\n      reservationTime: whatsappData.hora || '19:00',\n      peopleCount: whatsappData.personas || 2,\n      additionalNotes: whatsappData.notas || 'Reserva realizada por WhatsApp',\n      source: 'whatsapp'\n    };\n    \n    // Usar la función existente para guardar la reserva\n    return await saveReservation(reservationData);\n  } catch (error) {\n    console.error('Error al guardar reserva desde WhatsApp:', error);\n    return {\n      success: false,\n      error: error.message || 'Error al guardar reserva desde WhatsApp'\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}