{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { reactive } from 'vue';\n\n// Estado reactivo del WebSocket\nexport const webSocketState = reactive({\n  connected: false,\n  reconnecting: false,\n  error: null,\n  reconnectAttempts: 0,\n  maxReconnectAttempts: 5,\n  socket: null,\n  messages: [],\n  enableWebsocket: false // Nueva bandera para habilitar/deshabilitar conexiones WebSocket\n});\n\n// Opciones de configuración\nlet config = {\n  reconnectInterval: 2000,\n  reconnectAttempts: 5\n};\n\n// Variable para almacenar el temporizador de reconexión\nlet reconnectTimer = null;\n\n/**\r\n * Inicializa la conexión WebSocket\r\n * @param {string} url - URL del servidor WebSocket\r\n * @param {Object} options - Opciones de configuración\r\n */\nexport function initializeWebSocket(url, options = {}) {\n  config = {\n    ...config,\n    ...options\n  };\n  webSocketState.maxReconnectAttempts = config.reconnectAttempts;\n\n  // Comprobar si el navegador soporta WebSocket\n  if (!('WebSocket' in window)) {\n    console.warn('Este navegador no soporta WebSocket');\n    return;\n  }\n\n  // Permitir deshabilitar WebSocket en entornos de desarrollo\n  // o cuando el backend no soporta WebSockets\n  if (process.env.NODE_ENV === 'development' && !webSocketState.enableWebsocket) {\n    console.info('WebSocket deshabilitado en entorno de desarrollo. ' + 'Para habilitarlo, use enableWebSocket()');\n    return;\n  }\n\n  // Si ya existe una conexión activa, cerrarla primero\n  if (webSocketState.socket) {\n    webSocketState.socket.close();\n  }\n  try {\n    webSocketState.reconnecting = false;\n    webSocketState.error = null;\n\n    // Crear nueva conexión\n    console.log(`Intentando conectar a WebSocket: ${url}`);\n    const socket = new WebSocket(url);\n    socket.onopen = () => {\n      console.log('Conexión WebSocket establecida');\n      webSocketState.connected = true;\n      webSocketState.reconnecting = false;\n      webSocketState.error = null;\n      webSocketState.reconnectAttempts = 0;\n    };\n    socket.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        webSocketState.messages.push(data);\n        console.log('Mensaje recibido:', data);\n      } catch (err) {\n        console.error('Error al parsear mensaje WebSocket:', event.data);\n      }\n    };\n    socket.onclose = event => {\n      webSocketState.connected = false;\n      if (!event.wasClean) {\n        console.log('Conexión WebSocket cerrada inesperadamente');\n        scheduleReconnect();\n      } else {\n        console.log('Conexión WebSocket cerrada');\n      }\n    };\n    socket.onerror = error => {\n      console.error('Error WebSocket:', error);\n      webSocketState.error = 'Error de conexión';\n      webSocketState.connected = false;\n\n      // Solo programar reconexión si no estamos ya en ese proceso\n      if (!webSocketState.reconnecting) {\n        scheduleReconnect();\n      }\n    };\n\n    // Guardar referencia al socket\n    webSocketState.socket = socket;\n  } catch (error) {\n    console.error('Error al inicializar WebSocket:', error);\n    webSocketState.error = `Error al inicializar: ${error.message}`;\n    webSocketState.connected = false;\n    scheduleReconnect();\n  }\n}\n\n/**\r\n * Habilita las conexiones WebSocket\r\n */\nexport function enableWebSocket() {\n  webSocketState.enableWebsocket = true;\n  console.log('WebSocket habilitado. Para conectar, llame a initializeWebSocket() con la URL apropiada');\n}\n\n/**\r\n * Deshabilita las conexiones WebSocket\r\n */\nexport function disableWebSocket() {\n  webSocketState.enableWebsocket = false;\n  if (webSocketState.socket) {\n    closeWebSocket();\n  }\n  console.log('WebSocket deshabilitado');\n}\n\n/**\r\n * Programa un intento de reconexión después del intervalo configurado\r\n */\nfunction scheduleReconnect() {\n  // Limpiar cualquier temporizador existente\n  if (reconnectTimer) {\n    clearTimeout(reconnectTimer);\n  }\n\n  // Verificar si debemos intentar reconectar\n  if (webSocketState.reconnectAttempts >= webSocketState.maxReconnectAttempts) {\n    console.log('Número máximo de reconexiones alcanzado');\n    webSocketState.reconnecting = false;\n    return;\n  }\n  if (!webSocketState.enableWebsocket && process.env.NODE_ENV === 'development') {\n    console.log('WebSocket deshabilitado. No se intentará reconectar.');\n    return;\n  }\n\n  // Programar reconexión\n  webSocketState.reconnecting = true;\n  webSocketState.reconnectAttempts++;\n  console.log(`Programando reconexión ${webSocketState.reconnectAttempts}/${webSocketState.maxReconnectAttempts} en ${config.reconnectInterval}ms`);\n  reconnectTimer = setTimeout(() => {\n    if (webSocketState.socket && webSocketState.socket.url) {\n      console.log('Intentando reconexión...');\n      initializeWebSocket(webSocketState.socket.url);\n    }\n  }, config.reconnectInterval);\n}\n\n/**\r\n * Intenta reconectar inmediatamente\r\n */\nexport function reconnect() {\n  if (webSocketState.socket && webSocketState.socket.url) {\n    initializeWebSocket(webSocketState.socket.url);\n  }\n}\n\n/**\r\n * Detiene los intentos de reconexión\r\n */\nexport function stopReconnecting() {\n  if (reconnectTimer) {\n    clearTimeout(reconnectTimer);\n  }\n  webSocketState.reconnecting = false;\n  console.log('Intentos de reconexión detenidos');\n}\n\n/**\r\n * Cierra la conexión WebSocket\r\n */\nexport function closeWebSocket() {\n  stopReconnecting();\n  if (webSocketState.socket) {\n    try {\n      webSocketState.socket.close();\n    } catch (error) {\n      console.error('Error al cerrar WebSocket:', error);\n    }\n    webSocketState.socket = null;\n  }\n  webSocketState.connected = false;\n  console.log('Conexión WebSocket cerrada manualmente');\n}\n\n/**\r\n * Envía un mensaje a través del WebSocket\r\n * @param {Object} data - Datos a enviar\r\n * @returns {boolean} - true si el mensaje se envió correctamente\r\n */\nexport function sendMessage(data) {\n  if (!webSocketState.socket || webSocketState.socket.readyState !== WebSocket.OPEN) {\n    console.error('WebSocket no está conectado');\n    return false;\n  }\n  try {\n    const message = JSON.stringify(data);\n    webSocketState.socket.send(message);\n    console.log('Mensaje enviado:', data);\n    return true;\n  } catch (error) {\n    console.error('Error al enviar mensaje:', error);\n    return false;\n  }\n}\n\n// Deshabilitar WebSocket por defecto en desarrollo\nif (process.env.NODE_ENV === 'development') {\n  webSocketState.enableWebsocket = false;\n}\nexport default {\n  webSocketState,\n  initializeWebSocket,\n  reconnect,\n  closeWebSocket,\n  sendMessage,\n  stopReconnecting,\n  enableWebSocket,\n  disableWebSocket\n};","map":{"version":3,"names":["reactive","webSocketState","connected","reconnecting","error","reconnectAttempts","maxReconnectAttempts","socket","messages","enableWebsocket","config","reconnectInterval","reconnectTimer","initializeWebSocket","url","options","window","console","warn","process","env","NODE_ENV","info","close","log","WebSocket","onopen","onmessage","event","data","JSON","parse","push","err","onclose","wasClean","scheduleReconnect","onerror","message","enableWebSocket","disableWebSocket","closeWebSocket","clearTimeout","setTimeout","reconnect","stopReconnecting","sendMessage","readyState","OPEN","stringify","send"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/webSocketService.js"],"sourcesContent":["import { reactive } from 'vue';\r\n\r\n// Estado reactivo del WebSocket\r\nexport const webSocketState = reactive({\r\n  connected: false,\r\n  reconnecting: false,\r\n  error: null,\r\n  reconnectAttempts: 0,\r\n  maxReconnectAttempts: 5,\r\n  socket: null,\r\n  messages: [],\r\n  enableWebsocket: false // Nueva bandera para habilitar/deshabilitar conexiones WebSocket\r\n});\r\n\r\n// Opciones de configuración\r\nlet config = {\r\n  reconnectInterval: 2000,\r\n  reconnectAttempts: 5\r\n};\r\n\r\n// Variable para almacenar el temporizador de reconexión\r\nlet reconnectTimer = null;\r\n\r\n/**\r\n * Inicializa la conexión WebSocket\r\n * @param {string} url - URL del servidor WebSocket\r\n * @param {Object} options - Opciones de configuración\r\n */\r\nexport function initializeWebSocket(url, options = {}) {\r\n  config = { ...config, ...options };\r\n  webSocketState.maxReconnectAttempts = config.reconnectAttempts;\r\n  \r\n  // Comprobar si el navegador soporta WebSocket\r\n  if (!('WebSocket' in window)) {\r\n    console.warn('Este navegador no soporta WebSocket');\r\n    return;\r\n  }\r\n  \r\n  // Permitir deshabilitar WebSocket en entornos de desarrollo\r\n  // o cuando el backend no soporta WebSockets\r\n  if (process.env.NODE_ENV === 'development' && !webSocketState.enableWebsocket) {\r\n    console.info('WebSocket deshabilitado en entorno de desarrollo. ' +\r\n                 'Para habilitarlo, use enableWebSocket()');\r\n    return;\r\n  }\r\n  \r\n  // Si ya existe una conexión activa, cerrarla primero\r\n  if (webSocketState.socket) {\r\n    webSocketState.socket.close();\r\n  }\r\n\r\n  try {\r\n    webSocketState.reconnecting = false;\r\n    webSocketState.error = null;\r\n    \r\n    // Crear nueva conexión\r\n    console.log(`Intentando conectar a WebSocket: ${url}`);\r\n    const socket = new WebSocket(url);\r\n    \r\n    socket.onopen = () => {\r\n      console.log('Conexión WebSocket establecida');\r\n      webSocketState.connected = true;\r\n      webSocketState.reconnecting = false;\r\n      webSocketState.error = null;\r\n      webSocketState.reconnectAttempts = 0;\r\n    };\r\n    \r\n    socket.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        webSocketState.messages.push(data);\r\n        console.log('Mensaje recibido:', data);\r\n      } catch (err) {\r\n        console.error('Error al parsear mensaje WebSocket:', event.data);\r\n      }\r\n    };\r\n    \r\n    socket.onclose = (event) => {\r\n      webSocketState.connected = false;\r\n      \r\n      if (!event.wasClean) {\r\n        console.log('Conexión WebSocket cerrada inesperadamente');\r\n        scheduleReconnect();\r\n      } else {\r\n        console.log('Conexión WebSocket cerrada');\r\n      }\r\n    };\r\n    \r\n    socket.onerror = (error) => {\r\n      console.error('Error WebSocket:', error);\r\n      webSocketState.error = 'Error de conexión';\r\n      webSocketState.connected = false;\r\n      \r\n      // Solo programar reconexión si no estamos ya en ese proceso\r\n      if (!webSocketState.reconnecting) {\r\n        scheduleReconnect();\r\n      }\r\n    };\r\n    \r\n    // Guardar referencia al socket\r\n    webSocketState.socket = socket;\r\n    \r\n  } catch (error) {\r\n    console.error('Error al inicializar WebSocket:', error);\r\n    webSocketState.error = `Error al inicializar: ${error.message}`;\r\n    webSocketState.connected = false;\r\n    scheduleReconnect();\r\n  }\r\n}\r\n\r\n/**\r\n * Habilita las conexiones WebSocket\r\n */\r\nexport function enableWebSocket() {\r\n  webSocketState.enableWebsocket = true;\r\n  console.log('WebSocket habilitado. Para conectar, llame a initializeWebSocket() con la URL apropiada');\r\n}\r\n\r\n/**\r\n * Deshabilita las conexiones WebSocket\r\n */\r\nexport function disableWebSocket() {\r\n  webSocketState.enableWebsocket = false;\r\n  if (webSocketState.socket) {\r\n    closeWebSocket();\r\n  }\r\n  console.log('WebSocket deshabilitado');\r\n}\r\n\r\n/**\r\n * Programa un intento de reconexión después del intervalo configurado\r\n */\r\nfunction scheduleReconnect() {\r\n  // Limpiar cualquier temporizador existente\r\n  if (reconnectTimer) {\r\n    clearTimeout(reconnectTimer);\r\n  }\r\n  \r\n  // Verificar si debemos intentar reconectar\r\n  if (webSocketState.reconnectAttempts >= webSocketState.maxReconnectAttempts) {\r\n    console.log('Número máximo de reconexiones alcanzado');\r\n    webSocketState.reconnecting = false;\r\n    return;\r\n  }\r\n  \r\n  if (!webSocketState.enableWebsocket && process.env.NODE_ENV === 'development') {\r\n    console.log('WebSocket deshabilitado. No se intentará reconectar.');\r\n    return;\r\n  }\r\n  \r\n  // Programar reconexión\r\n  webSocketState.reconnecting = true;\r\n  webSocketState.reconnectAttempts++;\r\n  console.log(`Programando reconexión ${webSocketState.reconnectAttempts}/${webSocketState.maxReconnectAttempts} en ${config.reconnectInterval}ms`);\r\n  \r\n  reconnectTimer = setTimeout(() => {\r\n    if (webSocketState.socket && webSocketState.socket.url) {\r\n      console.log('Intentando reconexión...');\r\n      initializeWebSocket(webSocketState.socket.url);\r\n    }\r\n  }, config.reconnectInterval);\r\n}\r\n\r\n/**\r\n * Intenta reconectar inmediatamente\r\n */\r\nexport function reconnect() {\r\n  if (webSocketState.socket && webSocketState.socket.url) {\r\n    initializeWebSocket(webSocketState.socket.url);\r\n  }\r\n}\r\n\r\n/**\r\n * Detiene los intentos de reconexión\r\n */\r\nexport function stopReconnecting() {\r\n  if (reconnectTimer) {\r\n    clearTimeout(reconnectTimer);\r\n  }\r\n  webSocketState.reconnecting = false;\r\n  console.log('Intentos de reconexión detenidos');\r\n}\r\n\r\n/**\r\n * Cierra la conexión WebSocket\r\n */\r\nexport function closeWebSocket() {\r\n  stopReconnecting();\r\n  \r\n  if (webSocketState.socket) {\r\n    try {\r\n      webSocketState.socket.close();\r\n    } catch (error) {\r\n      console.error('Error al cerrar WebSocket:', error);\r\n    }\r\n    webSocketState.socket = null;\r\n  }\r\n  \r\n  webSocketState.connected = false;\r\n  console.log('Conexión WebSocket cerrada manualmente');\r\n}\r\n\r\n/**\r\n * Envía un mensaje a través del WebSocket\r\n * @param {Object} data - Datos a enviar\r\n * @returns {boolean} - true si el mensaje se envió correctamente\r\n */\r\nexport function sendMessage(data) {\r\n  if (!webSocketState.socket || webSocketState.socket.readyState !== WebSocket.OPEN) {\r\n    console.error('WebSocket no está conectado');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    const message = JSON.stringify(data);\r\n    webSocketState.socket.send(message);\r\n    console.log('Mensaje enviado:', data);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error al enviar mensaje:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Deshabilitar WebSocket por defecto en desarrollo\r\nif (process.env.NODE_ENV === 'development') {\r\n  webSocketState.enableWebsocket = false;\r\n}\r\n\r\nexport default {\r\n  webSocketState,\r\n  initializeWebSocket,\r\n  reconnect,\r\n  closeWebSocket,\r\n  sendMessage,\r\n  stopReconnecting,\r\n  enableWebSocket,\r\n  disableWebSocket\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}