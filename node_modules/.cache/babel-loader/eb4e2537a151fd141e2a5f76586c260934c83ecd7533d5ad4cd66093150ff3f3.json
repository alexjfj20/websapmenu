{"ast":null,"code":"/**\n * Servicio para manejar las peticiones API al backend\n */\n\n// URL base de la API\nconst API_URL = process.env.NODE_ENV === 'development' ? 'http://localhost:3000/api' : '/api';\n\n// Token de autenticación\nlet token = localStorage.getItem('authToken') || '';\n\n/**\n * Configura el token de autenticación\n * @param {string} newToken \n */\nconst setToken = newToken => {\n  token = newToken;\n  if (newToken) {\n    localStorage.setItem('authToken', newToken);\n  } else {\n    localStorage.removeItem('authToken');\n  }\n};\n\n/**\n * Realiza una petición GET a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst get = async (endpoint, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      }),\n      ...(options.headers || {})\n    };\n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'GET',\n      headers,\n      ...options\n    });\n    if (options.responseType === 'blob') {\n      return response.blob();\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    return data;\n  } catch (error) {\n    console.error(`Error en GET ${endpoint}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Realiza una petición POST a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} body - Cuerpo de la petición\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst post = async (endpoint, body = {}, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      }),\n      ...(options.headers || {})\n    };\n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(body),\n      ...options\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    return data;\n  } catch (error) {\n    console.error(`Error en POST ${endpoint}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Realiza una petición PUT a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} body - Cuerpo de la petición\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst put = async (endpoint, body = {}, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      }),\n      ...(options.headers || {})\n    };\n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(body),\n      ...options\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    return data;\n  } catch (error) {\n    console.error(`Error en PUT ${endpoint}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Realiza una petición DELETE a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst del = async (endpoint, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && {\n        'Authorization': `Bearer ${token}`\n      }),\n      ...(options.headers || {})\n    };\n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'DELETE',\n      headers,\n      ...options\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    return data;\n  } catch (error) {\n    console.error(`Error en DELETE ${endpoint}:`, error);\n    throw error;\n  }\n};\nexport default {\n  setToken,\n  get,\n  post,\n  put,\n  delete: del\n};","map":{"version":3,"names":["API_URL","process","env","NODE_ENV","token","localStorage","getItem","setToken","newToken","setItem","removeItem","get","endpoint","options","headers","response","fetch","method","responseType","blob","data","json","ok","Error","message","error","console","post","body","JSON","stringify","put","del","delete"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/apiService.js"],"sourcesContent":["/**\n * Servicio para manejar las peticiones API al backend\n */\n\n// URL base de la API\nconst API_URL = process.env.NODE_ENV === 'development' \n  ? 'http://localhost:3000/api' \n  : '/api';\n\n// Token de autenticación\nlet token = localStorage.getItem('authToken') || '';\n\n/**\n * Configura el token de autenticación\n * @param {string} newToken \n */\nconst setToken = (newToken) => {\n  token = newToken;\n  if (newToken) {\n    localStorage.setItem('authToken', newToken);\n  } else {\n    localStorage.removeItem('authToken');\n  }\n};\n\n/**\n * Realiza una petición GET a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst get = async (endpoint, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && { 'Authorization': `Bearer ${token}` }),\n      ...(options.headers || {})\n    };\n    \n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'GET',\n      headers,\n      ...options\n    });\n    \n    if (options.responseType === 'blob') {\n      return response.blob();\n    }\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(`Error en GET ${endpoint}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Realiza una petición POST a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} body - Cuerpo de la petición\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst post = async (endpoint, body = {}, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && { 'Authorization': `Bearer ${token}` }),\n      ...(options.headers || {})\n    };\n    \n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(body),\n      ...options\n    });\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(`Error en POST ${endpoint}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Realiza una petición PUT a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} body - Cuerpo de la petición\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst put = async (endpoint, body = {}, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && { 'Authorization': `Bearer ${token}` }),\n      ...(options.headers || {})\n    };\n    \n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(body),\n      ...options\n    });\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(`Error en PUT ${endpoint}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Realiza una petición DELETE a la API\n * @param {string} endpoint - Ruta de la API\n * @param {Object} options - Opciones adicionales\n * @returns {Promise<any>} - Respuesta de la API\n */\nconst del = async (endpoint, options = {}) => {\n  try {\n    const headers = {\n      'Content-Type': 'application/json',\n      ...(token && { 'Authorization': `Bearer ${token}` }),\n      ...(options.headers || {})\n    };\n    \n    const response = await fetch(`${API_URL}${endpoint}`, {\n      method: 'DELETE',\n      headers,\n      ...options\n    });\n    \n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.message || 'Error en la petición');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(`Error en DELETE ${endpoint}:`, error);\n    throw error;\n  }\n};\n\nexport default {\n  setToken,\n  get,\n  post,\n  put,\n  delete: del\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}