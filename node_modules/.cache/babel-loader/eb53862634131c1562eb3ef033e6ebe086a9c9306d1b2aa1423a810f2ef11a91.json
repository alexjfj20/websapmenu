{"ast":null,"code":"import { ref } from 'vue';\nimport { getAllPlatos } from '@/services/indexedDBService';\nimport apiService from '@/services/apiService';\nexport default {\n  name: 'IndexedDBBackup',\n  setup() {\n    const isBackingUp = ref(false);\n    const message = ref('');\n    const messageType = ref('info');\n\n    // Función para hacer respaldo de IndexedDB\n    const backupIndexedDB = async () => {\n      try {\n        isBackingUp.value = true;\n        message.value = 'Obteniendo datos de IndexedDB...';\n        messageType.value = 'info';\n\n        // Obtener todos los platos de IndexedDB\n        const platos = await getAllPlatos();\n        if (!platos || platos.length === 0) {\n          message.value = 'No hay platos para respaldar en IndexedDB';\n          messageType.value = 'warning';\n          isBackingUp.value = false;\n          return;\n        }\n        message.value = `Encontrados ${platos.length} platos. Enviando al servidor...`;\n\n        // Enviar los platos al servidor\n        const response = await apiService.post('/indexeddb/backup', {\n          platos\n        });\n        if (response && response.success) {\n          message.value = 'Respaldo completado con éxito';\n          messageType.value = 'success';\n\n          // Llamar al script para sincronizar las imágenes originales\n          try {\n            const syncResponse = await apiService.post('/indexeddb/sync-images');\n            if (syncResponse && syncResponse.success) {\n              message.value = 'Respaldo completado y sincronización de imágenes exitosa';\n            }\n          } catch (syncError) {\n            console.error('Error al sincronizar imágenes:', syncError);\n          }\n        } else {\n          message.value = 'Error al hacer respaldo: ' + (response?.message || 'Error desconocido');\n          messageType.value = 'error';\n        }\n      } catch (error) {\n        console.error('Error al hacer respaldo de IndexedDB:', error);\n        message.value = 'Error al hacer respaldo: ' + error.message;\n        messageType.value = 'error';\n      } finally {\n        isBackingUp.value = false;\n\n        // Limpiar el mensaje después de 5 segundos\n        setTimeout(() => {\n          message.value = '';\n        }, 5000);\n      }\n    };\n    return {\n      isBackingUp,\n      message,\n      messageType,\n      backupIndexedDB\n    };\n  }\n};","map":{"version":3,"names":["ref","getAllPlatos","apiService","name","setup","isBackingUp","message","messageType","backupIndexedDB","value","platos","length","response","post","success","syncResponse","syncError","console","error","setTimeout"],"sources":["F:\\Driver google\\VUE.JS-2\\temp\\websap\\src\\components\\utils\\IndexedDBBackup.vue"],"sourcesContent":["// src/components/utils/IndexedDBBackup.vue\n\n<template>\n  <div class=\"indexeddb-backup\">\n    <button @click=\"backupIndexedDB\" class=\"backup-button\" :disabled=\"isBackingUp\">\n      {{ isBackingUp ? 'Respaldando...' : 'Respaldar datos locales' }}\n    </button>\n    <div v-if=\"message\" :class=\"['backup-message', messageType]\">\n      {{ message }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport { getAllPlatos } from '@/services/indexedDBService';\nimport apiService from '@/services/apiService';\n\nexport default {\n  name: 'IndexedDBBackup',\n  setup() {\n    const isBackingUp = ref(false);\n    const message = ref('');\n    const messageType = ref('info');\n\n    // Función para hacer respaldo de IndexedDB\n    const backupIndexedDB = async () => {\n      try {\n        isBackingUp.value = true;\n        message.value = 'Obteniendo datos de IndexedDB...';\n        messageType.value = 'info';\n        \n        // Obtener todos los platos de IndexedDB\n        const platos = await getAllPlatos();\n        \n        if (!platos || platos.length === 0) {\n          message.value = 'No hay platos para respaldar en IndexedDB';\n          messageType.value = 'warning';\n          isBackingUp.value = false;\n          return;\n        }\n        \n        message.value = `Encontrados ${platos.length} platos. Enviando al servidor...`;\n        \n        // Enviar los platos al servidor\n        const response = await apiService.post('/indexeddb/backup', { platos });\n        \n        if (response && response.success) {\n          message.value = 'Respaldo completado con éxito';\n          messageType.value = 'success';\n          \n          // Llamar al script para sincronizar las imágenes originales\n          try {\n            const syncResponse = await apiService.post('/indexeddb/sync-images');\n            if (syncResponse && syncResponse.success) {\n              message.value = 'Respaldo completado y sincronización de imágenes exitosa';\n            }\n          } catch (syncError) {\n            console.error('Error al sincronizar imágenes:', syncError);\n          }\n        } else {\n          message.value = 'Error al hacer respaldo: ' + (response?.message || 'Error desconocido');\n          messageType.value = 'error';\n        }\n      } catch (error) {\n        console.error('Error al hacer respaldo de IndexedDB:', error);\n        message.value = 'Error al hacer respaldo: ' + error.message;\n        messageType.value = 'error';\n      } finally {\n        isBackingUp.value = false;\n        \n        // Limpiar el mensaje después de 5 segundos\n        setTimeout(() => {\n          message.value = '';\n        }, 5000);\n      }\n    };\n\n    return {\n      isBackingUp,\n      message,\n      messageType,\n      backupIndexedDB\n    };\n  }\n};\n</script>\n\n<style scoped>\n.indexeddb-backup {\n  margin: 20px 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.backup-button {\n  padding: 10px 15px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 14px;\n  transition: background-color 0.3s;\n}\n\n.backup-button:hover {\n  background-color: #45a049;\n}\n\n.backup-button:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.backup-message {\n  margin-top: 10px;\n  padding: 8px 12px;\n  border-radius: 4px;\n  font-size: 14px;\n}\n\n.backup-message.info {\n  background-color: #e7f3fe;\n  border: 1px solid #b6d4fe;\n  color: #084298;\n}\n\n.backup-message.success {\n  background-color: #d1e7dd;\n  border: 1px solid #badbcc;\n  color: #0f5132;\n}\n\n.backup-message.warning {\n  background-color: #fff3cd;\n  border: 1px solid #ffecb5;\n  color: #664d03;\n}\n\n.backup-message.error {\n  background-color: #f8d7da;\n  border: 1px solid #f5c2c7;\n  color: #842029;\n}\n</style>\n"],"mappings":"AAcA,SAASA,GAAE,QAAS,KAAK;AACzB,SAASC,YAAW,QAAS,6BAA6B;AAC1D,OAAOC,UAAS,MAAO,uBAAuB;AAE9C,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,KAAKA,CAAA,EAAG;IACN,MAAMC,WAAU,GAAIL,GAAG,CAAC,KAAK,CAAC;IAC9B,MAAMM,OAAM,GAAIN,GAAG,CAAC,EAAE,CAAC;IACvB,MAAMO,WAAU,GAAIP,GAAG,CAAC,MAAM,CAAC;;IAE/B;IACA,MAAMQ,eAAc,GAAI,MAAAA,CAAA,KAAY;MAClC,IAAI;QACFH,WAAW,CAACI,KAAI,GAAI,IAAI;QACxBH,OAAO,CAACG,KAAI,GAAI,kCAAkC;QAClDF,WAAW,CAACE,KAAI,GAAI,MAAM;;QAE1B;QACA,MAAMC,MAAK,GAAI,MAAMT,YAAY,CAAC,CAAC;QAEnC,IAAI,CAACS,MAAK,IAAKA,MAAM,CAACC,MAAK,KAAM,CAAC,EAAE;UAClCL,OAAO,CAACG,KAAI,GAAI,2CAA2C;UAC3DF,WAAW,CAACE,KAAI,GAAI,SAAS;UAC7BJ,WAAW,CAACI,KAAI,GAAI,KAAK;UACzB;QACF;QAEAH,OAAO,CAACG,KAAI,GAAI,eAAeC,MAAM,CAACC,MAAM,kCAAkC;;QAE9E;QACA,MAAMC,QAAO,GAAI,MAAMV,UAAU,CAACW,IAAI,CAAC,mBAAmB,EAAE;UAAEH;QAAO,CAAC,CAAC;QAEvE,IAAIE,QAAO,IAAKA,QAAQ,CAACE,OAAO,EAAE;UAChCR,OAAO,CAACG,KAAI,GAAI,+BAA+B;UAC/CF,WAAW,CAACE,KAAI,GAAI,SAAS;;UAE7B;UACA,IAAI;YACF,MAAMM,YAAW,GAAI,MAAMb,UAAU,CAACW,IAAI,CAAC,wBAAwB,CAAC;YACpE,IAAIE,YAAW,IAAKA,YAAY,CAACD,OAAO,EAAE;cACxCR,OAAO,CAACG,KAAI,GAAI,0DAA0D;YAC5E;UACF,EAAE,OAAOO,SAAS,EAAE;YAClBC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,SAAS,CAAC;UAC5D;QACF,OAAO;UACLV,OAAO,CAACG,KAAI,GAAI,2BAA0B,IAAKG,QAAQ,EAAEN,OAAM,IAAK,mBAAmB,CAAC;UACxFC,WAAW,CAACE,KAAI,GAAI,OAAO;QAC7B;MACF,EAAE,OAAOS,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;QAC7DZ,OAAO,CAACG,KAAI,GAAI,2BAA0B,GAAIS,KAAK,CAACZ,OAAO;QAC3DC,WAAW,CAACE,KAAI,GAAI,OAAO;MAC7B,UAAU;QACRJ,WAAW,CAACI,KAAI,GAAI,KAAK;;QAEzB;QACAU,UAAU,CAAC,MAAM;UACfb,OAAO,CAACG,KAAI,GAAI,EAAE;QACpB,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC;IAED,OAAO;MACLJ,WAAW;MACXC,OAAO;MACPC,WAAW;MACXC;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}