{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { getBusinessInfo, compressImage } from './storageService';\nconst DB_NAME = 'websapDatabase';\nconst DB_VERSION = 3; // Debe coincidir con el resto de servicios\nconst SHARED_MENU_STORE = 'sharedMenus';\nconst IMAGE_STORE = 'menuImages';\n\n// Abrir la conexión a la base de datos\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    try {\n      console.log(\"Intentando abrir la base de datos con versión:\", DB_VERSION);\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => {\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\n        reject('Error al abrir la base de datos: ' + event.target.errorCode);\n      };\n      request.onsuccess = event => {\n        const db = event.target.result;\n        console.log(\"Base de datos abierta con éxito, versión:\", db.version);\n\n        // Verificar que todos los almacenes necesarios existen\n        const existingStores = Array.from(db.objectStoreNames);\n        console.log(\"Almacenes existentes:\", existingStores);\n        if (!existingStores.includes(SHARED_MENU_STORE)) {\n          console.error(`El almacén ${SHARED_MENU_STORE} no existe en la base de datos`);\n          reject(new Error(`El almacén ${SHARED_MENU_STORE} no existe en la base de datos`));\n          return;\n        }\n        resolve(db);\n      };\n      request.onupgradeneeded = event => {\n        console.log(\"Actualizando estructura de la base de datos a versión:\", event.newVersion);\n        const db = event.target.result;\n\n        // Crear almacén para menús compartidos si no existe\n        if (!db.objectStoreNames.contains(SHARED_MENU_STORE)) {\n          console.log('Creando almacén:', SHARED_MENU_STORE);\n          db.createObjectStore(SHARED_MENU_STORE, {\n            keyPath: 'id'\n          });\n        }\n\n        // Crear almacén para imágenes si no existe\n        if (!db.objectStoreNames.contains(IMAGE_STORE)) {\n          console.log('Creando almacén:', IMAGE_STORE);\n          db.createObjectStore(IMAGE_STORE, {\n            keyPath: 'id'\n          });\n        }\n      };\n    } catch (error) {\n      console.error(\"Error crítico en IndexedDB:\", error);\n      reject(error);\n    }\n  });\n}\n\n/**\r\n * Genera un ID único para un menú\r\n * @returns {string} Un ID único\r\n */\nfunction generateMenuId() {\n  return Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10);\n}\n\n/**\r\n * Guarda un menú compartido y devuelve su ID\r\n * @param {Array} menuItems - Elementos del menú a guardar\r\n * @returns {Promise<String>} - ID del menú compartido\r\n */\nexport async function saveMenu(menuItems) {\n  try {\n    // Generar un ID único para el menú compartido\n    const menuId = generateMenuId();\n\n    // Obtener información del negocio para incluirla en el menú compartido\n    const businessInfo = await getBusinessInfo();\n\n    // Preprocesar los elementos del menú - comprimir imágenes\n    const processedItems = await Promise.all(menuItems.map(async item => {\n      const processedItem = {\n        ...item\n      };\n\n      // Comprimir la imagen si existe\n      if (processedItem.image && typeof processedItem.image === 'string' && processedItem.image.length > 0) {\n        try {\n          // Usar una calidad más baja para compartir\n          processedItem.image = await compressImage(processedItem.image, 400, 300, 0.5);\n        } catch (err) {\n          console.warn('Error al comprimir imagen:', err);\n          processedItem.image = null;\n        }\n      }\n      return processedItem;\n    }));\n\n    // Crear objeto del menú con información del negocio incluida\n    const menuData = {\n      id: menuId,\n      items: processedItems,\n      businessInfo: businessInfo,\n      // Incluir la información del negocio (con datos de pago)\n      createdAt: new Date().toISOString()\n    };\n\n    // Verificar tamaño del objeto\n    try {\n      const jsonSize = JSON.stringify(menuData).length / (1024 * 1024); // Tamaño en MB\n      console.log(`Tamaño del menú a guardar: ${jsonSize.toFixed(2)} MB`);\n      if (jsonSize > 50) {\n        throw new Error(`El menú es demasiado grande (${jsonSize.toFixed(2)} MB). Reduce el tamaño de las imágenes.`);\n      }\n    } catch (error) {\n      console.error('Error al verificar tamaño del menú:', error);\n      throw new Error('Error al verificar tamaño del menú');\n    }\n\n    // Guardar en IndexedDB\n    const db = await openDatabase();\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(SHARED_MENU_STORE);\n    await new Promise((resolve, reject) => {\n      const request = store.put(menuData);\n      request.onsuccess = () => {\n        console.log(`Menú guardado exitosamente con ID: ${menuId}`);\n        resolve();\n      };\n      request.onerror = e => {\n        console.error('Error al guardar el menú:', e.target.error);\n        reject(e.target.error);\n      };\n    });\n    return menuId;\n  } catch (error) {\n    console.error('Error al guardar el menú compartido:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Obtiene un menú compartido por su ID\r\n * @param {String} menuId - ID del menú compartido\r\n * @returns {Promise<Object>} - Datos del menú compartido\r\n */\nexport async function getSharedMenu(menuId) {\n  try {\n    console.log(`Intentando recuperar menú con ID: ${menuId}`);\n\n    // Verificar que tenemos un ID válido\n    if (!menuId) {\n      console.error('ID de menú no proporcionado');\n      return null;\n    }\n    const db = await openDatabase();\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readonly');\n    const store = transaction.objectStore(SHARED_MENU_STORE);\n    const menuData = await new Promise((resolve, reject) => {\n      const request = store.get(menuId);\n      request.onsuccess = () => {\n        console.log(\"Resultado de búsqueda del menú:\", request.result);\n        resolve(request.result);\n      };\n      request.onerror = e => {\n        console.error('Error al recuperar el menú:', e.target.error);\n        reject(e.target.error);\n      };\n    });\n\n    // Si el menú no tiene información de negocio, intentar obtenerla\n    if (menuData && !menuData.businessInfo) {\n      const businessInfo = await getBusinessInfo();\n      menuData.businessInfo = businessInfo;\n    }\n    if (!menuData) {\n      console.warn(`No se encontró menú con ID: ${menuId}`);\n    }\n    return menuData;\n  } catch (error) {\n    console.error('Error al obtener el menú compartido:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Alias para getSharedMenu para mantener compatibilidad con código existente\r\n * @param {String} menuId - ID del menú compartido\r\n * @returns {Promise<Object>} - Datos del menú compartido\r\n */\nexport async function getMenu(menuId) {\n  console.log('Intentando recuperar menú con ID:', menuId);\n  try {\n    const db = await openDatabase();\n    const tx = db.transaction('sharedMenus', 'readonly');\n    const store = tx.objectStore('sharedMenus');\n    const result = await store.get(menuId);\n    console.log('Resultado de búsqueda del menú:', result);\n\n    // Verificar si se encontró el menú y tiene items\n    if (result && result.items && Array.isArray(result.items)) {\n      console.log('[menuService] Procesando items en getMenu()');\n\n      // Procesar cada item para normalizar isSpecial\n      const processedItems = result.items.map(item => {\n        // Si isSpecial no existe, asignar false por defecto\n        if (item.isSpecial === undefined) {\n          console.log(`[menuService] Item ${item.name || 'sin nombre'} sin propiedad isSpecial, asignando false`);\n          return {\n            ...item,\n            isSpecial: false\n          };\n        }\n\n        // Normalizar isSpecial a un valor booleano\n        const normalizedIsSpecial = item.isSpecial === true || item.isSpecial === 'true' || item.isSpecial === 1 || item.isSpecial === '1';\n        if (typeof item.isSpecial !== 'boolean') {\n          console.log(`[menuService] Normalizando isSpecial para ${item.name}: ${item.isSpecial} (${typeof item.isSpecial}) → ${normalizedIsSpecial}`);\n        }\n        return {\n          ...item,\n          isSpecial: normalizedIsSpecial\n        };\n      });\n      console.log(`[menuService] Procesados ${processedItems.length} items:`, processedItems.map(i => ({\n        name: i.name,\n        isSpecial: i.isSpecial\n      })));\n\n      // Devolver el objeto completo con los items procesados\n      return {\n        ...result,\n        items: processedItems\n      }; // Devuelve el objeto completo con los items procesados\n    }\n    return result || null;\n  } catch (error) {\n    console.error('Error al obtener menú compartido:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Limpia menús antiguos que ya no son necesarios\r\n * @returns {Promise<void>}\r\n */\nexport async function cleanOldMenus() {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(SHARED_MENU_STORE);\n    const now = new Date();\n    const allMenus = await new Promise((resolve, reject) => {\n      const request = store.getAll();\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = e => {\n        console.error('Error al obtener menús:', e.target.error);\n        reject(e.target.error);\n      };\n    });\n\n    // Eliminar menús más antiguos de 7 días\n    const menusToDelete = allMenus.filter(menu => {\n      const createdDate = new Date(menu.createdAt);\n      const diff = now.getTime() - createdDate.getTime();\n      const days = Math.ceil(diff / (1000 * 3600 * 24));\n      return days > 7;\n    });\n    for (const menu of menusToDelete) {\n      store.delete(menu.id);\n    }\n    console.log(`Se eliminaron ${menusToDelete.length} menús antiguos`);\n  } catch (error) {\n    console.error('Error al limpiar menús antiguos:', error);\n  }\n}","map":{"version":3,"names":["getBusinessInfo","compressImage","DB_NAME","DB_VERSION","SHARED_MENU_STORE","IMAGE_STORE","openDatabase","Promise","resolve","reject","console","log","request","indexedDB","open","onerror","event","error","target","errorCode","onsuccess","db","result","version","existingStores","Array","from","objectStoreNames","includes","Error","onupgradeneeded","newVersion","contains","createObjectStore","keyPath","generateMenuId","Math","random","toString","substring","saveMenu","menuItems","menuId","businessInfo","processedItems","all","map","item","processedItem","image","length","err","warn","menuData","id","items","createdAt","Date","toISOString","jsonSize","JSON","stringify","toFixed","transaction","store","objectStore","put","e","getSharedMenu","get","getMenu","tx","isArray","isSpecial","undefined","name","normalizedIsSpecial","i","cleanOldMenus","now","allMenus","getAll","menusToDelete","filter","menu","createdDate","diff","getTime","days","ceil","delete"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/menuService.js"],"sourcesContent":["import { getBusinessInfo, compressImage } from './storageService';\r\n\r\nconst DB_NAME = 'websapDatabase';\r\nconst DB_VERSION = 3; // Debe coincidir con el resto de servicios\r\nconst SHARED_MENU_STORE = 'sharedMenus';\r\nconst IMAGE_STORE = 'menuImages';\r\n\r\n// Abrir la conexión a la base de datos\r\nfunction openDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      console.log(\"Intentando abrir la base de datos con versión:\", DB_VERSION);\r\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n      \r\n      request.onerror = (event) => {\r\n        console.error(\"Error al abrir la base de datos:\", event.target.error);\r\n        reject('Error al abrir la base de datos: ' + event.target.errorCode);\r\n      };\r\n      \r\n      request.onsuccess = (event) => {\r\n        const db = event.target.result;\r\n        console.log(\"Base de datos abierta con éxito, versión:\", db.version);\r\n        \r\n        // Verificar que todos los almacenes necesarios existen\r\n        const existingStores = Array.from(db.objectStoreNames);\r\n        console.log(\"Almacenes existentes:\", existingStores);\r\n        \r\n        if (!existingStores.includes(SHARED_MENU_STORE)) {\r\n          console.error(`El almacén ${SHARED_MENU_STORE} no existe en la base de datos`);\r\n          reject(new Error(`El almacén ${SHARED_MENU_STORE} no existe en la base de datos`));\r\n          return;\r\n        }\r\n        \r\n        resolve(db);\r\n      };\r\n      \r\n      request.onupgradeneeded = (event) => {\r\n        console.log(\"Actualizando estructura de la base de datos a versión:\", event.newVersion);\r\n        const db = event.target.result;\r\n        \r\n        // Crear almacén para menús compartidos si no existe\r\n        if (!db.objectStoreNames.contains(SHARED_MENU_STORE)) {\r\n          console.log('Creando almacén:', SHARED_MENU_STORE);\r\n          db.createObjectStore(SHARED_MENU_STORE, { keyPath: 'id' });\r\n        }\r\n        \r\n        // Crear almacén para imágenes si no existe\r\n        if (!db.objectStoreNames.contains(IMAGE_STORE)) {\r\n          console.log('Creando almacén:', IMAGE_STORE);\r\n          db.createObjectStore(IMAGE_STORE, { keyPath: 'id' });\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error crítico en IndexedDB:\", error);\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Genera un ID único para un menú\r\n * @returns {string} Un ID único\r\n */\r\nfunction generateMenuId() {\r\n  return Math.random().toString(36).substring(2, 10) + \r\n         Math.random().toString(36).substring(2, 10);\r\n}\r\n\r\n/**\r\n * Guarda un menú compartido y devuelve su ID\r\n * @param {Array} menuItems - Elementos del menú a guardar\r\n * @returns {Promise<String>} - ID del menú compartido\r\n */\r\nexport async function saveMenu(menuItems) {\r\n  try {\r\n    // Generar un ID único para el menú compartido\r\n    const menuId = generateMenuId();\r\n    \r\n    // Obtener información del negocio para incluirla en el menú compartido\r\n    const businessInfo = await getBusinessInfo();\r\n    \r\n    // Preprocesar los elementos del menú - comprimir imágenes\r\n    const processedItems = await Promise.all(menuItems.map(async (item) => {\r\n      const processedItem = { ...item };\r\n      \r\n      // Comprimir la imagen si existe\r\n      if (processedItem.image && typeof processedItem.image === 'string' && processedItem.image.length > 0) {\r\n        try {\r\n          // Usar una calidad más baja para compartir\r\n          processedItem.image = await compressImage(processedItem.image, 400, 300, 0.5);\r\n        } catch (err) {\r\n          console.warn('Error al comprimir imagen:', err);\r\n          processedItem.image = null;\r\n        }\r\n      }\r\n      \r\n      return processedItem;\r\n    }));\r\n    \r\n    // Crear objeto del menú con información del negocio incluida\r\n    const menuData = {\r\n      id: menuId,\r\n      items: processedItems,\r\n      businessInfo: businessInfo, // Incluir la información del negocio (con datos de pago)\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    \r\n    // Verificar tamaño del objeto\r\n    try {\r\n      const jsonSize = JSON.stringify(menuData).length / (1024 * 1024); // Tamaño en MB\r\n      console.log(`Tamaño del menú a guardar: ${jsonSize.toFixed(2)} MB`);\r\n      \r\n      if (jsonSize > 50) {\r\n        throw new Error(`El menú es demasiado grande (${jsonSize.toFixed(2)} MB). Reduce el tamaño de las imágenes.`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al verificar tamaño del menú:', error);\r\n      throw new Error('Error al verificar tamaño del menú');\r\n    }\r\n    \r\n    // Guardar en IndexedDB\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readwrite');\r\n    const store = transaction.objectStore(SHARED_MENU_STORE);\r\n    \r\n    await new Promise((resolve, reject) => {\r\n      const request = store.put(menuData);\r\n      \r\n      request.onsuccess = () => {\r\n        console.log(`Menú guardado exitosamente con ID: ${menuId}`);\r\n        resolve();\r\n      };\r\n      \r\n      request.onerror = (e) => {\r\n        console.error('Error al guardar el menú:', e.target.error);\r\n        reject(e.target.error);\r\n      };\r\n    });\r\n    \r\n    return menuId;\r\n  } catch (error) {\r\n    console.error('Error al guardar el menú compartido:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene un menú compartido por su ID\r\n * @param {String} menuId - ID del menú compartido\r\n * @returns {Promise<Object>} - Datos del menú compartido\r\n */\r\nexport async function getSharedMenu(menuId) {\r\n  try {\r\n    console.log(`Intentando recuperar menú con ID: ${menuId}`);\r\n    \r\n    // Verificar que tenemos un ID válido\r\n    if (!menuId) {\r\n      console.error('ID de menú no proporcionado');\r\n      return null;\r\n    }\r\n\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readonly');\r\n    const store = transaction.objectStore(SHARED_MENU_STORE);\r\n    \r\n    const menuData = await new Promise((resolve, reject) => {\r\n      const request = store.get(menuId);\r\n      \r\n      request.onsuccess = () => {\r\n        console.log(\"Resultado de búsqueda del menú:\", request.result);\r\n        resolve(request.result);\r\n      };\r\n      \r\n      request.onerror = (e) => {\r\n        console.error('Error al recuperar el menú:', e.target.error);\r\n        reject(e.target.error);\r\n      };\r\n    });\r\n    \r\n    // Si el menú no tiene información de negocio, intentar obtenerla\r\n    if (menuData && !menuData.businessInfo) {\r\n      const businessInfo = await getBusinessInfo();\r\n      menuData.businessInfo = businessInfo;\r\n    }\r\n\r\n    if (!menuData) {\r\n      console.warn(`No se encontró menú con ID: ${menuId}`);\r\n    }\r\n    \r\n    return menuData;\r\n  } catch (error) {\r\n    console.error('Error al obtener el menú compartido:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Alias para getSharedMenu para mantener compatibilidad con código existente\r\n * @param {String} menuId - ID del menú compartido\r\n * @returns {Promise<Object>} - Datos del menú compartido\r\n */\r\nexport async function getMenu(menuId) {\r\n  console.log('Intentando recuperar menú con ID:', menuId);\r\n  try {\r\n    const db = await openDatabase();\r\n    const tx = db.transaction('sharedMenus', 'readonly');\r\n    const store = tx.objectStore('sharedMenus');\r\n    const result = await store.get(menuId);\r\n    console.log('Resultado de búsqueda del menú:', result);\r\n    \r\n    // Verificar si se encontró el menú y tiene items\r\n    if (result && result.items && Array.isArray(result.items)) {\r\n      console.log('[menuService] Procesando items en getMenu()');\r\n      \r\n      // Procesar cada item para normalizar isSpecial\r\n      const processedItems = result.items.map(item => {\r\n        // Si isSpecial no existe, asignar false por defecto\r\n        if (item.isSpecial === undefined) {\r\n          console.log(`[menuService] Item ${item.name || 'sin nombre'} sin propiedad isSpecial, asignando false`);\r\n          return { ...item, isSpecial: false };\r\n        }\r\n        \r\n        // Normalizar isSpecial a un valor booleano\r\n        const normalizedIsSpecial = \r\n          item.isSpecial === true || \r\n          item.isSpecial === 'true' || \r\n          item.isSpecial === 1 || \r\n          item.isSpecial === '1';\r\n        \r\n        if (typeof item.isSpecial !== 'boolean') {\r\n          console.log(`[menuService] Normalizando isSpecial para ${item.name}: ${item.isSpecial} (${typeof item.isSpecial}) → ${normalizedIsSpecial}`);\r\n        }\r\n        \r\n        return { ...item, isSpecial: normalizedIsSpecial };\r\n      });\r\n      \r\n      console.log(`[menuService] Procesados ${processedItems.length} items:`, \r\n        processedItems.map(i => ({ name: i.name, isSpecial: i.isSpecial })));\r\n      \r\n      // Devolver el objeto completo con los items procesados\r\n      return {\r\n        ...result,\r\n        items: processedItems\r\n      }; // Devuelve el objeto completo con los items procesados\r\n    }\r\n    \r\n    return result || null;\r\n  } catch (error) {\r\n    console.error('Error al obtener menú compartido:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Limpia menús antiguos que ya no son necesarios\r\n * @returns {Promise<void>}\r\n */\r\nexport async function cleanOldMenus() {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readwrite');\r\n    const store = transaction.objectStore(SHARED_MENU_STORE);\r\n    \r\n    const now = new Date();\r\n    const allMenus = await new Promise((resolve, reject) => {\r\n      const request = store.getAll();\r\n      \r\n      request.onsuccess = () => {\r\n        resolve(request.result);\r\n      };\r\n      \r\n      request.onerror = (e) => {\r\n        console.error('Error al obtener menús:', e.target.error);\r\n        reject(e.target.error);\r\n      };\r\n    });\r\n    \r\n    // Eliminar menús más antiguos de 7 días\r\n    const menusToDelete = allMenus.filter(menu => {\r\n      const createdDate = new Date(menu.createdAt);\r\n      const diff = now.getTime() - createdDate.getTime();\r\n      const days = Math.ceil(diff / (1000 * 3600 * 24));\r\n      return days > 7;\r\n    });\r\n    \r\n    for (const menu of menusToDelete) {\r\n      store.delete(menu.id);\r\n    }\r\n    \r\n    console.log(`Se eliminaron ${menusToDelete.length} menús antiguos`);\r\n  } catch (error) {\r\n    console.error('Error al limpiar menús antiguos:', error);\r\n  }\r\n}\r\n"],"mappings":";;;AAAA,SAASA,eAAe,EAAEC,aAAa,QAAQ,kBAAkB;AAEjE,MAAMC,OAAO,GAAG,gBAAgB;AAChC,MAAMC,UAAU,GAAG,CAAC,CAAC,CAAC;AACtB,MAAMC,iBAAiB,GAAG,aAAa;AACvC,MAAMC,WAAW,GAAG,YAAY;;AAEhC;AACA,SAASC,YAAYA,CAAA,EAAG;EACtB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,gDAAgD,EAAER,UAAU,CAAC;MACzE,MAAMS,OAAO,GAAGC,SAAS,CAACC,IAAI,CAACZ,OAAO,EAAEC,UAAU,CAAC;MAEnDS,OAAO,CAACG,OAAO,GAAIC,KAAK,IAAK;QAC3BN,OAAO,CAACO,KAAK,CAAC,kCAAkC,EAAED,KAAK,CAACE,MAAM,CAACD,KAAK,CAAC;QACrER,MAAM,CAAC,mCAAmC,GAAGO,KAAK,CAACE,MAAM,CAACC,SAAS,CAAC;MACtE,CAAC;MAEDP,OAAO,CAACQ,SAAS,GAAIJ,KAAK,IAAK;QAC7B,MAAMK,EAAE,GAAGL,KAAK,CAACE,MAAM,CAACI,MAAM;QAC9BZ,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEU,EAAE,CAACE,OAAO,CAAC;;QAEpE;QACA,MAAMC,cAAc,GAAGC,KAAK,CAACC,IAAI,CAACL,EAAE,CAACM,gBAAgB,CAAC;QACtDjB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEa,cAAc,CAAC;QAEpD,IAAI,CAACA,cAAc,CAACI,QAAQ,CAACxB,iBAAiB,CAAC,EAAE;UAC/CM,OAAO,CAACO,KAAK,CAAC,cAAcb,iBAAiB,gCAAgC,CAAC;UAC9EK,MAAM,CAAC,IAAIoB,KAAK,CAAC,cAAczB,iBAAiB,gCAAgC,CAAC,CAAC;UAClF;QACF;QAEAI,OAAO,CAACa,EAAE,CAAC;MACb,CAAC;MAEDT,OAAO,CAACkB,eAAe,GAAId,KAAK,IAAK;QACnCN,OAAO,CAACC,GAAG,CAAC,wDAAwD,EAAEK,KAAK,CAACe,UAAU,CAAC;QACvF,MAAMV,EAAE,GAAGL,KAAK,CAACE,MAAM,CAACI,MAAM;;QAE9B;QACA,IAAI,CAACD,EAAE,CAACM,gBAAgB,CAACK,QAAQ,CAAC5B,iBAAiB,CAAC,EAAE;UACpDM,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEP,iBAAiB,CAAC;UAClDiB,EAAE,CAACY,iBAAiB,CAAC7B,iBAAiB,EAAE;YAAE8B,OAAO,EAAE;UAAK,CAAC,CAAC;QAC5D;;QAEA;QACA,IAAI,CAACb,EAAE,CAACM,gBAAgB,CAACK,QAAQ,CAAC3B,WAAW,CAAC,EAAE;UAC9CK,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEN,WAAW,CAAC;UAC5CgB,EAAE,CAACY,iBAAiB,CAAC5B,WAAW,EAAE;YAAE6B,OAAO,EAAE;UAAK,CAAC,CAAC;QACtD;MACF,CAAC;IACH,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDR,MAAM,CAACQ,KAAK,CAAC;IACf;EACF,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA,SAASkB,cAAcA,CAAA,EAAG;EACxB,OAAOC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAC3CH,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,QAAQA,CAACC,SAAS,EAAE;EACxC,IAAI;IACF;IACA,MAAMC,MAAM,GAAGP,cAAc,CAAC,CAAC;;IAE/B;IACA,MAAMQ,YAAY,GAAG,MAAM3C,eAAe,CAAC,CAAC;;IAE5C;IACA,MAAM4C,cAAc,GAAG,MAAMrC,OAAO,CAACsC,GAAG,CAACJ,SAAS,CAACK,GAAG,CAAC,MAAOC,IAAI,IAAK;MACrE,MAAMC,aAAa,GAAG;QAAE,GAAGD;MAAK,CAAC;;MAEjC;MACA,IAAIC,aAAa,CAACC,KAAK,IAAI,OAAOD,aAAa,CAACC,KAAK,KAAK,QAAQ,IAAID,aAAa,CAACC,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;QACpG,IAAI;UACF;UACAF,aAAa,CAACC,KAAK,GAAG,MAAMhD,aAAa,CAAC+C,aAAa,CAACC,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAC/E,CAAC,CAAC,OAAOE,GAAG,EAAE;UACZzC,OAAO,CAAC0C,IAAI,CAAC,4BAA4B,EAAED,GAAG,CAAC;UAC/CH,aAAa,CAACC,KAAK,GAAG,IAAI;QAC5B;MACF;MAEA,OAAOD,aAAa;IACtB,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMK,QAAQ,GAAG;MACfC,EAAE,EAAEZ,MAAM;MACVa,KAAK,EAAEX,cAAc;MACrBD,YAAY,EAAEA,YAAY;MAAE;MAC5Ba,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;;IAED;IACA,IAAI;MACF,MAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAACR,QAAQ,CAAC,CAACH,MAAM,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;MAClExC,OAAO,CAACC,GAAG,CAAC,8BAA8BgD,QAAQ,CAACG,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;MAEnE,IAAIH,QAAQ,GAAG,EAAE,EAAE;QACjB,MAAM,IAAI9B,KAAK,CAAC,gCAAgC8B,QAAQ,CAACG,OAAO,CAAC,CAAC,CAAC,yCAAyC,CAAC;MAC/G;IACF,CAAC,CAAC,OAAO7C,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAM,IAAIY,KAAK,CAAC,oCAAoC,CAAC;IACvD;;IAEA;IACA,MAAMR,EAAE,GAAG,MAAMf,YAAY,CAAC,CAAC;IAC/B,MAAMyD,WAAW,GAAG1C,EAAE,CAAC0C,WAAW,CAAC,CAAC3D,iBAAiB,CAAC,EAAE,WAAW,CAAC;IACpE,MAAM4D,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC7D,iBAAiB,CAAC;IAExD,MAAM,IAAIG,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACrC,MAAMG,OAAO,GAAGoD,KAAK,CAACE,GAAG,CAACb,QAAQ,CAAC;MAEnCzC,OAAO,CAACQ,SAAS,GAAG,MAAM;QACxBV,OAAO,CAACC,GAAG,CAAC,sCAAsC+B,MAAM,EAAE,CAAC;QAC3DlC,OAAO,CAAC,CAAC;MACX,CAAC;MAEDI,OAAO,CAACG,OAAO,GAAIoD,CAAC,IAAK;QACvBzD,OAAO,CAACO,KAAK,CAAC,2BAA2B,EAAEkD,CAAC,CAACjD,MAAM,CAACD,KAAK,CAAC;QAC1DR,MAAM,CAAC0D,CAAC,CAACjD,MAAM,CAACD,KAAK,CAAC;MACxB,CAAC;IACH,CAAC,CAAC;IAEF,OAAOyB,MAAM;EACf,CAAC,CAAC,OAAOzB,KAAK,EAAE;IACdP,OAAO,CAACO,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAemD,aAAaA,CAAC1B,MAAM,EAAE;EAC1C,IAAI;IACFhC,OAAO,CAACC,GAAG,CAAC,qCAAqC+B,MAAM,EAAE,CAAC;;IAE1D;IACA,IAAI,CAACA,MAAM,EAAE;MACXhC,OAAO,CAACO,KAAK,CAAC,6BAA6B,CAAC;MAC5C,OAAO,IAAI;IACb;IAEA,MAAMI,EAAE,GAAG,MAAMf,YAAY,CAAC,CAAC;IAC/B,MAAMyD,WAAW,GAAG1C,EAAE,CAAC0C,WAAW,CAAC,CAAC3D,iBAAiB,CAAC,EAAE,UAAU,CAAC;IACnE,MAAM4D,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC7D,iBAAiB,CAAC;IAExD,MAAMiD,QAAQ,GAAG,MAAM,IAAI9C,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtD,MAAMG,OAAO,GAAGoD,KAAK,CAACK,GAAG,CAAC3B,MAAM,CAAC;MAEjC9B,OAAO,CAACQ,SAAS,GAAG,MAAM;QACxBV,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEC,OAAO,CAACU,MAAM,CAAC;QAC9Dd,OAAO,CAACI,OAAO,CAACU,MAAM,CAAC;MACzB,CAAC;MAEDV,OAAO,CAACG,OAAO,GAAIoD,CAAC,IAAK;QACvBzD,OAAO,CAACO,KAAK,CAAC,6BAA6B,EAAEkD,CAAC,CAACjD,MAAM,CAACD,KAAK,CAAC;QAC5DR,MAAM,CAAC0D,CAAC,CAACjD,MAAM,CAACD,KAAK,CAAC;MACxB,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,IAAIoC,QAAQ,IAAI,CAACA,QAAQ,CAACV,YAAY,EAAE;MACtC,MAAMA,YAAY,GAAG,MAAM3C,eAAe,CAAC,CAAC;MAC5CqD,QAAQ,CAACV,YAAY,GAAGA,YAAY;IACtC;IAEA,IAAI,CAACU,QAAQ,EAAE;MACb3C,OAAO,CAAC0C,IAAI,CAAC,+BAA+BV,MAAM,EAAE,CAAC;IACvD;IAEA,OAAOW,QAAQ;EACjB,CAAC,CAAC,OAAOpC,KAAK,EAAE;IACdP,OAAO,CAACO,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeqD,OAAOA,CAAC5B,MAAM,EAAE;EACpChC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE+B,MAAM,CAAC;EACxD,IAAI;IACF,MAAMrB,EAAE,GAAG,MAAMf,YAAY,CAAC,CAAC;IAC/B,MAAMiE,EAAE,GAAGlD,EAAE,CAAC0C,WAAW,CAAC,aAAa,EAAE,UAAU,CAAC;IACpD,MAAMC,KAAK,GAAGO,EAAE,CAACN,WAAW,CAAC,aAAa,CAAC;IAC3C,MAAM3C,MAAM,GAAG,MAAM0C,KAAK,CAACK,GAAG,CAAC3B,MAAM,CAAC;IACtChC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEW,MAAM,CAAC;;IAEtD;IACA,IAAIA,MAAM,IAAIA,MAAM,CAACiC,KAAK,IAAI9B,KAAK,CAAC+C,OAAO,CAAClD,MAAM,CAACiC,KAAK,CAAC,EAAE;MACzD7C,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAC;;MAE1D;MACA,MAAMiC,cAAc,GAAGtB,MAAM,CAACiC,KAAK,CAACT,GAAG,CAACC,IAAI,IAAI;QAC9C;QACA,IAAIA,IAAI,CAAC0B,SAAS,KAAKC,SAAS,EAAE;UAChChE,OAAO,CAACC,GAAG,CAAC,sBAAsBoC,IAAI,CAAC4B,IAAI,IAAI,YAAY,2CAA2C,CAAC;UACvG,OAAO;YAAE,GAAG5B,IAAI;YAAE0B,SAAS,EAAE;UAAM,CAAC;QACtC;;QAEA;QACA,MAAMG,mBAAmB,GACvB7B,IAAI,CAAC0B,SAAS,KAAK,IAAI,IACvB1B,IAAI,CAAC0B,SAAS,KAAK,MAAM,IACzB1B,IAAI,CAAC0B,SAAS,KAAK,CAAC,IACpB1B,IAAI,CAAC0B,SAAS,KAAK,GAAG;QAExB,IAAI,OAAO1B,IAAI,CAAC0B,SAAS,KAAK,SAAS,EAAE;UACvC/D,OAAO,CAACC,GAAG,CAAC,6CAA6CoC,IAAI,CAAC4B,IAAI,KAAK5B,IAAI,CAAC0B,SAAS,KAAK,OAAO1B,IAAI,CAAC0B,SAAS,OAAOG,mBAAmB,EAAE,CAAC;QAC9I;QAEA,OAAO;UAAE,GAAG7B,IAAI;UAAE0B,SAAS,EAAEG;QAAoB,CAAC;MACpD,CAAC,CAAC;MAEFlE,OAAO,CAACC,GAAG,CAAC,4BAA4BiC,cAAc,CAACM,MAAM,SAAS,EACpEN,cAAc,CAACE,GAAG,CAAC+B,CAAC,KAAK;QAAEF,IAAI,EAAEE,CAAC,CAACF,IAAI;QAAEF,SAAS,EAAEI,CAAC,CAACJ;MAAU,CAAC,CAAC,CAAC,CAAC;;MAEtE;MACA,OAAO;QACL,GAAGnD,MAAM;QACTiC,KAAK,EAAEX;MACT,CAAC,CAAC,CAAC;IACL;IAEA,OAAOtB,MAAM,IAAI,IAAI;EACvB,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdP,OAAO,CAACO,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAe6D,aAAaA,CAAA,EAAG;EACpC,IAAI;IACF,MAAMzD,EAAE,GAAG,MAAMf,YAAY,CAAC,CAAC;IAC/B,MAAMyD,WAAW,GAAG1C,EAAE,CAAC0C,WAAW,CAAC,CAAC3D,iBAAiB,CAAC,EAAE,WAAW,CAAC;IACpE,MAAM4D,KAAK,GAAGD,WAAW,CAACE,WAAW,CAAC7D,iBAAiB,CAAC;IAExD,MAAM2E,GAAG,GAAG,IAAItB,IAAI,CAAC,CAAC;IACtB,MAAMuB,QAAQ,GAAG,MAAM,IAAIzE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtD,MAAMG,OAAO,GAAGoD,KAAK,CAACiB,MAAM,CAAC,CAAC;MAE9BrE,OAAO,CAACQ,SAAS,GAAG,MAAM;QACxBZ,OAAO,CAACI,OAAO,CAACU,MAAM,CAAC;MACzB,CAAC;MAEDV,OAAO,CAACG,OAAO,GAAIoD,CAAC,IAAK;QACvBzD,OAAO,CAACO,KAAK,CAAC,yBAAyB,EAAEkD,CAAC,CAACjD,MAAM,CAACD,KAAK,CAAC;QACxDR,MAAM,CAAC0D,CAAC,CAACjD,MAAM,CAACD,KAAK,CAAC;MACxB,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,MAAMiE,aAAa,GAAGF,QAAQ,CAACG,MAAM,CAACC,IAAI,IAAI;MAC5C,MAAMC,WAAW,GAAG,IAAI5B,IAAI,CAAC2B,IAAI,CAAC5B,SAAS,CAAC;MAC5C,MAAM8B,IAAI,GAAGP,GAAG,CAACQ,OAAO,CAAC,CAAC,GAAGF,WAAW,CAACE,OAAO,CAAC,CAAC;MAClD,MAAMC,IAAI,GAAGpD,IAAI,CAACqD,IAAI,CAACH,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;MACjD,OAAOE,IAAI,GAAG,CAAC;IACjB,CAAC,CAAC;IAEF,KAAK,MAAMJ,IAAI,IAAIF,aAAa,EAAE;MAChClB,KAAK,CAAC0B,MAAM,CAACN,IAAI,CAAC9B,EAAE,CAAC;IACvB;IAEA5C,OAAO,CAACC,GAAG,CAAC,iBAAiBuE,aAAa,CAAChC,MAAM,iBAAiB,CAAC;EACrE,CAAC,CAAC,OAAOjC,KAAK,EAAE;IACdP,OAAO,CAACO,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;EAC1D;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}