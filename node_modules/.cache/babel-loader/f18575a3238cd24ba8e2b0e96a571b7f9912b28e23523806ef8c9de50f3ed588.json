{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nconst DB_NAME = 'websapDatabase';\nconst DB_VERSION = 1;\nconst SHARED_MENU_STORE = 'sharedMenus';\n\n// Abrir la conexión a la base de datos\nfunction openDatabase() {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onerror = event => {\n      reject('Error al abrir la base de datos: ' + event.target.errorCode);\n    };\n    request.onsuccess = event => {\n      const db = event.target.result;\n      resolve(db);\n    };\n    request.onupgradeneeded = event => {\n      const db = event.target.result;\n\n      // Crear almacén para menús compartidos si no existe\n      if (!db.objectStoreNames.contains(SHARED_MENU_STORE)) {\n        db.createObjectStore(SHARED_MENU_STORE, {\n          keyPath: 'id'\n        });\n      }\n    };\n  });\n}\n\n/**\r\n * Guarda un menú en IndexedDB y devuelve un ID único\r\n * @param {Array} menuData - Los datos del menú a guardar\r\n * @returns {Promise<string>} - Promesa con el ID del menú guardado\r\n */\nexport async function saveMenu(menuData) {\n  try {\n    // Generar un ID único para el menú\n    const menuId = generateId();\n    console.log(`Guardando menú \"${menuId}\" con ${menuData.length} elementos...`);\n\n    // IMPORTANTE: Guardamos los elementos con sus imágenes intactas\n    // NO procesamos ni modificamos las imágenes aquí para preservarlas en la vista compartida\n    const menuObject = {\n      id: menuId,\n      items: menuData,\n      // Guardamos todo el objeto tal cual está, con imágenes incluidas\n      createdAt: new Date().toISOString()\n    };\n\n    // Guardar en IndexedDB\n    const db = await openDatabase();\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(SHARED_MENU_STORE);\n    await new Promise((resolve, reject) => {\n      const request = store.put(menuObject);\n      request.onsuccess = () => resolve();\n      request.onerror = e => reject(e.target.error);\n    });\n    console.log(`Menú guardado exitosamente con ID: ${menuId}`);\n    console.log(`Elementos con imágenes: ${menuData.filter(item => Boolean(item.image)).length} de ${menuData.length}`);\n    return menuId;\n  } catch (error) {\n    console.error('Error al guardar el menú en IndexedDB:', error);\n    throw new Error('No se pudo guardar el menú');\n  }\n}\n\n/**\r\n * Obtiene un menú guardado por su ID\r\n * @param {string} menuId - El ID del menú a recuperar\r\n * @returns {Promise<Array|null>} - Promesa con los datos del menú o null si no existe\r\n */\nexport async function getMenu(menuId) {\n  try {\n    console.log(`Intentando recuperar menú con ID: ${menuId}`);\n\n    // Intentar recuperar de IndexedDB primero\n    const db = await openDatabase();\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readonly');\n    const store = transaction.objectStore(SHARED_MENU_STORE);\n    const result = await new Promise((resolve, reject) => {\n      const request = store.get(menuId);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = e => reject(e.target.error);\n    });\n    if (result && result.items && Array.isArray(result.items)) {\n      console.log(`Menú encontrado en IndexedDB, contiene ${result.items.length} elementos`);\n\n      // Verificar y registrar el estado de las imágenes\n      const itemsWithImages = result.items.filter(item => Boolean(item.image)).length;\n      console.log(`Elementos con imágenes: ${itemsWithImages} de ${result.items.length}`);\n\n      // Devolver directamente los items del resultado\n      return result.items;\n    }\n    console.log(`Menú no encontrado en ningún almacenamiento`);\n    return null;\n  } catch (error) {\n    console.error('Error al obtener menú:', error);\n    return null;\n  }\n}\n\n/**\r\n * Limpia menús antiguos que ya no son necesarios\r\n * @returns {Promise<void>}\r\n */\nexport async function cleanOldMenus() {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readwrite');\n    const store = transaction.objectStore(SHARED_MENU_STORE);\n    const now = new Date();\n    const allMenus = await new Promise((resolve, reject) => {\n      const request = store.getAll();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = e => reject(e.target.error);\n    });\n\n    // Eliminar menús más antiguos de 7 días\n    const menusToDelete = allMenus.filter(menu => {\n      const createdDate = new Date(menu.createdAt);\n      const diff = now.getTime() - createdDate.getTime();\n      const days = Math.ceil(diff / (1000 * 3600 * 24));\n      return days > 7;\n    });\n    for (const menu of menusToDelete) {\n      store.delete(menu.id);\n    }\n  } catch (error) {\n    console.error('Error al limpiar menús antiguos:', error);\n  }\n}\n\n/**\r\n * Genera un ID único para un menú\r\n * @returns {string} Un ID único\r\n */\nfunction generateId() {\n  return Math.random().toString(36).substring(2, 10) + Math.random().toString(36).substring(2, 10);\n}\n\n/**\r\n * Comprime una imagen base64\r\n * @param {string} base64Image - La imagen en formato base64\r\n * @returns {Promise<string>} - Promesa con la imagen comprimida\r\n */\nfunction compressImage(base64Image, maxWidth = 600, maxHeight = 400, quality = 0.6) {\n  return new Promise(resolve => {\n    const img = new Image();\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      let width = img.width;\n      let height = img.height;\n      if (width > height) {\n        if (width > maxWidth) {\n          height = Math.round(height * maxWidth / width);\n          width = maxWidth;\n        }\n      } else {\n        if (height > maxHeight) {\n          width = Math.round(width * maxHeight / height);\n          height = maxHeight;\n        }\n      }\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, width, height);\n\n      // Mayor compresión para imágenes compartidas\n      const compressedImage = canvas.toDataURL('image/jpeg', quality);\n      resolve(compressedImage);\n    };\n    img.src = base64Image;\n  });\n}\n\n/**\r\n * Obtiene la imagen de un elemento por su ID\r\n * @param {string} itemId - El ID del elemento\r\n * @returns {Promise<string|null>} - Promesa con la imagen en base64 o null\r\n */\nasync function getMenuImage(itemId) {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction([IMAGE_STORE], 'readonly');\n    const store = transaction.objectStore(IMAGE_STORE);\n    const request = store.get(itemId);\n    return new Promise((resolve, reject) => {\n      request.onsuccess = () => {\n        if (request.result) {\n          resolve(request.result.data);\n        } else {\n          resolve(null);\n        }\n      };\n      request.onerror = event => reject(event.target.error);\n    });\n  } catch (error) {\n    console.error('Error al obtener imagen:', error);\n    return null;\n  }\n}","map":{"version":3,"names":["DB_NAME","DB_VERSION","SHARED_MENU_STORE","openDatabase","Promise","resolve","reject","request","indexedDB","open","onerror","event","target","errorCode","onsuccess","db","result","onupgradeneeded","objectStoreNames","contains","createObjectStore","keyPath","saveMenu","menuData","menuId","generateId","console","log","length","menuObject","id","items","createdAt","Date","toISOString","transaction","store","objectStore","put","e","error","filter","item","Boolean","image","Error","getMenu","get","Array","isArray","itemsWithImages","cleanOldMenus","now","allMenus","getAll","menusToDelete","menu","createdDate","diff","getTime","days","Math","ceil","delete","random","toString","substring","compressImage","base64Image","maxWidth","maxHeight","quality","img","Image","onload","canvas","document","createElement","width","height","round","ctx","getContext","drawImage","compressedImage","toDataURL","src","getMenuImage","itemId","IMAGE_STORE","data"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/menuService.js"],"sourcesContent":["const DB_NAME = 'websapDatabase';\r\nconst DB_VERSION = 1;\r\nconst SHARED_MENU_STORE = 'sharedMenus';\r\n\r\n// Abrir la conexión a la base de datos\r\nfunction openDatabase() {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n    \r\n    request.onerror = (event) => {\r\n      reject('Error al abrir la base de datos: ' + event.target.errorCode);\r\n    };\r\n    \r\n    request.onsuccess = (event) => {\r\n      const db = event.target.result;\r\n      resolve(db);\r\n    };\r\n    \r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      \r\n      // Crear almacén para menús compartidos si no existe\r\n      if (!db.objectStoreNames.contains(SHARED_MENU_STORE)) {\r\n        db.createObjectStore(SHARED_MENU_STORE, { keyPath: 'id' });\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Guarda un menú en IndexedDB y devuelve un ID único\r\n * @param {Array} menuData - Los datos del menú a guardar\r\n * @returns {Promise<string>} - Promesa con el ID del menú guardado\r\n */\r\nexport async function saveMenu(menuData) {\r\n  try {\r\n    // Generar un ID único para el menú\r\n    const menuId = generateId();\r\n    \r\n    console.log(`Guardando menú \"${menuId}\" con ${menuData.length} elementos...`);\r\n    \r\n    // IMPORTANTE: Guardamos los elementos con sus imágenes intactas\r\n    // NO procesamos ni modificamos las imágenes aquí para preservarlas en la vista compartida\r\n    const menuObject = {\r\n      id: menuId,\r\n      items: menuData, // Guardamos todo el objeto tal cual está, con imágenes incluidas\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    \r\n    // Guardar en IndexedDB\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readwrite');\r\n    const store = transaction.objectStore(SHARED_MENU_STORE);\r\n    \r\n    await new Promise((resolve, reject) => {\r\n      const request = store.put(menuObject);\r\n      request.onsuccess = () => resolve();\r\n      request.onerror = (e) => reject(e.target.error);\r\n    });\r\n    \r\n    console.log(`Menú guardado exitosamente con ID: ${menuId}`);\r\n    console.log(`Elementos con imágenes: ${menuData.filter(item => Boolean(item.image)).length} de ${menuData.length}`);\r\n    \r\n    return menuId;\r\n  } catch (error) {\r\n    console.error('Error al guardar el menú en IndexedDB:', error);\r\n    throw new Error('No se pudo guardar el menú');\r\n  }\r\n}\r\n\r\n/**\r\n * Obtiene un menú guardado por su ID\r\n * @param {string} menuId - El ID del menú a recuperar\r\n * @returns {Promise<Array|null>} - Promesa con los datos del menú o null si no existe\r\n */\r\nexport async function getMenu(menuId) {\r\n  try {\r\n    console.log(`Intentando recuperar menú con ID: ${menuId}`);\r\n    \r\n    // Intentar recuperar de IndexedDB primero\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readonly');\r\n    const store = transaction.objectStore(SHARED_MENU_STORE);\r\n    \r\n    const result = await new Promise((resolve, reject) => {\r\n      const request = store.get(menuId);\r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = (e) => reject(e.target.error);\r\n    });\r\n    \r\n    if (result && result.items && Array.isArray(result.items)) {\r\n      console.log(`Menú encontrado en IndexedDB, contiene ${result.items.length} elementos`);\r\n      \r\n      // Verificar y registrar el estado de las imágenes\r\n      const itemsWithImages = result.items.filter(item => Boolean(item.image)).length;\r\n      console.log(`Elementos con imágenes: ${itemsWithImages} de ${result.items.length}`);\r\n      \r\n      // Devolver directamente los items del resultado\r\n      return result.items;\r\n    }\r\n    \r\n    console.log(`Menú no encontrado en ningún almacenamiento`);\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error al obtener menú:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Limpia menús antiguos que ya no son necesarios\r\n * @returns {Promise<void>}\r\n */\r\nexport async function cleanOldMenus() {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([SHARED_MENU_STORE], 'readwrite');\r\n    const store = transaction.objectStore(SHARED_MENU_STORE);\r\n    \r\n    const now = new Date();\r\n    const allMenus = await new Promise((resolve, reject) => {\r\n      const request = store.getAll();\r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = (e) => reject(e.target.error);\r\n    });\r\n    \r\n    // Eliminar menús más antiguos de 7 días\r\n    const menusToDelete = allMenus.filter(menu => {\r\n      const createdDate = new Date(menu.createdAt);\r\n      const diff = now.getTime() - createdDate.getTime();\r\n      const days = Math.ceil(diff / (1000 * 3600 * 24));\r\n      return days > 7;\r\n    });\r\n    \r\n    for (const menu of menusToDelete) {\r\n      store.delete(menu.id);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error al limpiar menús antiguos:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Genera un ID único para un menú\r\n * @returns {string} Un ID único\r\n */\r\nfunction generateId() {\r\n  return Math.random().toString(36).substring(2, 10) + \r\n         Math.random().toString(36).substring(2, 10);\r\n}\r\n\r\n/**\r\n * Comprime una imagen base64\r\n * @param {string} base64Image - La imagen en formato base64\r\n * @returns {Promise<string>} - Promesa con la imagen comprimida\r\n */\r\nfunction compressImage(base64Image, maxWidth = 600, maxHeight = 400, quality = 0.6) {\r\n  return new Promise((resolve) => {\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      const canvas = document.createElement('canvas');\r\n      \r\n      let width = img.width;\r\n      let height = img.height;\r\n      \r\n      if (width > height) {\r\n        if (width > maxWidth) {\r\n          height = Math.round((height * maxWidth) / width);\r\n          width = maxWidth;\r\n        }\r\n      } else {\r\n        if (height > maxHeight) {\r\n          width = Math.round((width * maxHeight) / height);\r\n          height = maxHeight;\r\n        }\r\n      }\r\n      \r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      \r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(img, 0, 0, width, height);\r\n      \r\n      // Mayor compresión para imágenes compartidas\r\n      const compressedImage = canvas.toDataURL('image/jpeg', quality);\r\n      resolve(compressedImage);\r\n    };\r\n    img.src = base64Image;\r\n  });\r\n}\r\n\r\n/**\r\n * Obtiene la imagen de un elemento por su ID\r\n * @param {string} itemId - El ID del elemento\r\n * @returns {Promise<string|null>} - Promesa con la imagen en base64 o null\r\n */\r\nasync function getMenuImage(itemId) {\r\n  try {\r\n    const db = await openDatabase();\r\n    const transaction = db.transaction([IMAGE_STORE], 'readonly');\r\n    const store = transaction.objectStore(IMAGE_STORE);\r\n    \r\n    const request = store.get(itemId);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = () => {\r\n        if (request.result) {\r\n          resolve(request.result.data);\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      };\r\n      request.onerror = (event) => reject(event.target.error);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener imagen:', error);\r\n    return null;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}