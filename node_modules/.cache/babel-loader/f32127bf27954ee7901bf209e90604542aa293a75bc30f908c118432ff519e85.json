{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport axios from 'axios';\nconst API_URL = 'http://localhost:3000/api';\n\n// Función para guardar token en localStorage\nconst saveToken = token => {\n  localStorage.setItem('token', token);\n};\n\n// Función para obtener token de localStorage\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// Función para eliminar token de localStorage\nconst removeToken = () => {\n  localStorage.removeItem('token');\n};\n\n// Configurar Axios\nconst setupAxiosInterceptors = () => {\n  // Interceptor de solicitudes\n  axios.interceptors.request.use(config => {\n    const token = getToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n\n  // Interceptor de respuestas\n  axios.interceptors.response.use(response => {\n    return response;\n  }, error => {\n    // Si el error es 401, puede ser que el token expiró\n    if (error.response && error.response.status === 401) {\n      removeToken();\n      // Redirigir a la página de login (esto debe ser manejado por el router)\n      if (window.location.pathname !== '/login') {\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  });\n};\n\n// Inicializar interceptores\nsetupAxiosInterceptors();\n\n// Función para iniciar sesión\nconst login = async (email, password) => {\n  console.log(`Intentando iniciar sesión como: ${email}`);\n\n  // Lista de usuarios empleados creados desde el panel de administración\n  const empleadosCreados = [{\n    id: 101,\n    email: 'pedro@gmail.com',\n    password: '123456',\n    nombre: 'Pedro Empleado',\n    roles: ['Empleado']\n  }, {\n    id: 102,\n    email: 'empleado1@example.com',\n    password: '123456',\n    nombre: 'Empleado 1',\n    roles: ['Empleado']\n  }, {\n    id: 103,\n    email: 'empleado2@example.com',\n    password: '123456',\n    nombre: 'Empleado 2',\n    roles: ['Empleado']\n  }\n  // Puedes añadir más usuarios según sea necesario\n  ];\n\n  // Verificar primero si es un empleado creado desde el panel\n  const empleadoCreado = empleadosCreados.find(u => u.email === email && u.password === password);\n  if (empleadoCreado) {\n    console.log('Autenticando empleado creado localmente:', empleadoCreado.nombre);\n\n    // Establecer el estado de autenticación\n    localStorage.setItem('isLoggedIn', 'true');\n\n    // Crear un token local\n    const token = `local_${btoa(JSON.stringify(empleadoCreado))}`;\n    saveToken(token);\n\n    // Guardar usuario en localStorage\n    localStorage.setItem('user', JSON.stringify({\n      id: empleadoCreado.id,\n      email: empleadoCreado.email,\n      nombre: empleadoCreado.nombre,\n      roles: empleadoCreado.roles\n    }));\n    return {\n      success: true,\n      user: {\n        id: empleadoCreado.id,\n        email: empleadoCreado.email,\n        nombre: empleadoCreado.nombre,\n        roles: empleadoCreado.roles\n      }\n    };\n  }\n  try {\n    // Intentar iniciar sesión con el backend\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      // No enviar cookies\n      withCredentials: false\n    });\n    if (response.status === 200 && response.data.success) {\n      // Guardar token\n      saveToken(response.data.data.token);\n\n      // Guardar información del usuario en localStorage (opcional)\n      localStorage.setItem('user', JSON.stringify(response.data.data.user));\n\n      // Establecer explícitamente el estado de autenticación\n      localStorage.setItem('isLoggedIn', 'true');\n      return {\n        success: true,\n        user: response.data.data.user\n      };\n    } else {\n      throw new Error('Respuesta inesperada del servidor');\n    }\n  } catch (error) {\n    console.error('Error al conectar con el backend, usando usuarios locales:', error);\n\n    // Datos de usuarios locales para desarrollo/pruebas\n    const localUsers = [{\n      id: 1,\n      email: 'superadmin@example.com',\n      password: '123456',\n      nombre: 'Super Administrador',\n      roles: ['Superadministrador']\n    }, {\n      id: 2,\n      email: 'admin@example.com',\n      password: '123456',\n      nombre: 'Administrador',\n      roles: ['Administrador']\n    }, {\n      id: 3,\n      email: 'empleado@example.com',\n      password: '123456',\n      nombre: 'Empleado',\n      roles: ['Empleado']\n    }];\n\n    // Buscar usuario local\n    const user = localUsers.find(u => u.email === email && u.password === password);\n    if (user) {\n      // Si el usuario local es válido, establecer el estado de autenticación\n      localStorage.setItem('isLoggedIn', 'true');\n\n      // Crear un token local\n      const token = `local_${btoa(JSON.stringify(user))}`;\n      saveToken(token);\n\n      // Guardar usuario en localStorage\n      localStorage.setItem('user', JSON.stringify({\n        id: user.id,\n        email: user.email,\n        nombre: user.nombre,\n        roles: user.roles\n      }));\n      return {\n        success: true,\n        user: {\n          id: user.id,\n          email: user.email,\n          nombre: user.nombre,\n          roles: user.roles\n        }\n      };\n    }\n\n    // Si no se encontró usuario local\n    throw new Error('Credenciales incorrectas');\n  }\n};\n\n// Función para cerrar sesión\nconst logout = () => {\n  removeToken();\n  localStorage.removeItem('user');\n  localStorage.removeItem('isLoggedIn');\n};\n\n// Función para verificar si el usuario está autenticado\nconst isAuthenticated = () => {\n  const token = getToken();\n  const isLoggedInFlag = localStorage.getItem('isLoggedIn') === 'true';\n  return !!token && isLoggedInFlag;\n};\n\n// Función para obtener el usuario actual\nconst getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  return userStr ? JSON.parse(userStr) : null;\n};\n\n// Función para verificar si el usuario tiene un rol específico\nconst hasRole = role => {\n  const user = getCurrentUser();\n  return user && user.roles && user.roles.includes(role);\n};\n\n// Función para verificar si el usuario es administrador\nconst isAdmin = () => {\n  return hasRole('Administrador') || hasRole('Superadministrador');\n};\n\n// Función para verificar si el usuario es superadministrador\nconst isSuperAdmin = () => {\n  return hasRole('Superadministrador');\n};\nexport { login, logout, isAuthenticated, getCurrentUser, hasRole, isAdmin, isSuperAdmin, getToken };","map":{"version":3,"names":["axios","API_URL","saveToken","token","localStorage","setItem","getToken","getItem","removeToken","removeItem","setupAxiosInterceptors","interceptors","request","use","config","headers","Authorization","error","Promise","reject","response","status","window","location","pathname","href","login","email","password","console","log","empleadosCreados","id","nombre","roles","empleadoCreado","find","u","btoa","JSON","stringify","success","user","post","withCredentials","data","Error","localUsers","logout","isAuthenticated","isLoggedInFlag","getCurrentUser","userStr","parse","hasRole","role","includes","isAdmin","isSuperAdmin"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:3000/api';\n\n// Función para guardar token en localStorage\nconst saveToken = (token) => {\n  localStorage.setItem('token', token);\n};\n\n// Función para obtener token de localStorage\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// Función para eliminar token de localStorage\nconst removeToken = () => {\n  localStorage.removeItem('token');\n};\n\n// Configurar Axios\nconst setupAxiosInterceptors = () => {\n  // Interceptor de solicitudes\n  axios.interceptors.request.use(\n    (config) => {\n      const token = getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    },\n    (error) => {\n      return Promise.reject(error);\n    }\n  );\n  \n  // Interceptor de respuestas\n  axios.interceptors.response.use(\n    (response) => {\n      return response;\n    },\n    (error) => {\n      // Si el error es 401, puede ser que el token expiró\n      if (error.response && error.response.status === 401) {\n        removeToken();\n        // Redirigir a la página de login (esto debe ser manejado por el router)\n        if (window.location.pathname !== '/login') {\n          window.location.href = '/login';\n        }\n      }\n      return Promise.reject(error);\n    }\n  );\n};\n\n// Inicializar interceptores\nsetupAxiosInterceptors();\n\n// Función para iniciar sesión\nconst login = async (email, password) => {\n  console.log(`Intentando iniciar sesión como: ${email}`);\n  \n  // Lista de usuarios empleados creados desde el panel de administración\n  const empleadosCreados = [\n    {\n      id: 101,\n      email: 'pedro@gmail.com',\n      password: '123456',\n      nombre: 'Pedro Empleado',\n      roles: ['Empleado']\n    },\n    {\n      id: 102,\n      email: 'empleado1@example.com',\n      password: '123456',\n      nombre: 'Empleado 1',\n      roles: ['Empleado']\n    },\n    {\n      id: 103,\n      email: 'empleado2@example.com',\n      password: '123456',\n      nombre: 'Empleado 2',\n      roles: ['Empleado']\n    }\n    // Puedes añadir más usuarios según sea necesario\n  ];\n  \n  // Verificar primero si es un empleado creado desde el panel\n  const empleadoCreado = empleadosCreados.find(u => u.email === email && u.password === password);\n  if (empleadoCreado) {\n    console.log('Autenticando empleado creado localmente:', empleadoCreado.nombre);\n    \n    // Establecer el estado de autenticación\n    localStorage.setItem('isLoggedIn', 'true');\n    \n    // Crear un token local\n    const token = `local_${btoa(JSON.stringify(empleadoCreado))}`;\n    saveToken(token);\n    \n    // Guardar usuario en localStorage\n    localStorage.setItem('user', JSON.stringify({\n      id: empleadoCreado.id,\n      email: empleadoCreado.email,\n      nombre: empleadoCreado.nombre,\n      roles: empleadoCreado.roles\n    }));\n    \n    return {\n      success: true,\n      user: {\n        id: empleadoCreado.id,\n        email: empleadoCreado.email,\n        nombre: empleadoCreado.nombre,\n        roles: empleadoCreado.roles\n      }\n    };\n  }\n  \n  try {\n    // Intentar iniciar sesión con el backend\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      // No enviar cookies\n      withCredentials: false\n    });\n    \n    if (response.status === 200 && response.data.success) {\n      // Guardar token\n      saveToken(response.data.data.token);\n      \n      // Guardar información del usuario en localStorage (opcional)\n      localStorage.setItem('user', JSON.stringify(response.data.data.user));\n      \n      // Establecer explícitamente el estado de autenticación\n      localStorage.setItem('isLoggedIn', 'true');\n      \n      return {\n        success: true,\n        user: response.data.data.user\n      };\n    } else {\n      throw new Error('Respuesta inesperada del servidor');\n    }\n  } catch (error) {\n    console.error('Error al conectar con el backend, usando usuarios locales:', error);\n    \n    // Datos de usuarios locales para desarrollo/pruebas\n    const localUsers = [\n      {\n        id: 1,\n        email: 'superadmin@example.com',\n        password: '123456',\n        nombre: 'Super Administrador',\n        roles: ['Superadministrador']\n      },\n      {\n        id: 2,\n        email: 'admin@example.com',\n        password: '123456',\n        nombre: 'Administrador',\n        roles: ['Administrador']\n      },\n      {\n        id: 3,\n        email: 'empleado@example.com',\n        password: '123456',\n        nombre: 'Empleado',\n        roles: ['Empleado']\n      }\n    ];\n    \n    // Buscar usuario local\n    const user = localUsers.find(u => u.email === email && u.password === password);\n    \n    if (user) {\n      // Si el usuario local es válido, establecer el estado de autenticación\n      localStorage.setItem('isLoggedIn', 'true');\n      \n      // Crear un token local\n      const token = `local_${btoa(JSON.stringify(user))}`;\n      saveToken(token);\n      \n      // Guardar usuario en localStorage\n      localStorage.setItem('user', JSON.stringify({\n        id: user.id,\n        email: user.email,\n        nombre: user.nombre,\n        roles: user.roles\n      }));\n      \n      return {\n        success: true,\n        user: {\n          id: user.id,\n          email: user.email,\n          nombre: user.nombre,\n          roles: user.roles\n        }\n      };\n    }\n    \n    // Si no se encontró usuario local\n    throw new Error('Credenciales incorrectas');\n  }\n};\n\n// Función para cerrar sesión\nconst logout = () => {\n  removeToken();\n  localStorage.removeItem('user');\n  localStorage.removeItem('isLoggedIn');\n};\n\n// Función para verificar si el usuario está autenticado\nconst isAuthenticated = () => {\n  const token = getToken();\n  const isLoggedInFlag = localStorage.getItem('isLoggedIn') === 'true';\n  return !!token && isLoggedInFlag;\n};\n\n// Función para obtener el usuario actual\nconst getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  return userStr ? JSON.parse(userStr) : null;\n};\n\n// Función para verificar si el usuario tiene un rol específico\nconst hasRole = (role) => {\n  const user = getCurrentUser();\n  return user && user.roles && user.roles.includes(role);\n};\n\n// Función para verificar si el usuario es administrador\nconst isAdmin = () => {\n  return hasRole('Administrador') || hasRole('Superadministrador');\n};\n\n// Función para verificar si el usuario es superadministrador\nconst isSuperAdmin = () => {\n  return hasRole('Superadministrador');\n};\n\nexport {\n  login,\n  logout,\n  isAuthenticated,\n  getCurrentUser,\n  hasRole,\n  isAdmin,\n  isSuperAdmin,\n  getToken\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}