{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\n// src/services/syncService.js\n\n// Servicio para gestionar la sincronizaci√≥n y el estado de la conexi√≥n\nimport { getPendingPlatos, updatePlatoSyncStatus, getSyncQueue, removeFromSyncQueue, preparePlatoForSync, openDB } from './indexedDBService';\n\n// Constantes desde el servicio IndexedDB\nconst PLATOS_STORE = 'platos';\nconst API_URL = 'http://localhost:3000/api';\n\n// Configuraci√≥n espec√≠fica para mejorar la sincronizaci√≥n\nconst SYNC_CONFIG = {\n  // Desactivar verificaci√≥n de disponibilidad del servidor si causa problemas\n  skipServerAvailabilityCheck: true,\n  // Limitar a√∫n m√°s el tama√±o m√°ximo de los platos para sincronizaci√≥n\n  maxPlatoSize: 30000,\n  // 30KB m√°ximo\n  // Intervalos de reintento m√°s largos\n  retryIntervals: [5000, 15000, 30000],\n  // M√°ximo n√∫mero de reintentos\n  maxRetries: 2,\n  // URL del endpoint principal para platos\n  platoUrl: `${API_URL}/platos`,\n  // URL alternativa para sincronizaci√≥n de emergencia (m√°s b√°sica)\n  emergencyPlatoUrl: `${API_URL}/platos/minimal`,\n  // Usar endpoint de sincronizaci√≥n de emergencia\n  useEmergencyEndpoint: true\n};\n\n// Estado de la sincronizaci√≥n\nlet isSyncing = false;\nlet _isOnline = navigator.onLine;\n\n// Alternativa m√°s simple para verificar la conexi√≥n\nconst isOnline = async () => {\n  // Primero comprobamos el estado de navigator.onLine\n  if (!navigator.onLine) {\n    return false;\n  }\n\n  // Intentamos hacer un fetch a un recurso peque√±o (como un favicon)\n  try {\n    const response = await fetch(`${API_URL}/favicon.ico`, {\n      method: 'HEAD',\n      // Solo pedimos las cabeceras, no el contenido\n      mode: 'no-cors',\n      // Modo no-cors para evitar problemas de CORS\n      cache: 'no-store',\n      credentials: 'omit'\n    });\n    return true; // Si no hay excepci√≥n, asumimos que estamos en l√≠nea\n  } catch (error) {\n    console.error('Error al verificar estado de conexi√≥n:', error);\n    return false;\n  }\n};\n\n// Configurar escuchas para eventos de conexi√≥n\nconst setupConnectionListeners = () => {\n  window.addEventListener('online', async () => {\n    console.log('Evento online detectado');\n    _isOnline = await isOnline();\n    if (_isOnline) {\n      console.log('Conexi√≥n a Internet restablecida');\n      // Sincronizar cuando se recupera la conexi√≥n\n      syncData();\n    }\n  });\n  window.addEventListener('offline', () => {\n    console.log('Evento offline detectado');\n    _isOnline = false;\n    console.log('Conexi√≥n a Internet perdida');\n  });\n\n  // Verificar estado inicial\n  isOnline().then(online => {\n    console.log(`Estado inicial de conexi√≥n: ${online ? 'En l√≠nea' : 'Fuera de l√≠nea'}`);\n  });\n};\n\n// Crear versi√≥n minimalista de un plato para sincronizaci√≥n de emergencia\nconst createMinimalPlato = plato => {\n  return {\n    id: plato.id,\n    name: plato.name?.substring(0, 50) || 'Plato sin nombre',\n    price: Number(plato.price) || 0,\n    description: (plato.description?.substring(0, 100) || '') + '...',\n    includesDrink: Boolean(plato.includesDrink),\n    availableQuantity: Number(plato.availableQuantity) || 0,\n    is_available: true,\n    createdAt: plato.createdAt || new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    minimal_sync: true // Marca para indicar que es una versi√≥n minimalista\n  };\n};\n\n// Verificar si el servidor est√° realmente disponible\nconst checkServerAvailability = async () => {\n  // Si la verificaci√≥n est√° desactivada, asumir que el servidor est√° disponible\n  if (SYNC_CONFIG.skipServerAvailabilityCheck) {\n    console.log('üîÑ Omitiendo verificaci√≥n de disponibilidad del servidor (desactivada en configuraci√≥n)');\n    return true;\n  }\n  try {\n    // Usar una petici√≥n minimalista sin headers adicionales\n    const xhr = new XMLHttpRequest();\n\n    // Configurar un timeout corto para la verificaci√≥n\n    return new Promise(resolve => {\n      const timeoutId = setTimeout(() => {\n        console.warn('‚è±Ô∏è Timeout en verificaci√≥n de servidor');\n        xhr.abort();\n        resolve(false);\n      }, 3000);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeoutId);\n          resolve(xhr.status >= 200 && xhr.status < 300);\n        }\n      };\n      xhr.onerror = function () {\n        clearTimeout(timeoutId);\n        console.warn('‚ùå Error en verificaci√≥n de servidor');\n        resolve(false);\n      };\n\n      // Usar m√©todo simple GET sin headers complejos\n      xhr.open('GET', `${API_URL}/ping`, true);\n      xhr.send();\n    });\n  } catch (error) {\n    console.warn('‚ö†Ô∏è Error al verificar disponibilidad del servidor:', error);\n    return false;\n  }\n};\n\n// Marcar un plato como problem√°tico para evitar intentos continuos\nconst markPlatoAsSyncProblematic = async platoId => {\n  try {\n    // Actualizar el estado del plato en IndexedDB\n    const db = await openDB();\n    const transaction = db.transaction([PLATOS_STORE], 'readwrite');\n    const store = transaction.objectStore(PLATOS_STORE);\n\n    // Obtener el plato\n    const getRequest = store.get(platoId);\n    return new Promise((resolve, reject) => {\n      getRequest.onsuccess = event => {\n        const plato = event.target.result;\n        if (!plato) {\n          reject(new Error(`Plato ID ${platoId} no encontrado`));\n          return;\n        }\n\n        // Marcar como problem√°tico y cambiar estado de sincronizaci√≥n\n        plato.sync_problematic = true;\n        plato.syncStatus = 'sync_error';\n        plato.lastSyncAttempt = new Date().toISOString();\n\n        // Guardar los cambios\n        const updateRequest = store.put(plato);\n        updateRequest.onsuccess = () => {\n          console.log(`‚úÖ Plato ID ${platoId} marcado como problem√°tico para sincronizaci√≥n`);\n          resolve(true);\n        };\n        updateRequest.onerror = event => {\n          reject(new Error(`Error al actualizar plato: ${event.target.error}`));\n        };\n      };\n      getRequest.onerror = event => {\n        reject(new Error(`Error al obtener plato: ${event.target.error}`));\n      };\n    });\n  } catch (error) {\n    console.error('‚ùå Error al marcar plato como problem√°tico:', error);\n    throw error;\n  }\n};\n\n// M√©todo de sincronizaci√≥n extremadamente simplificado para problemas persistentes\nconst syncMinimalDataOnly = async (data, platoId, retryCount = 0) => {\n  const maxRetries = SYNC_CONFIG.maxRetries;\n\n  // Usar datos ultra-minimalistas para evitar problemas de tama√±o\n  const minimalData = {\n    id: data.id,\n    name: data.name?.substring(0, 50) || 'Plato sin nombre',\n    price: Number(data.price) || 0,\n    description: data.description?.substring(0, 100) || '',\n    availableQuantity: Number(data.availableQuantity) || 0,\n    is_available: Boolean(data.is_available),\n    // Eliminar la imagen para esta sincronizaci√≥n\n    minimal_sync: true\n  };\n  return new Promise(resolve => {\n    // Establecer timeout para toda la operaci√≥n\n    const operationTimeoutId = setTimeout(() => {\n      console.warn('‚è±Ô∏è Timeout global de la operaci√≥n de sincronizaci√≥n');\n      resolve(false);\n    }, 30000);\n    const xhr = new XMLHttpRequest();\n\n    // Configurar timeouts m√°s estrictos\n    xhr.timeout = 15000;\n    xhr.onreadystatechange = async function () {\n      if (xhr.readyState === 4) {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          clearTimeout(operationTimeoutId);\n          try {\n            await updatePlatoSyncStatus(platoId, 'synced');\n            console.log(`‚úÖ Sincronizaci√≥n exitosa para plato ${platoId}`);\n          } catch (error) {\n            console.error('Error al actualizar estado:', error);\n          }\n          resolve(true);\n        } else if (xhr.status === 0) {\n          // Conexi√≥n abortada o no establecida\n          console.warn('‚ö†Ô∏è Conexi√≥n interrumpida');\n          handleRetry();\n        } else if (xhr.status === 431) {\n          console.error(`‚ùå Error 431 (Headers demasiado grandes) - Intentando m√©todo ultraminimal`);\n          tryUltraMinimalSync(minimalData, platoId).then(success => {\n            clearTimeout(operationTimeoutId);\n            resolve(success);\n          });\n        } else {\n          console.error(`‚ùå Error HTTP ${xhr.status} en sincronizaci√≥n`);\n          handleRetry();\n        }\n      }\n    };\n    xhr.ontimeout = function () {\n      console.warn('‚è±Ô∏è Timeout de la petici√≥n HTTP');\n      handleRetry();\n    };\n    xhr.onerror = function () {\n      console.error('‚ùå Error de red en sincronizaci√≥n');\n      handleRetry();\n    };\n\n    // Funci√≥n para manejar reintentos\n    const handleRetry = () => {\n      if (retryCount < maxRetries) {\n        const delay = SYNC_CONFIG.retryIntervals[retryCount] || 5000;\n        console.log(`üîÑ Reintentando en ${delay}ms... (${retryCount + 1}/${maxRetries})`);\n        setTimeout(() => {\n          clearTimeout(operationTimeoutId);\n          syncMinimalDataOnly(data, platoId, retryCount + 1).then(success => resolve(success));\n        }, delay);\n      } else {\n        clearTimeout(operationTimeoutId);\n        console.warn('‚ùå Agotados todos los reintentos de sincronizaci√≥n');\n        resolve(false);\n      }\n    };\n    try {\n      // Usar m√©todo POST con headers m√≠nimos\n      xhr.open('POST', `${API_URL}/platos/minimal`, true);\n      xhr.setRequestHeader('Content-Type', 'application/json');\n\n      // Enviar los datos minimalistas\n      xhr.send(JSON.stringify(minimalData));\n    } catch (error) {\n      console.error('‚ùå Error al iniciar la petici√≥n:', error);\n      handleRetry();\n    }\n  });\n};\n\n// M√©todo ultra-minimal usando fetch con headers m√≠nimos\nconst tryUltraMinimalSync = async (data, platoId) => {\n  try {\n    console.log('üö® Intentando sincronizaci√≥n ultra-minimal para plato:', platoId);\n    const response = await fetch(`${API_URL}/platos/minimal`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n        // No a√±adir m√°s headers\n      },\n      body: JSON.stringify(data)\n    });\n    if (response.ok) {\n      await updatePlatoSyncStatus(platoId, 'synced');\n      console.log('‚úÖ Sincronizaci√≥n ultra-minimal exitosa');\n      return true;\n    } else {\n      console.error('‚ùå Fall√≥ la sincronizaci√≥n ultra-minimal:', await response.text());\n      return false;\n    }\n  } catch (error) {\n    console.error('‚ùå Error en sincronizaci√≥n ultra-minimal:', error);\n    return false;\n  }\n};\n\n// A√±adir una funci√≥n para verificar el estado de sincronizaci√≥n\nconst checkSyncStatus = async () => {\n  try {\n    console.log('üîÑ Verificando estado de sincronizaci√≥n...');\n    const response = await fetch(`${API_URL}/platos/sync-status`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log('üìä Estado de sincronizaci√≥n:');\n      console.log(`- Total de platos en MySQL: ${data.data.total}`);\n      console.log('- Platos recientes:');\n      data.data.recentPlatos.forEach(p => console.log(`  * ${p.id}: ${p.name}`));\n      return true;\n    } else {\n      console.error('‚ùå Error al verificar estado de sincronizaci√≥n:', await response.text());\n      return false;\n    }\n  } catch (error) {\n    console.error('‚ùå Error al verificar estado de sincronizaci√≥n:', error);\n    return false;\n  }\n};\n\n// Sincronizar un plato con el servidor\nconst syncPlatoToServer = async (plato, retryCount = 0) => {\n  const maxRetries = SYNC_CONFIG.maxRetries;\n\n  // Si el plato est√° marcado como problem√°tico, omitirlo\n  if (plato.sync_problematic) {\n    console.warn(`‚ö†Ô∏è Omitiendo plato ${plato.id} marcado como problem√°tico para sincronizaci√≥n`);\n    return false;\n  }\n  console.log(`Sincronizando plato ${plato.id} con el servidor (intento ${retryCount + 1}/${maxRetries + 1})...`);\n  try {\n    // Omitir verificaci√≥n si est√° desactivada\n    if (!SYNC_CONFIG.skipServerAvailabilityCheck) {\n      // Verificar si el servidor est√° disponible\n      const serverAvailable = await checkServerAvailability();\n      if (!serverAvailable) {\n        console.error('‚ùå El servidor no est√° disponible. Posponiendo sincronizaci√≥n.');\n        return false;\n      }\n    }\n\n    // Preparar datos ultra-minimalistas para sincronizaci√≥n\n    let syncData;\n    try {\n      // Intentar usar la funci√≥n de preparaci√≥n normal\n      const preparedPlato = preparePlatoForSync(plato);\n\n      // Verificar tama√±o y aplicar l√≠mites estrictos\n      const dataSize = JSON.stringify(preparedPlato).length;\n      if (dataSize > SYNC_CONFIG.maxPlatoSize) {\n        console.warn(`‚ö†Ô∏è Plato demasiado grande (${dataSize} bytes). Usando versi√≥n ultra-minimalista.`);\n        syncData = createUltraMinimalPlato(plato);\n      } else {\n        syncData = preparedPlato;\n      }\n    } catch (prepError) {\n      console.error('‚ùå Error al preparar datos:', prepError);\n      syncData = createUltraMinimalPlato(plato);\n    }\n\n    // Usar el m√©todo m√°s confiable para sincronizaci√≥n\n    return await syncMinimalDataOnly(syncData, plato.id, retryCount);\n  } catch (error) {\n    console.error('‚ùå Error en sincronizaci√≥n:', error);\n    if (retryCount >= maxRetries) {\n      try {\n        await markPlatoAsSyncProblematic(plato.id);\n      } catch (markError) {\n        console.error('Error al marcar plato como problem√°tico:', markError);\n      }\n    }\n    return false;\n  }\n};\n\n// Versi√≥n ultra-minimalista para casos extremos\nconst createUltraMinimalPlato = plato => {\n  return {\n    id: plato.id,\n    name: plato.name?.substring(0, 30) || 'Plato sin nombre',\n    price: Number(plato.price) || 0,\n    // Omitir todo lo que no sea absolutamente esencial\n    is_ultra_minimal: true\n  };\n};\n\n// Funci√≥n para probar la conexi√≥n con el servidor\nconst testServerConnection = async () => {\n  console.log('üîÑ Probando conexi√≥n con el servidor...');\n  try {\n    // Intentar con el endpoint m√°s simple posible\n    const response = await fetch(`${API_URL}/test/minimal`, {\n      method: 'GET',\n      cache: 'no-store',\n      // NO enviar headers adicionales\n      headers: {}\n    });\n    if (response.ok) {\n      console.log('‚úÖ Conexi√≥n b√°sica al servidor establecida');\n      return true;\n    } else if (response.status === 431) {\n      console.error('‚ùå Error 431: Request Header Fields Too Large');\n      console.log('üëâ Necesitas reducir el tama√±o de las cookies o headers');\n      return false;\n    } else {\n      console.error(`‚ùå Error al conectar con el servidor: ${response.status}`);\n      return false;\n    }\n  } catch (error) {\n    console.error('‚ùå Error de red al probar la conexi√≥n:', error);\n    return false;\n  }\n};\n\n// Funci√≥n para probar la conexi√≥n a MySQL\nconst testMySQLConnection = async () => {\n  console.log('üîÑ Probando conexi√≥n a MySQL...');\n  try {\n    const response = await fetch(`${API_URL}/test/db`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      console.log('‚úÖ Conexi√≥n a MySQL establecida:', data);\n\n      // Mostrar informaci√≥n clara sobre la base de datos\n      if (data.data && data.data.database) {\n        console.log(`üìä Base de datos MySQL: ${data.data.database}`);\n        console.log(`üìä Tablas disponibles: ${data.data.tables.join(', ')}`);\n      }\n      return true;\n    } else {\n      console.error('‚ùå Error al conectar con MySQL:', await response.text());\n      return false;\n    }\n  } catch (error) {\n    console.error('‚ùå Error de red al probar la conexi√≥n MySQL:', error);\n    return false;\n  }\n};\n\n// Definir la funci√≥n syncData que falta\nconst syncData = async () => {\n  if (!(await isOnline())) {\n    console.log('Sin conexi√≥n a Internet, la sincronizaci√≥n no es posible');\n    return false;\n  }\n  try {\n    console.log('Iniciando sincronizaci√≥n de datos...');\n\n    // Procesar la cola de sincronizaci√≥n\n    await processSyncQueue();\n\n    // Sincronizar platos pendientes que no est√©n en la cola\n    const pendingPlatos = await getPendingPlatos();\n    console.log(`Encontrados ${pendingPlatos.length} platos pendientes de sincronizaci√≥n`);\n    for (const plato of pendingPlatos) {\n      await syncPlatoToServer(plato);\n    }\n    console.log('Sincronizaci√≥n completada con √©xito');\n    return true;\n  } catch (error) {\n    console.error('Error durante la sincronizaci√≥n:', error);\n    return false;\n  }\n};\n\n// Modificar initSyncService para probar tambi√©n la conexi√≥n MySQL\nconst initSyncService = () => {\n  console.log('üîÑ Inicializando servicio de sincronizaci√≥n...');\n\n  // Probar solo la conexi√≥n al API ya que la funci√≥n para MySQL puede no estar disponible todav√≠a\n  testServerConnection().then(isApiConnected => {\n    console.log(`‚úÖ Estado de conexi√≥n API: ${isApiConnected}`);\n    if (isApiConnected) {\n      // Configurar sincronizaci√≥n como antes\n      setupConnectionListeners();\n      syncData();\n      setInterval(async () => {\n        if ((await isOnline()) && !isSyncing) {\n          syncData();\n        }\n      }, 60000);\n    } else {\n      console.error('‚ùå No se pudo establecer conexi√≥n con el servidor API.');\n    }\n  });\n  console.log('‚öôÔ∏è Servicio de sincronizaci√≥n inicializado');\n};\n\n// Exportar las funciones\nexport { initSyncService, syncData, isOnline, _isOnline, testServerConnection, testMySQLConnection, checkSyncStatus };","map":{"version":3,"names":["getPendingPlatos","updatePlatoSyncStatus","getSyncQueue","removeFromSyncQueue","preparePlatoForSync","openDB","PLATOS_STORE","API_URL","SYNC_CONFIG","skipServerAvailabilityCheck","maxPlatoSize","retryIntervals","maxRetries","platoUrl","emergencyPlatoUrl","useEmergencyEndpoint","isSyncing","_isOnline","navigator","onLine","isOnline","response","fetch","method","mode","cache","credentials","error","console","setupConnectionListeners","window","addEventListener","log","syncData","then","online","createMinimalPlato","plato","id","name","substring","price","Number","description","includesDrink","Boolean","availableQuantity","is_available","createdAt","Date","toISOString","updatedAt","minimal_sync","checkServerAvailability","xhr","XMLHttpRequest","Promise","resolve","timeoutId","setTimeout","warn","abort","onreadystatechange","readyState","clearTimeout","status","onerror","open","send","markPlatoAsSyncProblematic","platoId","db","transaction","store","objectStore","getRequest","get","reject","onsuccess","event","target","result","Error","sync_problematic","syncStatus","lastSyncAttempt","updateRequest","put","syncMinimalDataOnly","data","retryCount","minimalData","operationTimeoutId","timeout","handleRetry","tryUltraMinimalSync","success","ontimeout","delay","setRequestHeader","JSON","stringify","headers","body","ok","text","checkSyncStatus","json","total","recentPlatos","forEach","p","syncPlatoToServer","serverAvailable","preparedPlato","dataSize","length","createUltraMinimalPlato","prepError","markError","is_ultra_minimal","testServerConnection","testMySQLConnection","database","tables","join","processSyncQueue","pendingPlatos","initSyncService","isApiConnected","setInterval"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/syncService.js"],"sourcesContent":["// src/services/syncService.js\r\n\r\n// Servicio para gestionar la sincronizaci√≥n y el estado de la conexi√≥n\r\nimport { \r\n  getPendingPlatos, \r\n  updatePlatoSyncStatus, \r\n  getSyncQueue, \r\n  removeFromSyncQueue,\r\n  preparePlatoForSync,\r\n  openDB\r\n} from './indexedDBService';\r\n\r\n// Constantes desde el servicio IndexedDB\r\nconst PLATOS_STORE = 'platos';\r\nconst API_URL = 'http://localhost:3000/api';\r\n\r\n// Configuraci√≥n espec√≠fica para mejorar la sincronizaci√≥n\r\nconst SYNC_CONFIG = {\r\n  // Desactivar verificaci√≥n de disponibilidad del servidor si causa problemas\r\n  skipServerAvailabilityCheck: true,\r\n  // Limitar a√∫n m√°s el tama√±o m√°ximo de los platos para sincronizaci√≥n\r\n  maxPlatoSize: 30000, // 30KB m√°ximo\r\n  // Intervalos de reintento m√°s largos\r\n  retryIntervals: [5000, 15000, 30000],\r\n  // M√°ximo n√∫mero de reintentos\r\n  maxRetries: 2,\r\n  // URL del endpoint principal para platos\r\n  platoUrl: `${API_URL}/platos`,\r\n  // URL alternativa para sincronizaci√≥n de emergencia (m√°s b√°sica)\r\n  emergencyPlatoUrl: `${API_URL}/platos/minimal`,\r\n  // Usar endpoint de sincronizaci√≥n de emergencia\r\n  useEmergencyEndpoint: true\r\n};\r\n\r\n// Estado de la sincronizaci√≥n\r\nlet isSyncing = false;\r\nlet _isOnline = navigator.onLine;\r\n\r\n// Alternativa m√°s simple para verificar la conexi√≥n\r\nconst isOnline = async () => {\r\n  // Primero comprobamos el estado de navigator.onLine\r\n  if (!navigator.onLine) {\r\n    return false;\r\n  }\r\n  \r\n  // Intentamos hacer un fetch a un recurso peque√±o (como un favicon)\r\n  try {\r\n    const response = await fetch(`${API_URL}/favicon.ico`, {\r\n      method: 'HEAD', // Solo pedimos las cabeceras, no el contenido\r\n      mode: 'no-cors', // Modo no-cors para evitar problemas de CORS\r\n      cache: 'no-store',\r\n      credentials: 'omit'\r\n    });\r\n    \r\n    return true; // Si no hay excepci√≥n, asumimos que estamos en l√≠nea\r\n  } catch (error) {\r\n    console.error('Error al verificar estado de conexi√≥n:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Configurar escuchas para eventos de conexi√≥n\r\nconst setupConnectionListeners = () => {\r\n  window.addEventListener('online', async () => {\r\n    console.log('Evento online detectado');\r\n    _isOnline = await isOnline();\r\n    if (_isOnline) {\r\n      console.log('Conexi√≥n a Internet restablecida');\r\n      // Sincronizar cuando se recupera la conexi√≥n\r\n      syncData();\r\n    }\r\n  });\r\n  \r\n  window.addEventListener('offline', () => {\r\n    console.log('Evento offline detectado');\r\n    _isOnline = false;\r\n    console.log('Conexi√≥n a Internet perdida');\r\n  });\r\n  \r\n  // Verificar estado inicial\r\n  isOnline().then(online => {\r\n    console.log(`Estado inicial de conexi√≥n: ${online ? 'En l√≠nea' : 'Fuera de l√≠nea'}`);\r\n  });\r\n};\r\n\r\n// Crear versi√≥n minimalista de un plato para sincronizaci√≥n de emergencia\r\nconst createMinimalPlato = (plato) => {\r\n  return {\r\n    id: plato.id,\r\n    name: plato.name?.substring(0, 50) || 'Plato sin nombre',\r\n    price: Number(plato.price) || 0,\r\n    description: (plato.description?.substring(0, 100) || '') + '...',\r\n    includesDrink: Boolean(plato.includesDrink),\r\n    availableQuantity: Number(plato.availableQuantity) || 0,\r\n    is_available: true,\r\n    createdAt: plato.createdAt || new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    minimal_sync: true  // Marca para indicar que es una versi√≥n minimalista\r\n  };\r\n};\r\n\r\n// Verificar si el servidor est√° realmente disponible\r\nconst checkServerAvailability = async () => {\r\n  // Si la verificaci√≥n est√° desactivada, asumir que el servidor est√° disponible\r\n  if (SYNC_CONFIG.skipServerAvailabilityCheck) {\r\n    console.log('üîÑ Omitiendo verificaci√≥n de disponibilidad del servidor (desactivada en configuraci√≥n)');\r\n    return true;\r\n  }\r\n  \r\n  try {\r\n    // Usar una petici√≥n minimalista sin headers adicionales\r\n    const xhr = new XMLHttpRequest();\r\n    \r\n    // Configurar un timeout corto para la verificaci√≥n\r\n    return new Promise((resolve) => {\r\n      const timeoutId = setTimeout(() => {\r\n        console.warn('‚è±Ô∏è Timeout en verificaci√≥n de servidor');\r\n        xhr.abort();\r\n        resolve(false);\r\n      }, 3000);\r\n      \r\n      xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4) {\r\n          clearTimeout(timeoutId);\r\n          resolve(xhr.status >= 200 && xhr.status < 300);\r\n        }\r\n      };\r\n      \r\n      xhr.onerror = function() {\r\n        clearTimeout(timeoutId);\r\n        console.warn('‚ùå Error en verificaci√≥n de servidor');\r\n        resolve(false);\r\n      };\r\n      \r\n      // Usar m√©todo simple GET sin headers complejos\r\n      xhr.open('GET', `${API_URL}/ping`, true);\r\n      xhr.send();\r\n    });\r\n  } catch (error) {\r\n    console.warn('‚ö†Ô∏è Error al verificar disponibilidad del servidor:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Marcar un plato como problem√°tico para evitar intentos continuos\r\nconst markPlatoAsSyncProblematic = async (platoId) => {\r\n  try {\r\n    // Actualizar el estado del plato en IndexedDB\r\n    const db = await openDB();\r\n    const transaction = db.transaction([PLATOS_STORE], 'readwrite');\r\n    const store = transaction.objectStore(PLATOS_STORE);\r\n    \r\n    // Obtener el plato\r\n    const getRequest = store.get(platoId);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      getRequest.onsuccess = (event) => {\r\n        const plato = event.target.result;\r\n        \r\n        if (!plato) {\r\n          reject(new Error(`Plato ID ${platoId} no encontrado`));\r\n          return;\r\n        }\r\n        \r\n        // Marcar como problem√°tico y cambiar estado de sincronizaci√≥n\r\n        plato.sync_problematic = true;\r\n        plato.syncStatus = 'sync_error';\r\n        plato.lastSyncAttempt = new Date().toISOString();\r\n        \r\n        // Guardar los cambios\r\n        const updateRequest = store.put(plato);\r\n        \r\n        updateRequest.onsuccess = () => {\r\n          console.log(`‚úÖ Plato ID ${platoId} marcado como problem√°tico para sincronizaci√≥n`);\r\n          resolve(true);\r\n        };\r\n        \r\n        updateRequest.onerror = (event) => {\r\n          reject(new Error(`Error al actualizar plato: ${event.target.error}`));\r\n        };\r\n      };\r\n      \r\n      getRequest.onerror = (event) => {\r\n        reject(new Error(`Error al obtener plato: ${event.target.error}`));\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('‚ùå Error al marcar plato como problem√°tico:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// M√©todo de sincronizaci√≥n extremadamente simplificado para problemas persistentes\r\nconst syncMinimalDataOnly = async (data, platoId, retryCount = 0) => {\r\n  const maxRetries = SYNC_CONFIG.maxRetries;\r\n  \r\n  // Usar datos ultra-minimalistas para evitar problemas de tama√±o\r\n  const minimalData = {\r\n    id: data.id,\r\n    name: data.name?.substring(0, 50) || 'Plato sin nombre',\r\n    price: Number(data.price) || 0,\r\n    description: data.description?.substring(0, 100) || '',\r\n    availableQuantity: Number(data.availableQuantity) || 0,\r\n    is_available: Boolean(data.is_available),\r\n    // Eliminar la imagen para esta sincronizaci√≥n\r\n    minimal_sync: true\r\n  };\r\n  \r\n  return new Promise((resolve) => {\r\n    // Establecer timeout para toda la operaci√≥n\r\n    const operationTimeoutId = setTimeout(() => {\r\n      console.warn('‚è±Ô∏è Timeout global de la operaci√≥n de sincronizaci√≥n');\r\n      resolve(false);\r\n    }, 30000);\r\n    \r\n    const xhr = new XMLHttpRequest();\r\n    \r\n    // Configurar timeouts m√°s estrictos\r\n    xhr.timeout = 15000;\r\n    \r\n    xhr.onreadystatechange = async function() {\r\n      if (xhr.readyState === 4) {\r\n        if (xhr.status >= 200 && xhr.status < 300) {\r\n          clearTimeout(operationTimeoutId);\r\n          try {\r\n            await updatePlatoSyncStatus(platoId, 'synced');\r\n            console.log(`‚úÖ Sincronizaci√≥n exitosa para plato ${platoId}`);\r\n          } catch (error) {\r\n            console.error('Error al actualizar estado:', error);\r\n          }\r\n          resolve(true);\r\n        } else if (xhr.status === 0) {\r\n          // Conexi√≥n abortada o no establecida\r\n          console.warn('‚ö†Ô∏è Conexi√≥n interrumpida');\r\n          handleRetry();\r\n        } else if (xhr.status === 431) {\r\n          console.error(`‚ùå Error 431 (Headers demasiado grandes) - Intentando m√©todo ultraminimal`);\r\n          tryUltraMinimalSync(minimalData, platoId).then(success => {\r\n            clearTimeout(operationTimeoutId);\r\n            resolve(success);\r\n          });\r\n        } else {\r\n          console.error(`‚ùå Error HTTP ${xhr.status} en sincronizaci√≥n`);\r\n          handleRetry();\r\n        }\r\n      }\r\n    };\r\n    \r\n    xhr.ontimeout = function() {\r\n      console.warn('‚è±Ô∏è Timeout de la petici√≥n HTTP');\r\n      handleRetry();\r\n    };\r\n    \r\n    xhr.onerror = function() {\r\n      console.error('‚ùå Error de red en sincronizaci√≥n');\r\n      handleRetry();\r\n    };\r\n    \r\n    // Funci√≥n para manejar reintentos\r\n    const handleRetry = () => {\r\n      if (retryCount < maxRetries) {\r\n        const delay = SYNC_CONFIG.retryIntervals[retryCount] || 5000;\r\n        console.log(`üîÑ Reintentando en ${delay}ms... (${retryCount + 1}/${maxRetries})`);\r\n        \r\n        setTimeout(() => {\r\n          clearTimeout(operationTimeoutId);\r\n          syncMinimalDataOnly(data, platoId, retryCount + 1)\r\n            .then(success => resolve(success));\r\n        }, delay);\r\n      } else {\r\n        clearTimeout(operationTimeoutId);\r\n        console.warn('‚ùå Agotados todos los reintentos de sincronizaci√≥n');\r\n        resolve(false);\r\n      }\r\n    };\r\n    \r\n    try {\r\n      // Usar m√©todo POST con headers m√≠nimos\r\n      xhr.open('POST', `${API_URL}/platos/minimal`, true);\r\n      xhr.setRequestHeader('Content-Type', 'application/json');\r\n      \r\n      // Enviar los datos minimalistas\r\n      xhr.send(JSON.stringify(minimalData));\r\n    } catch (error) {\r\n      console.error('‚ùå Error al iniciar la petici√≥n:', error);\r\n      handleRetry();\r\n    }\r\n  });\r\n};\r\n\r\n// M√©todo ultra-minimal usando fetch con headers m√≠nimos\r\nconst tryUltraMinimalSync = async (data, platoId) => {\r\n  try {\r\n    console.log('üö® Intentando sincronizaci√≥n ultra-minimal para plato:', platoId);\r\n    \r\n    const response = await fetch(`${API_URL}/platos/minimal`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n        // No a√±adir m√°s headers\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n    \r\n    if (response.ok) {\r\n      await updatePlatoSyncStatus(platoId, 'synced');\r\n      console.log('‚úÖ Sincronizaci√≥n ultra-minimal exitosa');\r\n      return true;\r\n    } else {\r\n      console.error('‚ùå Fall√≥ la sincronizaci√≥n ultra-minimal:', await response.text());\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('‚ùå Error en sincronizaci√≥n ultra-minimal:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// A√±adir una funci√≥n para verificar el estado de sincronizaci√≥n\r\nconst checkSyncStatus = async () => {\r\n  try {\r\n    console.log('üîÑ Verificando estado de sincronizaci√≥n...');\r\n    \r\n    const response = await fetch(`${API_URL}/platos/sync-status`, {\r\n      method: 'GET',\r\n      headers: { 'Accept': 'application/json' }\r\n    });\r\n    \r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      console.log('üìä Estado de sincronizaci√≥n:');\r\n      console.log(`- Total de platos en MySQL: ${data.data.total}`);\r\n      console.log('- Platos recientes:');\r\n      data.data.recentPlatos.forEach(p => console.log(`  * ${p.id}: ${p.name}`));\r\n      return true;\r\n    } else {\r\n      console.error('‚ùå Error al verificar estado de sincronizaci√≥n:', await response.text());\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('‚ùå Error al verificar estado de sincronizaci√≥n:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Sincronizar un plato con el servidor\r\nconst syncPlatoToServer = async (plato, retryCount = 0) => {\r\n  const maxRetries = SYNC_CONFIG.maxRetries;\r\n  \r\n  // Si el plato est√° marcado como problem√°tico, omitirlo\r\n  if (plato.sync_problematic) {\r\n    console.warn(`‚ö†Ô∏è Omitiendo plato ${plato.id} marcado como problem√°tico para sincronizaci√≥n`);\r\n    return false;\r\n  }\r\n  \r\n  console.log(`Sincronizando plato ${plato.id} con el servidor (intento ${retryCount + 1}/${maxRetries + 1})...`);\r\n  \r\n  try {\r\n    // Omitir verificaci√≥n si est√° desactivada\r\n    if (!SYNC_CONFIG.skipServerAvailabilityCheck) {\r\n      // Verificar si el servidor est√° disponible\r\n      const serverAvailable = await checkServerAvailability();\r\n      if (!serverAvailable) {\r\n        console.error('‚ùå El servidor no est√° disponible. Posponiendo sincronizaci√≥n.');\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    // Preparar datos ultra-minimalistas para sincronizaci√≥n\r\n    let syncData;\r\n    \r\n    try {\r\n      // Intentar usar la funci√≥n de preparaci√≥n normal\r\n      const preparedPlato = preparePlatoForSync(plato);\r\n      \r\n      // Verificar tama√±o y aplicar l√≠mites estrictos\r\n      const dataSize = JSON.stringify(preparedPlato).length;\r\n      if (dataSize > SYNC_CONFIG.maxPlatoSize) {\r\n        console.warn(`‚ö†Ô∏è Plato demasiado grande (${dataSize} bytes). Usando versi√≥n ultra-minimalista.`);\r\n        syncData = createUltraMinimalPlato(plato);\r\n      } else {\r\n        syncData = preparedPlato;\r\n      }\r\n    } catch (prepError) {\r\n      console.error('‚ùå Error al preparar datos:', prepError);\r\n      syncData = createUltraMinimalPlato(plato);\r\n    }\r\n    \r\n    // Usar el m√©todo m√°s confiable para sincronizaci√≥n\r\n    return await syncMinimalDataOnly(syncData, plato.id, retryCount);\r\n  } catch (error) {\r\n    console.error('‚ùå Error en sincronizaci√≥n:', error);\r\n    \r\n    if (retryCount >= maxRetries) {\r\n      try {\r\n        await markPlatoAsSyncProblematic(plato.id);\r\n      } catch (markError) {\r\n        console.error('Error al marcar plato como problem√°tico:', markError);\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n};\r\n\r\n// Versi√≥n ultra-minimalista para casos extremos\r\nconst createUltraMinimalPlato = (plato) => {\r\n  return {\r\n    id: plato.id,\r\n    name: plato.name?.substring(0, 30) || 'Plato sin nombre',\r\n    price: Number(plato.price) || 0,\r\n    // Omitir todo lo que no sea absolutamente esencial\r\n    is_ultra_minimal: true\r\n  };\r\n};\r\n\r\n// Funci√≥n para probar la conexi√≥n con el servidor\r\nconst testServerConnection = async () => {\r\n  console.log('üîÑ Probando conexi√≥n con el servidor...');\r\n  \r\n  try {\r\n    // Intentar con el endpoint m√°s simple posible\r\n    const response = await fetch(`${API_URL}/test/minimal`, { \r\n      method: 'GET',\r\n      cache: 'no-store',\r\n      // NO enviar headers adicionales\r\n      headers: {}\r\n    });\r\n    \r\n    if (response.ok) {\r\n      console.log('‚úÖ Conexi√≥n b√°sica al servidor establecida');\r\n      return true;\r\n    } else if (response.status === 431) {\r\n      console.error('‚ùå Error 431: Request Header Fields Too Large');\r\n      console.log('üëâ Necesitas reducir el tama√±o de las cookies o headers');\r\n      return false;\r\n    } else {\r\n      console.error(`‚ùå Error al conectar con el servidor: ${response.status}`);\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('‚ùå Error de red al probar la conexi√≥n:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Funci√≥n para probar la conexi√≥n a MySQL\r\nconst testMySQLConnection = async () => {\r\n  console.log('üîÑ Probando conexi√≥n a MySQL...');\r\n  \r\n  try {\r\n    const response = await fetch(`${API_URL}/test/db`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      console.log('‚úÖ Conexi√≥n a MySQL establecida:', data);\r\n      \r\n      // Mostrar informaci√≥n clara sobre la base de datos\r\n      if (data.data && data.data.database) {\r\n        console.log(`üìä Base de datos MySQL: ${data.data.database}`);\r\n        console.log(`üìä Tablas disponibles: ${data.data.tables.join(', ')}`);\r\n      }\r\n      \r\n      return true;\r\n    } else {\r\n      console.error('‚ùå Error al conectar con MySQL:', await response.text());\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('‚ùå Error de red al probar la conexi√≥n MySQL:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Definir la funci√≥n syncData que falta\r\nconst syncData = async () => {\r\n  if (!await isOnline()) {\r\n    console.log('Sin conexi√≥n a Internet, la sincronizaci√≥n no es posible');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    console.log('Iniciando sincronizaci√≥n de datos...');\r\n    \r\n    // Procesar la cola de sincronizaci√≥n\r\n    await processSyncQueue();\r\n    \r\n    // Sincronizar platos pendientes que no est√©n en la cola\r\n    const pendingPlatos = await getPendingPlatos();\r\n    console.log(`Encontrados ${pendingPlatos.length} platos pendientes de sincronizaci√≥n`);\r\n    \r\n    for (const plato of pendingPlatos) {\r\n      await syncPlatoToServer(plato);\r\n    }\r\n    \r\n    console.log('Sincronizaci√≥n completada con √©xito');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error durante la sincronizaci√≥n:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Modificar initSyncService para probar tambi√©n la conexi√≥n MySQL\r\nconst initSyncService = () => {\r\n  console.log('üîÑ Inicializando servicio de sincronizaci√≥n...');\r\n  \r\n  // Probar solo la conexi√≥n al API ya que la funci√≥n para MySQL puede no estar disponible todav√≠a\r\n  testServerConnection().then(isApiConnected => {\r\n    console.log(`‚úÖ Estado de conexi√≥n API: ${isApiConnected}`);\r\n    \r\n    if (isApiConnected) {\r\n      // Configurar sincronizaci√≥n como antes\r\n      setupConnectionListeners();\r\n      syncData();\r\n      \r\n      setInterval(async () => {\r\n        if (await isOnline() && !isSyncing) {\r\n          syncData();\r\n        }\r\n      }, 60000);\r\n    } else {\r\n      console.error('‚ùå No se pudo establecer conexi√≥n con el servidor API.');\r\n    }\r\n  });\r\n  \r\n  console.log('‚öôÔ∏è Servicio de sincronizaci√≥n inicializado');\r\n};\r\n\r\n// Exportar las funciones\r\nexport {\r\n  initSyncService,\r\n  syncData,\r\n  isOnline,\r\n  _isOnline,\r\n  testServerConnection,\r\n  testMySQLConnection,\r\n  checkSyncStatus\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}