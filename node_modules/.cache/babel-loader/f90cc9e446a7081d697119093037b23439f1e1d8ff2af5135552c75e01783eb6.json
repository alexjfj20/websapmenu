{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chart-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"loading-message\"\n};\nconst _hoisted_3 = {\n  key: 2,\n  class: \"no-data-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Bar = _resolveComponent(\"Bar\");\n  const _component_Line = _resolveComponent(\"Line\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_ctx.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \" Cargando gráfico... \")) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_ctx.chartType === 'bar' && _ctx.isChartDataValid ? (_openBlock(), _createBlock(_component_Bar, {\n    key: 0,\n    data: _ctx.chartData,\n    options: _ctx.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])) : _ctx.chartType === 'line' && _ctx.isChartDataValid ? (_openBlock(), _createBlock(_component_Line, {\n    key: 1,\n    data: _ctx.chartData,\n    options: _ctx.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, \" No hay suficientes datos para mostrar el gráfico \"))], 64 /* STABLE_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_ctx","loading","_hoisted_2","_Fragment","chartType","isChartDataValid","_createBlock","_component_Bar","data","chartData","options","chartOptions","_component_Line","_hoisted_3"],"sources":["F:\\Driver google\\VUE.JS-2\\temp\\websap\\src\\components\\SalesChartComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\">\r\n    <div v-if=\"loading\" class=\"loading-message\">\r\n      Cargando gráfico...\r\n    </div>\r\n    <template v-else>\r\n      <Bar \r\n        v-if=\"chartType === 'bar' && isChartDataValid\" \r\n        :data=\"chartData\" \r\n        :options=\"chartOptions\" \r\n      />\r\n      <Line \r\n        v-else-if=\"chartType === 'line' && isChartDataValid\" \r\n        :data=\"chartData\" \r\n        :options=\"chartOptions\" \r\n      />\r\n      <div v-else class=\"no-data-message\">\r\n        No hay suficientes datos para mostrar el gráfico\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent, ref, computed, watch, onMounted } from 'vue';\r\nimport { Bar, Line } from 'vue-chartjs';\r\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, PointElement, LineElement } from 'chart.js';\r\n\r\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, PointElement, LineElement);\r\n\r\nexport default defineComponent({\r\n  name: 'SalesChartComponent',\r\n  components: { Bar, Line },\r\n  props: {\r\n    chartType: {\r\n      type: String,\r\n      default: 'bar'\r\n    },\r\n    items: {\r\n      type: Array,\r\n      required: true,\r\n      default: () => []\r\n    }\r\n  },\r\n  setup(props) {\r\n    // Inicializamos chartDataRef con un objeto válido que tiene datasets\r\n    const chartDataRef = ref({\r\n      labels: [],\r\n      datasets: [{\r\n        label: 'Cargando datos...',\r\n        data: [],\r\n        backgroundColor: [],\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n        borderWidth: 1\r\n      }]\r\n    });\r\n    \r\n    const loading = ref(true);\r\n\r\n    // Verificar si chartData es válido para renderizar\r\n    const isChartDataValid = computed(() => {\r\n      return chartDataRef.value && \r\n             chartDataRef.value.datasets && \r\n             Array.isArray(chartDataRef.value.datasets) &&\r\n             chartDataRef.value.datasets.length > 0;\r\n    });\r\n\r\n    // Actualizar chartData cuando cambian los items\r\n    const updateChartData = () => {\r\n      loading.value = true;\r\n      \r\n      try {\r\n        // Si no hay items, establecer chartData como un objeto vacío pero válido\r\n        if (!props.items || props.items.length === 0) {\r\n          chartDataRef.value = {\r\n            labels: [],\r\n            datasets: [{\r\n              label: 'Sin datos',\r\n              data: [],\r\n              backgroundColor: [],\r\n              borderColor: 'rgba(75, 192, 192, 1)',\r\n              borderWidth: 1\r\n            }]\r\n          };\r\n        } else {\r\n          // Preparar los datos para el gráfico\r\n          const labels = props.items.map(item => item.name || 'Sin nombre');\r\n          const data = props.items.map(item => item.quantity || 0);\r\n          const backgroundColor = props.items.map(() => {\r\n            const r = Math.floor(Math.random() * 155) + 100;\r\n            const g = Math.floor(Math.random() * 155) + 100;\r\n            const b = Math.floor(Math.random() * 155) + 100;\r\n            return `rgba(${r}, ${g}, ${b}, 0.6)`;\r\n          });\r\n\r\n          // Establecer chartData\r\n          chartDataRef.value = {\r\n            labels,\r\n            datasets: [\r\n              {\r\n                label: 'Cantidad vendida',\r\n                data,\r\n                backgroundColor,\r\n                borderColor: 'rgba(75, 192, 192, 1)',\r\n                borderWidth: 1\r\n              }\r\n            ]\r\n          };\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al actualizar datos del gráfico:', error);\r\n        \r\n        // En caso de error, establecemos un estado válido pero vacío\r\n        chartDataRef.value = {\r\n          labels: [],\r\n          datasets: [{\r\n            label: 'Error al cargar datos',\r\n            data: [],\r\n            backgroundColor: [],\r\n            borderColor: 'rgba(255, 99, 132, 1)',\r\n            borderWidth: 1\r\n          }]\r\n        };\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    // Observar cambios en los items para actualizar el chartData de manera segura\r\n    watch(() => props.items, (newItems) => {\r\n      // Verificamos que items sea un array antes de procesarlo\r\n      if (Array.isArray(newItems)) {\r\n        updateChartData();\r\n      } else {\r\n        console.warn('Los items proporcionados no son un array:', newItems);\r\n        // Establecer un estado válido pero vacío\r\n        chartDataRef.value = {\r\n          labels: [],\r\n          datasets: [{\r\n            label: 'Formato de datos incorrecto',\r\n            data: [],\r\n            backgroundColor: [],\r\n            borderColor: 'rgba(255, 99, 132, 1)',\r\n            borderWidth: 1\r\n          }]\r\n        };\r\n        loading.value = false;\r\n      }\r\n    }, { deep: true, immediate: true });\r\n\r\n    // También observar cambios en el tipo de gráfico\r\n    watch(() => props.chartType, () => {\r\n      // No es necesario actualizar chartData, solo asegurarse de que no esté cargando\r\n      if (loading.value) loading.value = false;\r\n    });\r\n\r\n    // Al montar el componente, inicializar chartData\r\n    onMounted(() => {\r\n      updateChartData();\r\n    });\r\n\r\n    const chartOptions = computed(() => {\r\n      return {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n            title: {\r\n              display: true,\r\n              text: 'Cantidad'\r\n            },\r\n            ticks: {\r\n              precision: 0\r\n            }\r\n          },\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'Productos'\r\n            }\r\n          }\r\n        },\r\n        plugins: {\r\n          legend: {\r\n            display: true,\r\n            position: 'top'\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: props.chartType === 'bar' ? 'Productos más vendidos' : 'Tendencia de ventas'\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    return {\r\n      chartData: chartDataRef,\r\n      chartOptions,\r\n      isChartDataValid,\r\n      loading\r\n    };\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.chart-container {\r\n  position: relative;\r\n  height: 400px;\r\n  width: 100%;\r\n  margin: 20px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.loading-message, .no-data-message {\r\n  color: #666;\r\n  font-style: italic;\r\n  text-align: center;\r\n  padding: 20px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 8px;\r\n  width: 100%;\r\n}\r\n\r\n.loading-message {\r\n  background-color: #f0f8ff;\r\n  animation: pulse 1.5s infinite;\r\n}\r\n\r\n@keyframes pulse {\r\n  0% { opacity: 0.6; }\r\n  50% { opacity: 1; }\r\n  100% { opacity: 0.6; }\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;EAD9BC,GAAA;EAEwBD,KAAK,EAAC;;;EAF9BC,GAAA;EAgBkBD,KAAK,EAAC;;;;;uBAftBE,mBAAA,CAmBM,OAnBNC,UAmBM,GAlBOC,IAAA,CAAAC,OAAO,I,cAAlBH,mBAAA,CAEM,OAFNI,UAEM,EAFsC,uBAE5C,M,cACAJ,mBAAA,CAcWK,SAAA;IAnBfN,GAAA;EAAA,IAOcG,IAAA,CAAAI,SAAS,cAAcJ,IAAA,CAAAK,gBAAgB,I,cAD/CC,YAAA,CAIEC,cAAA;IAVRV,GAAA;IAQSW,IAAI,EAAER,IAAA,CAAAS,SAAS;IACfC,OAAO,EAAEV,IAAA,CAAAW;kDAGCX,IAAA,CAAAI,SAAS,eAAeJ,IAAA,CAAAK,gBAAgB,I,cADrDC,YAAA,CAIEM,eAAA;IAfRf,GAAA;IAaSW,IAAI,EAAER,IAAA,CAAAS,SAAS;IACfC,OAAO,EAAEV,IAAA,CAAAW;iEAEZb,mBAAA,CAEM,OAFNe,UAEM,EAF8B,oDAEpC,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}