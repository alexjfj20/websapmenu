{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport axios from 'axios';\nconst API_URL = 'http://localhost:3000/api';\n\n// Función para guardar token en localStorage\nconst saveToken = token => {\n  localStorage.setItem('token', token);\n};\n\n// Función para obtener token de localStorage\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// Función para eliminar token de localStorage\nconst removeToken = () => {\n  localStorage.removeItem('token');\n};\n\n// Configurar Axios\nconst setupAxiosInterceptors = () => {\n  // Interceptor de solicitudes\n  axios.interceptors.request.use(config => {\n    const token = getToken();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n\n  // Interceptor de respuestas\n  axios.interceptors.response.use(response => {\n    return response;\n  }, error => {\n    // Si el error es 401, puede ser que el token expiró\n    if (error.response && error.response.status === 401) {\n      removeToken();\n      // Redirigir a la página de login (esto debe ser manejado por el router)\n      if (window.location.pathname !== '/login') {\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  });\n};\n\n// Inicializar interceptores\nsetupAxiosInterceptors();\n\n// Función para iniciar sesión\nasync function login(email, password) {\n  console.log('Intentando iniciar sesión con:', email);\n  try {\n    // Intentar iniciar sesión con el backend\n    console.log('Enviando solicitud al backend:', `${API_URL}/auth/login`);\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      // No enviar cookies\n      withCredentials: false,\n      // Aumentar el timeout para evitar errores de conexión\n      timeout: 10000\n    });\n    console.log('Respuesta del backend:', response.status, response.data);\n    if (response.status === 200 && response.data.success) {\n      console.log('Login exitoso con el backend');\n      // Guardar token\n      const token = response.data.data.token;\n      saveToken(token);\n\n      // Actualizar el token en el servicio API\n      import('./apiService').then(apiService => {\n        console.log('Actualizando token en apiService');\n        apiService.default.setToken(token);\n      });\n\n      // Guardar información del usuario en localStorage (opcional)\n      localStorage.setItem('user', JSON.stringify(response.data.data.user));\n\n      // Establecer explícitamente el estado de autenticación\n      localStorage.setItem('isLoggedIn', 'true');\n      return {\n        success: true,\n        user: response.data.data.user\n      };\n    } else {\n      console.error('Respuesta inesperada del servidor:', response.data);\n      throw new Error('Respuesta inesperada del servidor');\n    }\n  } catch (error) {\n    // Verificar si el error es de red o del servidor\n    if (error.response) {\n      // El servidor respondió con un código de estado fuera del rango 2xx\n      console.error('Error de respuesta del servidor:', error.response.status, error.response.data);\n\n      // Verificar si es un error específico de usuario desactivado\n      if (error.response.data && error.response.data.message) {\n        // Si el mensaje contiene la palabra \"desactivado\", mostrar ese mensaje específico\n        if (error.response.data.message.includes('desactivado')) {\n          throw new Error(error.response.data.message);\n        }\n      }\n    } else if (error.request) {\n      // La solicitud se realizó pero no se recibió respuesta\n      console.error('No se recibió respuesta del servidor:', error.request);\n    } else {\n      // Algo sucedió al configurar la solicitud\n      console.error('Error al configurar la solicitud:', error.message);\n    }\n    console.log('Fallback a autenticación local...');\n\n    // Datos de usuarios locales para desarrollo/pruebas\n    const localUsers = [{\n      id: 1,\n      email: 'superadmin@example.com',\n      password: '123456',\n      nombre: 'Super Administrador',\n      roles: ['Superadministrador']\n    }, {\n      id: 2,\n      email: 'admin@example.com',\n      password: '123456',\n      nombre: 'Administrador',\n      roles: ['Administrador']\n    }, {\n      id: 3,\n      email: 'empleado@example.com',\n      password: '123456',\n      nombre: 'Empleado',\n      roles: ['Empleado']\n    },\n    // Añadir el usuario alex para pruebas locales\n    {\n      id: 5,\n      email: 'alex@gmail.com',\n      password: 'password',\n      nombre: 'alex',\n      roles: ['Empleado']\n    }];\n\n    // Buscar usuario local\n    const user = localUsers.find(u => u.email === email && u.password === password);\n    if (user) {\n      console.log('Login exitoso con usuario local:', user.email);\n      // Si el usuario local es válido, establecer el estado de autenticación\n      localStorage.setItem('isLoggedIn', 'true');\n\n      // Crear un token local\n      const localToken = `local_${btoa(JSON.stringify(user))}`;\n      saveToken(localToken);\n\n      // Actualizar el token en el servicio API\n      import('./apiService').then(apiService => {\n        console.log('Actualizando token en apiService (local)');\n        apiService.default.setToken(localToken);\n      });\n\n      // Guardar usuario en localStorage\n      localStorage.setItem('user', JSON.stringify({\n        id: user.id,\n        email: user.email,\n        nombre: user.nombre,\n        roles: user.roles\n      }));\n      return {\n        success: true,\n        user: {\n          id: user.id,\n          email: user.email,\n          nombre: user.nombre,\n          roles: user.roles\n        }\n      };\n    }\n\n    // Si no se encontró usuario local\n    throw new Error('Credenciales incorrectas');\n  }\n}\n;\n\n// Función para cerrar sesión\nconst logout = () => {\n  removeToken();\n  localStorage.removeItem('user');\n  localStorage.removeItem('isLoggedIn');\n};\n\n// Función para verificar si el usuario está autenticado\nconst isAuthenticated = () => {\n  const token = getToken();\n  const isLoggedInFlag = localStorage.getItem('isLoggedIn') === 'true';\n  return !!token && isLoggedInFlag;\n};\n\n// Función para obtener el usuario actual\nconst getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  return userStr ? JSON.parse(userStr) : null;\n};\n\n// Función para verificar si el usuario tiene un rol específico\nconst hasRole = role => {\n  const user = getCurrentUser();\n  return user && user.roles && user.roles.includes(role);\n};\n\n// Función para verificar si el usuario es administrador\nconst isAdmin = () => {\n  return hasRole('Administrador') || hasRole('Superadministrador');\n};\n\n// Función para verificar si el usuario es superadministrador\nconst isSuperAdmin = () => {\n  return hasRole('Superadministrador');\n};\nexport { login, logout, isAuthenticated, getCurrentUser, hasRole, isAdmin, isSuperAdmin, getToken };","map":{"version":3,"names":["axios","API_URL","saveToken","token","localStorage","setItem","getToken","getItem","removeToken","removeItem","setupAxiosInterceptors","interceptors","request","use","config","headers","Authorization","error","Promise","reject","response","status","window","location","pathname","href","login","email","password","console","log","post","withCredentials","timeout","data","success","then","apiService","default","setToken","JSON","stringify","user","Error","message","includes","localUsers","id","nombre","roles","find","u","localToken","btoa","logout","isAuthenticated","isLoggedInFlag","getCurrentUser","userStr","parse","hasRole","role","isAdmin","isSuperAdmin"],"sources":["F:/Driver google/VUE.JS-2/temp/websap/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:3000/api';\n\n// Función para guardar token en localStorage\nconst saveToken = (token) => {\n  localStorage.setItem('token', token);\n};\n\n// Función para obtener token de localStorage\nconst getToken = () => {\n  return localStorage.getItem('token');\n};\n\n// Función para eliminar token de localStorage\nconst removeToken = () => {\n  localStorage.removeItem('token');\n};\n\n// Configurar Axios\nconst setupAxiosInterceptors = () => {\n  // Interceptor de solicitudes\n  axios.interceptors.request.use(\n    (config) => {\n      const token = getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    },\n    (error) => {\n      return Promise.reject(error);\n    }\n  );\n  \n  // Interceptor de respuestas\n  axios.interceptors.response.use(\n    (response) => {\n      return response;\n    },\n    (error) => {\n      // Si el error es 401, puede ser que el token expiró\n      if (error.response && error.response.status === 401) {\n        removeToken();\n        // Redirigir a la página de login (esto debe ser manejado por el router)\n        if (window.location.pathname !== '/login') {\n          window.location.href = '/login';\n        }\n      }\n      return Promise.reject(error);\n    }\n  );\n};\n\n// Inicializar interceptores\nsetupAxiosInterceptors();\n\n// Función para iniciar sesión\nasync function login(email, password) {\n  console.log('Intentando iniciar sesión con:', email);\n  \n  try {\n    // Intentar iniciar sesión con el backend\n    console.log('Enviando solicitud al backend:', `${API_URL}/auth/login`);\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      // No enviar cookies\n      withCredentials: false,\n      // Aumentar el timeout para evitar errores de conexión\n      timeout: 10000\n    });\n    \n    console.log('Respuesta del backend:', response.status, response.data);\n    \n    if (response.status === 200 && response.data.success) {\n      console.log('Login exitoso con el backend');\n      // Guardar token\n      const token = response.data.data.token;\n      saveToken(token);\n      \n      // Actualizar el token en el servicio API\n      import('./apiService').then(apiService => {\n        console.log('Actualizando token en apiService');\n        apiService.default.setToken(token);\n      });\n      \n      // Guardar información del usuario en localStorage (opcional)\n      localStorage.setItem('user', JSON.stringify(response.data.data.user));\n      \n      // Establecer explícitamente el estado de autenticación\n      localStorage.setItem('isLoggedIn', 'true');\n      \n      return {\n        success: true,\n        user: response.data.data.user\n      };\n    } else {\n      console.error('Respuesta inesperada del servidor:', response.data);\n      throw new Error('Respuesta inesperada del servidor');\n    }\n  } catch (error) {\n    // Verificar si el error es de red o del servidor\n    if (error.response) {\n      // El servidor respondió con un código de estado fuera del rango 2xx\n      console.error('Error de respuesta del servidor:', error.response.status, error.response.data);\n      \n      // Verificar si es un error específico de usuario desactivado\n      if (error.response.data && error.response.data.message) {\n        // Si el mensaje contiene la palabra \"desactivado\", mostrar ese mensaje específico\n        if (error.response.data.message.includes('desactivado')) {\n          throw new Error(error.response.data.message);\n        }\n      }\n    } else if (error.request) {\n      // La solicitud se realizó pero no se recibió respuesta\n      console.error('No se recibió respuesta del servidor:', error.request);\n    } else {\n      // Algo sucedió al configurar la solicitud\n      console.error('Error al configurar la solicitud:', error.message);\n    }\n    \n    console.log('Fallback a autenticación local...');\n    \n    // Datos de usuarios locales para desarrollo/pruebas\n    const localUsers = [\n      {\n        id: 1,\n        email: 'superadmin@example.com',\n        password: '123456',\n        nombre: 'Super Administrador',\n        roles: ['Superadministrador']\n      },\n      {\n        id: 2,\n        email: 'admin@example.com',\n        password: '123456',\n        nombre: 'Administrador',\n        roles: ['Administrador']\n      },\n      {\n        id: 3,\n        email: 'empleado@example.com',\n        password: '123456',\n        nombre: 'Empleado',\n        roles: ['Empleado']\n      },\n      // Añadir el usuario alex para pruebas locales\n      {\n        id: 5,\n        email: 'alex@gmail.com',\n        password: 'password',\n        nombre: 'alex',\n        roles: ['Empleado']\n      }\n    ];\n    \n    // Buscar usuario local\n    const user = localUsers.find(u => u.email === email && u.password === password);\n    \n    if (user) {\n      console.log('Login exitoso con usuario local:', user.email);\n      // Si el usuario local es válido, establecer el estado de autenticación\n      localStorage.setItem('isLoggedIn', 'true');\n      \n      // Crear un token local\n      const localToken = `local_${btoa(JSON.stringify(user))}`;\n      saveToken(localToken);\n      \n      // Actualizar el token en el servicio API\n      import('./apiService').then(apiService => {\n        console.log('Actualizando token en apiService (local)');\n        apiService.default.setToken(localToken);\n      });\n      \n      // Guardar usuario en localStorage\n      localStorage.setItem('user', JSON.stringify({\n        id: user.id,\n        email: user.email,\n        nombre: user.nombre,\n        roles: user.roles\n      }));\n      \n      return {\n        success: true,\n        user: {\n          id: user.id,\n          email: user.email,\n          nombre: user.nombre,\n          roles: user.roles\n        }\n      };\n    }\n    \n    // Si no se encontró usuario local\n    throw new Error('Credenciales incorrectas');\n  }\n};\n\n// Función para cerrar sesión\nconst logout = () => {\n  removeToken();\n  localStorage.removeItem('user');\n  localStorage.removeItem('isLoggedIn');\n};\n\n// Función para verificar si el usuario está autenticado\nconst isAuthenticated = () => {\n  const token = getToken();\n  const isLoggedInFlag = localStorage.getItem('isLoggedIn') === 'true';\n  return !!token && isLoggedInFlag;\n};\n\n// Función para obtener el usuario actual\nconst getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  return userStr ? JSON.parse(userStr) : null;\n};\n\n// Función para verificar si el usuario tiene un rol específico\nconst hasRole = (role) => {\n  const user = getCurrentUser();\n  return user && user.roles && user.roles.includes(role);\n};\n\n// Función para verificar si el usuario es administrador\nconst isAdmin = () => {\n  return hasRole('Administrador') || hasRole('Superadministrador');\n};\n\n// Función para verificar si el usuario es superadministrador\nconst isSuperAdmin = () => {\n  return hasRole('Superadministrador');\n};\n\nexport {\n  login,\n  logout,\n  isAuthenticated,\n  getCurrentUser,\n  hasRole,\n  isAdmin,\n  isSuperAdmin,\n  getToken\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}