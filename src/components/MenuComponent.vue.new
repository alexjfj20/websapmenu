<template>
  <div class="menu-component">
    <!-- Sección de información del negocio -->
    <div class="business-info-section">
      <h3>Información del Negocio</h3>
      <button @click="toggleBusinessForm" class="btn btn-primary">
        {{ showBusinessForm ? 'Cancelar' : 'Editar información' }}
      </button>
      
      <div v-if="showBusinessForm" class="business-form">
        <div class="form-group">
          <label>Nombre del negocio</label>
          <input v-model="businessInfo.name" type="text" class="form-control" />
        </div>
        <div class="form-group">
          <label>Descripción</label>
          <textarea v-model="businessInfo.description" class="form-control"></textarea>
        </div>
        <div class="form-group">
          <label>Logo</label>
          <input type="file" @change="onLogoChange" accept="image/*" />
        </div>
        <div class="form-actions">
          <button @click="saveBusinessInfo" class="btn btn-success">Guardar</button>
          <button @click="clearBusinessForm" class="btn btn-secondary">Limpiar</button>
        </div>
      </div>
    </div>
    
    <!-- Sección de información de pago -->
    <div class="payment-info-section">
      <h3>Forma de Pago</h3>
      <button @click="togglePaymentForm" class="btn btn-primary">
        {{ showPaymentForm ? 'Cancelar' : 'Editar información de pago' }}
      </button>
      
      <div v-if="showPaymentForm" class="payment-form">
        <div class="form-group">
          <label>Título QR</label>
          <input v-model="paymentInfo.qrTitle" type="text" class="form-control" />
        </div>
        <div class="form-group">
          <label>Imagen QR</label>
          <input type="file" @change="onQRImageChange" accept="image/*" />
        </div>
        <div class="form-group">
          <label>Número Nequi</label>
          <input v-model="paymentInfo.nequiNumber" type="text" class="form-control" />
        </div>
        <div class="form-group">
          <label>Imagen Nequi</label>
          <input type="file" @change="onNequiImageChange" accept="image/*" />
        </div>
        <div class="form-actions">
          <button @click="savePaymentInfo" class="btn btn-success">Guardar</button>
          <button @click="clearPaymentForm" class="btn btn-secondary">Limpiar</button>
        </div>
      </div>
    </div>
    
    <!-- Notificación -->
    <div v-if="notification.show" :class="['notification', notification.type]">
      {{ notification.message }}
    </div>
  </div>
</template>

<script>
import { ref, onMounted } from 'vue';
import { saveBusinessInfoToDB } from '../services/storageService';

export default {
  name: 'MenuComponent',
  
  setup() {
    // Estado para información del negocio
    const businessInfo = ref({
      id: 'business_info_1',
      name: '',
      description: '',
      logo: '',
      paymentInfo: {
        qrTitle: '',
        qrImage: '',
        nequiNumber: '',
        nequiImage: ''
      }
    });
    
    const showBusinessForm = ref(false);
    
    // Estado para información de pago
    const paymentInfo = ref({
      qrTitle: '',
      qrImage: '',
      nequiNumber: '',
      nequiImage: ''
    });
    
    const showPaymentForm = ref(false);
    
    // Estado para notificaciones
    const notification = ref({
      show: false,
      message: '',
      type: 'success',
      timeout: null
    });
    
    // Cargar datos al montar el componente
    onMounted(async () => {
      try {
        // Aquí iría la lógica para cargar datos existentes
        console.log('Componente montado');
      } catch (error) {
        console.error('Error al cargar datos:', error);
      }
    });
    
    // Métodos para información del negocio
    const toggleBusinessForm = () => {
      showBusinessForm.value = !showBusinessForm.value;
    };
    
    const onLogoChange = (event) => {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          businessInfo.value.logo = e.target.result;
        };
        reader.readAsDataURL(file);
      }
    };
    
    const saveBusinessInfo = async () => {
      try {
        if (notification.value.timeout) {
          clearTimeout(notification.value.timeout);
        }
        
        await saveBusinessInfoToDB(businessInfo.value);
        
        notification.value = {
          show: true,
          message: 'Información del negocio guardada con éxito!',
          type: 'success',
          timeout: setTimeout(() => {
            notification.value.show = false;
          }, 3000)
        };
      } catch (error) {
        console.error('Error al guardar información del negocio:', error);
        
        notification.value = {
          show: true,
          message: 'Error al guardar información del negocio',
          type: 'error',
          timeout: setTimeout(() => {
            notification.value.show = false;
          }, 3000)
        };
      }
    };
    
    const clearBusinessForm = () => {
      businessInfo.value = {
        id: 'business_info_1',
        name: '',
        description: '',
        logo: '',
        paymentInfo: {
          qrTitle: '',
          qrImage: '',
          nequiNumber: '',
          nequiImage: ''
        }
      };
    };
    
    // Métodos para información de pago
    const togglePaymentForm = () => {
      showPaymentForm.value = !showPaymentForm.value;
    };
    
    const onQRImageChange = (event) => {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          paymentInfo.value.qrImage = e.target.result;
        };
        reader.readAsDataURL(file);
      }
    };
    
    const onNequiImageChange = (event) => {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          paymentInfo.value.nequiImage = e.target.result;
        };
        reader.readAsDataURL(file);
      }
    };
    
    const savePaymentInfo = async () => {
      try {
        if (notification.value.timeout) {
          clearTimeout(notification.value.timeout);
        }
        
        if (!businessInfo.value.paymentInfo) {
          businessInfo.value.paymentInfo = {};
        }
        
        businessInfo.value.paymentInfo.qrTitle = paymentInfo.value.qrTitle;
        businessInfo.value.paymentInfo.qrImage = paymentInfo.value.qrImage;
        businessInfo.value.paymentInfo.nequiNumber = paymentInfo.value.nequiNumber;
        businessInfo.value.paymentInfo.nequiImage = paymentInfo.value.nequiImage;
        
        await saveBusinessInfoToDB(businessInfo.value);
        
        // Sincronizar con el backend
        try {
          // Importar dinámicamente para evitar dependencias circulares
          const { syncBusinessInfoWithBackend } = await import('../services/menuService');
          await syncBusinessInfoWithBackend(businessInfo.value);
          console.log('Información de pago sincronizada con el backend');
        } catch (syncError) {
          console.error('Error al sincronizar con el backend:', syncError);
          // No mostrar error al usuario, solo registrar en consola
        }
        
        notification.value = {
          show: true,
          message: 'Información de pago guardada con éxito!',
          type: 'success',
          timeout: setTimeout(() => {
            notification.value.show = false;
          }, 3000)
        };
      } catch (error) {
        console.error('Error al guardar información de pago:', error);
        
        notification.value = {
          show: true,
          message: 'Error al guardar información de pago',
          type: 'error',
          timeout: setTimeout(() => {
            notification.value.show = false;
          }, 3000)
        };
      }
    };
    
    const clearPaymentForm = () => {
      paymentInfo.value = {
        qrTitle: '',
        qrImage: '',
        nequiNumber: '',
        nequiImage: ''
      };
    };
    
    return {
      businessInfo,
      showBusinessForm,
      toggleBusinessForm,
      onLogoChange,
      saveBusinessInfo,
      clearBusinessForm,
      paymentInfo,
      showPaymentForm,
      togglePaymentForm,
      onQRImageChange,
      onNequiImageChange,
      savePaymentInfo,
      clearPaymentForm,
      notification
    };
  }
};
</script>

<style scoped>
.menu-component {
  padding: 20px;
}

.business-info-section,
.payment-info-section {
  margin-bottom: 30px;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 5px;
}

.form-group {
  margin-bottom: 15px;
}

.form-control {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.form-actions {
  margin-top: 20px;
}

.btn {
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 10px;
}

.btn-primary {
  background-color: #007bff;
  color: white;
}

.btn-success {
  background-color: #28a745;
  color: white;
}

.btn-secondary {
  background-color: #6c757d;
  color: white;
}

.notification {
  position: fixed;
  bottom: 20px;
  right: 20px;
  padding: 15px;
  border-radius: 4px;
  color: white;
  z-index: 1000;
}

.success {
  background-color: #28a745;
}

.error {
  background-color: #dc3545;
}
</style>
