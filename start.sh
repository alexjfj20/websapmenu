#!/bin/bash
# Script para instalar dependencias y luego iniciar el servidor

echo "===== Preparando entorno ====="

# Verificar si estamos en Render
if [ "$RENDER" = "true" ]; then
  echo "Ejecutando en entorno Render"
else
  echo "Ejecutando en entorno local"
fi

# Verificar si existe la carpeta dist
if [ ! -d "dist" ]; then
  echo "La carpeta dist no existe. Creando una p√°gina de mantenimiento..."
  mkdir -p dist
  echo "<html><body><h1>WebSAP</h1><p>En mantenimiento</p></body></html>" > dist/index.html
fi

echo "===== Instalando dependencias necesarias ====="
npm install express dotenv cors

echo "===== Corrigiendo problemas cr√≠ticos de importaci√≥n ====="
# Ejecutar primero esta correcci√≥n para evitar errores en el servidor
node fix-server-imports.js || echo "‚ö†Ô∏è Error al corregir importaciones, continuando..."

echo "===== Iniciando servidor ====="

# Forzar una reconstrucci√≥n completa del men√∫ desde cero
echo "===== FORZANDO RECONSTRUCCI√ìN COMPLETA DEL MEN√ö ====="
node force-menu-rebuild.js || echo "‚ö†Ô∏è Error durante la reconstrucci√≥n forzada, intentando m√©todo alternativo..."

# Si fall√≥ la reconstrucci√≥n forzada, intentar con el m√©todo de limpieza est√°ndar
if [ $? -ne 0 ]; then
  echo "===== Limpiando platos eliminados del men√∫ (m√©todo alternativo) ====="
  node clean-deleted-menu-items.js || echo "‚ö†Ô∏è Error al limpiar platos eliminados, continuando..."
fi

# Asegurarse de que se crean las p√°ginas espec√≠ficas de men√∫
echo "Verificando p√°ginas de men√∫ compartido..."
if [ ! -d "dist/menu" ] || [ ! -d "dist/menu/8idq9bgbdwr7srcw" ]; then
  echo "Creando p√°gina est√°tica para men√∫ principal..."
  node static-menu-page.js || echo "‚ö†Ô∏è Error al crear p√°gina de men√∫ est√°tica, continuando..."
  
  echo "Creando p√°ginas adicionales para men√∫s compartidos..."
  node generate-menu-pages.js || echo "‚ö†Ô∏è Error al crear p√°ginas de men√∫, continuando..."
elif [ ! -f "dist/menu/8idq9bgbdwr7srcw/index.html" ]; then
  echo "Archivo index.html no encontrado para el men√∫ principal, regenerando..."
  node static-menu-page.js || echo "‚ö†Ô∏è Error al crear p√°gina de men√∫ est√°tica, continuando..."
else
  echo "‚úÖ Las p√°ginas de men√∫ existen"
fi

# Aplicar parche cr√≠tico para el error de businessInfo
echo "===== Aplicando parche para error cr√≠tico de businessInfo ====="
node fix-business-info-error.js || echo "‚ö†Ô∏è Error al aplicar parche de businessInfo, continuando..."

# Aplicar parche para problemas de cach√©
echo "===== Aplicando parche para problemas de cach√© ====="
node fix-menu-cache.js || echo "‚ö†Ô∏è Error al aplicar parche de cach√©, continuando..."

# Eliminar definiciones duplicadas en el c√≥digo JS
echo "===== Eliminando definiciones duplicadas ====="
node fix-duplicate-definitions.js || echo "‚ö†Ô∏è Error al eliminar definiciones duplicadas, continuando..."

# Inicializar IndexedDB para cach√©
echo "===== Inicializando IndexedDB para cach√© ====="
node initialize-indexeddb.js || echo "‚ö†Ô∏è Error al inicializar IndexedDB, continuando..."

# Corregir errores espec√≠ficos del dashboard
echo "===== Corrigiendo errores del dashboard ====="
node fix-dashboard-errors.js || echo "‚ö†Ô∏è Error al corregir errores del dashboard, continuando..."

# Asegurarse de que el directorio para el archivo de activaci√≥n de regeneraci√≥n existe
mkdir -p dist

# Verificar si estamos en Render, y usar el enfoque adecuado
if [ "$RENDER" = "true" ]; then
  echo "===== EJECUTANDO SERVIDOR PARA RENDER ====="
  
  # Enfoque prioritario: server-worker.js (m√°s simple y r√°pido)
  if [ -f "server-worker.js" ]; then
    echo "‚úÖ Iniciando servidor worker (m√°xima prioridad)"
    exec node server-worker.js
  
  # Segundo enfoque: port-binder.js
  elif [ -f "port-binder.js" ]; then
    echo "‚úÖ Iniciando vinculador de puerto expl√≠cito"
    exec node port-binder.js
  
  # Tercer enfoque: servidor optimizado para Render
  elif [ -f "server-render.js" ]; then
    echo "‚úÖ Usando versi√≥n especial para Render"
    exec node server-render.js
  
  # Cuarto enfoque: servidor minimalista
  elif [ -f "server-minimal.js" ]; then
    echo "‚úÖ Usando servidor minimalista"
    exec node server-minimal.js
  
  # √öltimo recurso: servidor est√°ndar
  else
    echo "‚ö†Ô∏è No se encontraron servidores especiales, usando server.js normal"
    exec node server.js
  fi
else
  # Iniciar el servidor con reinicio autom√°tico en caso de error (entorno no-Render)
  node server.js || {
    echo "‚ùå Error en el servidor. Intentando soluci√≥n de emergencia..."
    
    # Si existe el script de cambio a servidor minimal, ejecutarlo
    if [ -f "switch-to-minimal-server.js" ]; then
      echo "üö® ACTIVANDO SERVIDOR DE EMERGENCIA üö®"
      node switch-to-minimal-server.js
      
      echo "‚è≥ Iniciando servidor minimal en 3 segundos..."
      sleep 3
      node server.js
    else
      echo "‚è≥ Reiniciando servidor original en 5 segundos..."
      sleep 5
      node server.js
    fi
  }
fi